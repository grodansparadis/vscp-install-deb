Description: CVE-2017-2619 regression with non-wide symlinks to directories
 The errno returned by open() is ambiguous when called with flags O_NOFOLLOW and
 O_DIRECTORY on a symlink. With ELOOP, we know for certain that we've tried to
 open a symlink. With ENOTDIR, we might have hit a symlink, and need to perform
 further checks to be sure. Adjust non_widelink_open() accordingly. This fixes
 a regression where symlinks to directories within the same share were no
 longer followed for some call paths on systems returning ENOTDIR in the above
 case.

Author: Daniel Kobras <d.kobras@science-computing.de>
Origin: upstream
Bug: https://bugzilla.samba.org/show_bug.cgi?id=12860
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/samba/+bug/1701073
Applied-Upstream: https://github.com/samba-team/samba/commit/f1f388ef80a6516c2f44b7778420f8ffe28c6471,
 https://github.com/samba-team/samba/commit/acc16592b451905dabc093f1d261e93cd3b59520
Last-Update: 2017-06-30
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
Index: samba-4.3.11+dfsg/selftest/target/Samba3.pm
===================================================================
--- samba-4.3.11+dfsg.orig/selftest/target/Samba3.pm	2017-07-04 07:55:49.097416602 -0400
+++ samba-4.3.11+dfsg/selftest/target/Samba3.pm	2017-07-04 07:55:49.005415520 -0400
@@ -1107,6 +1107,9 @@ sub provision($$$$$$$$)
 	my $nosymlinks_shrdir="$shrdir/nosymlinks";
 	push(@dirs,$nosymlinks_shrdir);
 
+	my $local_symlinks_shrdir="$shrdir/local_symlinks";
+	push(@dirs,$local_symlinks_shrdir);
+
 	# this gets autocreated by winbindd
 	my $wbsockdir="$prefix_abs/winbindd";
 	my $wbsockprivdir="$lockdir/winbindd_privileged";
@@ -1507,6 +1510,11 @@ sub provision($$$$$$$$)
 	path = $nosymlinks_shrdir
 	follow symlinks = no
 
+[local_symlinks]
+	copy = tmp
+	path = $local_symlinks_shrdir
+	follow symlinks = yes
+
 [fsrvp_share]
 	path = $shrdir
 	comment = fake shapshots using rsync
Index: samba-4.3.11+dfsg/source3/script/tests/test_smbclient_s3.sh
===================================================================
--- samba-4.3.11+dfsg.orig/source3/script/tests/test_smbclient_s3.sh	2017-07-04 07:55:49.097416602 -0400
+++ samba-4.3.11+dfsg/source3/script/tests/test_smbclient_s3.sh	2017-07-04 07:55:49.037415896 -0400
@@ -1004,6 +1004,57 @@ EOF
 }
 
 
+# Test we can follow normal symlinks.
+# Bug: https://bugzilla.samba.org/show_bug.cgi?id=12860
+# Note - this needs to be tested over SMB3, not SMB1.
+
+test_local_symlinks()
+{
+# Setup test dirs.
+    LOCAL_RAWARGS="${CONFIGURATION} -mSMB3"
+    LOCAL_ADDARGS="${LOCAL_RAWARGS} $*"
+
+    test_dir="$LOCAL_PATH/local_symlinks/test"
+
+    slink_name="$test_dir/sym_name"
+    slink_target_dir="$test_dir/dir1"
+
+    rm -rf $test_dir
+
+    mkdir -p $test_dir
+    mkdir $slink_target_dir
+    ln -s $slink_target_dir $slink_name
+
+# Can we cd into the symlink name and ls ?
+    tmpfile=$PREFIX/smbclient_interactive_prompt_commands
+    cat > $tmpfile <<EOF
+cd test\\sym_name
+ls
+quit
+EOF
+    cmd='CLI_FORCE_INTERACTIVE=yes $SMBCLIENT "$@" -U$USERNAME%$PASSWORD //$SERVER/local_symlinks -I $SERVER_IP $LOCAL_ADDARGS < $tmpfile 2>&1'
+    eval echo "$cmd"
+    out=`eval $cmd`
+    ret=$?
+    rm -f $tmpfile
+
+    if [ $ret -ne 0 ] ; then
+       echo "$out"
+       echo "failed accessing local_symlinks with error $ret"
+       false
+       return
+    fi
+
+    echo "$out" | grep 'NT_STATUS_'
+    ret=$?
+    if [ $ret -eq 0 ] ; then
+       echo "$out"
+       echo "failed - got an NT_STATUS error"
+       false
+       return
+    fi
+}
+
 LOGDIR_PREFIX=test_smbclient_s3
 
 # possibly remove old logdirs:
@@ -1206,6 +1257,10 @@ testit "follow symlinks = no" \
     test_nosymlinks || \
     failed=`expr $failed + 1`
 
+testit "follow local symlinks" \
+    test_local_symlinks || \
+    failed=`expr $failed + 1`
+
 testit "rm -rf $LOGDIR" \
     rm -rf $LOGDIR || \
     failed=`expr $failed + 1`
Index: samba-4.3.11+dfsg/source3/smbd/open.c
===================================================================
--- samba-4.3.11+dfsg.orig/source3/smbd/open.c	2017-07-04 07:55:49.097416602 -0400
+++ samba-4.3.11+dfsg/source3/smbd/open.c	2017-07-04 07:55:49.065416225 -0400
@@ -561,7 +561,18 @@ static int non_widelink_open(struct conn
 
 	if (fd == -1) {
 		saved_errno = link_errno_convert(errno);
-		if (saved_errno == ELOOP) {
+		/*
+		 * Trying to open a symlink to a directory with O_NOFOLLOW and
+		 * O_DIRECTORY can return either of ELOOP and ENOTDIR. So
+		 * ENOTDIR really means: might be a symlink, but we're not sure.
+		 * In this case, we just assume there's a symlink. If we were
+		 * wrong, process_symlink_open() will return EINVAL. We check
+		 * this below, and fall back to returning the initial
+		 * saved_errno.
+		 *
+		 * BUG: https://bugzilla.samba.org/show_bug.cgi?id=12860
+		 */
+		if (saved_errno == ELOOP || saved_errno == ENOTDIR) {
 			if (fsp->posix_flags & FSP_POSIX_FLAGS_OPEN) {
 				/* Never follow symlinks on posix open. */
 				goto out;
@@ -571,7 +582,7 @@ static int non_widelink_open(struct conn
 				goto out;
 			}
 			/*
-			 * We have a symlink. Follow in userspace
+			 * We may have a symlink. Follow in userspace
 			 * to ensure it's under the share definition.
 			 */
 			fd = process_symlink_open(conn,
@@ -582,6 +593,15 @@ static int non_widelink_open(struct conn
 					mode,
 					link_depth);
 			if (fd == -1) {
+				if (saved_errno == ENOTDIR &&
+						errno == EINVAL) {
+					/*
+					 * O_DIRECTORY on neither a directory,
+					 * nor a symlink. Just return
+					 * saved_errno from initial open()
+					 */
+					goto out;
+				}
 				saved_errno =
 					link_errno_convert(errno);
 			}
