head	1.127;
access;
symbols
	Release-7-1-1:1.127.0.2
	Root_Release-7-1-1:1.127
	Root_Release_7-0-1:1.125
	Release_7-0-1:1.125.0.16
	Release_7-0-0:1.125.0.14
	Root_Release_7-0-0:1.125
	Release-6-2-2:1.125.0.12
	Release-6-1-2-3:1.125
	Root_Release-6-1-2-3:1.125
	Release-6-1-2-2:1.125.0.10
	Root_Release-6-1-2-2:1.125
	debian_version_6_1_2_1-1:1.125
	upstream_version_6_1_2_1:1.125
	Release-6-1-2-1_new:1.125.0.8
	Root_Release-6-1-2-1_new:1.125
	Release-6-1-2-1:1.125.0.6
	Root_Release-6-1-2-1:1.125
	upstream_version_6_1_2:1.125
	debian_version_6_1_2-1:1.125
	Release-6-1-2:1.125.0.4
	Root_Release-6-1-2:1.125
	debian_version_6_1_1-2:1.125
	debian_version_6_1_1-1:1.125
	upstream_version_6_1_1:1.125
	Release-6-1-1:1.125.0.2
	Root_Release-6-1-1:1.125
	Release-6-0-4:1.124.0.6
	Root_Release-6-0-4:1.124
	Release-6-0-3_NEW:1.124.0.2
	Root_Release-6-0-3_NEW:1.124
	Release-6-0-3:1.124.0.4
	Root_Release-6-0-3:1.124
	Release-6-0-0:1.123.0.6
	Root_Release-6-0-0:1.124
	Release-5-5-4-1:1.123.0.4
	Root_Release-5-5-4-1:1.123
	Release-5-5-4:1.123.0.2
	Root_Release-5-5-4:1.123
	Release-5-5-3:1.122.0.2
	ROOT_Release-5-5-3:1.122
	Release-5-5-2:1.121.0.8
	Root_Release-5-5-2:1.121
	debian_version_5_5_1-1:1.121
	Release-5-5-1:1.121.0.4
	upstream_version_5_5_1:1.121
	ROOT_Release-5-5-1:1.121
	debian_version_5_5-1:1.121
	upstream_version_5_5:1.121
	ROOT_Release-5-5:1.121
	Release-5-5:1.121.0.6
	debian_version_5_4_4_2-3:1.121
	Release-5-4-4-2-1:1.121.0.2
	debian_version_5_4_4_2-2:1.121
	debian_version_5_4_4_2-1:1.120
	upstream_version_5_4_4_2:1.121
	debian_version_5_4_4_1-1:1.120
	upstream_version_5_4_4_1:1.120
	debian_version_5_4_4-1:1.120
	upstream_version_5_4_4:1.120
	Release-5-4-4:1.120.0.6
	Root_Release-5-4-4:1.120
	debian_version_5_4_3_2-1:1.120
	upstream_version_5_4_3_2:1.120
	Release_5-4-3-2:1.120.0.2
	Root_Release_5-4-3-2:1.120
	upstream_version_5_4_3_1:1.119
	debian_version_5_4_3_1-1:1.119
	Release-5-4-3:1.119.0.4
	Root_Release-5-4-3:1.119
	Root_Release-5-4-1:1.119
	Release-5-4-1:1.119.0.2
	Root_Release-5-4:1.118
	Release-5-4:1.118.0.2
	upstream_version_5_3_4:1.116
	debian_version_5_3_4-1:1.116
	ROOT_Release-5-3-4:1.116
	Release-5-3-4:1.116.0.2
	ROOT_Release-5-3-3:1.114
	Release-5-3-3:1.114.0.2
	debian_version_5_3_2_1_2-1:1.112
	upstream_version_5_3_2_1_2:1.112
	debian_version_5_3_2_1_1-1:1.112
	debian_version_5_3_2_1_1:1.112
	upstream_version_5_3_2_1_1:1.112
	Root_Release-5-3-2-1:1.112
	Release-5-3-2-1:1.112
	ROOT_RELEASE-5-3-2-1:1.112
	RELEASE-5-3-2-1:1.112.0.20
	Release-5-3-2:1.112.0.16
	Root_Release-5-3-2:1.112
	Root_Release-5-3-1:1.112
	Release-5-3-1:1.112.0.14
	Release-5-2-3-1:1.112.0.12
	Root_Release-5-2-3-1:1.112
	Release-5-2-2-4:1.112.0.10
	Root_Release-5-2-2-4:1.112
	Release-5-2-2-1:1.112.0.8
	Root_Release-5-2-2-1:1.112
	upstream_version_5_2_2:1.112
	debian_version_5_2_2-1:1.112
	Release-5-2-2:1.112.0.6
	ROOT_Release-5-2-2:1.112
	ROOT_Release-5-2-1:1.112
	Release-5-2-1:1.112.0.4
	Release-5-2-0:1.112.0.2
	ROOT_Release-5-2-0:1.112
	ROOT_Release-5-1-2:1.111
	Release-5-1-2:1.111.0.6
	Version-5-1-1:1.111.0.4
	ROOT_Version-5-1-1:1.111
	debian_version_5_1_0-1:1.111
	upstream_version_5_1_0:1.111
	ROOT_Release-5-1-0:1.111
	Release-5-1-0:1.111.0.2
	ROOT_Release-5-0-0:1.110
	Release-5-0-0:1.110.0.4
	Release-4-3-3:1.110.0.2
	ROOT_Release-4-3-3:1.110
	upstream_version_4_3_2:1.109
	debian_version_4_3_2-1:1.109
	ROOT_Release-4-3-2:1.109
	Release-4-3-2:1.109.0.4
	Release-4-3-1:1.109.0.2
	ROOT_Release-4-3-1:1.109
	debian_version_4_3_0-1:1.108
	upstream_version_4_3_0:1.108
	ROOT_Release-4-3-0:1.108
	Release-4-3-0:1.108.0.2
	debian_version_3_2_1b-2:1.103
	debian_version_4_2_2-1:1.107
	upstream_version_4_2_2:1.107
	debian_version_3_2_1b-1:1.103
	upstream_version_3_2_1b:1.103
	Release-4-1-2:1.106.0.6
	Release-4-0-8:1.106.0.4
	debian_version_4_0_8a-1:1.106
	upstream_version_4_0_8a:1.106
	jostb-debian-ubuntu-patch:1.106.0.2
	debian_version_4_0_8-1:1.106
	upstream_version_4_0_8:1.106
	debian_version_4_0_7-1:1.106
	upstream_version_4_0_7:1.106
	debian_version_4_0_6-1:1.106
	upstream_version_4_0_6:1.106
	debian_version_4_0_2-1:1.105
	upstream_version_4_0_2:1.105
	Release-4-0-2_Root:1.105
	Release-4-0-2:1.105.0.2
	upstream_version_4_0_1:1.104
	debian_version_4_0_1-2:1.104
	Release-3-2-1:1.103.0.2
	Release-3-1-8:1.100.0.2
	Release-3-0-8_root:1.86.2.1
	Release-3-0-8_Root:1.88
	Release-3-0-8:1.86.0.2
	Release-2-0-8:1.72.0.2
	Release-2-0-7_Root:1.60
	Release-2-0-7:1.60.0.2
	Release-2-0-6-branch:1.56.0.2
	Version-1:1.41.0.6
	Version-2:1.41.0.4
	Release-2:1.41.0.2
	PHP-5:1.23.0.4
	Release-1-0-6:1.26.0.2
	sparc-64-test:1.18.0.2
	V-2004-08-28:1.1.1.1
	PHP-JAVA-BRIDGE:1.1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.127
date	2017.03.26.21.30.45;	author jost_boekemeier;	state Exp;
branches;
next	1.126;

1.126
date	2017.03.11.13.37.50;	author jost_boekemeier;	state Exp;
branches;
next	1.125;

1.125
date	2010.03.24.18.03.15;	author jost_boekemeier;	state Exp;
branches;
next	1.124;

1.124
date	2010.02.28.15.23.49;	author jost_boekemeier;	state Exp;
branches;
next	1.123;

1.123
date	2009.10.17.17.40.22;	author jost_boekemeier;	state Exp;
branches;
next	1.122;

1.122
date	2009.09.27.17.39.22;	author jost_boekemeier;	state Exp;
branches;
next	1.121;

1.121
date	2009.05.21.06.56.50;	author jost_boekemeier;	state Exp;
branches;
next	1.120;

1.120
date	2009.02.15.22.15.46;	author jost_boekemeier;	state Exp;
branches;
next	1.119;

1.119
date	2008.12.21.16.24.34;	author jost_boekemeier;	state Exp;
branches;
next	1.118;

1.118
date	2008.12.12.17.39.27;	author jost_boekemeier;	state Exp;
branches;
next	1.117;

1.117
date	2008.12.11.21.05.45;	author jost_boekemeier;	state Exp;
branches;
next	1.116;

1.116
date	2008.11.27.21.00.26;	author jost_boekemeier;	state Exp;
branches;
next	1.115;

1.115
date	2008.11.15.14.27.50;	author jost_boekemeier;	state Exp;
branches;
next	1.114;

1.114
date	2008.11.08.13.08.40;	author jost_boekemeier;	state Exp;
branches
	1.114.2.1;
next	1.113;

1.113
date	2008.11.01.12.41.04;	author jost_boekemeier;	state Exp;
branches;
next	1.112;

1.112
date	2008.03.02.21.36.49;	author jost_boekemeier;	state Exp;
branches;
next	1.111;

1.111
date	2008.01.21.19.23.28;	author jost_boekemeier;	state Exp;
branches;
next	1.110;

1.110
date	2007.12.28.13.56.41;	author jost_boekemeier;	state Exp;
branches;
next	1.109;

1.109
date	2007.12.02.18.05.07;	author jost_boekemeier;	state Exp;
branches;
next	1.108;

1.108
date	2007.09.19.10.12.27;	author jost_boekemeier;	state Exp;
branches;
next	1.107;

1.107
date	2007.07.19.16.19.15;	author jost_boekemeier;	state Exp;
branches;
next	1.106;

1.106
date	2007.03.25.16.28.20;	author jost_boekemeier;	state Exp;
branches;
next	1.105;

1.105
date	2007.03.19.13.03.16;	author jost_boekemeier;	state Exp;
branches;
next	1.104;

1.104
date	2007.03.09.20.28.06;	author andremachado;	state Exp;
branches;
next	1.103;

1.103
date	2006.12.09.09.35.01;	author jost2345;	state Exp;
branches;
next	1.102;

1.102
date	2006.12.02.16.26.45;	author jost2345;	state Exp;
branches;
next	1.101;

1.101
date	2006.11.25.17.00.31;	author jost2345;	state Exp;
branches;
next	1.100;

1.100
date	2006.09.10.17.31.11;	author jost2345;	state Exp;
branches;
next	1.99;

1.99
date	2006.09.05.20.40.32;	author jost2345;	state Exp;
branches;
next	1.98;

1.98
date	2006.08.28.18.05.11;	author jost2345;	state Exp;
branches;
next	1.97;

1.97
date	2006.08.27.14.40.11;	author jost2345;	state Exp;
branches;
next	1.96;

1.96
date	2006.08.21.17.41.51;	author jost2345;	state Exp;
branches;
next	1.95;

1.95
date	2006.08.08.17.20.45;	author jost2345;	state Exp;
branches;
next	1.94;

1.94
date	2006.07.27.16.16.29;	author jost2345;	state Exp;
branches;
next	1.93;

1.93
date	2006.07.23.20.32.47;	author jost2345;	state Exp;
branches;
next	1.92;

1.92
date	2006.07.02.20.28.42;	author jost2345;	state Exp;
branches;
next	1.91;

1.91
date	2006.06.19.20.37.14;	author jost2345;	state Exp;
branches;
next	1.90;

1.90
date	2006.05.15.19.03.29;	author jost2345;	state Exp;
branches;
next	1.89;

1.89
date	2006.05.13.16.13.40;	author jost2345;	state Exp;
branches;
next	1.88;

1.88
date	2006.04.30.17.01.55;	author jost2345;	state Exp;
branches;
next	1.87;

1.87
date	2006.04.12.17.46.45;	author jost2345;	state Exp;
branches;
next	1.86;

1.86
date	2006.03.16.20.27.00;	author jost2345;	state Exp;
branches
	1.86.2.1;
next	1.85;

1.85
date	2006.03.10.18.41.37;	author jost2345;	state Exp;
branches;
next	1.84;

1.84
date	2006.02.18.15.42.48;	author jost2345;	state Exp;
branches;
next	1.83;

1.83
date	2006.02.13.18.34.16;	author jost2345;	state Exp;
branches;
next	1.82;

1.82
date	2006.02.03.17.41.36;	author jost2345;	state Exp;
branches;
next	1.81;

1.81
date	2006.01.30.19.39.53;	author jost2345;	state Exp;
branches;
next	1.80;

1.80
date	2006.01.04.19.35.07;	author jost2345;	state Exp;
branches;
next	1.79;

1.79
date	2005.12.28.22.44.32;	author jost2345;	state Exp;
branches;
next	1.78;

1.78
date	2005.12.18.18.17.47;	author jost2345;	state Exp;
branches;
next	1.77;

1.77
date	2005.12.11.22.24.40;	author jost2345;	state Exp;
branches;
next	1.76;

1.76
date	2005.12.08.18.41.56;	author jost2345;	state Exp;
branches;
next	1.75;

1.75
date	2005.11.24.19.14.25;	author jost2345;	state Exp;
branches;
next	1.74;

1.74
date	2005.11.23.19.09.42;	author jost2345;	state Exp;
branches;
next	1.73;

1.73
date	2005.11.17.17.24.19;	author jost2345;	state Exp;
branches;
next	1.72;

1.72
date	2005.09.19.19.34.53;	author jost2345;	state Exp;
branches;
next	1.71;

1.71
date	2005.09.13.16.46.47;	author jost2345;	state Exp;
branches;
next	1.70;

1.70
date	2005.09.07.21.13.45;	author jost2345;	state Exp;
branches;
next	1.69;

1.69
date	2005.08.29.16.10.10;	author jost2345;	state Exp;
branches;
next	1.68;

1.68
date	2005.08.27.10.50.46;	author jost2345;	state Exp;
branches;
next	1.67;

1.67
date	2005.08.26.17.44.33;	author jost2345;	state Exp;
branches;
next	1.66;

1.66
date	2005.08.25.19.29.06;	author jost2345;	state Exp;
branches;
next	1.65;

1.65
date	2005.08.21.11.39.39;	author jost2345;	state Exp;
branches;
next	1.64;

1.64
date	2005.08.18.18.47.43;	author jost2345;	state Exp;
branches;
next	1.63;

1.63
date	2005.08.14.15.11.45;	author jost2345;	state Exp;
branches;
next	1.62;

1.62
date	2005.08.11.18.08.16;	author jost2345;	state Exp;
branches;
next	1.61;

1.61
date	2005.07.28.17.00.41;	author jost2345;	state Exp;
branches;
next	1.60;

1.60
date	2005.07.08.17.57.21;	author jost2345;	state Exp;
branches
	1.60.2.1;
next	1.59;

1.59
date	2005.06.21.20.17.29;	author jost2345;	state Exp;
branches;
next	1.58;

1.58
date	2005.06.19.20.45.39;	author jost2345;	state Exp;
branches;
next	1.57;

1.57
date	2005.06.15.15.18.02;	author jost2345;	state Exp;
branches;
next	1.56;

1.56
date	2005.05.15.20.58.13;	author jost2345;	state Exp;
branches;
next	1.55;

1.55
date	2005.05.15.20.17.35;	author jost2345;	state Exp;
branches;
next	1.54;

1.54
date	2005.05.14.15.41.46;	author jost2345;	state Exp;
branches;
next	1.53;

1.53
date	2005.05.07.14.02.31;	author jost2345;	state Exp;
branches;
next	1.52;

1.52
date	2005.05.04.22.13.08;	author jost2345;	state Exp;
branches;
next	1.51;

1.51
date	2005.04.30.14.47.02;	author jost2345;	state Exp;
branches;
next	1.50;

1.50
date	2005.04.18.20.13.58;	author jost2345;	state Exp;
branches;
next	1.49;

1.49
date	2005.04.17.21.22.01;	author jost2345;	state Exp;
branches;
next	1.48;

1.48
date	2005.04.13.20.47.49;	author jost2345;	state Exp;
branches;
next	1.47;

1.47
date	2005.03.09.17.24.26;	author jost2345;	state Exp;
branches;
next	1.46;

1.46
date	2005.02.24.18.39.17;	author jost2345;	state Exp;
branches;
next	1.45;

1.45
date	2005.02.21.17.53.04;	author jost2345;	state Exp;
branches;
next	1.44;

1.44
date	2005.02.20.12.19.43;	author jost2345;	state Exp;
branches;
next	1.43;

1.43
date	2005.02.19.16.51.59;	author jost2345;	state Exp;
branches;
next	1.42;

1.42
date	2005.02.17.21.57.22;	author jost2345;	state Exp;
branches;
next	1.41;

1.41
date	2005.02.03.16.56.07;	author jost2345;	state Exp;
branches;
next	1.40;

1.40
date	2005.01.31.16.18.45;	author jost2345;	state Exp;
branches;
next	1.39;

1.39
date	2005.01.29.10.09.32;	author jost2345;	state Exp;
branches;
next	1.38;

1.38
date	2005.01.28.16.32.52;	author jost2345;	state Exp;
branches;
next	1.37;

1.37
date	2005.01.08.18.22.15;	author jost2345;	state Exp;
branches;
next	1.36;

1.36
date	2005.01.03.19.50.43;	author jost2345;	state Exp;
branches;
next	1.35;

1.35
date	2005.01.02.14.02.10;	author jost2345;	state Exp;
branches;
next	1.34;

1.34
date	2004.12.20.20.04.43;	author jost2345;	state Exp;
branches;
next	1.33;

1.33
date	2004.12.12.09.57.25;	author jost2345;	state Exp;
branches;
next	1.32;

1.32
date	2004.12.02.18.20.23;	author jost2345;	state Exp;
branches;
next	1.31;

1.31
date	2004.12.01.20.29.56;	author jost2345;	state Exp;
branches;
next	1.30;

1.30
date	2004.11.26.21.13.39;	author jost2345;	state Exp;
branches;
next	1.29;

1.29
date	2004.11.20.17.12.49;	author jost2345;	state Exp;
branches;
next	1.28;

1.28
date	2004.11.20.16.19.14;	author jost2345;	state Exp;
branches;
next	1.27;

1.27
date	2004.11.18.21.39.55;	author jost2345;	state Exp;
branches;
next	1.26;

1.26
date	2004.10.30.13.50.17;	author jost2345;	state Exp;
branches;
next	1.25;

1.25
date	2004.10.29.15.16.21;	author jost2345;	state Exp;
branches;
next	1.24;

1.24
date	2004.10.28.17.02.56;	author jost2345;	state Exp;
branches;
next	1.23;

1.23
date	2004.10.28.15.19.59;	author jost2345;	state Exp;
branches;
next	1.22;

1.22
date	2004.10.27.19.54.17;	author jost2345;	state Exp;
branches;
next	1.21;

1.21
date	2004.10.24.13.56.36;	author jost2345;	state Exp;
branches;
next	1.20;

1.20
date	2004.10.24.10.58.47;	author jost2345;	state Exp;
branches;
next	1.19;

1.19
date	2004.10.23.15.57.36;	author jost2345;	state Exp;
branches;
next	1.18;

1.18
date	2004.10.07.11.19.46;	author jost2345;	state Exp;
branches;
next	1.17;

1.17
date	2004.10.06.16.42.24;	author jost2345;	state Exp;
branches;
next	1.16;

1.16
date	2004.10.06.16.37.59;	author jost2345;	state Exp;
branches;
next	1.15;

1.15
date	2004.10.05.21.51.57;	author jost2345;	state Exp;
branches;
next	1.14;

1.14
date	2004.09.25.18.50.26;	author jost2345;	state Exp;
branches;
next	1.13;

1.13
date	2004.09.25.18.36.22;	author jost2345;	state Exp;
branches;
next	1.12;

1.12
date	2004.09.23.13.12.44;	author jost2345;	state Exp;
branches;
next	1.11;

1.11
date	2004.09.22.19.17.48;	author jost2345;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.19.18.45.13;	author jost2345;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.17.17.32.36;	author jost2345;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.16.20.21.01;	author jost2345;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.16.14.36.48;	author jost2345;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.11.17.08.43;	author jost2345;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.11.16.46.40;	author jost2345;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.09.21.49.23;	author jost2345;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.30.17.30.44;	author jost2345;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.29.15.24.30;	author jost2345;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.28.06.05.20;	author jost2345;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.08.28.06.05.20;	author jost2345;	state Exp;
branches;
next	;

1.60.2.1
date	2005.07.10.17.31.37;	author jost2345;	state Exp;
branches;
next	;

1.86.2.1
date	2006.04.23.19.09.08;	author jost2345;	state Exp;
branches;
next	1.86.2.2;

1.86.2.2
date	2006.05.13.16.09.57;	author jost2345;	state Exp;
branches;
next	;

1.114.2.1
date	2008.11.09.17.01.41;	author jost_boekemeier;	state Exp;
branches;
next	1.114.2.2;

1.114.2.2
date	2008.11.15.14.22.31;	author jost_boekemeier;	state Exp;
branches;
next	;


desc
@@


1.127
log
@New fastcgi implementation
@
text
@What is the VM Bridge?
----------------------

  The VM Bridge is a network protocol which can be used to
  connect a native script engine, for example PHP, with a Java or ECMA
  335 VM.

  Please read the http://php-java-bridge.sf.net for more information.


Overview
--------

  The generic VM Bridge implementation is distributed as an
  example web archive called "JavaBridge.war". It is a zip archive which
  contains the libraries "JavaBridge.jar", "php-script.jar" and
  "script-api.jar". Furthermore it contains some PHP examples which
  can be run in any pure Java J2EE server or servlet engine.

  The VM Bridge web application contains two servlets. The
  "PhpJavaServlet" handles requests from remote PHP clients running in
  Apache/IIS or from the command line:

    Apache/IIS/console::PHP <--> PhpJavaServlet

  The second servlet, PhpCGIServlet, can handle requests from internet
  clients directly. It can start PHP as a FastCGI or CGI sub component:

    internet browser <--> PhpCGIServlet <--> php-cgi <--> PhpJavaServlet


  Furthermore the bridge supports standalone Java applications through
  the JSR223 script API.


Build and execution instructions:
---------------------------------

  Type java -classpath JavaBridge.war TestInstallation to extract the
  JavaBridge.jar from the web archive. The command extracts
  ext/JavaBridge.jar and java/Java.inc from the web archive.

  Double-click on JavaBridge.jar and select SERVLET_LOCAL:8080 to
  start a local HTTP server. Type java -jar ext/JavaBridge.jar --help
  to see the list of available options.

  Use the following code to access Java from your PHP scripts:

    <?php require_once("http://localhost:8080/JavaBridge/java/Java.inc");
    $s = new Java("java.lang.String", "hello");
    ...
    ?>


------------------------------------
  Permanently activate the module
  -------------------------------

  Installation for the web:
  -------------------------

  Install a local J2EE server or servlet engine. For example Tomcat
  version 6. Copy the JavaBridge.war file into the autodeploy folder of
  the J2EE server or servlet engine.

  Example for Apache/Tomcat on Linux:

    cp JavaBridge.war /usr/share/tomcat5/webapps/

  Restart tomcat and wait until the directory webapps/JavaBridge
  appears.

  Then copy or symlink the JavaBridge folder to the document root
  of your HTTP server. Example for Linux:

    cp -r /usr/share/tomcat5/webapps/JavaBridge/ $HOME/public_html


  Installation for standalone Java J2SE applications:
  ---------------------------------------------------

  Copy the JavaBridge.jar, php-script.jar and script-api.jar to
  the java.ext.dirs. Example for JDK1.6 on Linux:

    cp ext/*.jar /usr/java/packages/lib/ext/

  Type

    /usr/java/default/bin/jrunscript -l php-interactive

  to start an interactive PHP session.

---------------------------------------------
  Starting the VM Bridge automatically
  ------------------------------------------

  For the web:
  ------------

  Install the J2EE server or servlet engine as a service. The
  Apache/Tomcat servlet engine automatically installs as a service on
  Windows and Linux.


  For standalone J2SE applications:
  ----------------------------------

  No installation necessary; the bridge starts automatically when the
  JSR 223 context is accessed. Example:

    jrunscript -classpath JavaBridge.jar -l php-interactive 

  automatically starts a "php-cgi" executable from the path. Please
  see the INSTALL.J2SE document for details how to access persistent
  script engines from a HTTP or FastCGI pool using the JSR 223
  interface.
  
---------------------------------------------
  AS/Servlet with PHP CGI/FastCGI
  -------------------------------

  Read the following instructions only if you don't want to use
  Apache or IIS.

  Deploy the JavaBridge.war into the Tomcat or J2EE server (please see 
  our FAQ section on http://php-java-bridge.sf.net), then visit 
  http://localhost:8080/JavaBridge and run the supplied JSP and PHP 
  examples.

  If the parameter name "use_fast_cgi" is set to "Autostart" in the
  web.xml, and a fcgi server does not listen on port 9667, and a fcgi
  binary can be found as either 

    /usr/bin/php-cgi 

  or 

    c:/Program Files/PHP/php-cgi.exe,

  then the back end automatically starts the Fast-CGI server on this
  computer. With the command:

    cd $HOME
    export REDIRECT_STATUS="200"
    export X_JAVABRIDGE_OVERRIDE_HOSTS="/"
    export PHP_FCGI_CHILDREN="5"
    export PHP_FCGI_MAX_REQUESTS="5000"
    /usr/bin/php-cgi -d allow_url_include=On -b 127.0.0.1:9667

  On Windows the command is:

    set REDIRECT_STATUS "200"
    set X_JAVABRIDGE_OVERRIDE_HOSTS "/"
    set PHP_FCGI_CHILDREN "5"
    set PHP_FCGI_MAX_REQUESTS "5000"
    launcher.exe php-cgi \\.\pipe\JavaBridge@@9667 -d allow_url_include=On


  The PHP FastCGI server starts when the VM or the web context starts,
  it stops when the VM or web context terminates.


  If that failed, the bridge searches for a CGI binary called:
  
    php-cgi-<architecture>-<os>.exe or

    php-cgi-<architecture>-<os>.sh or

    php-cgi-<architecture>-<os>

  in the directory WEB-INF/cgi/. On Unix the binary must be executable. It
  is therefore recommended to always use a wrapper .sh script, for example:

  #!/bin/sh
  # This wrapper script reconstructs the executable permissions
  # which some zip or .war implementations do not preserve
  chmod +x ./php-cgi-i386-linux
  exec ./php-cgi-i386-linux

  Please see the README located in the directory WEB-INF/cgi/ for
  details.

  The <architecture> and <os> values are calculated as follows:

    System.getProperty("os.arch").toLowerCase();
    System.getProperty("os.name").toLowerCase();

  Please see the output of test.php for details.


  It is also possible to adjust the php_exec setting (see
  WEB-INF/web.xml), for example:

      <param-name>php_exec</param-name>
      <param-value>/usr/local/bin/php-cgi</param-value>

  or

      <param-name>php_exec</param-name>
      <param-value>c:/PHP/php-cgi.exe</param-value>

  In case your application server denies calling the CGI binary,
  either start apache or IIS or start a fast CGI server on port 9667
  as a separate process, for example from a service script. 

  If the directory "/dev/shm" exists, or if the Java.inc option 
  JAVA_PIPE_DIR points to an existing directory, the bridge uses 
  named pipes. On Windows, where standard named pipes are not available, 
  the bridge uses TCP sockets. If your application server denies socket 
  accept/resolve, please either run the AS on a Unix operating system or 
  add the following lines to your AS policy file (for 
  example ...\domains\domain1\config\server.policy):

    grant {
      permission java.net.SocketPermission  "*", "accept,resolve";
    };

------------------------------------
  Log level
  ---------

  You can set the java.log_level to 7 values:

   0: Log nothing, not even fatal errors.

   1: Log fatal system errors such as "out of memory error".

   2: Log java exceptions.

   3: Log verbose, e.g.: "JavaBridge version x.y.z started"

   4: Log debug messages, including the c/s communication protocol.

   5: Log method invocations, including method selection.

   6: Reserved for internal use. Log messages which may be useful
      to debug certain parts of the bridge.

  The default log level is 2.  If java.log_level is missing, the
  back end uses the "default" log level supplied when the back end was
  started (the second argument after java -jar JavaBridge.jar ...).

  The log4j viewer "Chainsaw" can be used to automatically capture the
  log from the bridge, regardless in which environment it is
  running. log4j.jar must be in the Java VM's java.ext.dirs (usually
  jre/lib/ext), Chainsaw must be running and the back end must have
  been started without a log file argument or with the .ini option
  java.log_file="@@127.0.0.1:4445". Chainsaw can be started with e.g.:

   /opt/jdk1.5/bin/java -cp /opt/jdk1.5/jre/lib/ext/log4j.jar \
                                               org.apache.log4j.chainsaw.Main

   Example which starts tomcat with a full debug log:

   JAVA_HOME=/usr/java/default \
    JAVA_OPTS="-Dphp.java.bridge.default_log_level=6" \
    /opt/tomcat/bin/catalina.sh run

------------------------------------
  Security Enhanced Linux
  -----------------------

  SELinux is an implementation of a flexible and fine-grained
  mandatory access control architecture implemented in the Linux kernel.

  A system component running on a SELinux kernel must declare
  exactly a) which resources of the operating system it needs in order
  to function properly and b) what it provides to other components.

  The VM Bridge distribution contains two policy files,
  "php-java-bridge.te" and "php-java-bridge.fc". The
  "php-java-bridge.te" declares the javabridge_t domain and the
  resources it requires.  httpd and user domains are granted connect, 
  read and write to the VM Bridge server socket, which is
  "@@var/run/.php-java-bridge_socket" in the Linux abstract name-space,
  and file create/read/write in the tmp_t.  Everything else (connections
  to other servers, file access, ...) is currently denied.

  The "php-java-bridge.fc" contains the file contexts for the PHP/Java
  Bridge and the log.

  Installation instructions for RHEL 4 and Fedora Core 4:
  -------------------------------------------------------

   1. Install selinux-policy-targeted-sources-*.rpm, for example with
      the command:

        rpm -i selinux-policy-targeted-sources-1.17.30-2.19.noarch.rpm

   2. Update the policy files with the VM Bridge policy:

        su -c "sh security/update_policy.sh /etc/selinux/targeted/src/policy"

  Installation instructions for RHEL 5, Fedora Core 5 or above:
  -------------------------------------------------------------

  1. Create the binary policy with the command:

        cd security/module; make

  2. Inject the rules into the kernel, either the php-java-bridge-tomcat.pp 
     or the php-java-bridge.pp. For example:

        semodule -i php-java-bridge.pp 

  3. The rules apply to the javabridge_t domain. Another rule
     specifies that when an executable is called from the httpd_t domain
     and the executable is tagged as javabridge_exec_t, a domain transition
     to javabridge_t occurs. It is therefore important that RunJavaBridge
     is tagged with javabridge_exec_t and that it is called from the
     httpd_t domain. Furthermore the java executable must be a binary:

        chcon -t javabridge_exec_t /usr/lib/php/modules/RunJavaBridge
        chcon -t bin_t /usr/lib/php/modules/java

  4. The policy module can be removed with the command:
  
        semodule -r javabridge
  
  If the default policy is too restrictive and e.g. you want to use
  the VM Bridge to connect to your J2EE server, you can
  temporarily set the policy to "permissive", for example with the
  command "setenforce Permissive". Connect to the server, then extract
  the permissions from the audit log, for example with the command
  "audit2allow -l -i /var/log/audit/audit.log", then append them at the
  end of the "php-java-bridge.te" file and load the updated policy into
  the kernel. Don't forget to switch back, for example with "setenforce
  Enforcing".

  Please note that SEL security is orthogonal to the standard Unix 
  security. For example you could also put the java process into 
  a "jail"; set up a user account with restricted rights, change the 
  owner of RunJavaBridge and set the SUID bit:

        chown apache:apache /usr/lib/php/modules/RunJavaBridge
        chmod 6111 /usr/lib/php/modules/RunJavaBridge

  The java process would run with the limited rights of apache *and* be 
  protected by the SEL policy.

------------------------------------
  Security Issues
  ---------------

  If the JEE or servlet back end is used, the bridge opens a local TCP
  port on 9167 (MonoBridge.exe) or 9267 (JavaBridge.jar), 9567
  (JavaBridge.war) or 9667 (FastCGI). Please make sure that the ports
  in the range [9167, ..., 9667] cannot be accessed from the internet.

  If your application server denies socket listen/accept, add the
  following line to your AS policy file (for example
  ...\domains\domain1\config\server.policy or tomcat/conf/catalina.policy):

  grant {permission java.net.SocketPermission  "localhost:9267-","listen,accept";};


------------------------------------
  Loading user classes and libraries
  ----------------------------------

  Java libraries should be installed in one of the following
  directories: java.ext.dirs or, for the J2EE/servlet back end,
  WEB-INF/lib. Libraries in these directories are automatically loaded
  by a static loader whenever the JVM starts.

  Java libraries can be created with:

    javac -Djava.ext.dirs=. my/package/*.java
    jar cvf myLibrary-0.1.jar my/package/*.class 


------------------------------------
  Sun java platform issues
  ------------------------

  The sun java platform does not support java "modules". This causes
  certain problems when running java programs. When you compile a class
  foo which references a class bar and ship the class foo without
  providing bar, the sun java platform will not complain unless the user
  accidentally calls a method which references the non-existing class. If
  this happens, a "NoClassDefFound" error is thrown. This error may
  not(!) indicate which class is missing and it certainly does not
  indicate which external library is missing. The tests.php4 folder
  contains two tests, noClassDefFound.php and noClassDefFound2.php, which
  demonstrate this.

  To avoid this problem please document *exactly* (including the
  version number) which external libraries (.jar files) your software
  needs. If you have written software where certain methods require an
  optional library, please document this in the method header.

  If you receive this error when using a Java library, this may mean the
  following:

    * a jar file is stored at more than one location or the same
      location is accessed by more than one class loader. 
      
    * an old or different JDK than expected by the library is used,
      for example GNU Java instead of SUN or IBM Java.

    * the library is simply broken or it expects certain parameters in
      its environment (applet parameter or system property or property file).

    * the library may only work within a J2EE environment from a
      certain vendor, for example the WebSphere Application server or
      the Sun Java Application server.

---------------------------------------------
  FreeBSD issues
  --------------
 
  FreeBSD is not directly supported. Please use the FreeBSD
  PHP/Java Bridge port instead. 

  In order to use unix domain sockets on FreeBSD, compile java.so,
  libnatcJavaBridge.so and start JavaBridge.jar with the argument
  LOCAL:/path/to/your/socket/file.

------------------------------------
  UTF-8
  -----
  
  Since PHP does not support unicode, the VM Bridge uses UTF-8
  to convert characters into the host representation. All strings are
  created with new String(..., "UTF-8") and all internal String->byte[]
  conversions use getBytes("UTF-8").
  
  If you have old PHP files which are not UTF-8 encoded, you can
  change the default encoding with java_set_file_encoding().  For
  example:

    java_set_file_encoding("ISO-8859-1");

  For a list of available encodings please see the documentation of
  the JVM's file.encoding system property.

  The java_set_file_encoding() primitive only affects java.lang.String
  creation and internal conversions, it does not alter the JVM's
  file.encoding system property nor does it change the behaviour of
  methods which use the file.encoding property, getBytes() for
  example.  If you use:
  
    $str=new Java ("java.lang.String", "Cze????! -- ???????? -- Gr");
    echo $str->getBytes();

  the output conversion depends on the file.encoding system property
  which in turn depends on the process' LANG environment variable. You
  can check the file.encoding with the test.php script, see above.

  To be portable please do not use conversions which depend on the
  JVM's file.encoding. They are easy to avoid, the above example
  should be written as:

    $str=new Java ("java.lang.String", "Cze????! -- ???????? -- Gr");
    echo (string)$str;  // in PHP5 or higher
    echo $str->toString(); // in PHP4

------------------------------------
  Creating thread dumps in Java 6
  -------------------------------

  * Become "super user" or "admin user" and start the program jconsole
    located in the JDK 1.6 bin directory, for example with the following
    command:

      su -c "/opt/jdk1.6/bin/jconsole"

    On Windows make sure you have admin privileges before starting
    jconsole.
     
  * In the "Create new connection" dialog select "local process" and
    click on the "JavaBridge" entry. -- If the JavaBridge doesn't appear
    there, check if the JavaBridge is running within a Java 1.6 VM and if
    the jconsole has been started with sufficient permissions.

  * Click "connect".

  * Open the "Threads" tab and click on the thread you're interested in.


------------------------------------
  Performance tuning
  ------------------

  The VM Bridge protocol is very sensitive to network
  latency. If the Java server and PHP client do not run on the same
  computer, the objective is to minimize the number of network
  round-trips; java_values() can be used to obtain a Java array, Map
  or Collection in one round-trip.
  
  The call java_values($obj) evaluates $obj on the server-side and, if
  it is a Java array, Map or Collection, retrieves its values in one
  call.

  Example:

    $iter = $hits->iterator();                       // 1 round trip
    $resultList = new Java("java.util.LinkedList");  // 1 round trip
    $n = $hits->length()                             // 1 round trip

    while($n--) {
      $next = $iter->next();
      $resultList->add($next->get("name"));
    }
    $ar = java_values($resultList);                  // 1 round trip

  Assuming that a ping to the back-end reveals an average round-trip
  time of 6ms, the above code costs 6*6ms = 36ms (ignoring CPU and
  network bandwidth contraints).

  The more intuitive approach:

    $n = $hits->length();                            // $n = 30000
    while($iter->hasNext()) {                        // $n * 6ms
      $next = $iter->next();                         // $n * 6ms
      $a[$i++]=$next->get("name");                   // $n * 6ms
    }
 
  costs 30000*18ms + 6 ms = 9 min. It is 15000 times slower, 
  assuming that the client CPU can generate and send the XML document
  within 6ms and that the server CPU can generate/send the values of the
  resultList within 6ms, which usually isn't the case.

------------------------------------
  Mailing List
  ------------

  Please report bugs/problems to the mailing list:

    php-java-bridge-users@@lists.sourceforge.net

@


1.126
log
@Renamed PHP_FCGI_CHILDREN to PHP_JAVA_BRIDGE_FCGI_CHILDREN to avoid PHP7 spawning PHP_FCGI_CHILDREN  childs by itself
@
text
@d146 1
a146 1
    export PHP_JAVA_BRIDGE_FCGI_CHILDREN="5"
d154 1
a154 1
    set PHP_JAVA_BRIDGE_FCGI_CHILDREN "5"
@


1.125
log
@Release-6-1-1
@
text
@d146 1
a146 1
    export PHP_FCGI_CHILDREN="5"
d154 1
a154 1
    set PHP_FCGI_CHILDREN "5"
@


1.124
log
@Release-6-0-3
@
text
@d366 1
a366 5
  The location of a "php.java.bridge.base" depends on the Java system
  property -Dphp.java.bridge.base. It defaults to user.home. 
  
  Java libraries can be created from .class files with the following
  command:
d368 1
d371 1
@


1.123
log
@Release-5-5-4
@
text
@d367 1
a367 5
  property -Dphp.java.bridge.base. It defaults to user.home. When
  the standalone component is invoked as a sub component of Apache or
  IIS, php.java.bridge.base is initialized with the PHP .ini
  extension_dir setting, which is usually /usr/lib/php/modules or
  c:\php.
a368 8
  Java libraries can also be loaded or re-loaded on demand by a
  dynamic loader. They should have the following file name:
  <name>-<version>.jar and be stored in a sub directory of the
  php.java.bridge.base/lib/ directory or in a sub directory of the
  /usr/share/java directory. For example:

    /usr/share/java/batStore/batStore-1.0.jar.

a373 88
  The dynamic loader can link java libraries into PHP files at
  run-time if the PHP files contain the command:

    java_require("<library1>;<libraryN>");

  Note that <library> can also be a directory containing .jar files.

  For example:

    <?php
      // process order
      java_require("j2ee.jar;myProject/myLibrary-0.1.jar");

      $proc = new Java("my.package.InputProcessor", ...);
      $proc->doSomething($_POST);
      ...
    ?>

  Minor upgrades of dynamic-loaded libraries can be installed at
  run-time. When the dynamic loader detects that the time stamp or the
  version number of the .jar file has changed, it automatically loads
  the new version.

  Disadvantages of the dynamic loader:

  * An attempt to load an impure java library immediately throws an
    UnsatisfiedLinkError.

  * Class loading via the dynamic loader is slower, because it
    cannot use the global VM class cache.

  * Libraries must be explicitly required by using the php
    java_require() procedure.

  Disadvantages of the static loader:

  * All java libraries are loaded when the Java- or Mono VM
    starts. For the PHP CLI component, which usually starts a new VM for
    each PHP invocation (unless java.hosts or java.socketname is set),
    this may cause a noticeable delay (a few 100 ms).

  * The static loader can only load libraries which are stored in the
    /usr/share/java/ext directory. Hot deployment is not possible
    because all classes are loaded when the VM starts.

  * The standard directories /usr/share/java/ext or
    /usr/java/packages/lib/ext/ don't exist on Windows so that users must
    check the windows registry to find the "standard" java extension dir.

  It is recommended to store Java libraries which are API stable or
  use the java native interface into java.ext.dirs. All other
  libraries can go into a project specific directory within
  php.java.bridge.base/lib/ or /usr/share/java/ and be loaded
  on-demand.

  Note that classes loaded from two different class loader instances
  cannot access each other. This means that, e.g., neither

    java_require("foo.jar");
    ...
    Class.forName("foo");  // wrong!

  nor 

    java_require("foo.jar"); java_require("bar.jar");
    $foo = new Java("foo");
    $foo->callWithBar(); // error!

  nor
 
    java_require("foo.jar;system-library.jar");
    $foo = new Java("foo");
    $foo->callWithSystemLibrary(); // fail if system-library has been loaded

  nor

    java_require("myJdbcDriver.jar");
    java("java.sql.DriverManager")->doSomethingWith(myJdbcDriver);

  work as expected.

  In the first example the class was loaded from the bootstrap class
  loader, which cannot access foo.jar's class loader. In the second
  example foo and bar depend on each other, so that the call fails
  because bar cannot be accessed from foo.jar's class loader, and the
  remaining examples try to inject new dependencies for already loaded
  classes, the "system library" and the "DriverManager".

a402 3
    * java_require("foo.jar"); java_require("bar.jar"); was used instead of
      java_require("foo.jar;bar.jar"); to load two interconnected libraries.

@


1.122
log
@Release 5.5.3
@
text
@d345 10
a354 2
  The bridge uses abstract local sockets, named pipes (located in
  /dev/shm/) or local TCP sockets as communication channels.
a355 25
  It is recommended to use the local back end on a Unix machine which
  supports abstract local ("unix domain") sockets or "/dev/shm".
  On these systems the communication channel is not visible and cannot be
  attacked. If you are running a Security Enhanced Linux kernel, which
  is standard since RHEL4 or FC3, the back end is also protected by the
  SEL policy. The servlet back end uses a HTTP tunnel to execute one
  statement and then switches to named pipes for the rest of the
  communication.

  On other systems, such as Windows and Mac OSX, the bridge opens a
  local TCP port on 9167 (MonoBridge.exe) or 9267 (JavaBridge.jar), 9567
  (JavaBridge.war) or 9667 (FastCGI). Please make sure that the ports in
  the range [9167, ..., 9667] cannot be accessed from the internet.

  If the directory "/dev/shm" exists, or if the Java.inc option 
  JAVA_PIPE_DIR points to an existing directory, the bridge uses 
  named pipes. On Windows, where standard named pipes are not available, 
  the bridge uses TCP sockets. If your application server denies socket 
  accept/resolve, please either run the AS on a Unix operating system or 
  add the following lines to your AS policy file (for 
  example ...\domains\domain1\config\server.policy):

    grant {
      permission java.net.SocketPermission  "*", "accept,resolve";
    };
@


1.121
log
@*** empty log message ***
@
text
@d611 1
a611 2
  or Collection in one round-trip and java_begin_document(),
  java_end_document() can be used to execute PHP code on the server.
a616 4
  The java_begin_document()/java_end_document() pair encapsulates PHP
  code, sends an image of it (as a streamed XML document) to the server
  and executes it there. This works for all PHP statements.

a622 1
    java_begin_document();                           // 1 round trip
a626 1
    java_end_document();                             // 1 round trip
@


1.120
log
@eclipse birt integration
@
text
@d383 1
a383 1
  The location of the php.java.bridge.base depends on the Java system
d503 1
a503 1
  contains two tests, noClassDefFound.php and noClassDefFound2.php which
@


1.119
log
@Release-5-4-1
@
text
@d206 7
a212 5
  On Unix the bridge uses named pipes. On Windows, where standard
  named pipes are not available, the bridge uses TCP sockets. If your
  application server denies socket accept/resolve, please either run the
  AS on a Unix operating system or add the following lines to your AS
  policy file (for example ...\domains\domain1\config\server.policy):
a217 1

d342 1
a342 1
  Security issues
d346 1
a346 1
  /dev/shm/ or /tmp/) or local TCP sockets as communication channels.
d349 2
a350 2
  supports abstract local ("unix domain") sockets or named pipes. On
  these systems the communication channel is not visible and cannot be
d362 12
@


1.118
log
@Backward compatibility with BEA WL 8.1
@
text
@d460 6
d472 5
a476 27
  loader, which cannot access foo.jar's class loader. In the second example
  foo and bar depend on each other, so that the call fails because bar
  cannot be accessed from foo.jar's class loader.

  The first example can be corrected by using the current class
  loader:

     java_require("foo.jar");
     ...
     Class.forName("foo",true,Thread.currentThread().getContextClassLoader());

  or simply:

      java_require("foo.jar");
      new JavaClass("foo");

  The second example can be corrected by loading the interconnected
  libraries from the same class loader:
   
     java_require("foo.jar;bar.jar");

  The third example can be corrected by loading the JDBC driver and a class
  which uses the jdbc driver from the same class loader. For example:

    java_require("myJdbcDriver.jar;myDriverManager.jar");

  After that the "myDriverManager" class can access "myJdbcDriver" as usual.
@


1.117
log
@java autostart removed
@
text
@d540 1
a540 1
  In order to use unix domain sockets on FreeBSD compile java.so,
@


1.116
log
@Release 5.3.3.1
@
text
@a54 6
   To build and install an optimized implementation which doesn't need
   any Java, download and unpack the source download archive and type:

     phpize && ./configure && make && make install


a217 23
  Recognized CFLAGS
  -----------------

   The build scripts of the native implementation recognize the
   following CFLAGS:

   * -DJAVA_COMPILE_DEBUG: Enables the assert() statement and other
     debug code.
   
   * -DJAVA_COMPILE_DEBUG -O0 -g3: Include full debug information into
     the binary.

   * -m64: Build 64 bit code. Required if you run a 64 bit JVM.

   * -m32: Build 32 bit code. Required if you run a 32 bit JVM on a 64
     bit system.

   * -DCFG_JAVA_SOCKET_INET: Disables local ("unix domain") sockets on
      systems which support them. 

  Example: make CFLAGS="-O0 -g3"

------------------------------------
a533 8
  GCJ/GNU Java issues
  -------------------
  
  Running the VM Bridge under GCJ ("GNU Java") is supported on Linux
  and Solaris only.  If you run FreeBSD 5.3, please use Sun, Blackdown
  or IBM java instead.

---------------------------------------------
d536 3
a538 21
  
  BSD variants contain an incorrect implementation of Nagle's
  algorithm, which interacts badly with the ack delay found in the
  original BSD TCP/IP implementation.

  If you use an operating system which does not contain the TCP/IP ack
  delay fix, please upgrade your operating system to either Windows >=
  2000, Linux >= RedHat Enterprise Linux 5 or (Open-)Solaris (any
  version) or OSX >= 10.4.

  A workaround for BSD is to switch off Nagle's algorithm
  in the operating system kernel or to use Unix Domain Sockets instead
  of BSD TCP/IP sockets:

  * Compile a java.so and natcJavaBridge.so and start the Java VM as
    follows:

    export LD_LIBRARY_PATH=/path/to/dir/containing/natcJavaBridge.so
    java -jar JavaBridge.jar LOCAL:/tmp/javabridge.socket
   
  * Add the following to your php.ini:
d540 3
a542 3
    extension=java.so
    [java]
    java.socketname=/tmp/javabridge.socket
@


1.115
log
@Release 5.3.3
@
text
@d571 2
a572 2
  FreeBSD and Mac OSX issues
  --------------------------
d581 1
a581 1
  version).
d583 1
a583 1
  A workaround for Mac OSX or BSD is to switch off Nagle's algorithm
@


1.114
log
@Release-5-3-3
@
text
@d1 2
a2 2
What is the PHP/Java Bridge?
----------------------------
d4 1
a4 1
  The PHP/Java Bridge is a network protocol which can be used to
d14 1
a14 1
  The generic PHP/Java Bridge implementation is distributed as an
d20 1
a20 1
  The PHP/Java Bridge web application contains two servlets. The
d100 1
a100 1
  Starting the PHP/Java Bridge automatically
d298 1
a298 1
  The PHP/Java Bridge distribution contains two policy files,
d302 1
a302 1
  read and write to the PHP/Java Bridge server socket, which is
d318 1
a318 1
   2. Update the policy files with the PHP/Java Bridge policy:
d349 1
a349 1
  the PHP/Java Bridge to connect to your J2EE server, you can
d566 1
a566 1
  Running the PHP/Java Bridge under GCJ ("GNU Java") is supported on Linux
d571 2
a572 2
  FreeBSD issues
  --------------
d574 12
a585 8
  FreeBSD and some other BSD variants contain an incorrect
  implementation of Nagle's algorithm. Because of this 10 subsequent
  HTTP GET requests on the local interface cost ~1 second, which makes
  pure Java unusable on this operating system.

  Either modify PHP so that it sets the socket option NDELAY, or switch
  off the delay for local TCP sockets in the FreeBSD kernel or use unix
  domain sockets to communicate with the Java VM:
d603 1
a603 1
  Since PHP does not support unicode, the PHP/Java Bridge uses UTF-8
d665 1
a665 1
  The PHP/Java Bridge protocol is very sensitive to network
@


1.114.2.1
log
@Release 5.3.3
@
text
@d1 2
a2 2
What is the VM Bridge?
----------------------
d4 1
a4 1
  The VM Bridge is a network protocol which can be used to
d14 1
a14 1
  The generic VM Bridge implementation is distributed as an
d20 1
a20 1
  The VM Bridge web application contains two servlets. The
d100 1
a100 1
  Starting the VM Bridge automatically
d298 1
a298 1
  The VM Bridge distribution contains two policy files,
d302 1
a302 1
  read and write to the VM Bridge server socket, which is
d318 1
a318 1
   2. Update the policy files with the VM Bridge policy:
d349 1
a349 1
  the VM Bridge to connect to your J2EE server, you can
d566 1
a566 1
  Running the VM Bridge under GCJ ("GNU Java") is supported on Linux
d599 1
a599 1
  Since PHP does not support unicode, the VM Bridge uses UTF-8
d661 1
a661 1
  The VM Bridge protocol is very sensitive to network
@


1.114.2.2
log
@Release 5.3.3
@
text
@d571 2
a572 2
  FreeBSD and Mac OSX issues
  --------------------------
d574 8
a581 12
  BSD variants contain an incorrect implementation of Nagle's
  algorithm, which interacts badly with the ack delay found in the
  original BSD TCP/IP implementation.

  If you use an operating system which does not contain the TCP/IP ack
  delay fix, please upgrade your operating system to either Windows >=
  2000, Linux >= RedHat Enterprise Linux 5 or (Open-)Solaris (any
  version).

  A workaround for Mac OSX or BSD is to switch off Nagle's algorithm
  in the operating system kernel or to use Unix Domain Sockets instead
  of BSD TCP/IP sockets:
@


1.113
log
@Apache/IIS and JSR 223 integration
@
text
@a124 46
  High-level interface
  --------------------

  When the PHP standard library is available (PHP 5.2 and above), the
  procedure java_autoload() can be used to import Java classes into PHP.
  Example:

  <?php require_once("http://localhost.8080/JavaBridge/java/Java.inc");
 
    java_autoload("lucene.jar");
 
    $searcher = new org_apache_lucene_search_IndexSearcher(getcwd());
    $term = new org_apache_lucene_index_Term("name", "test.php");
    $phrase = new org_apache_lucene_search_PhraseQuery();
    $phrase->add($term);

    $hits = $searcher->search($phrase);
    $iter = $hits->iterator();

    while($iter->hasNext()) {
      $next = $iter->next();
      $name = $next->get("name");
      echo "found: $name\n";
    }
  ?>

  The procedure type(<detail>) can be used to access class features. Example:

  echo java_inspect(java_lang_System::type()->out);
  
  Details of <detail> can be accessed by appending $detail. Example:

  package org.my.package;
  public interface Php {
    public class java {
      public enum bridge {JavaBridge, JavaBridgeRunner};
    }
  }

  <? require_once("http://localhost:8080/JavaBridge/java/Java.inc");
    java_autoload("myPackage.jar");

    echo org_my_package.Php::type('java$bridge');
  ?>

---------------------------------------------
d131 4
a134 4
  Please deploy the JavaBridge.war into the Tomcat or J2EE server
  (please see or FAQ section on http://php-java-bridge.sf.net), then
  visit http://localhost:8080/JavaBridge and run the supplied JSP and
  PHP examples.
d138 8
a145 1
  binary can be found as either /usr/bin/php-cgi or c:/php/php-cgi.exe,
d547 1
a547 2
      location is accessed by more than one class loader. For example
      java_require("WEB-INF/lib/") calls for trouble.
a561 15
------------------------------------
  PHP issues
  ------------

  All PHP versions between 4.4.1 and 5.0.3 crash when the dl()
  function is used.

  If you use one of these versions, please add the following entry
  to your php.ini file:

    extension=java.so ;; php_java.dll on windows
    [java]
    java.hosts=127.0.0.1:8080
    java.servlet=On

a655 48
------------------------------------
  Creating thread dumps in Java < 6
  ---------------------------------

  Older Java VM must be started with the following options:
  
  -Xdebug -Xrunjdwp:transport=dt_socket,address=9147,server=y,suspend=n
  
  The following description assume that Java is running as a sub
  component of Apache or IIS:

  * On Windows set the "java.java" php .ini option (in the global php.ini
    file) to:
  
    extension=php_java.dll
    [java]
    java.java="javaw -Xdebug -Xrunjdwp:transport=dt_socket,address=9147,server=y,suspend=n"
  
  * On Unix add the "java.wrapper" php .ini option (in the global php.ini
    file or in /etc/php.d/java.ini):
  
    extension = java.so
    [java]
    java.wrapper = /tmp/java.wrapper
  
    Create the file /tmp/java.wrapper with the following content:
  
    #!/bin/sh
    set -x
    java=$1; shift
    exec $java "-Xdebug -Xrunjdwp:transport=dt_socket,address=9147,server=y,suspend=n" "$@@"
  
    Add the required permissions; in a command window type (as super user):
    
    chmod +x /tmp/java.wrapper
    /usr/sbin/setenforce 0     # Security Enhanced Linux only
  
  * On Windows or Unix: restart the web server, for example with:

    apachectl restart
  
  * Open a command window and type the following commands:
  
    jdb -attach 127.0.0.1:9147
    suspend
    where all
    resume

@


1.112
log
@Release-5-2-0
@
text
@d585 4
@


1.111
log
@Release-5-0-1
@
text
@d49 1
a49 3
    <?php
    if(!extension_loaded("java"))
      require_once("http://localhost:8080/JavaBridge/java/Java.inc");
@


1.110
log
@Release-4-3-3
@
text
@d435 4
a438 4
  Java libraries should be installed in one of the following directories:
  java.ext.dirs or php.java.bridge.base/lib or, for the
  J2EE/servlet back end, WEB-INF/lib. Libraries in these directories are
  automatically loaded by a static loader whenever the JVM starts.
d449 2
a450 2
  <name>-<version>.jar and be stored in a sub directory of the PHP
  extension_dir/lib/ directory or in a sub directory of the
d502 2
a503 3
    /usr/share/java/ext or in the php.java.bridge.base/lib directory. Hot
    deployment is not possible because all classes are loaded when the VM
    starts.
d510 4
a513 4
  use the java native interface into the php.java.bridge.base/lib
  directory or into java.ext.dirs. All other libraries can go into a
  project specific directory within php.java.bridge.base/lib/ or
  /usr/share/java/ and be loaded on-demand.
d528 5
d557 7
@


1.109
log
@Release-4-3-1
@
text
@d39 3
a41 3
  Type java -jar JavaBridge.war to extract the JavaBridge.jar from
  the web archive. The command extracts ext/JavaBridge.jar and
  java/Java.inc from the web archive.
a62 12
  For PHP 4, which cannot run PHP 5 code, a C extension "php_java.dll"
  or "java.so" is needed to access Java. Download and extract the
  PHP/Java Bridge source download, follow the instructions from the
  INSTALL document and set the following php.ini options:

     extension=java.so ;; or php_java.dll on windows
     [java]
     java.hosts=127.0.0.1:8080
     java.servlet=On

  Both implementations, the Java.inc and the C code are API compatible.

d764 1
a764 5
  and executes it there. This works for all PHP statements. But the
  following primitives are not allowed while in stream mode:
  java_session(), java_begin_document(), java_end_document(),
  java_values(), __toString(), and the PHP iterator cannot be used to
  iterate values of Java objects.
@


1.108
log
@Release-4-3-0
@
text
@d334 6
@


1.107
log
@Release-4-2-0
@
text
@d14 5
a18 3
  The generic PHP/Java Bridge implementation is distributed as a web
  archive called "JavaBridge.war". It is a zip archive which contains
  the libraries "JavaBridge.jar", "php-script.jar" and "script-api.jar".
d40 2
a41 1
  the web archive. 
d44 2
a45 2
  start a servlet engine listening on the local host interface. Type
  java -jar JavaBridge.jar --help to see the list of available options.
d50 2
a51 1
    require_once("http://localhost:8080/JavaBridge/java/Java.inc");
d62 13
d76 2
a77 2
   Permanently activate the module
   -------------------------------
d80 1
d82 3
a84 2
  Copy the JavaBridge.war file into the autodeploy folder
  of the J2EE server or servlet engine.
d90 8
d100 1
d107 6
d118 1
d120 1
a120 1
  Start the J2EE server or servlet engine as a service. The
d125 12
a136 2
  In standalone J2SE applications the bridge starts automatically
  when the JSR223 context is accessed.
d139 2
a140 2
  Translating Java into PHP PEAR classes
  --------------------------------------
d142 3
a144 1
  Java libraries can be translated into PEAR classes using the command:
d146 8
a153 1
    java -jar JavaBridge.jar --convert /path/to/PEAR/repository ARCHIVE.JAR
d155 2
a156 1
  or, if you have configured the PHP/Java extension to run without Java:
d158 6
a163 1
    modules/java --convert /path/to/PEAR/repository ARCHIVE.JAR
d165 1
d167 3
a169 1
  Example for Apache/Lucene:
d171 6
a176 1
     modules/java --convert /usr/share/pear /usr/share/java/lucene.jar
d178 2
a179 6
  <?php
     require_once("lucene/All.php")
     $searcher = new org_apache_lucene_search_IndexSearcher(getcwd());
     $term = new org_apache_lucene_index_Term("name", "test.php");
     $phrase = new org_apache_lucene_search_PhraseQuery();
     $phrase->add($term);
d181 1
a181 8
     $hits = $searcher->search($phrase);
     $iter = $hits->iterator();

     while($iter->hasNext()) {
       $next = $iter->next();
       $name = $next->get("name");
       echo "found: $name\n";
     }
d441 1
a441 2
  Java libraries should either be translated into PEAR classes (see
  above) or be installed in one of the following directories:
d579 1
a579 1
  If receive this error when using a Java library, this may mean the
d602 7
a608 2
  If you use one of these versions, please add an entry to the
  php.ini, see install instructions above.
d647 2
a648 2
  Since PHP does not support Unicode, the PHP/Java Bridge uses UTF-8 to
  convert characters into the host representation. All strings are
d790 1
a790 1
  Assuming that a ping to the back-end reveils an average round-trip
@


1.106
log
@Release-4-0-5
@
text
@a57 3
  The optimized implementation uses persistent connections via "named
  pipes" and runs up to 10 times faster than the generic implementation.

@


1.105
log
@Release-4-0-2
@
text
@d153 1
a153 1
    /usr/bin/php-cgi -b 127.0.0.1:9667
d155 1
a155 4
  On Windows the php-cgi.exe doesn't support the -b flag. Therefore an
  external "launcher.exe" is required; IBM Websphere users can find such
  a binary in the "PHP Integration Kit for Windows":
  PHPIntKitForWindows.zip, available from alphaworks. The command is:
d161 1
a161 1
    launcher.exe -a "c:\php\php-cgi" -b 9667
@


1.104
log
@Files update 3.2.2 to 4.0.1. Extracted from the src.tar.gz downloaded from sf.net, uploaded by Jost Boekemeier. Update to repository by Andre Felipe Machado.
@
text
@d5 2
a6 1
  connect PHP with a Java or ECMA 335 VM.
d14 3
a16 66
  Although it is possible to start Java manually or automatically as
  a sub-component of the HTTP server (see below), it is recommended to
  start the Java VM via a J2EE application server or servlet engine:

* When a native HTTP server (Apache or IIS) is not available, the
  bridge can run PHP applications within a pure Java application server
  or servlet engine using the PHP FastCGI SAPI:

   internet 
  clients 
        \                    
         \ jsp/servlet/php req.                     .
           \                                        .
            ---- :8080 -- J2EE AS                   .
           /                 |                      .
          |                  |                      .
          |                  ---- servlet         /------ :9667
          |                  ---- FastCGIServlet /  .   PHP FastCGI Server
          |                  ---- jsp               .        |
          |                  ->-- PhpJavaServlet    .        \--- php
          |                  ---- ...            \ ------->--\--- php -->|
          |                                         .  P-J-B      ...    |
          |                                         .  PROTOCOL          |
          ------------------------------<--------------------------------|
                                   P-J-B PROTOCOL   .

  * When Apache or IIS is available, the administrator may set up the
  mod_jk adapter to forward JSP/Servlet requests to the J2EE AS. In
  this setup the J2EE port is not visible to internet clients and the
  Apache/IIS document root is not used:

  internet
  clients  <->  :80---> Apache or IIS                        ----> J2EE AS
                             | |                            / /     |
                             |  mod_jk -->----------------/  /      |
                             |                              /     servlet
                             --- php                       /   PhpJavaServlet
                             --> php  ---------->---------/        jsp     |
                             /   ...      P-J-B PROTOCOL           ...     |
                           /                                               |
                          ----------------------<--------------------------|
                                          P-J-B PROTOCOL

  * Or the HTTP server and the J2EE server are both connected to the
  internet. In this setup the Apache/IIS and J2EE ports are accessible
  from the internet, they share the same document root:

              :80---> Apache or IIS
            /                |
           / php req.        ---- php
          /                  ---- php  -->----------|
                               /  ...               |
  internet                    |                     |
  clients                     -------<--------|     |
          \                    P-J-B PROTOCOL |     |
           \jsp/servlet req.                  |     |
            \                                 |     |
             |--> :8080--> J2EE AS            |     |
              /                |              |     |
             /                 \--- servlet   |     |
             |                 \--- PhpJavaServlet  |
             |                 \--- jsp             |
             |                      ...             |
             -------------<-------------------------|
                    P-J-B PROTOCOL
  
d18 3
a20 2
Build and execution instructions:
---------------------------------
d22 1
a22 25
  NOTE: The folder "java" contains a pure PHP implementation of the
  PHP/Java Bridge. It is currently 2 to 10 times slower than the C based
  implementation but easier to install. See the java/README for
  details. The following describes the C based implementation.

  NOTE: If you run Security Enhanced Linux, you must update the policy
  and tag the files with the correct SEL contexts, please see below, or 
  please install the binary RPM instead.


  In the directory php-java-bridge-p.x.y type:

          java -version        # 1.4.2 or above (JDK or JRE >= 1.6 recommended)
          gcc --version        # 3.3.3 or above (4.1.x recommended)
          apachectl -version   # Apache 1.3 or above (2.x recommended)
          php-config --version # PHP 4.3.4 or above (5.x or 6.x recommended)
          make null --version  # GNU make
          autoconf --version   # GNU autoconf 2.57 or higher
          automake --version   # GNU automake 1.6.3 or higher
          libtool --version    # GNU libtool 1.4.3 or higher

          phpize &&
          ./configure --with-java=<JDK_HOME>[,<JRE_HOME>] &&
          make &&
          su -c "sh install.sh"
d24 2
a25 3
  Example:
       
          phpize &&./configure --with-java=/opt/jdk1.4 && make && sh install.sh
d27 1
a28 3
  If your administrator allows you to dynamically load extensions, you
  can now test the extension by invoking the test.php with the 
  command: php ./test.php.
d30 2
a31 2
  Please see the output of ./configure --help=recursive for further
  configure options.
a32 1
  Please see the INSTALL document for detailed instructions.
d34 2
a35 3
------------------------------------
   Permanently activate the module
   -------------------------------
d37 2
a38 4
  The bridge consists of two parts, the "front-end", usually Apache,
  PHP and our PHP java extension, and a "back end". The following
  describes how to start the back end (if necessary) and how to configure
  PHP so that it connects to the back end.
d40 3
a42 4
  To permanently activate the extension for all users, please add the
  following lines to the php.ini. Or add a file java.ini to the
  directory that contains the PHP module descriptions, usually
  /etc/php.d/, with the following content:
d44 1
a44 1
  extension = java.so ;; php_java.dll on windows
d46 5
a51 5
  To direct the extension to a specific back end, add the following 
  options to the global php.ini file. Or add a file java-<backend>.ini,
  e.g. "java-tomcat.ini" or "java-standalone.ini" to the directory that
  contains the PHP module descriptions, usually /etc/php.d/, with the
  following content. Options:
d53 2
a54 2
  1) java.socketname, java.hosts and java.servlet not set: local
  back end which starts automatically (default). Example #1:
d56 1
a56 1
  ;; empty
d58 2
d61 3
a63 46
  Example #2 uses java.java_home, java.java to set the java
  executable.
 
  [java]
  java.java_home = /opt/jdk1.5
  java.java      = /opt/jdk1.5/bin/java
  java.log_file  = /var/log/php-java-bridge.log
  java.log_level = 2
 
 
  2) java.socketname set: local system back end started by the
  system "php-java-bridge" service script. Deprecated: You need a
  service script for your operating system.
 
 
  3) java.hosts set: external back end(s) on different server
  machines. The back ends can be started on these servers with e.g.:
  java -jar JavaBridge.jar. Example:
 
  [java]
  java.hosts     = 192.168.5.203:9267 192.168.5.204:9267
  java.log_level = 3
 
 
  4) java.hosts=127.0.0.1:<port> and java.servlet=User: user
  back end(s) deployed into a local j2ee application server with a shared
  document root directory (see DocumentRoot setting in the
  httpd.conf). Several JavaBridge back ends, e.g. "MyBridge.war" or
  "Bridge31.war", can coexist in the same j2ee server. If the Apache or
  IIS server uses the same document root as the j2ee server, the
  front-end automatically connects to the associated "MyBridge" or
  "Bridge31" back end. Example:
 
  [java]
  java.hosts     = 127.0.0.1:8080
  java.servlet   = User
  java.log_level = 3
 
 
  5) java.hosts set and java.servlet=On: "JavaBridge.war" back end
  deployed into a j2ee application server or servlet engine. Example:
 
  [java]
  java.hosts     = 127.0.0.1:8080
  java.servlet   = On
  java.log_level = 3
d65 1
a65 26
 
  6) Standalone java application (see JSR223) or AS or servlet engine
  without Apache or IIS front-end. A PHP server can be started with the
  command (e.g.): REDIRECT_STATUS=200 X_JAVABRIDGE_OVERRIDE_HOSTS="/"
  PHP_FCGI_CHILDREN="20" PHP_FCGI_MAX_REQUESTS="5000" php-cgi -c
  java.ini -b 127.0.0.1:9667. php-cgi starts automatically, if no PHP
  server is listening on port 9667. Usually the bridge uses the official
  HTTP port to connect PHP with the server. However, when no official
  HTTP port exists, or if the init-param "override_hosts" is switched
  off in the servlet's WEB-INF/web.xml, the the bridge can use a
  dedicated local port# to connect PHP with Java:
  
  Example tomcat conf/server.xml setting which opens the local port 9157:

  <Service name="Catalina">
     [...]
     <!-- Local communication port used by the PHP/Java Bridge -->
     <Connector port="9157" address="127.0.0.1"  />
     [...]
  </Service>
 
  The corresponding php.ini setting uses this port:

  [java]
  java.hosts = 127.0.0.1:9157
  java.servlet = User
d67 2
d70 1
a70 2
  After you have created the correct .ini entries, start the
  back end. Example for option:
d72 1
a72 6
  #1: Not needed, back end starts automatically
  #2: <depends on the operating system>
  #3: java -jar JavaBridge.jar INET:9267 3 php-java-bridge.log
  #4: service tomcat5 restart
  #5: service tomcat5 restart
  #6: Not needed, back end is the calling VM 
a73 6
  The Linux RPM binaries use the following options:

  php-java-bridge*.rpm            : Option #1
  php-java-bridge-tomcat*.rpm     : Option #5
  php-java-bridge-devel*.rpm      : Option #6
   
d75 1
a75 1
  Check the status:
d77 2
a78 1
  echo "<?php phpinfo()?>" | php | fgrep "java status"
d80 1
a80 17
  Other configuration options which should have been set up by the
  configure script but which can be changed later are:

  java.libpath   = <system dependent path to natcJavaBridge.so>
  java.classpath = <system dependent path to JavaBridge.jar>
  java.java_home = <system dependent path to the java install dir>
  java.java      = <system dependent path to the java binary>
  java.socketname= <local ("unix domain") communication channel>
  java.hosts     = <add. back ends e.g.: server1:9267 server2:9268>
  java.servlet   = <On/Off/User>, see NEWS for version 3.0.2
  java.wrapper   = Reserved for OS vendor

  java.persistent_connections = <On/Off>, see NEWS for version 3.1.0
  java.security_policy        = <On/Off/Path>, see NEWS for version 3.1.0

  Please first look at the output of phpinfo() to see the original
  values.  
d86 5
a90 8
  When the java.socketname and java.hosts options are not set, the web
  server will start or re-start the bridge (and a VM, if necessary)
  automatically as a sub component when the HTTP service is started or
  re-started.

  However, when running the bridge in a production environment, it is
  recommended to start Java from a separate service script. Tomcat5 for
  example contains such a service script for Windows and Linux/Unix.
d92 4
a129 21
------------------------------------
  64 Bit issues
  -------------
  
  It is possible to compile the bridge into 64 bit code:

          phpize && ./configure --with-java=$JAVA_HOME
          make CFLAGS="-m64"
  
  The scripts expect that the default JVM found in
  $JAVA_HOME/bin/java is a 64 bit VM. Unfortunately this is not true
  for the SUN JDK (Linux and Solaris) installation. The SUN JDK
  installs the 64 bit VM in some sub-directory of $JAVA_HOME/bin. On
  Solaris9 this is $JAVA_HOME/bin/sparcv9. The location on Linux may
  depend on the architecture.

  Since there is no standard installation directory and we cannot
  blindly search all sub-directories, it is your job to direct the
  bridge to the 64 bit JVM.  The relevant php.ini entry is java.java,
  see install instructions above.

d131 2
a132 2
  AS/Servlet with PHP CGI
  -----------------------
d151 1
a151 1
    export PHP_FCGI_CHILDREN="20"
d162 1
a162 1
    set PHP_FCGI_CHILDREN "20"
d229 2
a230 1
  During compilation you can use the following CFLAGS.
a282 8
---------------------------------------------
  GCJ/GNU Java issues
  -------------------
  
  Running the PHP/Java Bridge under GCJ ("GNU Java") is supported on Linux
  and Solaris only.  If you run FreeBSD 5.3, please use Sun, Blackdown
  or IBM java instead.

d397 1
a397 1
  property -Dphp.java.bridge.base. It defaults to user.home/lib. When
d401 2
a402 11
  c:\php. For example the php.ini setting extension_dir=x:/php sets the
  back end system property: -Dphp.java.bridge.base=x:/php. The command:
  "java -jar JavaBridge.jar INET:0 3" displays the default values for
  php.java.bridge.base and java.ext.dirs.
  
  Impure java libraries (=libraries which use the java native interface)
  must be stored in java.ext.dirs or in the php.java.bridge.base/lib
  directory. Shared libraries (on windows: "DLL's") required by the
  impure java libraries must be stored in the java.library.path, which
  is usually the PHP extension_dir directory.

d555 33
@


1.103
log
@Release-3-2-1
@
text
@d7 1
a7 2
  Please read the ABOUT.HTM contained in the download archive or
  http://php-java-bridge.sf.net for more information.
d84 1
a84 1
  PHP/Java Bridge. It is currently 10 times slower than the C based
d202 8
a209 7
  command (e.g.): X_JAVABRIDGE_OVERRIDE_HOSTS="/" PHP_FCGI_CHILDREN="20"
  PHP_FCGI_MAX_REQUESTS="5000" php-cgi -c java.ini -b 127.0.0.1:9667. 
  php-cgi starts automatically, if no PHP server is listening on port 9667.
  Usually the bridge uses the official HTTP port to connect PHP with the 
  server. However, when no official HTTP port exists, or if the init-param
  "override_hosts" is switched off in the servlet's WEB-INF/web.xml, the
  the bridge can use a dedicated local port# to connect PHP with Java:
d341 4
a344 4
  Please deploy the JavaBridge.war into the Tomcat or J2EE server (see
  FAQ section in the ABOUT.HTM), then visit
  http://localhost:8080/JavaBridge and run the supplied JSP and PHP
  examples.
d353 1
d364 1
a429 21
  Loading on-demand with dl()
  ---------------------------

  It is possible to load the bridge for each new request, for example
  with:

    <?php
    if (!extension_loaded('java')) {
      if (!dl("java.so")) {
        exit(1);
      }
    }
    phpinfo();
    ?>

  However, this feature is meant for testing, only.  For a production
  system it is recommended to compile PHP in safe mode (which switches
  off the dl() function) and to activate all modules in the global
  PHP ini file.

------------------------------------
d603 14
a616 6
  /usr/share/java/ext or extension_dir/lib or, for the J2EE/servlet
  back end, WEB-INF/lib. Libraries in these directories are
  automatically loaded by a static loader whenever the JVM starts. --
  The location of the extension_dir depends on the PHP .ini
  extension_dir setting, it is usually /usr/lib/php/modules or c:\php.

d618 1
a618 1
  must be stored in /usr/share/java/ext or in the PHP extension_dir/lib
d626 1
a626 1
  extension_dir/lib/ directory or in a sub directory of
d637 1
a637 1
  run-time, if the PHP files contain the command:
d678 7
a684 3
    /usr/share/java/ext or in the PHP extension_dir/lib directory. Hot
    deployment is not possible because all classes are loaded when the
    VM starts.
d687 4
a690 4
  use the java native interface into the PHP extension_dir/lib directory
  or into /usr/share/java/ext. All other libraries can go into a project
  specific directory within extension_dir/lib/ or /usr/share/java/ and
  be loaded on-demand.
d884 1
d886 2
a887 2
  Running PHP in a J2SE environment
  ---------------------------------
d889 18
a906 4
  Since Java 1.6 the JSR 223 script interface is available. To run PHP
  within a J2SE environment, the JavaBridge.jar and the php-script.jar
  must be in the J2SE class path. On Unix or Linux these libraries can
  be copied to /usr/java/packages/lib/ext/.
d908 1
a908 1
  The command:
d910 11
a920 1
    jrunscript -l php phpFile.php 
d922 16
a937 18
  or:

    jrunscript -Dphp.java.bridge.php_exec=/usr/bin/php-cgi -l php phpFile.php

  can be used to evaluate PHP files from Java.

  The optional Invocable interface is also supported. However, the PHP
  scripts must be invocable. Invocable PHP scripts must end with the
  line:

   java_context()->call(java_closure());

  The PHP procedures java_context() and java_closure() are exported
  from the pure PHP/Java Bridge implementation "java/Java.php" and from
  the C based PHP "Java extension" ("java.so" or "php_java.dll"). 

  Please see the PHP Java Server Faces implementation for details how
  to define, and how to invoke PHP "beans" from a Java framework.
@


1.102
log
@Release-3-2-1
@
text
@d97 1
a97 1
          gcc --version        # 3.2.3 or above (4.1.x recommended)
@


1.101
log
@Release-3-2-1
@
text
@d129 3
a131 3
  PHP and our PHP java extension, and a "back-end". The following
  describes how to start the back-end (if necessary) and how to configure
  PHP so that it connects to the back-end.
d141 1
a141 1
  To direct the extension to a specific back-end, add the following 
d148 1
a148 1
  back-end which starts automatically (default). Example #1:
d163 1
a163 1
  2) java.socketname set: local system back-end started by the
d168 2
a169 2
  3) java.hosts set: external back-end(s) on different server
  machines. The back-ends can be started on these servers with e.g.:
d178 1
a178 1
  back-end(s) deployed into a local j2ee application server with a shared
d180 1
a180 1
  httpd.conf). Several JavaBridge back-ends, e.g. "MyBridge.war" or
d184 1
a184 1
  "Bridge31" back-end. Example:
d192 1
a192 1
  5) java.hosts set and java.servlet=On: "JavaBridge.war" back-end
d205 1
a205 1
  php-cgi starts automatically if no PHP server is listening on port 9667.
d207 1
a207 1
  server. However, when no official HTTP port exists or if the init-param
d228 1
a228 1
  back-end. Example for option:
d230 1
a230 1
  #1: Not needed, back-end starts automatically
d235 1
a235 1
  #6: Not needed, back-end is the calling VM 
d256 1
a256 1
  java.hosts     = <add. back-ends e.g.: server1:9267 server2:9268>
a313 83
  Sample settings for Apache/Tomcat
  ---------------------------------

  Assuming that tomcat is installed (e.g. in /opt/tomcat5),
  MyJavaBridge.war is deployed (e.g. in /opt/tomcat5/webapps), java.so
  (or php_java.dll) is installed in the php modules directory (e.g. in
  /usr/lib/php/modules/), mod_jk and php5 are installed in the apache modules
  directory (e.g. in /usr/lib/httpd/modules/), we recommend following
  settings:


  The following settings in httpd.conf direct all .jsp requests to the
  tomcat servlet engine and all .php requests to the php module:

    httpd.conf:
    ----------
    LoadModule php5_module        modules/libphp5.so
    LoadModule jk_module          modules/mod_jk.so

    AddType application/x-httpd-php .php
    JkAutoAlias /opt/tomcat5/webapps
    JkMount /MyJavaBridge/*.jsp ajp13
    JkMount /MyJavaBridge/ ajp13


  The following settings in php.ini direct all php "Java(...)" calls to
  the tomcat servlet engine:

    php.ini:
    --------
    extension = java.so
    ;; on windows: extension = php_java.dll
    [java]
    java.hosts     = "127.0.0.1:8080"
    java.servlet   = User ;; or: /MyJavaBridge/JavaBridge.phpjavabridge

  To check the above settings, please visit http://localhost/MyJavaBridge/
  and run the sessionSharing.jsp and sessionSharing.php examples.

  Please don't misunderstand the role of the mod_jk adapter. 
  It is only used to "mount" the tomcat webapps directory into apache and
  to forward requests for .jsp files.  The mod_jk adapter does this by
  "copying" the non jsp files from the tomcat webapps directory into
  the apache document root directory at run-time.

  A more reasonable approach would be to remove mod_jk, to create a
  shared web directory for tomcat and apache and to forward to the
  "back-end", when necessary:

              :80---> Apache or IIS
            /                |
           / php req.        ---- php
          /                  ---- php  -->----------|
              |                /  ...               |
  internet    | forward       |                     |
  clients     v               -------<--------|     |
          \                    P-J-B PROTOCOL |     |
           \jsp/servlet req.                  |     |
            \                                 |     |
             |--> :8080--> J2EE AS            |     |
              /                |              |     |
             /                 \--- servlet   |     |
             |                 \--- PhpJavaServlet  |
             |                 \--- jsp             |
             |                      ...             |
             -------------<-------------------------|
                    P-J-B PROTOCOL
  
  Most modern frameworks, Java Server Faces for example, require that
  you manually forward to the "back-end", anyway. The code would look
  like:

  <?php
   ...
   function jsfValidateEntry($ctx, $arg, $value) { ...}

   // check if we're called from the framework, forward if call failed.
   java_context()->call(java_closure()) || header("Location: index.jsf");
  ?>
   
  So you probably won't miss mod_jk's automatic forward.

------------------------------------
d341 3
a343 2
  Please follow the AS or Tomcat installation instructions above, then
  visit http://localhost:8080/JavaBridge and run the supplied JSP and PHP
d347 1
a347 1
  web.xml and a fcgi server does not listen on port 9667 and a fcgi
d349 2
a350 2
  then the back-end automatically starts the Fast- CGI server on this
  computer, with the command:
d370 1
a370 1
  and stops when the VM or web context terminates.
d381 1
a381 1
  in the directory WEB-INF/cgi/. On Unix the binary must be executable, it
d492 1
a492 1
  back-end uses the "default" log level supplied when the back-end was
d602 1
a602 1
  It is recommended to use the local back-end on a Unix machine which
d606 2
a607 2
  is standard since RHEL4 or FC3, the back-end is also protected by the
  SEL policy. The servlet back-end uses a HTTP tunnel to execute one
a616 36
  Sun java platform issues
  ------------------------

  The sun java platform does not support java "modules". This causes
  certain problems when running java programs. When you compile a class
  foo which references a class bar and ship the class foo without
  providing bar, the sun java platform will not complain unless the user
  accidentally calls a method which references the non-existing class. If
  this happens, a "NoClassDefFound" error is thrown. This error may
  not(!) indicate which class is missing and it certainly does not
  indicate which external library is missing. The tests.php4 folder
  contains two tests, noClassDefFound.php and noClassDefFound2.php which
  demonstrate this.

  To avoid this problem please document *exactly* (including the
  version number) which external libraries (.jar files) your software
  needs. If you have written software where certain methods require an
  optional library, please document this in the method header.

  If receive this error when using a Java library, this may mean the
  following:

    * an old or different JDK than expected by the library is used,
      for example GNU Java instead of SUN or IBM Java.

    * java_require("foo.jar"); java_require("bar.jar"); was used instead of
      java_require("foo.jar;bar.jar"); to load two interconnected libraries.

    * the library is simply broken or it expects certain parameters in
      its environment (applet parameter or system property or property file).

    * the library may only work within a J2EE environment from a
      certain vendor, for example the WebSphere Application server or
      the Sun Java Application server.

------------------------------------
d620 19
a638 20
  It is recommended to copy all Java libraries and Java classes
  into the WEB-INF/lib or WEB-INF/classes directories within
  JavaBridge.war and to deploy JavaBridge.war into your J2EE server
  or servlet engine. Unlike .NET or Mono the SUN Java implementation
  doesn't integrate well with the host operating system. A Java
  "operating environment" on top of the host operating system is
  needed to hidesthe problems connected with different class versions
  or different Java class loaders.

  If you don't want to install an J2EE application server or servlet
  engine, read on.
  
  The traditional way to add libraries to the Java VM is to modify the
  CLASSPATH, reflected by the java.classpath setting:

    java.classpath="/tmp/JavaBridge.jar:/tmp/myClasses.jar"

  This solution is not recommended. First of all this is not portable,
  Unix uses a ":" while Windows uses ";" and the php.ini parser
  interprets an unquoted semi-colon as the start of a comment line.
d640 1
a640 28
  Since Java 1.3 the Java VM support an module directory per VM, usually
  located in $JAVA_HOME/jre/lib/ext. The system property "java.ext.dirs"
   
    $Sys = new JavaClass("java.lang.System");
    echo $Sys->getProperty("java.ext.dirs");

  points to this directory. The problem with this solution is that
  the repository is not shared.

  The free Java world (GNU Java, GCC, classpath, ...) have
  introduced a shared, global repository for all Java implementations as
  well as mechanisms how to manage the libraries, see jpackage.org for
  details. However, the upcoming Sun Java 1.6 implementation ignores this
  solution and introduces a "global" repository located in
  /usr/java/packages/lib/ext. The problem with the Sun solution is that
  nobody uses it.

  Since the PHP/Java Bridge cannot force users to install a J2EE
  server or servlet engine and PHP users usually expect practical
  solutions, the PHP/Java Bridge contains a static loader as well as a
  dynamic loader. The static loader loads all Java libraries from
  /usr/share/java/ext and /usr/java/package/lib/ext and from the PHP
  extension_dir/lib directory. The dynamic loader can load Java
  libraries at run-time, either from the PHP extension_dir/lib or from
  the /usr/share/java repository or from a specified directory:
  
    java_require("c:/foo.jar");
    $foo = new Java("Foo");
d670 1
a670 46

  Disadvantages of the J2EE server or servlet engine:

  <none>


  Disadvantages of the PHP/Java Bridge static- and dynamic loader:

  * The naive method to load two interconnected libraries doesn't work as
    expected:

    java_require("foo.jar"); java_require("bar.jar");
    $foo = new Java("foo");
    $bar = $foo->getBar(); // ERROR: Unsatisfied link error

    The above code doesn't work because classes loaded from foo.jar cannot
    see the classes from bar.jar, because both were loaded via two isolated
    class loaders. 

  * Users who are unaware of the Sun Java class loading issues may
    ignore it. For example the following code doesn't use the dynamic
    loader and therefore doesn't work as expected:

    java_require("mm.mysql-2.0.4-bin.jar");
    $C = new JavaClass("java.lang.Class");
    $Class = $C->forName("org.gjt.mm.mysql.Driver"); // ERROR: ClassNotFound
   
    doesn't work because $Class->forName() loads the driver using the
    default ("bootstrap") loader, which has no access to the loader of
    the mysql library. The above code should have been written as 
      
    java_require("mm.mysql-2.0.4-bin.jar");
    $C = new JavaClass("java.lang.Class");
    $Thread = new JavaClass("java.lang.Thread");
    $t = $Thread->currentThread();
    // now load the driver from the dynamic class loader
    $C->forName("org.gjt.mm.mysql.Driver", false, $t->getContextClassLoader());
    $C->newInstance();

    or simply

    java_require("mm.mysql-2.0.4-bin.jar");
    new Java("org.gjt.mm.mysql.Driver");


  Disadvantages of the PHP/Java Bridge dynamic loader:
a680 1

d699 73
d892 32
@


1.100
log
@Release-3-1-8
@
text
@d696 37
a732 1
  the range [9167, ..., 9667] cannot be accessed from the interned.
d738 49
a786 21
  Java libraries should either be translated into PEAR classes (see
  above) or be installed in one of the following directories:
  /usr/share/java/ext or extension_dir/lib or, for the J2EE/servlet
  back-end, WEB-INF/lib. Libraries in these directories are
  automatically loaded by a static loader whenever the JVM starts. --
  The location of the extension_dir depends on the PHP .ini
  extension_dir setting, it is usually /usr/lib/php/modules or c:\php.

  Impure java libraries (=libraries which use the java native interface)
  must be stored in /usr/share/java/ext or in the PHP extension_dir/lib
  directory. Shared libraries (on windows: "DLL's") required by the
  impure java libraries must be stored in the java.library.path, which
  is usually the PHP extension_dir directory.

  Java libraries can also be loaded or re-loaded on demand by a
  dynamic loader. They should have the following file name:
  <name>-<version>.jar and be stored in a sub directory of the PHP
  extension_dir/lib/ directory or in a sub directory of
  /usr/share/java directory. For example:

    /usr/share/java/batStore/batStore-1.0.jar.
d816 46
a861 1
  Disadvantages of the dynamic loader:
d872 1
a891 36
  Sun java platform issues
  ------------------------

  The sun java platform does not support java "modules". This causes
  certain problems when running java programs. When you compile a class
  foo which references a class bar and ship the class foo without
  providing bar, the sun java platform will not complain unless the user
  accidentally calls a method which references the non-existing class. If
  this happens, a "NoClassDefFound" error is thrown. This error may
  not(!) indicate which class is missing and it certainly does not
  indicate which external library is missing. The tests.php4 folder
  contains two tests, noClassDefFound.php and noClassDefFound2.php which
  demonstrate this.

  To avoid this problem please document *exactly* (including the
  version number) which external libraries (.jar files) your software
  needs. If you have written software where certain methods require an
  optional library, please document this in the method header.

  If receive this error when using a Java library, this may mean the
  following:

    * an old or different JDK than expected by the library is used,
      for example GNU Java instead of SUN or IBM Java.

    * java_require("foo.jar"); java_require("bar.jar"); was used instead of
      java_require("foo.jar;bar.jar"); to load two interconnected libraries.

    * the library is simply broken or it expects certain parameters in
      its environment (applet parameter or system property or property file).

    * the library may only work within a J2EE environment from a
      certain vendor, for example the WebSphere Application server or
      the Sun Java Application server.

------------------------------------
@


1.99
log
@Release-3-1-8rc3
@
text
@d577 10
@


1.98
log
@Release-3-1-8rc1
@
text
@d7 3
a80 5
NOTE: The folder "java" contains a pure PHP implementation of the
PHP/Java Bridge. It is currently 10 times slower than the C based
implementation but easier to install. See the java/README for
details. The following describes the C based implementation.

d83 6
a259 1
  java.ext_java_compatibility = <On/Off>, backward compatibility with ext/java
d430 3
a432 3
  binary can be found as either /usr/bin/php-cgi or /usr/bin/php or
  c:/php/php-cgi.exe, then the back-end automatically starts the Fast-
  CGI server on this computer, with the command:
d451 1
a451 1
  The PHP FastCGI server starts when the VM or the web context starts
d857 70
@


1.97
log
@Release-3-1-8rc
@
text
@d748 1
a748 1
    java_require() syntax.
@


1.96
log
@Release-3-1-8devel1
@
text
@d220 1
a220 2
  java.servlet = On
  java.log_level = 3
@


1.95
log
@Release-3-1-7
@
text
@d78 5
d89 1
@


1.94
log
@Release-3-1-7
@
text
@d5 1
a5 1
  connect PHP with a java or ECMA 335 VM.
d87 1
a87 1
          gcc --version        # 3.2.3 or above (4.0.x recommended)
d121 1
a121 1
  the front-end so that it connects to the back-end.
d131 2
a132 2
  To direct the extension to a specific back-end, please add the
  following lines to the php.ini. Or add a file java-<backend>.ini,
d154 2
a155 8
  system "php-java-bridge" service script. Example:
 
  [java]
  java.java_home  = /opt/jdk1.5
  java.java       = /opt/jdk1.5/bin/java
  java.log_file   = /var/log/php-java-bridge.log
  java.log_level  = 3
  java.socketname = /var/run/.php-java-bridge_socket
d159 2
a160 2
     machines. The back-ends can be started on these servers with e.g.:
     java -jar JavaBridge.jar. Example:
d196 13
d210 2
d213 2
d222 1
a222 1
  #2: service php-java-bridge restart (see [note: SERVICE] below)
a230 1
  php-java-bridge-standalone*.rpm : Option #2
d263 3
a265 2
  server will start or re-start the bridge automatically as a sub
  component when the HTTP service is started or re-started.
d353 24
a376 3
  "back-end", when necessary. Most modern frameworks, Java Server Faces
  for example, require that you manually forward to the "back-end",
  anyway. The code would look like:
a415 7
  It is possible to run PHP from java. Unlike the JSR223 sample
  implementation, which uses the JNI interface to load/call the native
  PHP5 shared library, we use the Fast CGI interface to call the PHP
  binary and use a local channel to connect the two components. This is
  more reliable; in case a PHP instance crashes, it will not take down
  the whole servlet engine or application server.
  
d423 1
a423 1
  c:/php/php-cgi.exe, then the back-end automatically starts the fast
d432 13
a444 1
  It starts when the VM starts and stops when the VM terminates.
d545 2
a546 2
  Log levels
  ----------
d625 1
a625 1
     specifies that when an executable is called from the initrc_t domain
d629 1
a629 1
     initrc_t domain:
d632 1
a632 1
        chcon -t initrc_exec_t /etc/init.d/php-java-bridge
a647 13
  [note: SERVICE] A domain transition occurs only if the RunJavaBridge 
  executable is called from the initrc_t domain. If you want to start
  the /usr/sbin/php-java-bridge script manually, use runcon or newrole:

        su -                                      # become super user
        newrole -t initrc_t                       # change domain
        kill `cat /var/run/php-java-bridge.pid`   # terminate the old process
        /usr/sbin/php-java-bridge                 # start a new back-end

  or simply use the service script:

        service php-java-bridge restart

d685 1
a685 1
  above) or be installed into one of the following directories: :
d688 3
a690 1
  automatically loaded by a static loader whenever the JVM starts.
d699 1
a699 1
  dynamic loader.. They should have the following file name:
d747 5
d755 1
a755 1
    JVM starts.
d783 16
d800 1
a800 1
  PHP 5 issues
d803 2
a804 3
  All PHP 5 versions < 5.0.4 crash when the dl() function is
  used. They first unload the module and then try to invoke its
  shutdown method.
@


1.93
log
@Release-3-1-6
@
text
@d39 1
a39 1
  this setup the J2EE port not visible to internet clients and the
d54 1
a54 1
  * The HTTP server and the J2EE server are both connected to the
d77 1
@


1.92
log
@Release-3-1-4
@
text
@a6 2
  Please read the ABOUT.HTM contained in the download archive or
  http://php-java-bridge.sf.net for more information.
d8 2
d11 66
@


1.91
log
@Release-3-1-0
@
text
@d190 2
a191 1
  recommended to use a J2EE back-end, Tomcat5 for example.
d593 17
a609 8
  Although it is possible to manipulate the java.classpath to direct
  java to individual classes, this "feature" should not be used.

  Pure java libraries (or shared libraries under GNU Java "gcj") should be 
  stored in one of the system directories, either /usr/share/java (or one of 
  its sub-directories) or java.libpath/lib (or one of its sub-directories) 
  or WEB-INF/lib (when the back-end is deployed as a web application) and 
  they shall have the following name: <name>-<version>.jar.  For example:
a612 9
  The global repository /usr/share/java should be used if the library
  is for general interest, otherwise the PHP extension_dir/lib
  repository may be used (see phpinfo() command).
  
  When Security Enhanced Linux is configured to allow the PHP/Java
  Bridge to make HTTP URL connections to different servers or if
  Security Enhanced Linux is switched off in the Linux kernel, java
  libraries may also be loaded from HTTP URLs.

d618 2
a619 2
  The libraries can be linked into the PHP files at run-time with the
  command:
d623 1
a623 2
  Note that <library> can also be a directory containing either .class
  or .jar files.
d636 28
a663 10
  Minor upgrades can be installed at run-time. When the dynamic loader
  detects that the time stamp of the .jar file has changed, it
  automatically loads the new version.

  Note that the dynamic loader can only load pure java libraries,
  unless GNU Java is used. Java libraries which use the java native
  interface ("JNI") must be copied to the extension_dir/lib directory,
  DLL's or shared libraries to extension_dir or java.libpath.
  Please look up the values for extension_dir and java.libpath in
  the output from the test.php script or from phpinfo().
@


1.90
log
@Release-3-1-0
@
text
@d133 1
a133 1
  PHP_FCGI_MAX_REQUESTS="50000" php-cgi -c java.ini -b 127.0.0.1:9667. 
d174 4
d192 34
d231 1
a231 1
  JavaBridge.war is deployed (e.g. in /opt/tomcat5/webapps), java.so
d248 2
a249 2
    JkMount /JavaBridge/*.jsp ajp13
    JkMount /JavaBridge/ ajp13
d261 1
a261 1
    java.servlet   = User ;; or: /JavaBridge/JavaBridge.phpjavabridge
d330 1
a330 1
  c:/php5/php-cgi.exe, then the back-end automatically starts the fast
d336 1
a336 1
    export PHP_FCGI_MAX_REQUESTS="50000"
d443 1
a443 1
  You can set the java.log_level to 6 values:
d451 1
a451 1
   3: Log verbose, e.g.: "loading jar xyz.jar from http://xy.com"
d455 4
a458 1
   5: Log method invocations. 
d604 2
a605 3
  is for general interest, otherwise the java.libpath/lib repository may
  be used.  Please look up the java.libpath from the output
  of the test.php or from phpinfo().
d615 1
a615 2
    jar cvf myLibrary-0.1.jar *.class 
  
d629 1
a629 1
      java_require("j2ee.jar;batStore/batStore-1.0.jar");
d631 3
a633 1
      order(...);
d642 4
a645 3
  interface ("JNI") must be placed in /usr/java/packages/lib/ext/ (if JDK
  1.6 or higher is used) or hard-coded via java.classpath. The JNI
  libraries themselves can be installed in java.libpath.
@


1.89
log
@Release-3-1-0
@
text
@d19 1
a19 1
          java -version        # 1.4.2 or above (JRE >= 1.6 recommended)
d24 3
d29 1
a29 1
          ./configure --with-java=/usr/java/default &&
d33 5
d234 5
a238 7
  A more reasonable approach would be to remove mod_jk and to create a
  shared web directory for tomcat and apache. This is the default since
  Red Hat Fedora 4.

  Most modern frameworks, Java Server Faces for example, require that
  you manually forward to the "back-end", anyway. The code would look
  like:
@


1.88
log
@Release-3-1-0
@
text
@d125 1
a125 1
  PHP_FCGI_MAX_REQUESTS="500" php-cgi -c java.ini -b 127.0.0.1:9667. 
d185 1
a185 1
  MyJavaBridge.war is deployed (e.g. in /opt/tomcat5/webapps), java.so
d215 1
a215 1
    java.servlet   = User ;; or: /MyJavaBridge/JavaBridge.php
d292 1
a292 1
    export PHP_FCGI_MAX_REQUESTS="500"
d654 1
a654 1
    $str=new Java ("java.lang.String", "Cześć! -- שלום -- Gr");
d665 1
a665 1
    $str=new Java ("java.lang.String", "Cześć! -- שלום -- Gr");
@


1.87
log
@Release-3.0.8
@
text
@d23 1
a23 1
          make null --version  # GNU make 3.79 or above
d25 1
a25 1
          phpize && 
d37 2
d136 1
a136 1
  #2: /usr/sbin/php-java-bridge (see [note: SERVICE] below)
d502 6
a507 2
        kill `cat /var/run/php-java-bridge.pid`   # kill old executable
        /usr/sbin/php-java-bridge                 # start new back-end
@


1.86
log
@Release-3.0.8test1
@
text
@d41 4
a44 4
  The bridge consists of two parts, the "frontent", usually Apache,
  PHP and our php java extension, and a "backend". The following
  describes how to start the backend (if necessary) and how to configure
  the frontend so that it connects to the backend.
d48 1
a48 1
  directory that contains the php module descriptions, usually
d54 1
a54 1
  To direct the extension to a specific backend, please add the
d57 1
a57 1
  contains the php module descriptions, usually /etc/php.d/, with the
d61 1
a61 1
  backend which starts automatically (default). Example #1:
d76 1
a76 1
  2) java.socketname set: local system backend started by the
d87 3
a89 3
  3) java.hosts set: external backend(s) on different server(s). The
  backends can be started on these servers with e.g.: java -jar
  JavaBridge.jar. Example:
d96 2
a97 2
  4) java.hosts=127.0.0.1:<port> and java.servlet=MultiUser: user
  backend(s) deployed into a local j2ee application server with a shared
d99 1
a99 1
  httpd.conf). Several JavaBridge backends, e.g. "MyBridge.war" or
d102 2
a103 2
  frontent automatically connects to the associated "MyBridge" or
  "Bridge31" backend. Example:
d107 1
a107 1
  java.servlet   = MultiUser
d111 1
a111 1
  5) java.hosts set and java.servlet=On: "JavaBridge.war" backend
d121 1
a121 1
  without Apache or IIS frontend. A PHP server can be started with the
d131 1
a131 1
  backend. Example for option:
d133 2
a134 2
  #1: Not needed, backend starts automatically
  #2: /usr/sbin/php-java-bridge
d138 1
a138 1
  #6: Not needed, backend is the calling VM 
d160 2
a161 2
  java.hosts     = <add. backends e.g.: server1:9267 server2:9268>
  java.servlet   = <On/Off/MultiUser>, see NEWS for version 3.0.2
d173 1
a173 1
  component when the http service is started or re-started.
d176 1
a176 1
  recommended to use a J2EE backend, Tomcat5 for example.
d213 1
a213 1
    java.servlet   = MultiUser ;; or: /MyJavaBridge/JavaBridge.php
d226 1
a226 1
  RedHat Fedora 4.
d229 1
a229 1
  you manually forward to the "backend", anyway. The code would look
d272 1
a272 1
  php5 shared library, we use the Fast CGI interface to call the PHP
d284 2
a285 2
  c:/php5/php-cgi.exe, then the backend automatically starts the fast
  cgi server on this computer, with the command:
d296 1
a296 1
  If that failed, the bridge searches for a cgi binary called:
d304 1
a304 1
  in the directory WEB-INF/cgi/. On unix the binary must be executable, it
d335 2
a336 2
  In case your application server denies calling the cgi binary,
  either start apache or IIS or start a fast cgi server on port 9667
d369 1
a369 1
  php ini file.
d412 1
a412 1
  backend uses the "default" log level supplied when the backend was
d419 1
a419 1
  Running the PHP/Java Bridge under GCJ/GNU Java is supported on Linux
a428 2
  It is used in recent Linux distributions such as Debian or RedHat
  Fedora Core 3.
d439 1
a439 1
  "@@var/run/.php-java-bridge_socket" in the Linux abstract namespace,
d446 2
a447 4
  Installation:
  -------------
  The following discussion assumes that you have a RedHat Linux system
  and you are running SELinux with the targeted policy.
d456 28
a483 2
        su -c "sh update_policy.sh /etc/selinux/targeted/src/policy"
      
d485 1
a485 1
  the PHP/Java Bridge to connect to your J2EE server(s), you can
d494 41
d542 5
a546 5
  Custom libraries should be stored in one of the system directories,
  either /usr/share/java (or one of its sub-directories) or
  java.libpath/lib (or one of its sub-directories) or WEB-INF/lib (when
  the backend is deployed as a web application) and they shall have the
  following format: <name>-<version>.jar.  For example:
d550 1
a550 1
  The global repository /usr/share/java shall be used if the library
d557 1
a557 1
  Security Enhanced Linux is switched off in the linux kernel, java
d566 1
a566 1
  The libraries can be linked into the php files at run-time with the
d571 3
d583 9
a591 9
  Since java does not yet support library versions, the PHP/Java
  Bridge must be reset after a new library version has been deployed.
  This can be done at runtime by calling the php function
  "java_reset()".
  (The ECMA 335 CLR supports multiple class versions very well so in
  theory the problem could also be solved by compiling the .jar file
  into a ECMA 335 dll, e.g. with the command: ikvmc batStore-1.0.jar,
  and to use assembly loading instead, please see the
  tests.mono+net/load_assembly.php for details).
d601 1
a601 1
  accidently calls a method which references the non-existing class. If
a624 21
  Security issues
  ---------------

  The bridge uses abstract local sockets, named pipes (located in
  /dev/shm/ or /tmp/) or local TCP sockets as communication channels.

  It is recommended to use the local backend on a Unix machine which
  supports abstract local ("unix domain") sockets or named pipes. On
  these systems the communication channel is not visible and cannot be
  attacked. If you are running a Security Enhanced Linux kernel, which
  is standard since RHEL4 or FC3, the backend is also protected by the
  SEL policy. The servlet backend uses a HTTP tunnel to execute one
  statement and then switches to named pipes for the rest of the
  communication.

  On other systems, such as Windows and Mac OSX, the bridge opens a
  local TCP port on 9167 (MonoBridge.exe) or 9267 (JavaBridge.jar), 9567
  (JavaBridge.war) or 9667 (FastCGI). Please make sure that the ports in
  the range [9167, ..., 9667] cannot be accessed from the internet.

------------------------------------
d628 1
a628 1
  Since PHP does not support unicode, the PHP/Java Bridge uses UTF-8 to
@


1.86.2.1
log
@Release-3-0-8-1
@
text
@d41 4
a44 4
  The bridge consists of two parts, the "front-end", usually Apache,
  PHP and our PHP java extension, and a "back-end". The following
  describes how to start the back-end (if necessary) and how to configure
  the front-end so that it connects to the back-end.
d48 1
a48 1
  directory that contains the PHP module descriptions, usually
d54 1
a54 1
  To direct the extension to a specific back-end, please add the
d57 1
a57 1
  contains the PHP module descriptions, usually /etc/php.d/, with the
d61 1
a61 1
  back-end which starts automatically (default). Example #1:
d76 1
a76 1
  2) java.socketname set: local system back-end started by the
d87 3
a89 3
  3) java.hosts set: external back-end(s) on different server
     machines. The back-ends can be started on these servers with e.g.:
     java -jar JavaBridge.jar. Example:
d96 2
a97 2
  4) java.hosts=127.0.0.1:<port> and java.servlet=User: user
  back-end(s) deployed into a local j2ee application server with a shared
d99 1
a99 1
  httpd.conf). Several JavaBridge back-ends, e.g. "MyBridge.war" or
d102 2
a103 2
  front-end automatically connects to the associated "MyBridge" or
  "Bridge31" back-end. Example:
d107 1
a107 1
  java.servlet   = User
d111 1
a111 1
  5) java.hosts set and java.servlet=On: "JavaBridge.war" back-end
d121 1
a121 1
  without Apache or IIS front-end. A PHP server can be started with the
d131 1
a131 1
  back-end. Example for option:
d133 2
a134 2
  #1: Not needed, back-end starts automatically
  #2: /usr/sbin/php-java-bridge (see [note: SERVICE] below)
d138 1
a138 1
  #6: Not needed, back-end is the calling VM 
d160 2
a161 2
  java.hosts     = <add. back-ends e.g.: server1:9267 server2:9268>
  java.servlet   = <On/Off/User>, see NEWS for version 3.0.2
d173 1
a173 1
  component when the HTTP service is started or re-started.
d176 1
a176 1
  recommended to use a J2EE back-end, Tomcat5 for example.
d213 1
a213 1
    java.servlet   = User ;; or: /MyJavaBridge/JavaBridge.php
d226 1
a226 1
  Red Hat Fedora 4.
d229 1
a229 1
  you manually forward to the "back-end", anyway. The code would look
d272 1
a272 1
  PHP5 shared library, we use the Fast CGI interface to call the PHP
d284 2
a285 2
  c:/php5/php-cgi.exe, then the back-end automatically starts the fast
  CGI server on this computer, with the command:
d296 1
a296 1
  If that failed, the bridge searches for a CGI binary called:
d304 1
a304 1
  in the directory WEB-INF/cgi/. On Unix the binary must be executable, it
d335 2
a336 2
  In case your application server denies calling the CGI binary,
  either start apache or IIS or start a fast CGI server on port 9667
d369 1
a369 1
  PHP ini file.
d412 1
a412 1
  back-end uses the "default" log level supplied when the back-end was
d419 1
a419 1
  Running the PHP/Java Bridge under GCJ ("GNU Java") is supported on Linux
d429 2
d441 1
a441 1
  "@@var/run/.php-java-bridge_socket" in the Linux abstract name-space,
d448 4
a451 2
  Installation instructions for RHEL 4 and Fedora Core 4:
  -------------------------------------------------------
d460 2
a461 28
        su -c "sh security/update_policy.sh /etc/selinux/targeted/src/policy"

  Installation instructions for RHEL 5, Fedora Core 5 or above:
  -------------------------------------------------------------

  1. Create the binary policy with the command:

        cd security/module; make

  2. Inject the rules into the kernel, either the php-java-bridge-tomcat.pp 
     or the php-java-bridge.pp. For example:

        semodule -i php-java-bridge.pp 

  3. The rules apply to the javabridge_t domain. Another rule
     specifies that when an executable is called from the initrc_t domain
     and the executable is tagged as javabridge_exec_t, a domain transition
     to javabridge_t occurs. It is therefore important that RunJavaBridge
     is tagged with javabridge_exec_t and that it is called from the
     initrc_t domain:

        chcon -t javabridge_exec_t /usr/lib/php/modules/RunJavaBridge
        chcon -t initrc_exec_t /etc/init.d/php-java-bridge

  4. The policy module can be removed with the command:
  
        semodule -r javabridge
  
d463 1
a463 1
  the PHP/Java Bridge to connect to your J2EE server, you can
a471 41
  [note: SERVICE] A domain transition occurs only if the RunJavaBridge 
  executable is called from the initrc_t domain. If you want to start
  the /usr/sbin/php-java-bridge script manually, use runcon or newrole:

        su -                                      # become super user
        newrole -t initrc_t                       # change domain
        kill `cat /var/run/php-java-bridge.pid`   # kill old executable
        /usr/sbin/php-java-bridge                 # start new back-end

  Please note that SEL security is orthogonal to the standard Unix 
  security. For example you could also put the java process into 
  a "jail"; set up a user account with restricted rights, change the 
  owner of RunJavaBridge and set the SUID bit:

        chown apache:apache /usr/lib/php/modules/RunJavaBridge
        chmod 6111 /usr/lib/php/modules/RunJavaBridge

  The java process would run with the limited rights of apache *and* be 
  protected by the SEL policy.

------------------------------------
  Security issues
  ---------------

  The bridge uses abstract local sockets, named pipes (located in
  /dev/shm/ or /tmp/) or local TCP sockets as communication channels.

  It is recommended to use the local back-end on a Unix machine which
  supports abstract local ("unix domain") sockets or named pipes. On
  these systems the communication channel is not visible and cannot be
  attacked. If you are running a Security Enhanced Linux kernel, which
  is standard since RHEL4 or FC3, the back-end is also protected by the
  SEL policy. The servlet back-end uses a HTTP tunnel to execute one
  statement and then switches to named pipes for the rest of the
  communication.

  On other systems, such as Windows and Mac OSX, the bridge opens a
  local TCP port on 9167 (MonoBridge.exe) or 9267 (JavaBridge.jar), 9567
  (JavaBridge.war) or 9667 (FastCGI). Please make sure that the ports in
  the range [9167, ..., 9667] cannot be accessed from the interned.

d479 5
a483 5
  Pure java libraries (or shared libraries under GNU Java "gcj") should be 
  stored in one of the system directories, either /usr/share/java (or one of 
  its sub-directories) or java.libpath/lib (or one of its sub-directories) 
  or WEB-INF/lib (when the back-end is deployed as a web application) and 
  they shall have the following name: <name>-<version>.jar.  For example:
d487 1
a487 1
  The global repository /usr/share/java should be used if the library
d494 1
a494 1
  Security Enhanced Linux is switched off in the Linux kernel, java
d503 1
a503 1
  The libraries can be linked into the PHP files at run-time with the
a507 3
  Note that <library> can also be a directory containing either .class
  or .jar files.

d517 9
a525 9
  Minor upgrades can be installed at run-time. When the dynamic loader
  detects that the time stamp of the .jar file has changed, it
  automatically loads the new version.

  Note that the dynamic loader can only load pure java libraries,
  unless GNU Java is used. Java libraries which use the java native
  interface ("JNI") must be placed in /usr/java/packages/lib/ext/ (if JDK
  1.6 or higher is used) or hard-coded via java.classpath. The JNI
  libraries themselves can be installed in java.libpath.
d535 1
a535 1
  accidentally calls a method which references the non-existing class. If
d559 21
d583 1
a583 1
  Since PHP does not support Unicode, the PHP/Java Bridge uses UTF-8 to
@


1.86.2.2
log
@Release-3-0-8-1
@
text
@d19 1
a19 1
          java -version        # 1.4.2 or above (JDK or JRE >= 1.6 recommended)
d23 1
a23 4
          make null --version  # GNU make
          autoconf --version   # GNU autoconf 2.57 or higher
          automake --version   # GNU automake 1.6.3 or higher
          libtool --version    # GNU libtool 1.4.3 or higher
d26 1
a26 1
          ./configure --with-java=<JDK_HOME>[,<JRE_HOME>] &&
a29 4
  Example:
       
          phpize &&./configure --with-java=/opt/jdk1.4 && make && sh install.sh

a36 2
  Please see the INSTALL document for detailed instructions.

d224 7
a230 5
  A more reasonable approach would be to remove mod_jk, to create a
  shared web directory for tomcat and apache and to forward to the
  "back-end", when necessary. Most modern frameworks, Java Server Faces
  for example, require that you manually forward to the "back-end",
  anyway. The code would look like:
@


1.85
log
@Release-3.0.8pre2
@
text
@d19 1
a19 1
          java -version        # 1.4.2 or above (1.5 or 1.6 recommended)
@


1.84
log
@Release-3.0.7a
@
text
@d28 1
a28 1
          su -c "make install"
@


1.83
log
@Release-3.0.7
@
text
@d73 1
a73 1
  java.log_level = 3
d481 3
a483 2
  java.libpath/lib (or one of its sub-directories) and they shall have
  the following format: <name>-<version>.jar.  For example:
@


1.82
log
@Release-3.0.7
@
text
@d19 1
a19 1
          java -version        # 1.4 or above (1.5 or 1.6 recommended)
d26 1
a26 1
          ./configure --with-java=/opt/IBMJava2-141 &&
d46 1
a46 1
  To permanently activate the frontend for all users, please add the
d67 1
a67 2
  executable. Vendors may also set java.wrapper to set the default
  java VM options:
a125 2
  log_errors     = On
  display_errors = Off
d389 1
a389 5
      systems which support them. This is needed on FreeBSD if the java VM
      is a linux executable. It is also needed on those Mac OSX platforms
      which use special JNI libraries (Apple has made some incompatible
      and undocumented changes to the JNI header structure so that we cannot
      use the standard Sun or GNU Java JNI to create the natcJavaBridge.so).
d611 1
a611 1
  should have been written as:
@


1.81
log
@Release-3.0.7
@
text
@a169 3
  See the files java.ini and java.ini.windows for a complete list
  of options and .ini examples.

d469 9
a477 8
  If the default policy is too restrictive and e.g. you want to use the
  PHP/Java Bridge to connect to your J2EE server(s), you can temporarily 
  set the policy to "permissive", for example with the command "setenforce
  Permissive". Connect to the server, then extract the permissions
  from the audit log, for example with the command "audit2allow -d", then
  append them at the end of the "php-java-bridge.te" file and load the
  updated policy into the kernel. Don't forget to switch back, for
  example with "setenforce Enforcing".
@


1.80
log
@Release-3.0.5(pre)
@
text
@d26 1
a26 4
          ./configure --with-java=/opt/IBMJava2-141 \
                      --disable-servlet \
                      --disable-script \ 
                      --disable-faces &&
d41 109
a149 116
  The bridge consists of two parts, the "frontent", usually Apache/PHP
  and our "java.so", and a "backend". The following describes how to
  start the backend (if necessary) and how to configure the frontend to
  use it.

  To permanently activate the frontend for all users please add the
  following lines to the php.ini or add a file java.ini to the
  directory that contains the php module descriptions (usually
  /etc/php.d/) with the following content:

          extension = java.so
          [java]
          java.log_level="3"
          java.log_file="/var/log/php-java-bridge.log"
          java.socketname="/var/run/.php-java-bridge_socket"


  OPTION 1: "Local backend using a service script."
  You can use local sockets to connect to a local backend. Copy the
  executable php-java-bridge to /usr/sbin, make it executable with the
  command "chmod +x /usr/sbin/php-java-bridge".

  This option can be used if "Security Enhanced Linux" is switched on.
  It cannot be used in a multi-user environment where each user wants
  to run his/her own instance of the backend.


  OPTION 2: "The J2EE backend."
  You can deploy the PHP/Java Bridge into a standard servlet engine or
  an application server. Deploy JavaBridge.war using the application
  server's tools. Disable the java.socketname and java.log_file option
  and set the java.hosts and java.servlet option, for example:

          extension = java.so
          [java]
          java.log_level="3"
          java.servlet=User
          java.hosts="127.0.0.1:8080"

  This option can be used if "Security Enhanced Linux" is switched
  on. It can be used in a multi-user environment, users can install
  their own .war files and customize them as necessary. It can also
  be used if Apache or IIS are not available, the .war files can be
  configured to connect to a system FCGI php server or to run a php
  CGI binary for each php request.


  OPTION 3: "Local backend as an apache sub-process".
  You can start the bridge as a sub-process of apache. Disable
  java.socketname, java.servlet and java.hosts. For example:

          extension = java.so
          [java]
          java.log_level="3"
          java.log_file="/var/log/php-java-bridge.log"

  This option cannot be used if "Security Enhanced Linux" is switched
  on.


  Option 4: "JSR 223 Scripting API."
  You can use the java script API to allocate and to invoke php
  instances from a HTTP pool. Disable java.socketname and set
  java.servlet. For example:

          extension = java.so
          [java]
          java.servlet=User

  After that you can call out to your web server's php scripts, for
  example:

     <?php

       function hello() {return "Hello java world!";}

       // call() checks for HTTP request header X_JAVABRIDGE_CONTEXT
       java_context()->call(java_closure()) ||die("Call test.php from java!");
     ?>

     PhpScriptEngine engine = new PhpScriptEngine();

     // Use a URLReader "adapter" to pass the apache URL to the engine.
     // engine.eval will create a php continuation on the web server ...
     engine.eval(new URLReader(new URL("http://127.0.0.1/test.php")));

     //...and call procedures within the allocated continuation...
     String s=((Invocable)engine).invoke("hello", new Object[]{});
     System.out.println("test.php::hello() returned: "+s);

     //.. release the allocated continuation:
     engine.release();

  This option can be used if "Security Enhanced Linux" is switched
  on. It requires php-script.jar, please see the --enable-script
  configure option above. Furthermore this option is required if you
  want to run php from a framework such as "Java Server Faces". You can
  build the required php-faces.jar using the --enable-faces configure
  option. For other frameworks (e.g. "Struts") you must write your own
  PhpStrutsScriptContextFactory.java, PhpStrutsScriptContext.java and
  PhpStrutsScriptEngine.java. You can use the php faces implementation
  as a template.

  After you have created the correct .ini entries, start the backend:

          Example for option #1: /usr/sbin/php-java-bridge

          Example for option #2: /etc/init.d/tomcat5 restart

          Example for option #3: apachectl restart

          Example for option #4: <not needed, backend is the calling VM itself>

  Note that the above options are exclusive; if you switch off the 
  java.socketname and try to start the local backend using the service
  script, the script will complain that the socketname is not set.
d153 1
a153 1
          echo "<?php phpinfo()?>" | php | fgrep "java status"
d158 8
a165 7
          java.libpath   = <system dependent path to natcJavaBridge.so>
          java.classpath = <system dependent path to JavaBridge.jar>
          java.java_home = <system dependent path to the java install dir>
          java.java      = <system dependent path to the java binary>
          java.socketname= <local ("unix domain") communication channel>
          java.hosts     = <add. backends e.g.: server1:9267;server2:9268>
          java.servlet   = <On/Off/User>, see NEWS for version 3.0.2
d170 3
d182 1
a182 5
  recommended to start the PHP/Java Bridge as a system service,
  independent of the web server. On SysV based init systems the
  "php-java-bridge.service" can be used to automatically start and stop
  the bridge as a system service.  Please see the RedHat RPM download
  for an example.
d189 1
a189 1
  JavaBridge.war is deployed (e.g. in /opt/tomcat5/webapps), java.so
d219 1
a219 1
    java.servlet   = User
d221 1
a221 1
  To check the above settings, please visit http://localhost/JavaBridge/
d401 1
a401 1
  Example: make CFLAGS="-m64"
d583 1
a583 1
  local TCP port on 9167 (JavaBridge.jar) or 9267 (MonoBridge.exe), 9567
@


1.79
log
@Release-3.0.4
@
text
@d26 1
a26 1
          ./configure --with-java=/opt/IBMJava2-14 \
@


1.78
log
@Release-3.0.3
@
text
@d22 1
a22 1
          php-config --version # PHP 4.3.0 or above (5.x or 6.x recommended)
d80 1
a80 1
          java.servlet=On
d111 1
a111 1
          java.servlet=On
d174 1
a174 1
          java.servlet   = <On/Off>
d229 1
a229 1
    java.servlet   = On
d297 5
a301 5
  If the parameter name "use_fast_cgi" is enabled in the web.xml and a fcgi
  server does not listen on port 9667 and a fcgi binary can be found
  as either /usr/bin/php-cgi or /usr/bin/php or c:/php5/php-cgi.exe,
  then the backend automatically starts the fast cgi server on this
  computer, with the command:
d352 8
a359 6
  either start a fast cgi server on port 9667 as a separate process, for
  example from a service script, or add a policy to the JavaBridge.war
  which allows execution of the cgi binary. This is AS
  specific. However, for a first test, switch off security checking in
  general by adding the following to the application server's JRE
  "java.policy" file:
d362 1
a362 1
	permission java.security.AllPermission;
d365 1
d595 1
a595 2
  the range [9167, ..., 9667] are protected and cannot be accessed from
  the internet.
d633 2
a634 1
    echo (string)$str;
@


1.77
log
@Release-3-0-2
@
text
@d45 1
a45 1
  and our "java.so", and the "backend". The following describes how to
d577 3
d581 13
a593 23
  supports abstract local ("unix domain") sockets. On these systems
  the communication channel is not visible and cannot be attacked. If
  you are running a Security Enhanced Linux kernel, which is standard
  since RHEL4 or FC3, the backend is also protected by the SEL policy.

  On other systems, such as Windows and Mac OSX or when the backend is
  running in a standard J2EE (servlet-, AS-) environment where local
  channels are not available, the bridge opens a TCP port on 9167
  (JavaBridge.jar) or 9267 (MonoBridge.exe) or 9567 (JavaBridge.war) 
  and binds to all(!) available network cards. When running as a
  CGI binary the port is 9567 (CGI) or 9667 (FastCGI) and only the
  loopback (127.0.0.1) interface is used.

  Please make sure that the ports in the range [9167, ..., 9667] are
  protected and cannot be accessed from the internet.

  In J2EE application servers where the security policy denies opening
  TCP sockets, the bridge uses a HTTP tunnel which is 50 times slower
  than a standard TCP socket. If you see the log message (at level INFO)
  that the bridge cannot use local channels, please either change the
  security policy or disallow all PUT requests from the internet. If you
  use Apache, mod jk adapter and Tomcat as described above, the adapter
  already denies routing PUT requests to the servlet engine.
@


1.76
log
@Release-3-0-2
@
text
@d4 2
a5 2
  The PHP/Java Bridge is PHP module which connects the PHP object system
  with the java or ECMA 335 object system.
d131 1
a131 1
     String s=((Invocable)engine).call("hello", new Object[]{});
d380 1
a380 1
  system it is recommended to compile PHP in save mode (which switches
@


1.75
log
@Version-3.0.0pre
@
text
@d45 1
a45 1
  and our "java.so" and the "backend". The following describes how to
d174 1
a174 1
          java.servlet   = <On/Off or path, e.g.: "/JavaBridge/PhpJavaServlet">
d297 1
a297 1
  If the param-name use_fast_cgi is enabled in the web.xml, a fcgi
d304 4
a307 1
    /usr/bin/php-cgi -b 127.0.0.1:9667 &
a362 7

  Running PHP as an apache plugin is more efficient than calling a CGI
  binary from tomcat. Please use the tomcat mod_jk adapter to connect
  tomcat with apache. That way PHP is managed by the apache pool, JSP
  files are forwarded via the mod_jk adapter and PHP/Java calls via the
  PHP/Java Bridge.

@


1.74
log
@Release-3.0.0pre1
@
text
@d13 1
a13 1
  NOTE: If you have Security Enhanced Linux, you must update the policy
d22 1
a22 1
          php-config --version # PHP 4.3.2 or above (5.x recommended)
d27 3
a29 3
                      --disable-servlet &&
                      --disable-script && 
                      --disable-faces
d44 6
a49 1
  To permanently activate the extension for all users please add the
d61 4
a64 3
  OPTION 1: You can use local sockets to connect to a local backend. 
  Copy the executable php-java-bridge to /usr/sbin, make it executable 
  with the command "chmod +x /usr/sbin/php-java-bridge".
d67 2
d71 5
a75 5
  OPTION 2: You can deploy the PHP/Java Bridge into a standard
  servlet engine or an application server. Deploy JavaBridge.war using
  the application server's tools. Disable the java.socketname and
  java.log_file option and set the java.hosts and java.servlet option,
  for example:
d84 5
a88 1
  on.
d91 2
a92 1
  OPTION 3: You can start the bridge as a sub-process of apache. Disable
d104 3
a106 2
  Option 4: You can use the java script API to allocate and to invoke
  php instances from a HTTP pool. Disable java.socketname and set
d116 8
d126 1
a126 1
     // Use a URLReader "wrapper" to pass the apache URL to the engine.
d131 2
a132 2
     String s=((Invocable)engine).call("java_get_server_name", new Object[]{});
     System.out.println("connected to java backend: "+s);
d138 8
a145 2
  on.

d157 3
d173 2
a174 2
          java.hosts     = <add. bridge hosts e.g.: server1:9267;server2:9268>
          java.servlet   = <On/Off or path, e.g.: "/JavaBridge/PhpJavaServlet"
d189 2
a190 2
  independent of the web server. The script "php-java-bridge.service"
  can be used on SysV based init systems to automatically start and stop
d241 1
a241 1
  shared web directory for tomcat and apache.  This is the default since
d244 14
d284 1
a284 1
  Apache.
d297 42
a338 2
  In case the PHP binary could not be found, please adjust the
  php_exec (see JavaBridge/WEB-INF/web.xml) setting, for example:
d348 6
a353 8
  You can also copy your php executable to the JavaBridge/WEB-INF/cgi
  folder, please read the file JavaBridge/WEB-INF/cgi/README for
  details.

  In case your application server denies calling the CGI binary, add a
  policy to the JavaBridge.war which allows execution of PHP. This is
  AS specific. However, for a first test, switch off security checking
  in general by adding the following to the application server's JRE
d365 1
a365 1
  PHP/Java bridge.
d590 2
a591 2
  (JavaBridge.jar) or 9267 (MonoBridge.exe) or 9567 (JavaBridge.war) or
  above and binds to all(!) available network cards. When running as a
d595 1
a595 1
  Please make sure that the ports in the range [9167, ..., 9767[ are
@


1.73
log
@Version-3.0.0pre
@
text
@d19 4
a22 4
          java -version        # 1.4 or above (1.4.2_02 or IBM VM recommended)
          gcc --version        # 3.2.3 or above.
          apachectl -version   # Apache 1.3 or above.
          php-config --version # PHP 4.3.2 or above.
d28 2
d58 1
a58 3
  with the command "chmod +x /usr/sbin/php-java-bridge" and start it:

          /usr/sbin/php-java-bridge
d75 1
a75 1
  This option cannot be used if "Security Enhanced Linux" is switched
d91 3
a93 2
  Option 4: You can use the java script API to allocate and to invoke php instances
  from a HTTP pool. Disable java.socketname and set java.servlet. For example:
d99 2
a100 1
   After that you can call out to your web server's php scripts, for example:
d108 1
a108 1
     //...and call can invoke procedures within the allocated continuation...
d112 1
a112 2
     //...engine.release(), the next engine.call(...) or System.exit() release
     // the allocated continuation
d205 7
a211 5
  to forward requests for .jsp files.  The mod_jk adapter does this by "copying"
  the non jsp files from the tomcat webapps directory into the apache document
  root directory at run-time(!).

  A more reasonable approach would be to remove mod_jk and to create a shared web directory for tomcat and apache.  This is the default since RedHat Fedora 4.
d243 1
a243 1
  php5 shared library, we use the CGI interface to call the PHP
d245 2
a246 2
  not much slower but more reliable. In case a PHP instance crashes,
  it will not take down the whole servlet engine or application server.
d256 1
a256 1
      <param-value>/usr/local/bin/php</param-value>
d472 1
a472 1
  this happens a "NoClassDefFound" error is thrown. This error may
d509 2
a510 2
  CGI binary the port is 9567 and only the loopback (127.0.0.1) interface
  is used.
d512 2
a513 2
  Please make sure that these ports are protected and cannot be
  accessed from the internet.
d559 1
a559 1
    echo $str;
@


1.72
log
@Release-2.0.8
@
text
@a52 4
  Re-start the web server, for example with the command:

          apachectl restart

d69 1
d87 12
a98 2
  Re-start apache and check if apache has started java as a
  sub-process.  For example with the commands:
d100 1
a100 2
          apachectl restart
          pstree | fgrep httpd
d102 13
a114 1
  This option cannot be used if "Security Enhanced Linux" is switched
d118 11
d202 8
@


1.71
log
@2.0.8RC3 fixes PR1283154 and 1286139 and 1288025 (partially).
@
text
@a133 138
  Oracle 10g AS
  -------------

  The following description assumes that you have the Oracle
  Application Server Containers for J2EE 10g installed, for example in
  /opt/10gAS and that the $J2EE_HOME points to the /opt/10gAS/j2ee/home
  directory.

  If you want to download the Oracle 10g AS, please only download the
  pure java implementation called "oc4j_extended.zip". It has a download
  size of less than 30MB. The complete Oracle 10g AS has a download size
  of more than 1GB and includes Apache and other software you don't need
  during development.

  Install the PHP/Java Bridge and copy the JavaBridge.war to the
  $J2EE_HOME/applications directory.

  Edit $J2EE_HOME/config/application.xml so that it contains the
  following line:

    <web-module id="JavaBridge" path="../../home/applications/JavaBridge.war"/>

  Edit $J2EE_HOME/config/http-web-site.xml so that it contains the
  following line:

    <web-app application="default" name="JavaBridge" root="/JavaBridge"/>


  Start the Oracle 10g application server, for example with:

    cd $J2EE_HOME
    java -jar oc4j.jar

  Run the PHP/Java Bridge examples, for example:

    http://localhost:8888/JavaBridge/test.php

  or 

    http://localhost:8888/sessionSharing.php

  If there are problems, please check if oracle has created the
  $J2EE_HOME/applications/JavaBridge directory and read
  $J2EE_HOME/applications/JavaBridge/WEB-INF/cgi/README.

  The log output appears in $J2EE_HOME/log/global-application.log.


  For production systems it is recommended to install the complete
  Oracle Application Server, which includes Apache, and to install
  PHP as a Apache module.

------------------------------------
  IBM WebSphere AS
  ----------------

  The following description assumes that you have the IBM WebSphere
  6.x Application Server installed and that $WAS_HOME points to the
  /opt/IBM/WebSphere/AppServer directory.

  Install the PHP/Java Bridge. Start the application server, for
  example with the command:

    $WAS_HOME/bin/startServer.sh  server1

  Log into your application server, for example via: 

    http://localhost:9060/ibm/console/secure/logon.do

  Click on Applications -> Install New Application -> Browse
  and select JavaBridge.war. 

  Enter /JavaBridge as "Context root" and click Next.
  Click Next
  Click Continue
  Click Next
  Select JavaBridge.war and click Next
  Select JavaBridge.war and click Next
  Click Finish
  Click on "Save to Master Configuration"
  Click Save

  Click on Applications -> Enterprise Applications and select JavaBridge.war
  Click Start
  
  Run the PHP/Java Bridge examples, for example:

    http://localhost:9080/JavaBridge/test.php

  or 

    http://localhost:9080/sessionSharing.php

  If there are problems, please check if websphere has created the
  $WAS_HOME/profiles/default/installedApps/[...]/JavaBridge_war.ear/
  directory and read
  $WAS_HOME/[...]/JavaBridge_war.ear/JavaBridge.war/WEB-INF/cgi/README.

  The log output appears in the
  $WAS_HOME/profiles/default/logs/server1/ directory.


  For production systems it is recommended to install the IBM
  HttpServer (a Apache variant) and to install PHP as a Apache
  module.

---------------------------------------------
  Tomcat servlet engine
  ---------------------

  It is assumed that tomcat is already installed in some directory,
  for example in /opt/tomcat4.  The environment variable CATALINA_HOME
  should point to this directory.
  
  1. Install or build a JavaBridge.war, for example with the command:

       ./configure --with-java=/opt/IBMJava2-14 \ 
             --enable-servlet=$CATALINA_HOME/common/lib/servlet.jar &&
       make
     
     and copy modules/JavaBridge.war to $CATALINA_HOME/webapps.

  2. Start tomcat with the command 

       $CATALINA_HOME/bin/catalina.sh start

  4. The php .ini file [java] section should contain only
     java.log_level, java.servlet and java.hosts entries.  Example: 

       [java]
       java.log_level="2"
       java.servlet=On
       java.hosts="127.0.0.1:8080"

  The PHP/Java Bridge log output appears in the server log file, for
  example in $CATALINA_HOME/logs/localhost_log.*.txt  

------------------------------------
a193 60
------------------------------------
  Compiling a CGI binary on Windows
  ---------------------------------

  This operating system has some unusal problems with shared libraries
  (DLL's). The autoconf/libtool documentation states:

   - Macro: AC_LIBTOOL_WIN32_DLL
     This macro should be used if the package has been ported to build
     clean dlls on win32 platforms.  Usually this means that any
     library data items are exported with `__declspec(dllexport)' and
     imported with `__declspec(dllimport)'.  If this macro is not used,
     libtool will assume that the package libraries are not dll clean
     and will build only static libraries on win32 hosts.

  Until someone ports the sources to use __declspec, we avoid 
  creating shared libraries on this system.  Instead we will
  compile the extension into PHP:

  1. Install the source code of PHP 4.3.x or higher.

  2. Install RedHat's Cygwin (PHP needs autoconf).

  3. Delete the java sub-directory from php-4.3.x\ext. Copy the
     php-java-bridge directory to the php-x.y.z\ext directory and
     rename it to java.  Update the "m4_include" paths in
     php-x.y.z\ext\java\config.m4 so that they start with "ext/java/":

      m4_include(ext/java/tests.m4/function_checks.m4)
      m4_include(ext/java/tests.m4/java_check_broken_stdio_buffering.m4)
      ...
      m4_include(ext/java/tests.m4/java_check_broken_gcc_installation.m4)

  4. Invoke autoconf to register our java module within the PHP build
     tree:
 
      buildconf.bat --force 

     Instead of running "buildconf" you can also use autoconf directly:

      autoconf

     Then configure and compile php as usual:

      .\configure --with-java=%JAVA_HOME%
      make

  This will create a php binary with the PHP/Java Bridge included.
  You can then copy the sapi\cgi\php executable into the CGI directory 
  of your IIS web server. Before you start the web server, you must
  start the java bridge backend, for example by double-clicking on
  .\modules\JavaBridge.jar.


  Windows uses TCP/IP sockets instead of unix domain sockets. If you
  want to change the java.socketname from its default (which is 9267),
  you must use an integer. For example:

    java.socketname=9268

@


1.70
log
@2.0.8RC2 fixes PR1283148 and 1281189.
@
text
@d113 1
a113 1
          java.servlet   = <On/Off>
d653 29
@


1.69
log
@Release-2.0.8RC
@
text
@d278 1
a278 1
  /usr/lib/php4/), mod_jk and php5 are installed in the apache modules
d493 1
a493 1
  You can set the java.log_level to 5 values:
d505 2
d622 20
@


1.68
log
@Documentation for Oracle 10g AS and WebSphere 6 AS added
@
text
@d144 1
a144 1
  size of less then 30MB. The complete Oracle 10g AS has a download size
d284 1
a284 1
  tomcat servlet engine:
d297 2
a298 2
  The following settings in php.ini direct all Java() ... calls to the
  tomcat servlet engine:
@


1.67
log
@Release-2.0.8(pre4)
@
text
@a132 61
---------------------------------------------
  J2EE/EJB Server
  ---------------

  The following description assumes that you use the Sun J2EE
  application server and that your server is already installed in some
  directory, for example in ~/SUNWappserver.  The environment variable
  $app_server should point to this directory.

  1. Build a JavaBridge.war, for example with the command:

       ./configure --with-java=/opt/IBMJava2-14 \ 
                   --enable-servlet=$app_server/lib/j2ee.jar &&
       make

     Open modules/JavaBridge.war and copy the libraries (.jar files)
     you need into its "WEB-INF/lib" directory.


  2. Start your application server, for example with the command:

       $app_server/bin/asadmin start-domain domain1


  3. Log into your application server, for example by visiting

       http://localhost:4848/asadmin

     and open

       Application Server -> Applications -> Web Applications

     Click on  "Deploy..."  and deploy modules/JavaBridge.war.


  4. The php .ini file [java] section should contain only
     java.log_level, java.servlet and java.hosts entries.  Example: 

       [java]
       ;;java.log_level="<level>"
       java.log_level="2"

       ;;java.servlet=<On|Off>
       java.servlet=On

       ;; java.hosts="<host1>:<port1>;<host2>:<port2>;..."
       java.hosts="127.0.0.1:8080" 

     The port# must be the HTTP port, usually 8000 or above.
     On unix one can also use the host name, such as "localhost",
     instead of the ip address.


  The PHP/Java Bridge log output appears in the server log file, for
  example in $app_server/domains/domain1/logs/server.log.

  Libraries (.jar files) must be stored in the "WEB-INF/lib" folder
  within the JavaBridge.war file or in some application server specific
  "lib" directory. Access to libraries deployed in /usr/share/java is
  denied by this application server.

d139 1
a139 1
  /opt/10gAS and that the J2EE_HOME points to the /opt/10gAS/j2ee/home
d179 2
d185 55
d248 1
a248 1
  1. Build a JavaBridge.war, for example with the command:
a259 4
     or

       $CATALINA_HOME/bin/catalina.sh run

d399 1
a399 1
  It is possible to run PHP inside java. Unlike the JSR223 sample
d403 1
a403 1
  not much slower[1] but more reliable. In case a PHP instance crashes,
a441 9
[1] total execution time for 10 queries for examples/bench/bench.php,
 RHEL3 (AMD32, 1500mhz) 
 Tomcat 4.0 
 PHP 5.0.1 (from the jsr sample)
 PHP/Java Bridge 2.0.8
 jsr223 sample implemenentation (from 25.07.2005):

jsr223: 2m58.769s 
bridge: 2m59.343s
@


1.66
log
@Release-2.0.8(pre4)
@
text
@d192 1
a192 1
  denied by the application server.
d194 50
a529 4
  gcc3.4 cannot invoke virtual functions from jni code.  Please apply
  the gcc3.4-broken-jni-method-lookup.patch or use gcc 3.3.3 or gcc 4.x
  instead.

@


1.65
log
@Release-2.0.8(pre3)
@
text
@d195 2
a196 2
  Tomcat 4 or Tomcat 5 servlet engine
  -----------------------------------
d233 6
a238 4
  Assuming that tomcat is installed in /opt/tomcat5, JavaBridge.war is
  deployed in /opt/tomcat5/webapps, java.so (or php_java.dll) is
  installed in the php modules directory, mod_jk and php5 are installed
  in the apache modules directory, we recommend following settings:
d266 2
a267 38
---------------------------------------------
  AS or Tomcat w/o Apache
  -----------------------

  Read the following instructions only if you don't want to use
  Apache.

  It is possible to run PHP inside java. Unlike the JSR223 sample
  implementation, which uses the JNI interface to load/call the native
  php5 shared library, we use the CGI interface to call the PHP
  binary and use a local channel to connect the two components. This is
  not much slower[1] but more reliable. In case a PHP instance crashes,
  it will not take down the whole servlet engine or application server.
  
  Please follow the AS or Tomcat installation instructions above, then
  visit http://localhost:8080/JavaBridge and run the supplied JSP and PHP
  examples.

  In case the PHP binary could not be found, please adjust the
  php_exec (see JavaBridge/WEB-INF/web.xml) setting, for example:

      <param-name>php_exec</param-name>
      <param-value>/usr/local/bin/php</param-value>

  or

      <param-name>php_exec</param-name>
      <param-value>c:/PHP/php-cgi.exe</param-value>

  You can also copy your php executable to the JavaBridge/WEB-INF/cgi
  folder, please read the file JavaBridge/WEB-INF/cgi/README for
  details.

  In case your application server denies calling the CGI binary, add a
  policy to the JavaBridge.war which allows execution of PHP. This is
  AS specific. However, for a first test, switch off security checking
  in general by adding the following to the application server's JRE
  "java.policy" file:
a268 20
    grant {
	permission java.security.AllPermission;
    };


  Running PHP as an apache plugin is more efficient than calling a CGI
  binary from tomcat. Please use the tomcat mod_jk adapter to connect
  tomcat with apache. That way PHP is managed by the apache pool, JSP
  files are forwarded via the mod_jk adapter and PHP/Java calls via the
  PHP/Java bridge.

[1] total execution time for 10 queries for examples/bench/bench.php,
 RHEL3 (AMD32, 1500mhz) 
 Tomcat 4.0 
 PHP 5.0.1 (from the jsr sample)
 PHP/Java Bridge 2.0.8
 jsr223 sample implemenentation (from 25.07.2005):

jsr223: 2m58.769s 
bridge: 2m59.343s
d350 59
@


1.64
log
@Merged from Version-2-0-7 trunc; 2.0.7 closed
@
text
@a232 3
  The recommended way to run jsp and php is to install Apache, PHP,
  the PHP/Java Bridge, Tomcat and mod_jk.

d239 1
a239 1
  The following setting in httpd.conf directs all .jsp requests to the
d249 2
a250 1
    JkMount /*.jsp ajp13
d253 1
a253 1
  The following setting in php.ini directs all Java() ... calls to the
@


1.63
log
@Release-2.0.8-pre2
@
text
@d622 1
a622 1
    $str=new String("Cześć! -- שלום -- Grüß Gott -- Dobrý deň");
a628 4
  Please see the utf8*.php tests in the tests.php4 folder to see how
  to use different input and output conversions.


d633 1
a633 1
    $str=new String("Cześć! -- שלום -- Grüß Gott -- Dobrý deň");
@


1.62
log
@Release-2.0.8-preview
@
text
@d229 37
d267 5
a271 2
  Running JSP and PHP side by side
  --------------------------------
d275 1
a275 1
  php5 shared library[1], we use the CGI interface to call the PHP
d277 1
a277 1
  not much slower[2] but more reliable. In case a PHP instance crashes,
d310 5
a314 13
  It should be noted that running PHP as an apache plugin is more
  efficient than calling a CGI binary from tomcat. Please use the tomcat
  mod_jk adapter to connect tomcat with apache. That way PHP is managed
  by the apache pool, JSP files are forwarded via the mod_jk adapter and
  PHP/Java calls via the PHP/Java bridge.

[1] Loading the php5 shared library from a class within the web
application doesn't work in tomcat5, because tomcat may load the web
application more than once. From the tomcat5 release notes: "To avoid
this problem, place classes that load native libraries outside of the
web application, and ensure that the loadLibrary() call is executed
only once during the lifetime of a particular JVM". This may explain
jsr223's memory leaks when running on tomcat5.
d316 1
a316 1
[2] total execution time for 10 queries for examples/bench/bench.php,
a324 1

@


1.61
log
@PHP/JSP session sharing
@
text
@d173 1
a173 1
       java.log_level="3"
d222 1
a222 1
       java.log_level="3"
d434 1
a434 1
   3: Log info messages such as "loading jar xyz.jar from http://xy.com"
@


1.60
log
@Release-2.0.7
@
text
@d229 65
@


1.60.2.1
log
@Release-2.0.7
@
text
@d526 1
a526 1
    $str=new Java ("java.lang.String", "Cześć! -- שלום -- Gr");
d533 4
d541 1
a541 1
    $str=new Java ("java.lang.String", "Cześć! -- שלום -- Gr");
@


1.59
log
@Release-2.0.7pre
@
text
@d75 1
a75 1
          java.servlet="On"
d175 2
a176 2
       ;;java.servlet="<On|Off>"
       java.servlet="On"
d223 1
a223 1
       java.servlet="On"
d349 5
a353 2
     systems which support them. This is needed on FreeBSD if the java VM
     is a linux executable.
@


1.58
log
@Release-2.0.7-pre
@
text
@d503 1
a503 1
  Since PHP does not support unicode the PHP/Java Bridge uses UTF-8 to
@


1.57
log
@Tomcat 5 support / multicasts removed
@
text
@d26 2
a27 1
          ./configure --with-java=/opt/IBMJava2-14 &&
d64 1
a64 1
  This option is available on Security Enhanced Linux.
d68 4
a71 4
  servlet engine or an application server. Rename JavaBridge.jar
  into JavaBridge.war and deploy it using the application server's
  tools. Disable the java.socketname option and set the java.hosts and
  java.servlet options, for example: 
d73 2
d78 2
a79 1
  This option is available on Security Enhanced Linux.
d83 9
a91 3
  java.url and java.socketname and re-start apache.
  Check if apache has started java as a sub-process.  For example with 
  the commands:
d96 2
a97 1
  This option cannot be used on Security Enhanced Linux.
d111 3
a113 2
          java.socketname= <hard-coded socketname to start the VM separately>
          java.hosts     = <add. bridge hosts e.g.: server1:9167;server2:9168>
a117 4
  The java.hosts setting specifies additional hosts running the
  PHP/Java Bridge; it should be used only if multicast datagrams 
  don't work on your system.

d122 3
a124 3
  When the java.socketname option is not set, the web server will
  start or re-start the bridge automatically as a sub-component when the
  http service is started or re-started.
d134 69
a202 3
  Deploying into a J2EE/EJB server or a 
  standard servlet engine
  -----------------------------
d204 5
a208 1
   FIXME
d210 1
a210 1
   Create and deploy JavaBridge.war
d212 1
a212 3
   Set:
        java.hosts=<host>:<port>
        java.servlet=On
d214 14
a227 1
   
d305 1
a305 1
  want to change the java.socketname from its default (which is 9167),
d308 1
a308 1
    java.socketname=9168
d348 3
a350 2
   * -DCFG_JAVA_SOCKET_INET: Disables local ("unix domain")
     sockets on systems which support them.
d370 3
a372 1
  The default log level is 1.
d479 6
a484 5
  Bridge must be re-started when a new library version is deployed. This
  means that the repositories shall contain only one version of batStore
  at the same time. -- The ECMA 335 CLR supports this very well
  so in theory the problem could be solved by compiling the .jar file
  into a ECMA 335 dll (e.g. with the command: ikvmc batStore-1.0.jar)
d503 1
a503 1
  Since PHP does not support Unicode the PHP/Java Bridge uses UTF-8 to
@


1.56
log
@dl() re-enabled for php5 versions above 5.0.4
@
text
@d66 5
a70 6
  OPTION 2: You can use TCP/IP sockets to communicate with different
  backends on different hosts. Disable the java.socketname option,
  start the backends on all hosts and ports, for example with the 
  command:

         /usr/sbin/php-java-bridge
d72 2
a73 11
  and re-start the web server to activate this setting. The above
  command starts 2 backends on the local host. Additional backends can
  be started with (e.g.):
         `
        `php-config --extension-dir`/RunJavaBridge backend5.log

  A multicast packet is send and the bridge selects the first backend
  which has a load <12.  If, for some reason, multicasts don't work on
  your system you can use the java.hosts option instead. The following
  example directs the bridge to two backends running on the local host:
  java.hosts="127.0.0.1:9167;127.0.0.1:9168".
d79 1
a79 1
  java.hosts and java.socketname, stop all backends and re-start apache.
d86 1
a86 3
  Starting or re-starting the bridge with the apache web server is
  convenient during development but not recommended for production
  systems.  This option cannot be used on Security Enhanced Linux.
d130 9
a138 1
  [to be written for 2.0.7]
@


1.55
log
@Version 2.0.6 (windows)
@
text
@d403 3
a405 2
  All known PHP 5 versions crash when the dl() function is used. They
  first unload the module and then try to invoke its shutdown method.
@


1.54
log
@Release-2.0.6
@
text
@d74 1
a74 1
  command starts 4 backends on the local host. Additional backends can
@


1.53
log
@Version 2.0.6-pre2
@
text
@d5 1
a5 6
  with the java object system. It implements JSR 223 (where applicable)
  and can be used to access java based applications from PHP
  scripts. The PHP/Java Bridge communicates with the java VM through
  local sockets using an efficient communication protocol. Each
  request-handling PHP process of a multi-process HTTP server
  communicates with a corresponding thread spawned by the java VM.
d184 1
a184 1
  1. Install the source code of PHP 4.3.x.
d188 4
a191 4
  3. Delete the java sub-directory from php-4.3.x/ext and replace it
     with our php-java-bridge. Rename ext/php-java-bridge to
     ext/java.  Update the "m4_include" paths in
     php-4.3.x/ext/java/config.m4 so that they start with "ext/java/":
d205 1
a205 1
      aclocal && autoheader && autoconf && libtoolize -f && automake
d214 3
a216 1
  of your IIS web server.
a217 4
  To also install the server part into the modules directory:

      make install
      make install-modules
@


1.52
log
@Release-2.0.6-pre2
@
text
@d143 3
a145 2
  Deploying into a J2EE/EJB server
  --------------------------------
d147 1
a147 26
  The following description applies to the Sun J2EE application
  server.

1. Start your application server, for example with the command:

     $app_server/bin/asadmin start-domain domain1


2. Log into your application server, for example by visiting

     http://localhost:4848/asadmin

   and open

     Application Server -> Applications -> EJB Modules

   Click on  "Deploy..."  and deploy JavaBridge.jar.


3. Direct the PHP/Java Bridge to the application server by setting 
   the java.hosts to the application server host.  For example:

      java.hosts=SERVER1


4. Re-start apache to activate the new setting.
d214 1
a214 1
      ./configure --with-java=%JAVA_HOME%
d218 2
a219 2
  You can then copy the executable into the CGI directory of your IIS
  web server.
d370 1
a370 1
  of the test.php or from phpinfo(), please see the INSTALL file.
d386 1
a386 1
    java_set_library_path("<library1>;<libraryN>");
d392 1
a392 1
      java_set_library_path("j2ee.jar;batStore/batStore-1.0.jar");
d417 42
@


1.51
log
@Release-2.0.6pre
@
text
@d378 53
d437 2
a438 3
  If you use one of these versions, please either apply the
  php5-crash-in-evaluator-shutdown_workaround.patch or add an entry to
  the php.ini, see install instructions above.
@


1.50
log
@Release 2.0.6
@
text
@d12 2
a13 200
  Requests from more than one client may either be routed to a single
  application server running the PHP/Java Bridge or each client may
  own a PHP/Java Bridge and communicate with a J2EE application server
  by exchanging java value objects; client stub classes (ejb/j2ee client .jar) 
  can be loaded at run-time. 

  On Unix the PHP/Java Bridge also supports "failover" and "load
  balancing". All backends automatically join a multicast group and the
  PHP/Java Bridge automatically selects an appropriate backend based on
  the multicast responses.

  ECMA 335 based classes can be accessed if at least one JavaBridge.jar
  is running inside a ECMA complient VM, for example Novell's MONO or
  Microsoft's .NET. Special features such as varargs, reflection or
  assembly loading are also supported.


  The bridge adds the following primitives to PHP:

   * new java("CLASSNAME"): References and instanciates the class
     CLASSNAME. After script execution the referenced classes may be
     garbage collected. Example:

       $String = new java("java.lang.String");
       print $String->valueOf(null);

       $hello = new java("java.lang.String", "hello");
       print $hello;

       // access the inner class AQUA within HSSFColor, note the $ syntax.
       $Color = new java('org.apache.poi.hssf.util.HSSFColor$AQUA');
       print $Color->index;

   * new java_class("CLASSNAME"): References the class CLASSNAME
     without creating an instance. The object returned is the class object
     itself, not an object of the class. After script execution the
     referenced classes may be garbage collected. Example:

       $Object = new java_class("java.lang.Object");
       $obj = $Object->newInstance();

   * java_set_library_path("JAR1;JAR2"): Makes additional libraries
     available to the current script. JAR can either be a "http:", "ftp:",
     "file:" or a "jar:" location. On Security Enhanced Linux .jar files
     can only be loaded from a directory tagged with the lib_t security
     context.  In the example below the xerces.jar will be loaded from 
     either the current directory, from `php-config --extension-dir`/lib
     or from /usr/share/java:

       $file=new java("java.io.File", "WEB_INF/web.xml");

       java_set_library_path("xerces.jar;http://localhost/jdom.jar");
       $builder = new java("org.jdom.input.SAXBuilder");
       $doc = $builder->build($file);
       $root = $doc->getRootElement();
       $servlets = $root->getChildren("servlet");
       java_set_library_path("");

       echo "this file has " . $servlets->size() . " servlets\n";

   * java_exception: A java exception class. Available in PHP 5 and
     above only. Example:

       try {
         new java("java.lang.String", null);
       } catch(java_exception $ex) {
          $trace = new java("java.io.ByteArrayOutputStream");
          $ex->printStackTrace(new java("java.io.PrintStream", $trace));
          print "java stack trace: $trace\n";
       }

   * foreach(COLLECTION): It is possible to iterate over values of
     java classes that implement java.util.Collection or 
     java.util.Map. Available in PHP 5 and above only. Example:

       $conversion = new java("java.util.Properties");
       $conversion->put("long", "java.lang.Byte java.lang.Short java.lang.Integer");
       $conversion->put("boolean", "java.lang.Boolean");
       foreach ($conversion as $key=>$value)
          echo "$key => $value\n";

   * [index]: It is possible to access elements of java arrays or
     elements of java classes that implement the java.util.Map
     interface. Available in PHP 5 and above only. Example:

       $Array = new java_class("java.lang.reflect.Array");
       $String = new java_class("java.lang.String");
       $entries = $Array->newInstance($String, 3);
       $entries[0] ="Jakob der Luegner, Jurek Becker 1937--1997";
       $entries[1] ="Mutmassungen ueber Jakob, Uwe Johnson, 1934--1984";
       $entries[2] ="Die Blechtrommel, Guenter Grass, 1927--";
       for ($i = 0; $i < $Array->getLength($entries); $i++) {
          echo "$i: " . $entries[$i] ."\n";
       }

   * java_instanceof(JAVA_OBJ, JAVA_CLASS): Tests if JAVA_OBJ is an
     instance of JAVA_CLASS. Example:

       $Collection=new java_class("java.util.Collection");
       $list = new java("java.util.ArrayList");
       $list->add(0);
       $list->add(null);
       $list->add(new java("java.lang.Object"));
       $list->add(new java("java.util.ArrayList"));
       foreach ($list as $value) {
          if($value instanceof java && java_instanceof($value, $Collection))
            /* iterate through nested ArrayList */
          else
            echo "$value\n";
       }

   * java_get_server_name(): Returns the name:<socket> of the server used by
     this php instance. Example:

      if(!($name=java_get_server_name())) {
        echo "We're sorry, the java service is not available.\n";
	exit(1);
      } else {
        echo "Java backend available on $name.\n";
      }

   * java_last_exception_get(): Returns the last exception instance
     or null. Since PHP 5 you can use try/catch instead.

   * java_last_exception_clear(): Clears the error condition. Since
     PHP 5 you can use try/catch instead.

  There is one example provided: test.php. You can either invoke the
  test.php by typing ./test.php or copy the example into the document
  root of you web server and evaluate the file using the browser.

  The PHP/Java bridge is a replacement for the experimental ext/java
  bridge shipped with PHP 4. It is not possible to run the build-in
  bridge and the PHP/Java bridge at the same time.

  The module has been tested on a Mandrake Linux System (Version 9.2),
  on RedHat Enterprise 3, RedHat Fedora Core 1..3, Solaris 9..10 (Sparc,
  64 bit JVM), FreeBSD 5.3 and Windows with RedHat Cygwin, but it should 
  run on all Unix-like operating systems including HP-UX, WinXP.


  Custom java libraries (.jar files) can be stored in the following
  locations:

   1. Somewhere on a HTTP or FTP server, see PHP function
      java_set_library_path.  On Security Enhanced Linux the directory
      containing .jar files must be tagged with the lib_t security context. 

   2. In the sub-directory "lib" of the PHP extension directory, if it
      exists and is accessible when the JVM starts the bridge.
      This is usually "`php-config --extension-dir`/lib".  On Security
      Enhanced Linux this directory is tagged with the lib_t security
      context and in java_set_library_path's search path.

   3. In the /usr/share/java/ directory, if it exists and is accessible
      when the JVM starts the bridge. On Security Enhanced Linux this
      directory is tagged with the lib_t security context and in 
      java_set_library_path's search path.


  The PHP/Java Bridge can operate in 4 different modes:

   1. Invoked from the dl() function. In this mode the bridge starts
      when the HTTP server receives a client request and terminates after
      the response is written. This is very slow because it starts a new
      Java VM for each request. But it does not require any administrative
      privileges.

   2. Permanently activated in the global php.ini file with an
      internal java process running in the HTTP server domain. In this mode
      the bridge starts when the HTTP server starts and terminates when the
      HTTP server terminates. Recommended during development. 

   3. Permanently activated in the global php.ini file with an
      external java process. Recommended for production systems. This mode
      is used by the RPM package available for RedHat Enterprise Linux. In
      this mode the bridge starts and stops as a system service.

   4. Permanently activated in the global php.ini file with an
      external backend pool. Recommended for production systems which
      require load balancing and failover. All backends are started
      independently and automatically join a multicast group. The bridge
      sends out a multicast datagram and selects the appropriate backend
      based on the multicast responses.

  Furthermore the PHP/Java Bridge can be:

   * Compiled into PHP. This is not recommended because it requires a
      compilation of the entire PHP library. If you want to do this, please
      read the README file. This should only be necessary if the OS does not
      support shared libraries.

   * Compiled with the GNU Java library. You can either start GNU Java
     as a separate process (just like a "real" Java VM) or compile
     everything into a PHP binary. This should only be necessary if there
     is no official JRE available for the OS or one doesn't want to ship a
     JRE with the product.

   * Compiled with Novell's MONO (a ".NET" clone). This is currently
     experimental.
d24 1
a24 1
          java -version        # 1.3 or above (1.4.2_02 or IBM JVM recommended)
d74 1
a74 1
  commands:
d76 1
a76 2
          java -jar JavaBridge.jar INET:9167 3 backend-1.log &
          java -jar JavaBridge.jar INET:9168 3 backend-2.log &
d78 10
a87 5
  and re-start the web server to activate this setting. A multicast
  packet is send and the bridge selects the first backend which has
  a load <12.  If, for some reason, multicasts don't work on your 
  system you can use the java.hosts option instead. The following 
  example directs the bridge to two backends running on the local host: 
d103 1
a103 2
  systems, see UTF-8 section below.  This option cannot be used on
  Security Enhanced Linux.
@


1.49
log
@Version 2.0.6
@
text
@d18 11
d55 5
a59 1
     "file:" or a "jar:" location. Example:
d63 1
a63 1
       java_set_library_path("file:c:/xerces.jar;http://localhost/jdom.jar");
d157 2
a158 1
      java_set_library_path.
d162 3
a164 1
      This is usually "`php-config --extension-dir`/lib".
d167 3
a169 1
      when the JVM starts the bridge.
d172 1
a172 1
  The PHP/Java Bridge can operate in 3 different modes:
d190 7
d216 3
d220 1
a220 1
  In the directory php-java-bridge-1.x.y type:
d266 1
a266 1
  This is the only option available on Security Enhanced Linux.
d284 1
a284 2
  On Security Enhanced Linux the communication via TCP/IP sockets is
  currently switched off for security reasons.
d320 1
a320 1
  don't work on your system.  
@


1.48
log
@docu
@
text
@d249 1
a249 1
  a load <20.  If, for some reason, multicasts don't work on your 
a292 8
  During startup the bridge checks how to connect to the backend(s):
  1) it checks if a local VM is available (java.socketname).  
  2) If not (or if the option is switched off), it checks java.hosts. 
     If switched off, it sends out a multicast datagram.  
  3) If there were no responses from the backend pool, the bridge 
     starts a private java VM based on the information in the java 
     section of the php.ini (java.java, ...). 

d361 2
a362 2
  Windows Installation
  --------------------
a482 16
------------------------------------
  Macintosh/PPC Installation
  --------------------------
  
  The PHP/Java Bridge doesn't compile on OSX 10.2 or earlier because
  certain functionality (sys/poll) is missing.  OSX 10.3 has issues
  with the dynamic loader and the Apple Java VM, which cannot run
  the bridge reliably.

  If you want to run the Bridge on a PPC, please install IBM java
  1.4.1 or above on RedHat Enterprise Linux for Power PC, please see

    http://www-106.ibm.com/developerworks/java/jdk/linux/tested.html

  for details.  

@


1.47
log
@Release-2.0.2
@
text
@a223 2
          #java.hosts="localhost:9167;192.168.6.30:8009"

d231 2
a232 2
  Copy the executable php-java-bridge to /usr/sbin and start it with
  the command:
d234 1
a234 1
          sh /usr/sbin/php-java-bridge
d241 5
a245 2
  edit and enable the java.hosts option and re-start the web server.
  Start the backends on all hosts, for example with the command:
d247 6
a252 1
          java -jar JavaBridge.jar INET:9167 3 ""
d255 1
a255 1
  switched off for security reasons.
d259 3
a261 2
  java.hosts and java.socketname, re-start apache and check if apache
  has started java as a sub-process.  For example with the commands:
d284 1
a284 1
          java.hosts     = <add. bridge hosts e.g.: server1:8091;server2:9001>
d290 10
a299 3
  PHP/Java Bridge. If not set or if the bridge cannot connect to one of
  these servers nor to java.socketname, the bridge will start a private
  java VM.
a491 19
  UTF-8
  -----
  
  The PHP/Java Bridge uses the java VM's default "file.encoding" to
  convert characters into the host representation.  On Unix the java VM
  determines the host representation by looking at the LANG environment
  variable.

  In order to use UTF-8 in your PHP scripts, the LANG environment
  variable must be set to an UTF-8 locale, for example en_US.UTF-8. This
  is default on all modern operating systems, but certain components may
  select a different locale. Apache for example runs with the C locale
  and if the PHP/Java bridge is started automatically as a sub-component
  of apache, it will inherit this setting. -- This is one of the reasons
  why it is recommended to start the bridge as a system service outside of
  apache.

  You can check the file.encoding with the test.php script, see above.
------------------------------------
@


1.46
log
@Replaced Guile/SCHEME with Chicken/SCHEME example
@
text
@d108 10
d152 1
a152 1
  The PHP/Java Bridge can operate in 5 different modes:
d154 28
a181 16
   1. Invoked from the dl() function.  This is very slow because it
      starts a new Java VM for each request.  But this mode does not
      require any administrative privileges.

   2. Compiled into PHP.  This is not recommended because it
      requires a compilation of the entire PHP library. If you want to
      do this, please see the Windows install description below.

   3. Permanently activated in the global php.ini file and started as
      a sub-component of the HTTP server.  Recommended for test
      installations only.

   4. Permanently activated in the global php.ini file with an
      external java process.  Recommended for production servers, see
      below. This mode is used by the RPM package available for RedHat
      Enterprise Linux.
d183 2
a184 1
   5. Compiled with the GNU Java library.  
@


1.45
log
@do not change the channel if server was forked by the httpd
@
text
@d116 1
a116 1
  root of you web-server and evaluate the file using the browser.
d161 1
a161 5
   5. Compiled with the GNU Java library.  You can either start
      GNU Java as a separate process (just like a "real" Java VM) or
      compile the GNU Java library into the PHP/Java Bridge.
      You can even compile the PHP/Java Bridge + GNU/Java directly
      into PHP to create a huge PHP binary or library.
d204 1
a204 1
  Re-start the web-server, for example with the command:
d223 1
a223 1
          java -jar JavaBridge.jar 9176 3 ""
d236 1
a236 1
  Starting or re-starting the bridge with the apache web-server is
d268 1
a268 1
  When the java.socketname option is not set, the web-server will
d274 1
a274 1
  independent of the web-server. The script "php-java-bridge.service"
d380 1
a380 1
  Web-Server.
d482 1
a482 1
  If you want to run the Bridge on a Mac/PPC, please install IBM java
@


1.44
log
@Release-2.0-beta
@
text
@d435 3
@


1.43
log
@README
@
text
@a203 2

          # local bridge
d205 1
a205 3

          # list of additional servers running the bridge
          #java.hosts="localhost:9167;192.168.6.30:8009;..."
d213 13
a225 3
  OPTION 1:
  If you want to run the bridge on an array of servers (see
  java.hosts), start them now. Example command (on all servers):
d229 2
a230 3
  OPTION 2:
  If you want to run only one local bridge, copy the php-java-bridge
  executable into the /usr/sbin directory and start it with the command:
a231 1
          sh /usr/sbin/php-java-bridge
d233 3
a235 4
  OPTION 3:
  If you want to run only one bridge as a sub-process or apache, disable
  the java.host and java.socketname settings, re-start apache and check 
  if it has started the bridge as a sub-process:
d240 5
d261 6
a266 4
  values.  The java.hosts setting specifies additional hosts which running
  the PHP/Java Bridge. If not set or if the bridge cannot connect to one
  of these servers nor to java.socketname, the bridge will start a
  private java VM.
d543 3
a545 3
  set the policy to Permissive, for example with the command "setenforce
  Permissive" and connect to the server. Then extract the permissions
  from the audit log, for example with the command "audit2allow -d". Then
d554 4
a557 2
  Versions 5.0.0 up to 5.0.3 cannot load the Bridge from the dl()
  function.  If you use one of these versions, please either apply the
@


1.42
log
@Protocol update
@
text
@d202 9
a210 6
          java.log_level=1
          java.log_file=/var/log/php-java-bridge.log
          # Comment out the following option if you want to
          # start the bridge automatically as a sub-process 
          # of the web-server, not recommended
          java.socketname=/var/run/.php-java-bridge_socket
d216 10
a225 2
  Copy the php-java-bridge executable into the /usr/sbin directory
  and start the bridge, if it isn't already running.
d229 10
a238 2
  After the module is activated verify that the module is running by
  typing:
a424 3
   * -DCFG_JAVA_INPROCESS: Do not use exec() but call the JVM directly.
     Experimental.
     
@


1.41
log
@Release-1.0.8
@
text
@d227 1
a227 1
          java.classpath = <system dependent path to JavaBridge.class>
d231 1
d233 5
a237 2
  If you change the above values, please first look at the output of
  phpinfo() to see the original values.
d254 31
d363 1
a363 1
  want to change the java.socketname from its default (which is 9047),
d366 1
a366 1
    java.socketname=8009
a367 21
  The host is currently hard-coded (in natcJavaBridge.c and in java.c)
  to 127.0.0.1, which is the local interface.  You can change this,
  for example if you want to run the server part of the bridge on a
  unix machine, but opening a port on a web-server can be dangerous.

  Furthermore it is possible to compile the server part of the bridge
  for a win32 target on any unix operating system by using a cross
  compiler:

    cd server
    /opt/jdk1.4/bin/javac JavaBridge.java
    i386-pc-mingw32-gcc  -I. -DEXTENSION_DIR=\".\"  -c natcJavaBridge.c 
    i386-pc-mingw32-dllwrap --export-all-symbols -k  \
                       -o natcJavaBridge.dll natcJavaBridge.o -lws2_32
     
  After that you can copy natcJavaBridge.dll and JavaBridge*.class to
  your windows machine and start the server part of the bridge as usual,
  for example with:
    
    c:\jdk1.4\bin\java.exe JavaBridge 9047 3 ""
      
d528 1
a528 1
  Versions 5.0.0 up to 5.0.3RC cannot load the Bridge from the dl()
@


1.40
log
@Release-1.0.8
@
text
@d88 1
a88 1
       for ($i = 0; $i < 3; $i++) {
d315 1
a315 1
      ./configure --with-java=$JAVA_HOME
d497 1
a497 1
   2. Install the policy files with the command:
d499 1
a499 6
        su -c "make install_policy"

   3. Inject the new policy rules into the kernel. On RedHat Fedora
      Core 3 and above the command is:

        su -c "make -C /etc/selinux/targeted/src/policy reload"
d519 8
@


1.39
log
@Release-1.0.8
@
text
@d123 1
a123 1
  on RedHat Enterprise 3, RedHat Fedora Core 1..3, Solaris 8..10 (Sparc,
d338 16
d478 2
a479 2
  resources it requires.  All domains are granted connect, read and
  write to the PHP/Java Bridge server socket, which is
d507 2
a508 2
  PHP/Java Bridge to connect to your J2EE server(s) you can temporarily set 
  the policy to Permissive, for example with the command "setenforce
d519 1
a519 1
  Versions 5.0.0 up to 5.0.3 cannot load the Bridge from the dl()
@


1.38
log
@Release-1.0.8
@
text
@d188 3
d296 1
a296 1
     ext/java.  Update the "sinclude" paths in
d299 4
a302 3
      sinclude(ext/java/tests.m4/function_checks.m4)
      sinclude(ext/java/tests.m4/java_check_broken_stdio_buffering.m4)
      sinclude(ext/java/tests.m4/java_check_broken_gcc_installation.m4)
d305 1
a305 1
     tree and then compile php as usual:
d307 10
a316 1
      autoconf && ./configure --with-java && make
d322 16
@


1.37
log
@*** empty log message ***
@
text
@d1 1
a1 1
What is the PHP/Java bridge?
d4 2
a5 2
  The PHP/Java bridge is PHP module which connects the PHP object system
  with the Java object system. It implements JSR 223 (where applicable)
d13 4
a16 5
  application server running the PHP/Java Bridge or each HTTP server may
  own a PHP/Java Bridge and communicate with a java application server
  by exchanging java value objects. If the bridge does not detect a
  running java application server, it starts a private java process to
  serve further requests.
d123 3
a125 3
  on RedHat Enterprise 3, RedHat Fedora Core 1 and 2, Solaris 9 (Sparc,
  64 bit JVM) and Windows with RedHat Cygwin, but it should run on all
  Unix-like operating systems including HP-UX, MacOS-X, WinXP/Cygwin.
d152 3
a154 2
   3. Permanently activated in the global php.ini file.  This is
      recommended, see below.
d157 2
a158 2
      external java process.  Recommended for web servers, see below.
      This mode is used by the RPM package available for RedHat
d183 1
a183 1
        
d201 13
a213 3
          # It is recommended to enable the following option and
          # to start a JVM as a separate process.
          #java.socketname=/var/run/.php-java-bridge_socket
d233 2
a234 2
   Starting the Java VM as a separate process
   ------------------------------------------
d236 10
a245 92
  If you want to run the extension in the web-server, you should enable
  the java.socketname option and start the java VM before you start the
  web-server.  The java VM can be started with the supplied script. For
  example with the command:

    sh php-java-bridge

  The script "php-java-bridge.service" can be used on SysV based init
  systems to automatically start and stop the bridge as a system
  service.  Please see the RedHat RPM download for an example.

------------------------------------
  Using GNU Java
  --------------

  In case you don't want to ship a JVM or JRE with your product,
  you can use GNU gcc to compile the java part and your classes
  into native code. 
  In the directory php-java-bridge_1.x.y type:

   gcj --version  # must be gcj 3.3.3 or above!

   phpize && ./configure && make &&  su -c "make install"

  This creates a native, dynamic linked executable in the PHP
  extension directory.  It can be started with the command:

      `php-config --extension-dir`/java <java.socketname> <loglevel> <log-file>

  For example:

      `php-config --extension-dir`/java /var/run/.php-java-bridge_socket 1 "" |
        tee /var/log/php-java-bridge.log

  Then direct the bridge to the server-socket by hard-coding the
  java.socketname to /var/run/.php-java-bridge_socket (as described
  in the install instructions) and re-start the apache service.

  If you now invoke the test.php file, you should see the
  output from GNU Java (e.g.):

   ./test.php | fgrep java.vendor
     java.vendor -> Free Software Foundation, Inc.
     java.vendor.url -> http://gcc.gnu.org/java/

  GNU gcc is a "ahead of time" compiler. That means that classes
  which are added after compilation must be interpreted by the
  GNU java interpreter.  There's no "just in time" compiler.
  To compile your classes with the java executable you can append 
  the classes, java or jar files at the end of the java_SOURCES
  line of the server/Makefile.am.  For example:
    
  java_SOURCES= java.c JavaBridge.java my_file.java

  Then type "make install" to re-install the binary. 

  If you want to compile the server part as a separate component;
  the server sub-directory is driven by autoconf and has been
  configured with the command:

     sh autogen.sh
     dir=../modules
     ./configure --with-java --libdir=$dir --datadir=$dir --bindir=$dir

  After you have created the executables you can distribute the 
  contents of the php-java-bridge-x.y.z/modules directory. It
  should contain the files "java", "libnatcJavaBridge.so", "java.so"
  (autoconf/libtool creates other files, you can delete them). The
  java.so is the PHP module, the other files are required to start the
  server part.  The "java" executable may need other system libraries, 
  for example "gcj.so" and "gcc_s.so". They should be installed on the 
  target system.

  Additional shared libraries can be copied into the php extension
  directory (see command "php-config --extension-dir"), additional
  java libraries (.jar files) can be installed in the sub-directory
  lib/ of the php extension directory.

  GNU Java still has some limitations.  Because the SUN java classes
  are not free software, all GNU java classes had to be written from
  scratch.  It may happen that the GNU java classes contain bugs or
  have certain limitations.  For example con.getContentLength()
  constantly returns -1; length not available.
   
  However, GNU java is already good enough to be used as a bridge
  between PHP and the "real" java application server such as BEA
  WebLogic. It can be used to implement the presentation- and,
  depending on the project, even the service layer.

  | -----------------WEB SERVER --------------------- | -- APP SERVER --|
    Web-Server |<LOCAL SOCKETS>| PHP/Java Bridge |<TCP/IP>|  Java Apps   
    php <-low level communication -> gnu jvm <- value objects -> sun jvm
d370 109
@


1.36
log
@Release-1.0.8
@
text
@d422 1
a422 1
  Example: make CFLAGS="-m64 -DJAVA_COMPILE_DEBUG"
@


1.35
log
@ZTS
@
text
@d422 1
a422 1
  Example: make CFLAGS="-m64"
@


1.34
log
@use java security instead of dropping the process privileges
@
text
@d4 14
a17 11
  The PHP/Java Bridge is a PHP module which connects the PHP object
  system with the Java object system. It can be used to access java
  based applications running in a java application server. The
  PHP/Java bridge communicates with the application server through local
  sockets using an efficient communication protocol.  This means that
  only one JVM runs to serve all clients within a multi-process
  HTTP-Server.  Each client process communicates with a corresponding
  thread spawned by the running application server.

  If the bridge does not detect a running java application server, 
  it starts a private java process to serve further requests.
d21 87
a107 51
  * new java("CLASSNAME"): References and instanciates the class
    CLASSNAME. After script execution the referenced classes may be
    garbage collected. To access classes within other classes the
    class$innerClass syntax must be used instead of the normal dot
    notation. Examples:

      $String = new java("java.lang.String");
      print $String->valueOf(null);

      $hello = new java("java.lang.String", "hello");
      print $hello;

      $inner = new java('package.testClass$innerClass');
      $inner->value = 2;

  * new java_class("CLASSNAME"): References the class CLASSNAME but
    does not call a constructor. The object returned is the class
    object. After script execution the referenced classes may be garbage
    collected. Example:

      $Class = new java_class("java.lang.Object");
      $obj = $Class->newInstance();

  * java_set_library_path("JAR1;JAR2"): Makes additional libraries
    available to the current script. JAR can either be a "http:", "ftp:",
    "file:" or a "jar:" location. Example:
     
      $file=new java("java.io.File", "WEB_INF/web.xml");

      java_set_library_path("file:c:/xerces.jar;http://localhost/jdom.jar");
      $builder = new java("org.jdom.input.SAXBuilder");
      $doc = $builder->build($file);
      $root = $doc->getRootElement();
      $servlets = $root->getChildren("servlet");
      java_set_library_path("");

      echo "this file has " . $servlets->size() . " servlets\n";

  * java_exception: A java exception class. Available in PHP 5 and
    above only. Example:

      try {
       new java("java.lang.String", null);
      } catch(java_exception $ex) {
         $trace = new java("java.io.ByteArrayOutputStream");
         $ex->printStackTrace(new java("java.io.PrintStream", $trace));
         print "java stack trace: $trace\n";
      }

  * java_instanceof(OBJECT, CLASS): Tests if the java object OBJECT is
    an instance of the java class CLASS or not. Example:
d109 2
a110 5
      foreach($list as $key=>$value) {
        if($value instanceof java)
          if(java_instanceof($value, $ListClass))
            ...
      }
d112 2
a113 2
  * java_last_exception_get(): Returns the last exception instance or
    null. Example:
d115 1
a115 11
      if(java_last_exception_get()) 
        java_last_exception_get()->getMessage();

  * java_last_exception_clear(): Clears the error condition. Example:

      java_last_exception_clear();
      while(!java_last_exception_get()) {
        ...
      }

  There is one example provided: test.php.  You can either invoke the
d117 1
a117 1
  root of you web-server and invoke the file using the browser.
d119 3
a121 4
  The PHP/Java bridge is a replacement for the ext/java bridge shipped
  with PHP 4.  It is not possible to run the build-in bridge and the
  PHP/Java bridge at the same time.  Since version 1.0.7 the bridge is
  implements with the proposed jsr223 (where applicable).
d124 4
a127 4
  on RedHat Enterprise 3, RedHat Fedora Core 1 and 2, Solaris9 (Sparc,
  64 Bit JVM) and Windows98 with RedHat Cygwin, but it should run on
  all Unix-like operating systems including HP-UX, MacOS-X,
  WinXP/Cygwin.
@


1.33
log
@secure mode
@
text
@d96 1
a96 3
  compatible with the proposed jsr223 (where applicable).  However,
  instead of writing javaclass() and javaexception, you can use
  java_class() and java_exception.
d152 1
d155 1
a155 1
          ./configure --with-java=/opt/IBMJava2-14 --disable-secure-mode &&
d201 1
a201 1
  If you want to test the extension in the web-server, you should enable
d203 2
a204 2
  web-server.  The java VM can be started either via the
  "php-java-bridge" script or by typing the following command:
d206 5
a210 28
            JAVA_HOME=<java.java_home> <java.java> \
                                        -Djava.library.path=<java.libpath>
                                        -Djava.class.path=<java.classpath> 
                                        -Djava.awt.headless=true  
                                        JavaBridge 
                                        <java.socketname>
                                        <java.log_level>
                                        <java.log_file>

  For example in a gnome-terminal type:

            JAVA_HOME=/opt/jdk1.4 $JAVA_HOME/bin/java \
                    -Djava.library.path=/usr/lib/php4 \
                    -Djava.class.path  =/usr/lib/php4 \
                    -Djava.awt.headless=true \
                     JavaBridge \
                     /var/run/.php-java-bridge_socket \ 
                     1 \
                     "" | tee /var/log/php-java-bridge.log

  If you are unsure how to start the java process, please look at the
  output of the above phpinfo() command.  One of the last lines shows
  the command required to start the JVM.  The distribution contains two
  scripts tested on RedHat Enterprise Linux 3.  They start the JVM based
  on the information from phpinfo(). The "php-java-bridge" command
  starts the JVM and the "php-java-bridge.service" can be used on SysV
  based init systems to automatically start and stop the bridge as a
  service.
d340 2
a341 2
     ext/java.  Edit the file php-4.3.x/ext/java/config.m4 and replace
     the first 4 lines with these:
a399 39
  Recognized configure options
  ----------------------------

  The top-level configure script recognizes the following options:

  * --enable-secure-mode: Changes the privileges of the
   request-handling java thread to run with the same permissions that the
   authentificated user has.  This mode makes it impossible for a local
   intruder to gain higher privileges by attacking the java VM or the
   PHP/Java Bridge.  Furthermore the user credentials are checked
   directly by the kernel and are passed to the server via a secure
   channel. Thus it is impossible to access the PHP/Java Bridge server
   without having a valid user account.

   This feature works only on certain operating systems and only with
   java VM's which support running threads with non-default privileges: 
   a) the operating system must be able to pass user credentials via a
   secure channel and b) the java VM must be prepared to deal with
   user-threads that have changed their user ID and group ID to match the
   credentials passed by the kernel.  Operating systems which support
   this are BSD, Solaris and Linux. Java VM's which can handle java
   threads with reduced permissions are Sun JDK 1.4.2_02 and above and
   Sun JDK 1.5. 

   Operating systems which do not support this feature are MacOS X,
   older BSD variants, HP-UX and Linux kernel before version 2.3. Java
   VM's which crash when thread privileges are changed include IBM JDK
   1.4.1 and GNU Java (all versions); these VM's crash when the
   user-threads try to notify their parents by sending a pthread signal,
   something that doesn't work anymore because the user-threads have the
   necessary permissions revoked. Default is --disable-secure-mode.

  * --with-java=JAVA_HOME: Use the java VM located in the directory
    JAVA_HOME/bin.  Default is no java, which means use GNU GCC/GCJ
    to compile java into native code.  

    Example: ./configure --with-java=/opt/jdk1.5

------------------------------------
@


1.32
log
@readme
@
text
@d30 1
a30 1
      $inner = new java("package.testClass$innerClass");
d156 1
a156 1
          ./configure --with-java=/opt/IBMJava2-14 &&
a417 5
   * -DCFG_JAVA_SOCKET_ANON: Use the BSD/Linux abstract namespace instead
     of creating a socket file.  Will only work on modern Linux/BSD
     implementations but not on MacOS X for example (struct ucred is
     non-standard).  Experimental. 

d424 39
@


1.31
log
@release 1.0.7
@
text
@d38 1
a38 1
      $Class = new java_class("java.lang.String");
d95 4
a98 1
  PHP/Java bridge at the same time.
d159 1
a159 1

d246 2
a247 2
   phpize && ./configure --with-java
   make install
d438 1
a438 1
   2: Log java errors and java exceptions.
@


1.30
log
@php 5
@
text
@d152 4
a155 5
          phpize && ./configure --with-java=/opt/IBMJava2-14
          make CFLAGS="-DNDEBUG"

          su <password>
          make install
d322 1
a322 1
          make CFLAGS="-DNDEBUG -m64"
d404 2
a405 1
   * -DNDEBUG: Disables the assert() statement and other debug code.
d407 2
a408 1
   * -O0 -g3: Include full debug information into the binary.
d423 1
a423 1
  Example: make CFLAGS="-m64 -DNDEBUG"
@


1.29
log
@*** empty log message ***
@
text
@d18 1
a18 1
  * new java("CLASSNAME"): Instanciates or references the class
d20 3
a22 1
    garbage collected. Examples:
d30 11
d67 9
d80 1
a80 1
        java_last_exception_get()->toString();
@


1.28
log
@php 4/5
@
text
@d25 1
a25 1
      $hello = new java("java.lang.String", "hello")
@


1.27
log
@Version 1.1
@
text
@d20 7
a26 21
    garbage collected. That means that static classes cannot be used to
    hold session data unless the session keeps a reference to them. In any
    case it is better to use a java.util.Properties object or a database
    to store session data.
     <?php
     java_set_library_path("file:c:/mytest.jar");
     $mytest = new java("mytest");
     // count() increments and returns the value of a static variable
     print $mytest->count();
     print $mytest->count();
     java_set_library_path("");
     $mytest = new java("mytest");
     print $mytest->count();
     ?>
     ==> 1 2 3
     <?php
     java_set_library_path("file:c:/mytest.jar");
     $mytest = new java("mytest");
     print $mytest->count();
     ?>
     ==> Result undefined, may either be 1 or 4.
d30 23
a52 1
    "file:" or a "jar:" location.
d55 4
a58 1
    null. Since PHP 5 you can use try/catch instead.
d60 6
a65 2
  * java_last_exception_clear(): Clears the error condition. Since PHP
    5 you can use try/catch instead.
@


1.26
log
@readme
@
text
@d4 1
a4 1
  The PHP/Java Bridge is a PHP 4 module which connects the PHP object
d47 1
a47 1
    null.
d49 2
a50 1
  * java_last_exception_clear(): Clears the error condition.
d113 1
a113 1
          php-config --version # PHP 4.3.2 or above. For PHP5 see below.
a341 21
  PHP 5 support
  -------------

  The PHP/Java bridge currently does not support the new PHP 5 object 
  system.

  Zend is working with Sun Microsystems to define a standard
  script interface for java, please see 

    http://www.jcp.org/en/jsr/detail?id=223

  for details.  When available this interface will allow PHP 5 to
  communicate with the JVM more efficiently; e.g. it will be possible 
  to compile and then execute code multiple times.
  However, it may take some time (a few years probably) until a stable
  solution is available.

  Until an official PHP5/Java binding based on JSR-223 exists,
  please use PHP 4 with the PHP/Java Bridge.

------------------------------------
a404 48
------------------------------------
        
   This module is based on the ext/java module written by Sam Ruby.
   His original comments follow.

   A few things to note:

     1) new Java() will create an instance of a class if a suitable constructor
        is available.  If no parameters are passed and the default constructor
        is useful as it provides access to classes like "java.lang.System"
        which expose most of their functionallity through static methods.

     2) Accessing a member of an instance will first look for bean properties
        then public fields.  In other words, "print $date.time" will first
        attempt to be resolved as "$date.getTime()", then as "$date.time";

     3) Both static and instance members can be accessed on an object with
        the same syntax.  Furthermore, if the java object is of type
        "java.lang.Class", then static members of the class (fields and
        methods) can be accessed.

     4) Exceptions raised result in PHP warnings, and null results.  The
        warnings may be eliminated by prefixing the method call with an
        "@@" sign.  The following APIs may be used to retrieve and reset
        the last error:

          java_last_exception_get()
          java_last_exception_clear()

     5) Overload resolution is in general a hard problem given the
        differences in types between the two languages.  The PHP Java
        extension employs a simple, but fairly effective, metric for
        determining which overload is the best match.  

        Additionally, method names in PHP are not case sensitive, potentially
        increasing the number of overloads to select from.

        Once a method is selected, the parameters are cooerced if necessary, 
        possibly with a loss of data (example: double precision floating point
        numbers will be converted to boolean).

     6) In the tradition of PHP, arrays and hashtables may pretty much
        be used interchangably.  Note that hashtables in PHP may only be
        indexed by integers or strings; and that arrays of primitive types
        in Java can not be sparse.  Also note that these constructs are
        passed by value, so may be expensive in terms of memory and time.


@


1.25
log
@*** empty log message ***
@
text
@d23 1
a23 1
    instead to store session data.
d197 2
a198 2
   Using GNU Java
   --------------
d200 4
a203 4
   In case you don't want to ship a JVM or JRE with your product,
   you can use GNU gcc to compile the java part and your classes
   into native code. 
   In the directory php-java-bridge_1.x.y type:
d209 2
a210 2
   This creates a native, dynamic linked executable in the PHP
   extension directory.  It can be started with the command:
d214 1
a214 1
   For example:
d219 3
a221 3
   Then direct the bridge to the server-socket by hard-coding the
   java.socketname to /var/run/.php-java-bridge_socket (as described
   in the install instructions) and re-start the apache service.
d223 2
a224 2
   If you now invoke the test.php file, you should see the
   output from GNU Java (e.g.):
d230 6
a235 6
   GNU gcc is a "ahead of time" compiler. That means that classes
   which are added after compilation must be interpreted by the
   GNU java interpreter.  There's no "just in time" compiler.
   To compile your classes with the java executable you can append 
   the classes, java or jar files at the end of the java_SOURCES
   line of the server/Makefile.am.  For example:
d237 1
a237 1
   java_SOURCES= java.c JavaBridge.java my_file.java
d239 1
a239 1
   Then type "make install" to re-install the binary. 
d241 3
a243 3
   If you want to compile the server part as a separate component;
   the server sub-directory is driven by autoconf and has been
   configured with the command:
d249 28
a276 13
   After you have created the executables you can distribute the 
   contents of the php-java-bridge-x.y.z/modules directory. It
   should contain the files "java", "libnatcJavaBridge.so", "java.so"
   (autoconf/libtool creates other files, you can delete them). The
   java.so is the PHP module, the other files are required to start the
   server part.  The "java" executable may need other system libraries, 
   for example "gcj.so" and "gcc_s.so". They should be installed on the 
   target system.

   Additional shared libraries can be copied into the php extension
   directory (see command "php-config --extension-dir"), additional
   java libraries (.jar files) can be installed in the sub-directory
   lib/ of the php extension directory.
@


1.24
log
@print usage
@
text
@d27 1
a27 1
     // count() increments and returns value of a static variable
d47 1
a47 1
     null.
d107 1
a107 1
  In the directory php-java-bridge_1.x.y type:
d128 1
a128 1
  To permanently activate the extension for all users, please add the
d141 1
a141 1
  After the module is activated, verify that the module is running by
d156 1
a156 1
  phpinfo() so see the original values.
d216 1
a216 1
      `php-config --extension-dir`/java /var/run/.php-java-bridge_socket 1 "" | 
d219 1
a219 1
   Then direct the bridge to the server socket by hard-coding the
d233 1
a233 1
   To compile your classes with the java executable, you can append 
d251 1
a251 1
   should contain the files "java", libnatcJavaBridge.so, and java.so
d254 3
a256 3
   server part.  The java executable may need other system libraries, for
   example gcj.so and gcc_s.so which should be installed on the target
   system.
d272 6
a277 6
  The installation expects that the default JVM found in
  $JAVA_HOME/bin/java is a 64 bit VM. Unfortunately this is not the
  case with the SUN JDK (Linux and Solaris) which install the 64bit VM
  in some sub-directory of $JAVA_HOME/bin. On Solaris9 this is
  $JAVA_HOME/bin/sparcv9. The location on Linux may depend on the
  architecture.
d280 3
a282 3
  blindly search all sub-directories, it is your job to direct the bridge
  to the 64 bit JVM.  The relevant php.ini entry is java.java, see install
  instructions above.  
@


1.23
log
@readme
@
text
@d279 1
a279 1
  Since there is not standard installation directory and we cannot
@


1.22
log
@readme
@
text
@d4 8
a11 8
  The PHP/Java bridge connects the PHP object system with the Java
  object system. It can be used to access java based applications 
  running in a java application server. The PHP/Java bridge communicates 
  with the application server through local sockets using an efficient
  communication protocol.  This means that only one JVM runs to serve
  all clients within a multi-process HTTP-Server.  Each client process
  communicates with a corresponding thread spawned by the running
  application server.
d23 1
a23 1
    instead.
d60 4
a63 3
  on RedHat Enterprise 3, RedHat Fedora Core 1 and 2, Solaris9 (Sparc)
  and Windows98 with RedHat Cygwin, but it should run on all Unix-like
  operating systems including HP-UX, MacOS-X, WinXP/Cygwin.  
d71 1
a71 1
   2. In the sub-directory "lib" of the PHP extension directory if it
d135 2
a136 2
          java.log_level=5
          java.log_file=/tmp/java.log
d139 1
a139 1
          #java.socketname=/tmp/.php_java
d167 1
a167 1
            JAVA_HOME=<java.home> <java.home>/bin/java \
d173 2
a174 2
                                        <loglevel>
                                        <log-file>
d183 3
a185 3
                     /tmp/.php_java \ 
                     5 \
                     "" | tee /tmp/java.log
d216 2
a217 1
      `php-config --extension-dir`/java /tmp/.php_java 5 "" | tee /tmp/java.log
d219 3
a221 4

   Then point the bridge to the socket /tmp/.php_java by hard-coding 
   the java.socketname to /tmp/.php_java (as described in the install
   instructions) and re-start the apache service.
d250 12
a261 7
   contents of the php-java-bridge-x.y.z/modules directory which
   should contain the files "java", libnatcJavaBridge.so and java.so.
   The java.so is the PHP module, the other files are required
   to start the server part.  The java executable may need other
   system libraries, for example gcj.so and gcc_s.so which should
   be installed on the target system or copied/linked into the
   extension-dir (see php-config --extension-dir).
d366 26
d393 10
d404 7
@


1.21
log
@readme
@
text
@d18 6
a23 9
  * new java("<classname>"): Instanciates the class <classname>

  * java_set_library_path("<jar1>;<jar2>"): Makes additional libraries
     available to the current script.  The <jar> can either be  
     a "http:", "ftp:", "file:" or a "jar:" location.  After script
     execution the referenced classes may be garbage collected.  That
     means that static classes cannot be used to hold session data;
     use a Properties object instead. 
     
d25 8
a32 3
      java_set_library_path("file:c:/mytest.jar");
      $mytest = new java("mytest");
      print $mytest->add(1, 2);
d34 1
a34 2
     ==> 3

d36 3
a38 2
      $mytest = new java("mytest");
      print $mytest
d40 5
a44 1
     ==> Result undefined, mytest may have been garbage collected.
d55 3
a57 24
  The PHP/Java bridge is meant as a replacement for the ext/java bridge
  shipped with PHP 4.  It is not possible to run the build-in bridge and
  the PHP/Java bridge at the same time.


Build and execution instructions:
---------------------------------

  In the directory php-java-bridge_1.x.y type:

          java -version        # 1.3 or above (1.4.2_02 or IBM JVM recommended)
          gcc --version        # 3.2.3 or above.
          apachectl -version   # Apache 1.3 or above.
          php-config --version # PHP 4.3.2 or above. For PHP5 see below.

          phpize && ./configure --with-java=/opt/IBMJava2-14
          make CFLAGS="-DNDEBUG"

          su <password>
          make install

  If your administrator allows you to dynamically load extensions, you
  can now test the extension by invoking the test.php with the 
  command: php ./test.php.
d102 21
a122 3
  You have already installed the bridge in mode #1.  The following
  sections describe the other options.
 
d254 2
a255 1
   be installed on the target system.
@


1.20
log
@Load libraries from /usr/share/java or from ext_dir/lib
@
text
@d5 7
a11 7
  object system. For example it can be used to access java based
  applications running in a java application server. The PHP/Java
  bridge communicates with the application server through local
  sockets using an efficient communication protocol.  This means that
  only one JVM runs to serve all clients within a multi-process
  HTTP-Server.  Each client process communicates with a corresponding
  thread spawned by the running application server.
d13 2
a14 2
  If the bridge detects that a java application server is not already
  running, it starts a private java process to serve further requests.
d18 1
a18 1
  * new java("<classname>"): Instanciates the java class.
d21 5
a25 4
    available to the current script.  The <jar> can be either be
    a "http:", "ftp:", "file:" or a "jar:" location.  After the script
    execution the classes used by the script may or may not be garbage
    collected:
d41 1
a41 1
    null.
d59 1
a59 1
          java -version        # 1.3 or above (1.4.2_02 or IBM Java recommended).
d74 5
d80 1
a80 1
  places:
d82 2
a83 2
   1. In the script jar_library_path of the current PHP script, if
       set (see PHP_FUNCTION(java_set_library_path)).
d85 3
a87 3
   2. In the sub-directory "lib" of the PHP extension directory:
      "`php-config --extension-dir`/lib" if it exists when the
      java VM starts the bridge.
d89 2
a90 2
   3. In the /usr/share/java/ directory, if it exists when the 
      java VM starts the bridge.
d99 3
a101 4
   2. Compiled into the PHP binary or library.  This is not
      recommended because it requires that you mus compile PHP
      yourself.  If you want to do this, please see the Windows
      install description below.
d106 4
a109 4
   4. Permanently activated with the Java VM running as a
      separate process.  Recommended for web servers, see below.
      This mode is used in the binary RPM package available for
      RedHat Enterprise Linux.
d117 2
a118 1
  The following sections describe each of these options.
d142 12
a191 17
  This module has been tested on a Mandrake Linux System (Version 9.2),
  on RedHat Enterprise 3, RedHat Fedora Core 1 and 2, Solaris9 (Sparc)
  and Windows98 with RedHat Cygwin, but it should run on all Unix-like
  operating systems including HP-UX, MacOS-X, WinXP/Cygwin.  

  Other configuration options which should have been set up by the
  configure script but which can be changed later are:

          java.libpath   = <system dependent path to natcJavaBridge.so>
          java.classpath = <system dependent path to JavaBridge.class>
          java.java_home = <system dependent path to the java install dir>
          java.java      = <system dependent path to the java binary>
          java.socketname= <hard-coded socketname to start the VM separately>

  If you change the above values, please first look at the output of
  phpinfo() so see the original values.

a244 1

a292 1

a305 1

@


1.19
log
@Solaris and Win98 support
@
text
@d16 28
d69 23
a91 3
   If your administrator allows you to dynamically load extensions, you
   can now test the extension by invoking the test.php with the 
   command: php ./test.php.
d93 4
d98 16
d118 4
a121 6
  
  It is recommended to activate the module in the global php ini file.

  To permanently activate the extension add the following lines to the
  php.ini or add a file java.ini to the directory that contains the php
  module descriptions (usually /etc/php.d/) with the following content:
d136 4
d142 1
a142 1
  web-server.  The java VM can then be started either via the 
a273 4
  A Sun JVM that reads a wrong elf class will silently terminate after
  the LoadLibrary.  The Sun VM does *not* indicate an error condition
  or throw an exception.

d275 2
a276 2
  Windows issues
  --------------
d279 13
a291 3
  (DLL's). It is not possible to link with a shared library that is
  not installed or not in the path; this OS requires that programs or
  libraries must be linked with concrete instances.
a292 2
  Since it is not possible to compile the bridge as a standalone
  module, we will compile it with PHP.
d300 7
a306 1
     ext/java.
d308 1
a308 1
  4. Invoke autoconf to update our java module within the PHP build
d339 2
a340 2
  Dynamic module loading
  ----------------------
d342 2
a343 1
  It is possible to load the bridge dynamically, for example with:
@


1.18
log
@gcc2
@
text
@d4 6
a9 6
  The PHP/Java bridge connects the PHP object system with the Java object 
  system. For example it can be used to access java based applications
  running in a java application server which is running on the local host.
  The PHP/Java bridge communicates with the application server through 
  local sockets using an efficient communication protocol.  This means
  that only one JVM runs to serve all clients within a multi-process
d14 1
a14 1
  running, it starts one to serve further requests.
d72 2
a73 1
  web-server.  The java VM can then be started as follows
d105 3
a107 9
  on RedHat Enterprise 3, RedHat Fedora Core 1 and 2, but it should run
  on all Unix-like operating systems including Solaris, Mac.

  However, the extension currently does not compile on systems which do
  not support fork()/exec().  On these systems you must disable the code
  in bind.c and start the java application server yourself.  Fortunately
  all modern operating systems -- except Windows -- support
  fork()/exec()

d125 1
a125 1
   In case you don't want to ship a JVM or JRE with your product
d128 5
a132 1
   In the directory php-java-bridge_1.x.y/modules type:
d134 2
a135 12
   gcj --version  # must be gcj 3.2.3 or above!
   echo "main(int argc,char**argv){java_bridge_main_gcj(argc,argv);}">start.c
   gcj --static -fjni -oJavaBridge.srv start.c \
       ../server/JavaBridge.java \
       ../server/natcJavaBridge.c \
       [...insert additional paths to .java classes here...] \
       -I.. -I$JAVA_HOME/include -I$JAVA_HOME/include/linux


   This creates a native, static linked executable in the current
   directory which does not need any libraries anymore.  It can be
   started with the command:
d137 1
a137 1
      ./JavaBridge.srv <java.socketname> <loglevel> <log-file>
d141 1
a141 1
      ./JavaBridge.srv /tmp/.php_java 5 "" | tee /tmp/java.log
d155 81
a235 11
   It is recommended to compile the executable against shared
   libraries (ommit the above --static).  If you do this, you
   must package the JavaBridge.srv with the libraries it needs
   (at least libnatcJavaBridge.so, libgcc_s.so.1 and libgcj.so.3, see
   output of ldd command).

   On the installation system and make sure that your client
   starts the JavaBridge before the httpd service gets started. -- On
   RedHat the init.d/httpd is started as 85/15, so it should be
   sufficient to start the JavaBridge executable as #84 and stop it
   as #16.
@


1.17
log
@docu
@
text
@d68 1
a68 1
          echo "<?php phpinfo()?>" | php | fgrep "java"
@


1.16
log
@The client receives the bridge instance as the first element.  This fixes the classpath bug.
@
text
@d137 1
a137 1
   gcj --static -g0 -O2 -fjni -oJavaBridge.srv start.c \
d141 2
a142 2
       -I$JAVA_HOME/include -I$JAVA_HOME/include/linux  \
       -I..
d168 1
a168 1
   must package the JavaBridge.srv and the libraries it needs
d170 1
a170 1
   output of ldd command) into an RPM.
@


1.15
log
@Bugfix/Workaround for gcj 'AttachCurrentThread' bug
@
text
@d5 5
a9 5
  system. For example it can be used to access java based applications running 
  in a java application server which is running on the local host.  The
  PHP/Java bridge communicates with the application server through local
  sockets using an efficient communication protocol.  This means that
  only one JVM runs to serve all clients within a multi-process
@


1.14
log
@doc updates
@
text
@d30 4
a33 4
          java -version      # 1.3 or above (1.4.2_02 or IBM Java recommended).
          gcc --version      # 3.2.3 or above.
          apachectl -version # Apache 1.3 or above.
          php --version      # PHP 4.3.2 or above. For PHP5 see below.
d136 11
a146 5
   gcj -fjni -oJavaBridge.srv --main=JavaBridge JavaBridge.class \
                                          -L`pwd` -lnatcJavaBridge

   This creates a native executable in the current directory which
   does not need java anymore.  It can be started with the command:
d166 3
a168 1
   You can package the JavaBridge.srv and the libraries it needs
d170 3
a172 1
   output of ldd command) into an RPM and make sure that your client
@


1.13
log
@doc update
@
text
@d197 1
a197 1
      if (!dl("../../tmp/java.so")) {
@


1.12
log
@The server now tracks resources
@
text
@d4 3
a6 2
  The PHP/Java bridge allows one to access java based applications
  running in a java application server running on the local host.  The
d41 1
a41 1
   If your administrator allows you to dynamically load extensions you
@


1.11
log
@Close the socket in rshutdown
@
text
@d2 1
d4 18
a21 20
         The PHP/Java bridge allows one to access java based
         applications running in a java application server running 
         on the local host.  The PHP/Java bridge communicates with 
         the application server through local sockets using an 
         efficient communication protocol.  This means that only one 
         JVM runs to serve all clients within a multi-process HTTP-Server.  
         Each client process communicates with a corresponding thread 
         spawned by the running application server.

         If the bridge detects that a java application server is not
         already running, it starts one to serve further requests.

         There is one example provided: test.php.  You can either invoke
         the test.php by typing ./test.php or copy the example into the
         document root of you web-server and invoke the file using the
         browser.

         The PHP/Java bridge is meant as a replacement for the ext/java
         bridge shipped with PHP 4.  It is not possible to run the 
         build-in bridge and the PHP/Java bridge at the same time.
d25 1
d27 1
a27 1
          In the directory php-java-bridge_1.x.y type:
d40 15
a54 4
          and then activate the extension by adding the following lines to
          the php.ini or add a file java.ini to the directory that
          contains the php module descriptions (usually /etc/php.d/) with
          the following content:
d64 2
a65 2
          After the module is activated, verify that the module is running
          by typing:
d69 3
a71 4
          If you want to test the extension in the web-server, you should
          enable the java.socketname option and start the java VM
          before you start the web-server.  The java VM can then be
          started as follows
d82 1
a82 1
          For example in a gnome-terminal type:
d93 18
a110 19
          If you are unsure how to start the java process, please look at
          the output of the above phpinfo() command.  One of the last lines
          shows the command required to start the JVM.
          The distribution contains two scripts tested on RedHat Enterprise
          Linux 3.  They start the JVM based on the information from 
          phpinfo(). The "php-java-bridge" command starts the JVM and
          the "php-java-bridge.service" can be used on SysV based init
          systems to automatically start and stop the bridge as a service.

          This module has been tested on a Mandrake Linux System (Version
          9.2), on RedHat Enterprise 3, RedHat Fedora Core 1 and 2, but 
          it should run on all Unix-like operating systems including 
          Solaris, Mac.   

          However, the extension currently does not compile on systems
          which do not support fork()/exec().  On these systems you must
          disable the code in bind.c and start the java application server
          yourself.  Fortunately all modern operating systems -- except
          Windows -- support fork()/exec()
d113 2
a114 2
          Other configuration options which should have been set up by the
          configure script but which can be changed later are:
d122 2
a123 2
          If you change the above values, please first look at the output
          of phpinfo() so see the original values.
d127 1
d169 1
d187 20
@


1.10
log
@Start java in a separate process and give pval's a proper reference count.
@
text
@d31 1
a31 1
          apachectl -version # Apache 2.x or above. For Apache 1.x see below.
d58 1
a58 1
          If you want to test the extension in the web-server, you must
a176 12
  Apache 1.3 support

  If you use Apache 1.3 you must start an external java application
  using the command described above.
  Starting the bridge as a child of the httpd process is not supported.

  Apache 1.3 does not treat childs very well. During pool cleanup
  it may elect to kill any child, wether or not that child has been 
  forked by the master process or not. So if we fork our java process 
  within the httpd process this java process will be in danger 
  whenever apache has to kill some of its childs.
------------------------------------
@


1.9
log
@proper termination for the IBM JDK, README update, INSTALL added
@
text
@d29 4
d34 2
a35 3
          apachectl -version # Apache 2.x or above! For Apache 1.x see below.
          php --version      # PHP 4.3.2 or above! For PHP5 see below.
          phpize && ./configure --with-java=/opt/IBMJava2-141/ && make
d49 2
d56 1
a56 1
          echo "<?php phpinfo()?>" | php | fgrep "java status"
d59 32
a90 11
          restart the web-server after you have installed the extension.
          When the config option java.socketname is not set, the web-server
          will try to fork()/exec() the Java VM as a sub-process of the
          web-server.
          Please note that starting the VM this way is only supported
          with the following software configurations:
            * IBM JVM, PHP/Java Bridge version != 1.0.3, Apache 2.x, Unix
            * SUN JVM, PHP/Java Bridge version any, Apache 2.x, Unix
          If you want to use other JVM's or Apache 1.3 or you want
          to use the bridge on Windows, you must start the JVM yourself
          and set the java.socketname option.
d111 1
a111 1
          java.socketname= <hard-coded socketname for debugging>
a115 27
          It is recommended to start the java process outside of the
          http server.  You must start java as follows:

            JAVA_HOME=<java.home> <java.home>/bin/java \
                                        -Djava.library.path=<java.libpath>
                                        -Djava.class.path=<java.classpath> 
                                        -Djava.awt.headless=true  
                                        JavaBridge 
                                        <java.socketname>
                                        <loglevel>
                                        <log-file>

          For example in a gnome-terminal type:

            JAVA_HOME=/opt/jdk1.4 $JAVA_HOME/bin/java \
                    -Djava.library.path=/usr/lib/php4 \
                    -Djava.class.path  =/usr/lib/php4 \
                    -Djava.awt.headless=true \
                     JavaBridge \
                     /tmp/.php_java \ 
                     5 \
                     "" | tee /tmp/java.log

         Then point the bridge to the socket /tmp/.php_java by 
         hard-coding the java.socketname to /tmp/.php_java and
         re-start the apache service.

d174 2
a175 2
  Until an official PHP5/Java binding based on JSR-223 doesn't
  exist, please use PHP 4 with the PHP/Java Bridge.
@


1.8
log
@documentation updates
@
text
@d53 12
a64 2
          If you want to test the extension in the Web-Server, you must
          restart the Web-Server after you have installed the extension.
d90 2
a91 2
          For debugging or if you use Apache 1.3 you can also start an
          external java application with the following command:
a117 44
         QUICK INSTALL

           su - -c "service httpd stop"
           INST=/usr/local

           gunzip < httpd_2.x.y.tar.gz | tar xf -
           cd httpd_2.x.y
           ./configure --prefix=$INST
           make && su -c "make install"
           cd ..

           bunzip2 < php-4.3.x.tar.bz2 | tar xf -
           cd php-4.3.x
           ./configure --prefix=$INST \
                       --with-mysql \
                       --without-java \
                       --with-apxs2=$INST/bin/apxs
           make && su -c "make install"
           # now activate php in the httpd.conf
           su -c "echo 'AddType application/x-httpd-php .php' >>$INST/conf/httpd.conf"
           cd ..

           bunzip2 < php-java-bridge_1.x.y.tar.bz2 | tar xf -
           cd php-java-bridge_1.x.y
           export PATH=$INST/bin:$PATH 
           export LD_LIBRARY_PATH=$INST/lib:$LD_LIBRARY_PATH
           phpize
           ./configure --prefix=$INST \
                       --with-java=/opt/IBMJava2-141
           make && su -c "make install"
           # now activate the bridge in php.ini
           su -c "touch $INST/lib/php.ini && echo -e 'extension=java.so\n[java]' >>$INST/lib/php.ini"
           cd ..

           # test
           su -c "echo '<?php phpinfo() ?>' >$INST/htdocs/phpinfo.php; chmod +xr $INST/htdocs/phpinfo.php; apachectl restart"

           # checking cli
           echo '<?php phpinfo() ?>' | php | fgrep "java status"

           # checking web
             wget -olog -O-  http://localhost/phpinfo.php|fgrep "java status"
 
------------------------------------
@


1.7
log
@Comment about PHP 5 added
@
text
@d29 3
a31 1
          php --version  # must be PHP 4.3.2 or above! For PHP5 see below.
d77 1
a77 1
          If you change the above values, please fist look at the output
d80 2
a81 2
          For debugging you can also start a external java application 
          with the following command:
d212 12
@


1.6
log
@GNU Java supported
@
text
@d29 1
a29 1
          php --version  # must be PHP 4.3.2 or above!
d106 1
a106 1
         QUICK INSTALL:
d191 19
@


1.5
log
@GNU Java supported
@
text
@d182 1
a182 1
   Now you can package the JavaBridge and the libraries it needs
@


1.4
log
@Initialize pval's correctly so that they start with the correct ref-count.
@
text
@d149 41
a189 1
           
@


1.3
log
@bugfixes for apache 1.3.x
@
text
@d3 1
a3 1
	 The PHP/Java bridge allows one to access java based
d12 2
a13 2
	 If the bridge detects that a java application server is not
	 already running, it starts one to serve further requests.
d15 4
a18 4
	 There is one example provided: test.php.  You can either invoke
	 the test.php by typing ./test.php or copy the example into the
	 document root of you web-server and invoke the file using the
	 browser.
d20 1
a20 1
	 The PHP/Java bridge is meant as a replacement for the ext/java
d27 1
a27 1
	  In the directory php-java-bridge_1.x.y type:
d29 2
a30 2
	  php --version  # must be PHP 4.3.2 or above!
	  phpize && ./configure --with-java=/opt/IBMJava2-141/ && make
d32 2
a33 2
	  su <password>
	  make install
d35 4
a38 4
	  and then activate the extension by adding the following lines to
	  the php.ini or add a file java.ini to the directory that
	  contains the php module descriptions (usually /etc/php.d/) with
	  the following content:
d40 5
a44 5
	  extension = java.so
	  [java]
	  java.log_level=5
	  java.log_file=/tmp/java.log
	  #java.socketname=/tmp/.php_java
d46 2
a47 2
	  After the module is activated, verify that the module is running
	  by typing:
d49 1
a49 1
	  echo "<?php phpinfo()?>" | php | fgrep "java status"
d51 2
a52 2
	  If you want to test the extension in the Web-Server, you must
	  restart the Web-Server after you have installed the extension.
d54 2
a55 2
	  This module has been tested on a Mandrake Linux System (Version
	  9.2), on RedHat Enterprise 3, RedHat Fedora Core 1 and 2, but 
d59 15
a73 15
	  However, the extension currently does not compile on systems
	  which do not support fork()/exec().  On these systems you must
	  disable the code in bind.c and start the java application server
	  yourself.  Fortunately all modern operating systems -- except
	  Windows -- support fork()/exec()


	  Other configuration options which should have been set up by the
	  configure script but which can be changed later are:

	  java.libpath   = <system dependent path to natcJavaBridge.so>
	  java.classpath = <system dependent path to JavaBridge.class>
	  java.java_home = <system dependent path to the java install dir>
	  java.java      = <system dependent path to the java binary>
	  java.socketname= <hard-coded socketname for debugging>
d75 2
a76 2
	  If you change the above values, please fist look at the output
	  of phpinfo() so see the original values.
d78 1
a78 1
	  For debugging you can also start a external java application 
d87 1
a87 1
	                                <loglevel>
d90 1
a90 1
	  For example in a gnome-terminal type:
d95 1
a95 1
	            -Djava.awt.headless=true \
d99 1
a99 1
	             "" | tee /tmp/java.log
d108 1
a108 1
	   su - -c "service httpd stop"
d120 1
a120 1
	               --with-mysql \
d125 2
a126 2
	   su -c "echo 'AddType application/x-httpd-php .php' >>$INST/conf/httpd.conf"
	   cd ..
d140 2
a141 2
	   # test
	   su -c "echo '<?php phpinfo() ?>' >$INST/htdocs/phpinfo.php; chmod +xr $INST/htdocs/phpinfo.php; apachectl restart"
d143 2
a144 2
	   # checking cli
	   echo '<?php phpinfo() ?>' | php | fgrep "java status"
d146 2
a147 2
	   # checking web
  	   wget -olog -O-  http://localhost/phpinfo.php|fgrep "java status"
d149 1
a149 1
	   
d152 1
a152 1
	
d182 2
a183 2
	extension employs a simple, but fairly effective, metric for
	determining which overload is the best match.  
d185 2
a186 2
	Additionally, method names in PHP are not case sensitive, potentially
	increasing the number of overloads to select from.
d188 3
a190 3
	Once a method is selected, the parameters are cooerced if necessary, 
	possibly with a loss of data (example: double precision floating point
	numbers will be converted to boolean).
@


1.2
log
@update to 1.0.0
@
text
@d71 2
a72 1
	  java.home      = <system dependent path to the java install dir>
@


1.1
log
@Initial revision
@
text
@d3 8
a10 7
	 The PHP/Java bridge can access java based applications running in
	 a java application server running on the local host.  The
	 PHP/Java bridge communicates with the application server through
	 local sockets using an efficient communication protocol.  This
	 means that only one JVM runs to serve all clients within a
	 multi-process HTTP-Server.  Each client process communicates with
	 a corresponding thread spawned by the running application server.
d20 4
d27 1
a27 1
	  In the directory java type:
d29 2
a30 2
	  php --version  # must be PHP 4.3.3 or above!
	  phpize && ./configure --with-java=/opt/jdk1.4 && make
d37 1
a37 1
	  contains the php module descriptions (usually /etc/php/) with
d44 1
a44 1
	  java.socketname=/tmp/.php_java
d55 3
a57 2
	  9.2), but it should run on all Unix-like operating systems
	  including RedHat9, Solaris, Mac.   
d69 4
a72 3
	  java.libpath  = <system dependent path to natcJavaBridge.so>
	  java.classpath= <system dependent path to JavaBridge.class>
	  java.home     = <system dependent path to the java install dir>
d77 73
d151 1
@


1.1.1.1
log
@Initial
@
text
@@
