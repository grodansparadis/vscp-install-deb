head	1.9;
access;
symbols
	debian_version_3_2_1b-2:1.8.2.1
	debian_version_3_2_1b-1:1.8.2.1
	upstream_version_3_2_1b:1.8.2.1
	Release-4-1-2:1.8.0.10
	Release-4-0-8:1.8.0.8
	debian_version_4_0_8a-1:1.8
	upstream_version_4_0_8a:1.8
	jostb-debian-ubuntu-patch:1.8.0.6
	debian_version_4_0_8-1:1.8
	upstream_version_4_0_8:1.8
	debian_version_4_0_7-1:1.8
	upstream_version_4_0_7:1.8
	debian_version_4_0_6-1:1.8
	upstream_version_4_0_6:1.8
	debian_version_4_0_2-1:1.8
	upstream_version_4_0_2:1.8
	Release-4-0-2_Root:1.8
	Release-4-0-2:1.8.0.4
	upstream_version_4_0_1:1.8
	debian_version_4_0_1-2:1.8
	Release-3-2-1:1.8.0.2
	Release-3-1-8:1.5.0.2;
locks; strict;
comment	@# @;


1.9
date	2007.07.11.14.30.37;	author jost_boekemeier;	state dead;
branches;
next	1.8;

1.8
date	2006.12.10.11.53.44;	author jost2345;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2006.12.09.09.35.02;	author jost2345;	state Exp;
branches;
next	1.6;

1.6
date	2006.12.05.20.11.22;	author jost2345;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.05.20.40.33;	author jost2345;	state Exp;
branches;
next	1.4;

1.4
date	2006.08.28.18.05.11;	author jost2345;	state Exp;
branches;
next	1.3;

1.3
date	2006.08.27.14.40.11;	author jost2345;	state Exp;
branches;
next	1.2;

1.2
date	2006.08.21.17.41.52;	author jost2345;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.19.12.42.03;	author jost2345;	state Exp;
branches;
next	;

1.8.2.1
date	2007.07.31.16.11.05;	author jost_boekemeier;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Release-4-1-8
@
text
@<?php /*-*- mode: php; tab-width:4 -*-*/

  /* java_Proxy.php -- contains the main interface

  Copyright (C) 2006 Jost Boekemeier

  This file is part of the PHP/Java Bridge.

  The PHP/Java Bridge ("the library") is free software; you can
  redistribute it and/or modify it under the terms of the GNU General
  Public License as published by the Free Software Foundation; either
  version 2, or (at your option) any later version.

  The library is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with the PHP/Java Bridge; see the file COPYING.  If not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
  02111-1307 USA.

  Linking this file statically or dynamically with other modules is
  making a combined work based on this library.  Thus, the terms and
  conditions of the GNU General Public License cover the whole
  combination.

  As a special exception, the copyright holders of this library give you
  permission to link this library with independent modules to produce an
  executable, regardless of the license terms of these independent
  modules, and to copy and distribute the resulting executable under
  terms of your choice, provided that you also meet, for each linked
  independent module, the terms and conditions of the license of that
  module.  An independent module is a module which is not derived from
  or based on this library.  If you modify this library, you may extend
  this exception to your version of the library, but you are not
  obligated to do so.  If you do not wish to do so, delete this
  exception statement from your version. */

require_once("java/Client.php");
  
function __javaproxy_Client_getClient() {
  static $client;
  if(!isset($client)) {
	$client=new java_Client();
  }
  return $client;
}
function java_last_exception_get() {
  $client = __javaproxy_Client_getClient();
  return $client->getProperty(0, "lastException");
}
function java_last_exception_clear() {
  $client = __javaproxy_Client_getClient();
  $client->setProperty(0, "lastException", null);
}
function java_values($object) {
  $client = __javaproxy_Client_getClient();
  return $client->invokeMethod(0, "getValues", array($object));
}
function java_reset() {
  $client = __javaproxy_Client_getClient();
  user_error("Your script has called the privileged procedure \"java_reset()\" which resets the java back-end to its initial state. Therefore all java caches are gone.");
  return $client->invokeMethod(0, "reset", array());
}
function java_inspect($object) {
  $client = __javaproxy_Client_getClient();
  return $client->invokeMethod(0, "inspect", array($object));
}
function java_set_file_encoding($enc) {
  $client = __javaproxy_Client_getClient();
  return $client->invokeMethod(0, "setFileEncoding", array($enc));
}
function java_instanceof($ob, $clazz) {
  $client = __javaproxy_Client_getClient();
  return $client->invokeMethod(0, "instanceOf", array($ob, $clazz));
}
function java_require($arg) {
  $client = __javaproxy_Client_getClient();
  return $client->invokeMethod(0, "updateJarLibraryPath", 
						array($arg, ini_get("extension_dir")));
}
function java_session_array($args) {
  $client = __javaproxy_Client_getClient();
  if(!isset($args[0])) $args[0]=null;
  if(!isset($args[1])) $args[1]=false;
  if(!isset($args[2])) {
	$sesion_max_lifetime=(int)ini_get("session.gc_maxlifetime");
	if(!isset($session_max_lifetime)) $session_max_lifetime=1440;
	$args[2] = $session_max_lifetime;
  }
  return $client->getSession($args);
}
function java_session() {
  return java_session_array(func_get_args());
}
function java_server_name() {
  $client = __javaproxy_Client_getClient();
  return $client->getServerName();
}
function java_context() {
  $client = __javaproxy_Client_getClient();
  return $client->getContext();
}
function java_closure_array($args) {
  $client = __javaproxy_Client_getClient();
  $args[0] = isset($args[0]) ? $client->globalRef->add($args[0]) : 0;

  /* The following is identical to 
   return $client->invokeMethod(0, "makeClosure", $args); 
   except that the ref (args[0]) must be an unsigned value */
  $client->protocol->invokeBegin(0, "makeClosure", "I");
  $n = count($args);
  $client->protocol->writeULong($args[0]); // proper PHP "long" -> Java 64 bit value conversion
  for($i=1; $i<$n; $i++) {
	$client->writeArg($args[$i]);
  }
  $client->protocol->invokeEnd();
  $val = $client->getResult();
  return $val;
}
function java_closure() {
  return java_closure_array(func_get_args());
}
function java_begin_document() {
  $client = __javaproxy_Client_getClient();
  $rc = $client->invokeMethod(0, "beginDocument", array());
  $client->setAsyncHandler();
  return $rc;
}
function java_end_document() {
  $client = __javaproxy_Client_getClient();
  $client->setDefaultHandler();
  return $client->invokeMethod(0, "endDocument", array());
}

function java_create($args, $instance) {
  $client = __javaproxy_Client_getClient();
  $name = array_shift($args);

  // compatibility with the C implementation
  if(is_array($name)) return java_create($name, $instance);

  $rc = $client->createObject($name, $args, $instance);
  return $rc;
}
class java_JavaProxy {
  var $__serialID, $__java, $__client;

  function java_JavaProxy($java){ 
	$this->__client = __javaproxy_Client_getClient();
	$this->__java=$java;
  }
  function __cast($type) {
	return $this->__client->cast($this, $type);
  }
  function __sleep() {
	$lifetime = (int)ini_get("session.gc_maxlifetime");
	if(!isset($lifetime)) $lifetime = 1440;
	$args = array($this, $lifetime);
	$this->__serialID = $this->__client->invokeMethod(0, "serialize", $args);
    return array("__serialID");
  }
  function __wakeup() {
	$lifetime = (int)ini_get("session.gc_maxlifetime");
	if(!isset($lifetime)) $lifetime = 1440;
	if(!isset($this->__client)) $this->__client=__javaproxy_Client_getClient();
	$args = array($this->__serialID, $lifetime);
    $this->__java = $this->__client->invokeMethod(0, "deserialize", $args);
  }
  function __destruct() { 
	if(isset($this->__client)) $this->__client->unref($this->__java);
  }
  function __get($key) { 
    return $this->__client->getProperty($this->__java, $key);
  }
  function __set($key, $val) {
    $this->__client->setProperty($this->__java, $key, $val);
  }
  function __call($method, $args) { 
    return $this->__client->invokeMethod($this->__java, $method, $args);
  }
  function __toString() {
    return $this->__client->invokeMethod(0,"ObjectToString",array($this));
  }
}
class java_JavaProxyClass extends java_JavaProxy {
  function java_JavaProxyClass($java){ 
	parent::java_JavaProxy($java);
  }
}

class java_objectIterator implements Iterator {
  var $proxy;
  var $__java, $__client;
  var $phpMap; // must keep a reference otherwise it will be gc'ed.
  var $hasNext;

  function java_ObjectIterator($javaProxy) {
	$this->proxy = $javaProxy;
	$this->__client = $javaProxy->__client;
  }
  function rewind() {
	$proxy = array($this->proxy);
	$this->phpMap = 
	  $phpMap = $this->__client->invokeMethod(0, "getPhpMap", $proxy);
	$this->__java = $phpMap->__java;
  }
  function valid() {
	if(isset($this->hasNext)) return $this->hasNext;
	return $this->hasNext =
	  $this->__client->invokeMethod($this->__java, "hasMore", array());
  }
  function next() {
	return $this->hasNext = 
	  $this->__client->invokeMethod($this->__java, "moveForward", array());
  }
  function key() {
	return 
	  $this->__client->invokeMethod($this->__java, "currentKey", array());
  }
  function current() {
	return 
	  $this->__client->invokeMethod($this->__java, "currentData", array());
  }
}
class java_IteratorProxy extends java_JavaProxy implements IteratorAggregate {
  function java_IteratorProxy($java) {
	parent::java_JavaProxy($java);
  }
  function getIterator() {
	return new java_ObjectIterator($this);
  }
}
class java_ArrayProxy extends java_IteratorProxy implements ArrayAccess {
  
  function java_ArrayProxy($java) {
	parent::java_JavaProxy($java);
  }
  function offsetExists($idx) {
	$ar = array($this, $idx);
    return $this->__client->invokeMethod(0,"offsetExists", $ar);
  }  
  function offsetGet($idx) {
	$ar = array($this, $idx);
    return $this->__client->invokeMethod(0,"offsetGet", $ar);
  }
  function offsetSet($idx, $val) {
	$ar = array($this, $idx, $val);
    return $this->__client->invokeMethod(0,"offsetSet", $ar);
  }
  function offsetUnset($idx) {
	$ar = array($this, $idx);
    return $this->__client->invokeMethod(0,"offsetUnset", $ar);
  }
}
class java_ExceptionProxy extends java_JavaProxy {
  function java_ExceptionProxy($java){ 
	parent::java_JavaProxy($java);
  }
  function __toExceptionString($trace) {
	$args = array($this, $trace);
	return $this->__client->invokeMethod(0,"ObjectToString",$args);
  }
}
/**
 * This decorator/bridge overrides all magic methods and delegates to
 * the proxy so that it may handle them or pass them on to the
 * back-end.  The actual implementation of this bridge depends on the
 * back-end response, see PROTOCOL.TXT: "p: char ([A]rray,
 * [C]ollection, [O]bject, [E]xception)". See the getProxy() and
 * create() methods in Client.php and writeObject() and getType() in
 * Response.java.<p>
 *
 * The constructor is an exception. If it is called, the user has
 * already allocated Java, so that $wrap is false and the proxy is
 * returned and set into $__delegate. 
 * @@see #java_InternalJava
*/
class Java extends java_JavaProxy implements IteratorAggregate, ArrayAccess {
  var $__delegate;
  function Java() {
	$delegate = $this->__delegate = java_create(func_get_args(), true);
	$this->__java = $delegate->__java;
	$this->__client = $delegate->__client;
  }
  function __cast($type) {
	return $this->__delegate->__cast($type);
  }
  function __sleep() {
	$rc = $this->__delegate->__sleep();
	$this->__serialID = $this->__delegate->__serialID;
	return array("__delegate");
  }
  function __wakeup() {
	$this->__delegate->__wakeup();
	$this->__java = $this->__delegate->__java;
  }
  function __destruct() { 
	$this->__delegate = null;
	$this->__client = null;
  }
  function __get($key) { 
    return $this->__delegate->__get($key);
  }
  function __set($key, $val) {
    $this->__delegate->__set($key, $val);
  }
  function __call($method, $args) { 
    return $this->__delegate->__call($method, $args);
  }
  function __toString() {
    return $this->__delegate->__toString();
  }

  // The following functions are for backward compatibility
  function getIterator() {
	if(func_num_args()==0) return $this->__delegate->getIterator();
	$args = func_get_args(); return $this->__call("getIterator", $args);
  }
  function offsetExists($idx) {
	if(func_num_args()==1) return $this->__delegate->offsetExists($idx);
	$args = func_get_args(); return $this->__call("offsetExists", $args);
  }
  function offsetGet($idx) {
	if(func_num_args()==1) return $this->__delegate->offsetGet($idx);
	$args = func_get_args(); return $this->__call("offsetGet", $args);
  }
  function offsetSet($idx, $val) {
	if(func_num_args()==2) return $this->__delegate->offsetSet($idx, $val);
	$args = func_get_args(); return $this->__call("offsetSet", $args);
  }
  function offsetUnset($idx) {
	if(func_num_args()==1) return $this->__delegate->offsetUnset($idx);
	$args = func_get_args(); return $this->__call("offsetUnset", $args);
  }
}
class JavaObject extends Java {
  function Java() {
	$delegate = $this->__delegate = java_create(func_get_args(), true);
	$this->__java = $delegate->__java;
	$this->__client = $delegate->__client;
  }

  function getIterator() {
	$args = func_get_args(); return $this->__call("getIterator", $args);
  }
  function offsetExists($idx) {
	$args = func_get_args(); return $this->__call("offsetExists", $args);
  }
  function offsetGet($idx) {
	$args = func_get_args(); return $this->__call("offsetGet", $args);
  }
  function offsetSet($idx, $val) {
	$args = func_get_args(); return $this->__call("offsetSet", $args);
  }
  function offsetUnset($idx) {
	$args = func_get_args(); return $this->__call("offsetUnset", $args);
  }
}  
class java_class extends JavaObject {
  function java_class() {
	$delegate = $this->__delegate = java_create(func_get_args(), false);
	$this->__java = $delegate->__java;
	$this->__client = $delegate->__client;
  }
}
class java_InternalJavaObject extends JavaObject {
  function java_InternalJavaObject($proxy) {
	$this->__delegate = $proxy;
	$this->__java = $proxy->__java;
	$this->__client = $proxy->__client;
  }
}
class JavaClass extends java_class{}
class java_InternalJava extends Java {
  function java_InternalJava($proxy) {
	$this->__delegate = $proxy;
	$this->__java = $proxy->__java;
	$this->__client = $proxy->__client;
  }
}
/**
 * A decorator pattern which overrides all magic methods.
 */
class java_exception extends Exception {
  var $__serialID, $__java, $__client;
  var $__delegate;
  function java_exception() {
	$delegate = $this->__delegate = java_create(func_get_args(), true);
	$this->__java = $delegate->__java;
	$this->__client = $delegate->__client;
  }
  function __cast($type) {
	return $this->__delegate->__cast($type);
  }
  function __sleep() {
	$rc = $this->__delegate->__sleep();
	$this->__serialID = $this->__delegate->__serialID;
	return $rc;
  }
  function __wakeup() {
	$this->__delegate->__wakeup();
	$this->__java = $this->__delegate->__java;
  }
  function __destruct() { 
	$this->__delegate = null;
	$this->__client = null;
  }
  function __get($key) { 
    return $this->__delegate->__get($key);
  }
  function __set($key, $val) {
    $this->__delegate->__set($key, $val);
  }
  function __call($method, $args) { 
    return $this->__delegate->__call($method, $args);
  }
  function __toString() {
	return $this->__delegate->__toExceptionString($this->getTraceAsString());
  }
}
class JavaException extends java_exception {}
class java_InternalException extends JavaException {
  function java_InternalException($proxy) {
	$this->__delegate = $proxy;
	$this->__java = $proxy->__java;
	$this->__client = $proxy->__client;
  }
}
	
?>
@


1.8
log
@Release-3-2-1
@
text
@@


1.8.2.1
log
@Release-3-2-1b
@
text
@d346 15
@


1.7
log
@Release-3-2-1
@
text
@d173 1
a173 1
	$this->__client->unref($this->__java);
@


1.6
log
@Release-3-2-1
@
text
@d113 1
a113 1
  $client->protocol->invokeBegin($object, $method, "I");
@


1.5
log
@Release-3-1-8rc3
@
text
@d109 13
a121 1
  return $client->invokeMethod(0, "makeClosure", $args);
@


1.4
log
@Release-3-1-8rc1
@
text
@d64 1
a64 1
  echo ("ERROR: Your script has called the privileged procedure \"java_reset()\" which resets the java back-end to its initial state. Therefore all java caches are gone.");
d89 1
a89 1
	$sesion_max_lifetime=ini_get("session.gc_maxlifetime");
d129 4
d147 1
a147 1
	$lifetime = ini_get("session.gc_maxlifetime");
d154 1
a154 1
	$lifetime = ini_get("session.gc_maxlifetime");
@


1.3
log
@Release-3-1-8rc
@
text
@d252 7
a258 7
 * This decorator overrides all magic methods and delegates to the
 * proxy so that it may handle them or pass them on to the back-end.
 * The delegate isn't passed via the constructor but allocated from
 * the back-end, based on the type of the Java instance, see
 * PROTOCOL.TXT: "p: char ([A]rray, [C]ollection, [O]bject,
 * [E]xception)". See the getProxy() and create() methods in
 * Client.php and writeObject() and getType() in Response.java.<p>
d300 2
d303 2
a304 1
	return $this->__delegate->getIterator();
d307 3
a309 2
    return $this->__delegate->offsetExists($idx);
  }  
d311 2
a312 1
    return $this->__delegate->offsetGet($idx);
d315 2
a316 1
    return $this->__delegate->offsetSet($idx, $val);
d319 2
a320 1
    return $this->__delegate->offsetUnset($idx);
d323 24
a346 1
class java_class extends Java {
d353 7
@


1.2
log
@Release-3-1-8devel1
@
text
@d181 1
d190 2
a191 1
	$phpMap = $this->__client->invokeMethod(0, "getPhpMap", $proxy);
@


1.1
log
@Release-3-2-0devel
@
text
@d9 4
a12 4
  This file ("the library") is free software; you can redistribute it
  and/or modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation; either version 2, or (at
  your option) any later version.
d84 1
a84 1
function java_session_internal($args) {
d86 1
d90 1
a90 1
	if(is_null($session_max_lifetime)) $session_max_lifetime=1440;
d96 1
a96 1
  return java_session_internal(func_get_args());
d98 1
a98 1
function java_servername() {
d106 1
a106 1
function java_closure_internal($args) {
d112 1
a112 1
  return java_closure_internal(func_get_args());
d179 2
a180 2
  var $javaProxy;
  var $phpMap, $__java;
d189 2
a190 2
	$this->phpMap = $this->__client->invokeMethod(0, "getPhpMap", $proxy);
	$this->__java = $this->phpMap->__java;
@

