head	1.49;
access;
symbols
	Release-7-1-1:1.49.0.2
	Root_Release-7-1-1:1.49
	Root_Release_7-0-1:1.47
	Release_7-0-1:1.47.0.14
	Release_7-0-0:1.47.0.12
	Root_Release_7-0-0:1.47
	Release-6-2-2:1.47.0.10
	Release-6-1-2-3:1.47
	Root_Release-6-1-2-3:1.47
	Release-6-1-2-2:1.47.0.8
	Root_Release-6-1-2-2:1.47
	debian_version_6_1_2_1-1:1.47
	upstream_version_6_1_2_1:1.47
	Release-6-1-2-1_new:1.47.0.6
	Root_Release-6-1-2-1_new:1.47
	Release-6-1-2-1:1.47.0.4
	Root_Release-6-1-2-1:1.47
	upstream_version_6_1_2:1.47
	debian_version_6_1_2-1:1.47
	Release-6-1-2:1.47.0.2
	Root_Release-6-1-2:1.47
	debian_version_6_1_1-2:1.46
	debian_version_6_1_1-1:1.46
	upstream_version_6_1_1:1.46
	Release-6-1-1:1.46.0.20
	Root_Release-6-1-1:1.46
	Release-6-0-4:1.46.0.18
	Root_Release-6-0-4:1.46
	Release-6-0-3_NEW:1.46.0.14
	Root_Release-6-0-3_NEW:1.46
	Release-6-0-3:1.46.0.16
	Root_Release-6-0-3:1.46
	Release-6-0-0:1.46.0.12
	Root_Release-6-0-0:1.46
	Release-5-5-4-1:1.46.0.10
	Root_Release-5-5-4-1:1.46
	Release-5-5-4:1.46.0.8
	Root_Release-5-5-4:1.46
	Release-5-5-3:1.46.0.6
	ROOT_Release-5-5-3:1.46
	Release-5-5-2:1.46.0.4
	Root_Release-5-5-2:1.46
	debian_version_5_5_1-1:1.46
	Release-5-5-1:1.46.0.2
	upstream_version_5_5_1:1.46
	ROOT_Release-5-5-1:1.46
	debian_version_5_5-1:1.45
	upstream_version_5_5:1.45
	ROOT_Release-5-5:1.45
	Release-5-5:1.45.0.2
	debian_version_5_4_4_2-3:1.44
	Release-5-4-4-2-1:1.44.0.2
	debian_version_5_4_4_2-2:1.44
	debian_version_5_4_4_2-1:1.43
	upstream_version_5_4_4_2:1.44
	debian_version_5_4_4_1-1:1.43
	upstream_version_5_4_4_1:1.43
	debian_version_5_4_4-1:1.43
	upstream_version_5_4_4:1.43
	Release-5-4-4:1.43.0.12
	Root_Release-5-4-4:1.43
	debian_version_5_4_3_2-1:1.43
	upstream_version_5_4_3_2:1.43
	Release_5-4-3-2:1.43.0.8
	Root_Release_5-4-3-2:1.43
	upstream_version_5_4_3_1:1.43
	debian_version_5_4_3_1-1:1.43
	Release-5-4-3:1.43.0.6
	Root_Release-5-4-3:1.43
	Root_Release-5-4-1:1.43
	Release-5-4-1:1.43.0.4
	Root_Release-5-4:1.43
	Release-5-4:1.43.0.2
	upstream_version_5_3_4:1.42
	debian_version_5_3_4-1:1.42
	ROOT_Release-5-3-4:1.42
	Release-5-3-4:1.42.0.2
	ROOT_Release-5-3-3:1.38
	Release-5-3-3:1.38.0.2
	debian_version_5_3_2_1_2-1:1.37
	upstream_version_5_3_2_1_2:1.37
	debian_version_5_3_2_1_1-1:1.37
	debian_version_5_3_2_1_1:1.37
	upstream_version_5_3_2_1_1:1.37
	Root_Release-5-3-2-1:1.37
	Release-5-3-2-1:1.37
	ROOT_RELEASE-5-3-2-1:1.37
	RELEASE-5-3-2-1:1.37.0.26
	Release-5-3-2:1.37.0.22
	Root_Release-5-3-2:1.37
	Root_Release-5-3-1:1.37
	Release-5-3-1:1.37.0.20
	Release-5-2-3-1:1.37.0.18
	Root_Release-5-2-3-1:1.37
	Release-5-2-2-4:1.37.0.16
	Root_Release-5-2-2-4:1.37
	Release-5-2-2-1:1.37.0.14
	Root_Release-5-2-2-1:1.37
	upstream_version_5_2_2:1.37
	debian_version_5_2_2-1:1.37
	Release-5-2-2:1.37.0.12
	ROOT_Release-5-2-2:1.37
	ROOT_Release-5-2-1:1.37
	Release-5-2-1:1.37.0.10
	Release-5-2-0:1.37.0.8
	ROOT_Release-5-2-0:1.37
	ROOT_Release-5-1-2:1.37
	Release-5-1-2:1.37.0.6
	Version-5-1-1:1.37.0.4
	ROOT_Version-5-1-1:1.37
	debian_version_5_1_0-1:1.37
	upstream_version_5_1_0:1.37
	ROOT_Release-5-1-0:1.37
	Release-5-1-0:1.37.0.2
	ROOT_Release-5-0-0:1.36
	Release-5-0-0:1.36.0.2
	Release-4-3-3:1.35.0.8
	ROOT_Release-4-3-3:1.35
	upstream_version_4_3_2:1.35
	debian_version_4_3_2-1:1.35
	ROOT_Release-4-3-2:1.35
	Release-4-3-2:1.35.0.6
	Release-4-3-1:1.35.0.4
	ROOT_Release-4-3-1:1.35
	debian_version_4_3_0-1:1.35
	upstream_version_4_3_0:1.35
	ROOT_Release-4-3-0:1.35
	Release-4-3-0:1.35.0.2
	debian_version_3_2_1b-2:1.30
	debian_version_4_2_2-1:1.34
	upstream_version_4_2_2:1.34
	debian_version_3_2_1b-1:1.30
	upstream_version_3_2_1b:1.30
	Release-4-1-2:1.31.0.8
	Release-4-0-8:1.31.0.6
	debian_version_4_0_8a-1:1.31
	upstream_version_4_0_8a:1.31
	jostb-debian-ubuntu-patch:1.31.0.4
	debian_version_4_0_8-1:1.31
	upstream_version_4_0_8:1.31
	debian_version_4_0_7-1:1.31
	upstream_version_4_0_7:1.31
	debian_version_4_0_6-1:1.31
	upstream_version_4_0_6:1.31
	debian_version_4_0_2-1:1.31
	upstream_version_4_0_2:1.31
	Release-4-0-2_Root:1.31
	Release-4-0-2:1.31.0.2
	upstream_version_4_0_1:1.30
	debian_version_4_0_1-2:1.30
	Release-3-2-1:1.30.0.4
	Release-3-1-8:1.30.0.2
	Release-3-0-8_root:1.19
	Release-3-0-8_Root:1.21
	Release-3-0-8:1.19.0.2
	Release-2-0-8:1.14.0.4
	Release-2-0-7_Root:1.9
	Release-2-0-7:1.9.0.2
	Release-2-0-6-branch:1.8.0.2;
locks; strict;
comment	@# @;


1.49
date	2017.03.25.15.39.43;	author jost_boekemeier;	state Exp;
branches;
next	1.48;

1.48
date	2017.03.23.21.37.37;	author jost_boekemeier;	state Exp;
branches;
next	1.47;

1.47
date	2010.04.12.16.17.15;	author jost_boekemeier;	state Exp;
branches;
next	1.46;

1.46
date	2009.08.22.16.43.26;	author jost_boekemeier;	state Exp;
branches;
next	1.45;

1.45
date	2009.07.25.13.56.02;	author jost_boekemeier;	state Exp;
branches;
next	1.44;

1.44
date	2009.05.21.07.07.50;	author jost_boekemeier;	state Exp;
branches;
next	1.43;

1.43
date	2008.12.09.12.55.03;	author jost_boekemeier;	state Exp;
branches;
next	1.42;

1.42
date	2008.12.01.22.42.43;	author jost_boekemeier;	state Exp;
branches;
next	1.41;

1.41
date	2008.11.30.17.08.48;	author jost_boekemeier;	state Exp;
branches;
next	1.40;

1.40
date	2008.11.27.21.00.26;	author jost_boekemeier;	state Exp;
branches;
next	1.39;

1.39
date	2008.11.15.14.27.50;	author jost_boekemeier;	state Exp;
branches;
next	1.38;

1.38
date	2008.10.25.17.34.28;	author jost_boekemeier;	state Exp;
branches
	1.38.2.1;
next	1.37;

1.37
date	2008.01.21.19.23.28;	author jost_boekemeier;	state Exp;
branches;
next	1.36;

1.36
date	2008.01.06.20.59.19;	author jost_boekemeier;	state Exp;
branches;
next	1.35;

1.35
date	2007.09.30.16.07.52;	author jost_boekemeier;	state Exp;
branches;
next	1.34;

1.34
date	2007.07.22.12.54.42;	author jost_boekemeier;	state Exp;
branches;
next	1.33;

1.33
date	2007.07.19.16.19.15;	author jost_boekemeier;	state Exp;
branches;
next	1.32;

1.32
date	2007.07.09.14.35.06;	author jost_boekemeier;	state Exp;
branches;
next	1.31;

1.31
date	2007.03.19.13.03.16;	author jost_boekemeier;	state Exp;
branches;
next	1.30;

1.30
date	2006.09.05.20.40.32;	author jost2345;	state Exp;
branches;
next	1.29;

1.29
date	2006.08.28.18.05.11;	author jost2345;	state Exp;
branches;
next	1.28;

1.28
date	2006.08.27.14.40.11;	author jost2345;	state Exp;
branches;
next	1.27;

1.27
date	2006.08.19.13.20.00;	author jost2345;	state Exp;
branches;
next	1.26;

1.26
date	2006.08.19.12.34.00;	author jost2345;	state Exp;
branches;
next	1.25;

1.25
date	2006.08.13.21.48.35;	author jost2345;	state Exp;
branches;
next	1.24;

1.24
date	2006.06.26.18.43.54;	author jost2345;	state Exp;
branches;
next	1.23;

1.23
date	2006.06.19.20.37.14;	author jost2345;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.07.14.33.33;	author jost2345;	state Exp;
branches;
next	1.21;

1.21
date	2006.04.30.17.01.55;	author jost2345;	state Exp;
branches;
next	1.20;

1.20
date	2006.04.28.18.15.02;	author jost2345;	state Exp;
branches;
next	1.19;

1.19
date	2006.03.07.18.59.27;	author jost2345;	state Exp;
branches;
next	1.18;

1.18
date	2006.01.30.19.39.53;	author jost2345;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.04.19.35.07;	author jost2345;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.08.18.41.56;	author jost2345;	state Exp;
branches;
next	1.15;

1.15
date	2005.11.23.19.09.42;	author jost2345;	state Exp;
branches;
next	1.14;

1.14
date	2005.08.11.18.08.16;	author jost2345;	state Exp;
branches;
next	1.13;

1.13
date	2005.07.28.17.00.40;	author jost2345;	state Exp;
branches;
next	1.12;

1.12
date	2005.07.25.20.42.27;	author jost2345;	state Exp;
branches;
next	1.11;

1.11
date	2005.07.17.13.46.23;	author jost2345;	state Exp;
branches;
next	1.10;

1.10
date	2005.07.12.15.23.09;	author jost2345;	state Exp;
branches;
next	1.9;

1.9
date	2005.06.16.16.10.25;	author jost2345;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.29.17.35.57;	author jost2345;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.08.17.11.48;	author jost2345;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.09.17.24.26;	author jost2345;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.05.14.55.38;	author jost2345;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.20.12.19.43;	author jost2345;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.17.21.57.22;	author jost2345;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.15.19.10.27;	author jost2345;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.13.21.43.28;	author jost2345;	state Exp;
branches;
next	;

1.38.2.1
date	2008.11.09.17.01.41;	author jost_boekemeier;	state Exp;
branches;
next	1.38.2.2;

1.38.2.2
date	2008.11.12.18.55.30;	author jost_boekemeier;	state Exp;
branches;
next	;


desc
@@


1.49
log
@New fastcgi implementation
@
text
@VM Bridge protocol version 5.6

Requests are marked with "->", request arguments with -), responses
with "<-".  The server continues to process requests until EOF. Only
the first character is significant.

The communication must begin with ReferenceClass, CreateInstance,
Invoke or PropertyAccess. If the client waits for a response
(predicate==1) the server sends back a single ARG, as defined
below. Returned object id's ("CID") are 32 bit unsigned integer values
starting with 1, increased by 1.


Example:

     $o = new java("java.lang.Long", 6);
     $o->toString(); // discard result

->  <CreateInstance value="java.lang.Long" predicate="I"> 
      <Long value="6"/> 
    </CreateInstance>

<-  <Object value="1" predicate="O"/>

->  <Invoke value="1" method="toString" predicate="I">
    </Invoke>

<-  <Object value="2" predicate="O"/>

->  <Unref value="2" />

->  <Unref value="1" />

A second example which shows how to avoid round-trips. 

     $o = new java("java.lang.Long", 6);
     $o->toString(); // discard result

->  <K p="2" v="java.lang.Long" i="0"> 
      <L v="6" /> 
    </K

->  <Y p="3" v="1" m="toString" i="0"></Y>

->  <U value="1" /> # result from CreateInstance


Optional requests:

All acquired [O]bject handles may be destroyed by invoking U (destroy).
However, the server tracks all handles and automatically destroys them
after EOF. It is an error to further reference destroyed handles.

If [F]inish is called, the server closes or recycles the connection
and responds with F p=A, if the connection has been recycled, p=E
otherwise. Instead of sending <F p=E/> and waiting for the response,
it is also possible to simply close the connection.



Main requests:


->
CreateInstance:
<C v=name p=C|I> ...ARGS...
</C>
v: string
p: char (Reference[C]lass, Create[I]nstance)

->
Invoke:
<I v=object m=method p=P|I> ...ARGS...
</I>
v: unsigned long
m: string
p: char (examine[P]roperty, [I]nvoke method)

When v=0, the call is directed to the current request-handling
instance of the java bridge.

->
ReferenceClass (alternate form)
<H p=1|2|3 v=name> ...ARGS...
</H>
p: char 
v: string
Predicate 2 does not write a result, but stores a result proxy under ++CID.
Predicate 3 does not write a result and does not create a result proxy.

->
CreateInstance (alternate form)
<K p=1|2|3 v=name> ...ARGS...
</K>
p: char
v: string
Predicate 2 does not write a result, but stores a result proxy under ++CID.
Predicate 3 does not write a result and does not create a result proxy.

->
PropertyAccess (alternate form)
<G p=1|2|3 v=object m=method> ...ARGS...
</G>
p: char 
v: unsigned long
m: string
Predicate 2 does not write a result, but stores a result proxy under ++CID.
Predicate 3 does not write a result and does not create a result proxy.

->
Invoke (alternate form)
<Y p=1|2|3 v=object m=method> ...ARGS...
</Y>
p: char (examine[P]roperty, [I]nvoke method)
v: unsigned long
m: string
Predicate 2 does not write a result, but stores a result proxy under ++CID.
Predicate 3 does not write a result and does not create a result proxy.


When v=0, the call is directed to the current request-handling
instance of the java bridge.



ARGS or response:
<-)
String:
<S v=str/>
v: string

<-)
Boolean:
<B v=T|F/>
v: char ([T]rue, [F]alse)

-)
Boolean:(alternate form)
<T v=1]OTHER />
v: char [1]: true, everything else: false

<-)
Long: 
<L v=l p=[O|A]/>
v: unsigned long
p: char (p[O]sitive, neg[A]tive)

-)
Long: (alternate form)
<J v=l />
v: long (signed number)

<-)
Double:
<D v=d/>
v: double

-)
Object:
<O v=object />
v: unsigned long
NULL values can be sent as either v="" or v="0"

<-
Object:
<O v=object m=TYPE p=TYPE n=[T|F]/>
v: unsigned long
m: string
p: char ([A]rray/Map, [C]ollection, [O]bject, [E]xception)
n: char result can be cached (T) or not (F)

<-
Null:
<N/>

<-
Void:
<V m=[T|F]/>
n: char result can be cached (T) or not (F)

<-
Apply:
<A v=object p=cname m=fname n=param#> ...PAIRS...
</A>
v: unsigned long
p: string
m: string
n: unsigned long
Result can be used to send back the result of the current apply
call. If v is null, the function name p must be searched in the
"current" environment.

->
Result:
<R > ...ARG...
</R>

<-)
Exception:
<E v=object m=[T|F]/>
v: unsigned long
m: T signals an unchecked exception, F a checked exception. 
Unchecked exceptions (e.g.: RuntimeException or Error) should
terminate the script immediately

<-)
Composite:
<X t=A|H /> ...PAIRS...
</X>
t: char ([A]rray, [H]ashtable)

<-)
Pair:
<P [t=N|S v=key]> ...ARG...
</P>
t: char (key is [N]umeric, [S]tring or doesn't exist (if X=A))
v: unsigned long (if X=H and t=N)
v: string (if X=H and t=S)



OPTIONAL requests:
->
Destroy:
<U v=object />
v: unsigned long

->
Exit code:
<Z v=l />
l: unsigned long (usually in the range 0-255)

<->
EndConnection:
<F p=A|E|a|e />
p: char (Keep [A]live, [E]nd connection).
Lower-case letters signal that an unchecked exception occured during
script execution.




NOTES:

If the first byte is 0177, the following byte has a special meaning:

Bit 1 0
-------
         return values  binary             comment
         as proxies(*)  data              
                                        
    0 0    yes          binary             default
    0 1    no           binary             if JAVA_PREFER_VALUES=1
    1 0    no           base64 encoded     if JAVA_PREFER_VALUES=1
    1 1    yes          base64 encoded     default

Bit 2,3,4: log level (from java.log_level)

Bit 5: always 0

Bit 6: set to 1 if bit[0,1] are used
Bit 7: set to 1 if bit[2,4] are used


If the header is missing, the following default values are used

         return values  binary             comment
         as proxies(*)  data              

           no           base64 encoded     default


(*) Primitive values like null, 1, false, etc. are proxied by
Request$PhpNull, Integer, Boolean, etc. by default.


Process communication
---------------------

  1) a simple client connects to a simple socket listener

  2) php connects to a simple socket or unix-domain socket listener

  3) php connects to a JEE server

  4) php is running within a JEE server


ad 1) 
  client opens socket connection
  client sends protocol requests
  client closes the socket connection

ad 2)
  php opens a socket connection
  php sends the bytes \0177 OPTIONS to initiate the communication
  php sends protocol requests
  php finishes the communication sending <F p="A"/>
   java sends back a <F p="A"/>
  ...
  php transparently re-uses the socket connection
  php sends the bytes \0177 OPTIONS
  php sends protocol requests
  php finishes the communication sending <F p="E"/>
   java sends back a <F p="E"/>
  php closes the socket connection

ad 3)
  php opens a HTTP socket connection to ${JAVA_HOSTS}[0] e.g.: localhost:8080
  php sends PUT ${JAVA_SERVLET}\r\rTransfer-Encoding: chunked\r\n\r\n
                      e.g.: PUT /JavaBridge/servlet.phpjavabridge\r\n\r\n
  php sends the bytes \0177 OPTIONS to initiate the communication
  php sends protocol requests
   java servlet responds with protocol responses
  php finishes the communication sending <F p="E"/>
   java servlet sends back a <F p="E"/>
  php sends final chunk: 0000\r\n\r\n
   java servlet sends final chunk: 0000\r\n\r\n
  php closes the socket connection

ad 4)
  php opens a socket connection
  php sends the bytes \0177 OPTIONS LEN_ID[1] LEN_ID[0] ID
   java thread sends \0 to avoid ack delay[1]
  php sends protocol requests
  php finishes the communication sending <F p="A"/> 
   java thread sends back a <F p="A"/>
  ...
  php transparently re-uses the socket connection
  php sends the bytes \0177 OPTIONS LEN_ID[1] LEN_ID[0] ID
   java thread sends \0 to avoid ack delay[1]
  php sends protocol requests
  php finishes the communication sending <F p="E"/> 
   java thread sends back a <F p="E"/>
  php closes the socket connection


[1] write/write/read delay is up to 500ms on free bsd operating
system.

NOTES  
-----
It is possible to "ping" the server by sending it the byte 0x0. If
alive it will send back a 0x0.
@


1.48
log
@New FastCGI implementation
@
text
@d230 2
a231 2
<Z v=i />
i: signed int (usually in the range 0-255)
@


1.47
log
@Release-6-1-2
@
text
@d1 1
a1 1
VM Bridge protocol version 5.5
d228 5
@


1.46
log
@Release-5-5-1
@
text
@d305 2
a306 2
  php sends PUT ${JAVA_SERVLET}\r\n\r\n
                      e.g.: PUT /JavaBridge/JavaBridge.phpjavabridge\r\n\r\n
d309 6
a314 22
   java servlet responds with a protocol response
   java servlet sends response HEADERS: redirect (e.g. 9267) and context ID
  php opens a socket connection to port 9267
  php sends a "redirect id"; the bytes \0177 \0377 LEN_ID[1] LEN_ID[0] ID
   java thread sends \0 to avoid ack delay[1]
  php sends protocol requests
  php finishes the communication sending <F p="A"/> 
   java thread sends back a <F p="A"/>
  ...
  php (re-)opens a HTTP socket connection to ${JAVA_HOSTS}[0] e.g.: localhost:8080
  php sends PUT ${JAVA_SERVLET}\r\n\r\n
                         e.g.: /JavaBridge/JavaBridge.phpjavabridge\r\n\r\n
  php sends the bytes \0177 OPTIONS to initiate the communication
  php sends protocol requests
   java servlet responds with a protocol response
   java servlet sends response HEADERS: redirect (e.g. 9267) and context ID
  php transparently re-uses the socket connection to port 9267
  php sends the bytes \0177 \0377 LEN_ID[1] LEN_ID[0] ID
   java thread sends \0 to avoid ack delay[1]
  php sends protocol requests
  php finishes the communication sending <F p="E"/> 
   java thread sends back a <F p="E"/>
d330 1
@


1.45
log
@Release-5-5
@
text
@d272 2
a273 2
Context switches:
-----------------
d275 1
a275 20
When deployed into a servlet engine, the bridge uses a HTTP PUT
request to a web application to initiate the communication. After that
the client is redirected to use the fastest communication link
available. A "ContextRunner" represents the communication link, and a
"ContextServer" stands for the web application.

A client may initiate a context switch if it has received a context ID
belonging to a different ContextServer while keeping a persistent
connection to a ContextRunner. Or when switching from the initial HTTP
PUT request to a new ContextRunner.

It is possible to send the header even though the connection has
already been established. The bridge will ignore the header if the
second byte is not 0xFF. This is convenient as some clients don't know
if they use a fresh or a recycled connection.

Otherwise the back end interprets the following two bytes (low/high)
as the length of the following context string. The server acknowledges
the context switch by sending the byte 0x0 on the new or recycled
connection. The client must read and discard this byte.
d277 76
@


1.44
log
@*** empty log message ***
@
text
@d1 1
a1 1
VM Bridge protocol version 5.4
d200 1
a200 1
<E v=object m=stringRepresentation/>
d202 3
a204 1
m: string
d230 4
a233 2
<F p=A|E />
p: char (Keep [A]live, [E]nd connection)
@


1.43
log
@Backward compatibility with BEA WL 8.1
@
text
@d50 1
a50 1
All aquired [O]bject handles may be destroyed by invoking U (destroy).
d271 10
a280 5
A client may initiate a context switch when it has received 
a context ID belonging to a different ContextServer while
keeping a persistent connection to a ContextRunner. Or when
switching from the initial HTTP PUT request to a new
ContextRunner.
d289 2
a290 2
the context switch by sending the byte 0x0 on the new connection. The
client must read and discard this byte.
@


1.42
log
@Release 5.3.4
@
text
@d127 1
a127 1
<->
@


1.41
log
@Release 5.3.4
@
text
@d3 3
a5 3
Requests are marked with "->", responses with "<-".  The server
continues to process requests until EOF. Only the first character is
significant.
d132 1
a132 1
<->
d137 1
a137 1
->
d142 1
a142 1
<->
d148 1
a148 1
->
d153 1
a153 1
<->
d158 1
a158 1
->
d198 1
a198 1
<->
d204 1
a204 1
<->
d210 1
a210 1
<->
@


1.40
log
@Release 5.3.3.1
@
text
@d1 1
a1 1
VM Bridge protocol version 5.3
d267 10
d283 3
a285 4
as the length of the following context string. The client may initiate
such a context switch if it has received a context ID belonging to a
different ContextServer from a client (e.g.: PhpCGIServlet) while
keeping a persistent connection to a ContextRunner.
@


1.39
log
@Release 5.3.3
@
text
@d1 1
a1 1
VM Bridge protocol version 5
d66 1
a66 1
<C v=name p=C|I [i=ID]> ...ARGS...
a69 1
i: unsigned long
d204 1
a204 1
->  (or <->, if a header has been sent, see below)
d240 7
a246 8
         keep object  keep array,   binary             comment
          identity    Map, Coll.     data              
                      identity                         

    0 0    yes          yes        binary              default
    0 1    no           yes        binary              
    1 0    no           yes        base64 encoded      
    1 1    yes          yes        base64 encoded      default
d258 5
a262 4
         keep object  keep array,   binary             comment
          identity    Map, Coll.     data              
                      identity                         
           no           no         base64 encoded      default
d264 2
@


1.38
log
@Apache/IIS and JSR 223 integration
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 5
d7 5
a11 4
The communication must begin with [C]reateInstance or [I]nvoke. If the
client waits for a response (predicate==1) the server sends back a
single ARG, as defined below. Returned object id's ("CID") are 32 bit
unsigned integer values starting with 1, increased by 1.
d205 1
a205 1
->  (or <->, see below)
d211 1
a211 1
->  (or <->, see below)
d245 1
a245 2
    - -    no           no         base64 encoded      default
    0 0    yes          yes        binary              
d248 1
a248 1
    1 1    yes          yes        base64 encoded      
d257 9
@


1.38.2.1
log
@Release 5.3.3
@
text
@d1 1
a1 1
VM Bridge protocol version 5
@


1.38.2.2
log
@Release 5.3.3
@
text
@d7 4
a10 5
The communication must begin with ReferenceClass, CreateInstance,
Invoke or PropertyAccess. If the client waits for a response
(predicate==1) the server sends back a single ARG, as defined
below. Returned object id's ("CID") are 32 bit unsigned integer values
starting with 1, increased by 1.
d204 1
a204 1
->  (or <->, if a header has been sent, see below)
d210 1
a210 1
<->
d244 2
a245 1
    0 0    yes          yes        binary              default
d248 1
a248 1
    1 1    yes          yes        base64 encoded      default
a256 9

If the header is missing, the following default values are used

         keep object  keep array,   binary             comment
          identity    Map, Coll.     data              
                      identity                         
           no           no         base64 encoded      default


@


1.37
log
@Release-5-0-1
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 4.2.2
d7 5
a11 10
The communication must begin with [C]reateInstance or [I]nvoke. The
server responds with a single ARG which also carries the last request
context ID. The request context ID is your request context, for
example the location of a cell where the response should be stored; a
structure or something like that. In PHP for example we allocate a
pval and pass it as the ID to the Invoke or Create request. When the
response arrives, we receive our ID along with the result so we know
exactly where to store the result. Context ID's are optional and can
be switched off, if the client can keep track of the context, see
NOTES below.
d240 3
a242 3
         keep object  keep array,   binary             comment/php
          identity    Map, Coll.     data              impl. (pure
                      identity                               PHP or C)
d245 4
a248 4
    0 0    yes          yes        binary              PHP
    0 1    no           yes        binary              PHP
    1 0    no           yes        base64 encoded      PHP
    1 1    yes          yes        base64 encoded      PHP
@


1.36
log
@Release-5-0-0
@
text
@d23 1
a23 1
->  <CreateInstance value="java.lang.Long" predicate="I" id="78532"> 
d27 1
a27 1
<-  <Object value="1" predicate="O" id="78532"/>
d29 1
a29 1
->  <Invoke value="1" method="toString" predicate="I" id="0">
d32 1
a32 1
<-  <Object value="2" predicate="O" id="0"/>
d78 1
a78 1
<I v=object m=method p=P|I [i=ID]> ...ARGS...
a82 1
i: unsigned long
d89 1
a89 1
<H p=1|2|3 v=name [i=ID]> ...ARGS...
a92 1
i: unsigned long
d98 1
a98 1
<K p=1|2|3 v=name [i=ID]> ...ARGS...
a101 1
i: unsigned long
d107 1
a107 1
<G p=1|2|3 v=object m=method [i=ID]> ...ARGS...
a111 1
i: unsigned long
d117 1
a117 1
<Y p=1|2|3 v=object m=method [i=ID]> ...ARGS...
a121 1
i: unsigned long
d134 1
a134 1
<S v=str [i=ID] />
a135 1
i: unsigned long (reply only)
d139 1
a139 1
<B v=T|F [i=ID] />
a140 1
i: unsigned long (reply only)
d149 1
a149 1
<L v=l p=[O|A] [i=ID] />
a151 1
i: unsigned long (reply only)
d160 1
a160 1
<D v=d [i=ID] />
a161 1
i: unsigned long (reply only)
d171 1
a171 1
<O v=object m=TYPE p=TYPE n=[T|F] [i=ID] />
a175 1
i: unsigned long 
d179 1
a179 2
<N [i=ID] />
i: unsigned long 
d183 1
a183 2
<V m=[T|F] [i=ID] />
i: unsigned long 
d188 1
a188 1
<A v=object p=cname m=fname n=param# [i=ID]> ...PAIRS...
a193 1
i: unsigned long
d200 1
a200 1
<R [i=ID]> ...ARG...
a201 1
i: unsigned long
d205 1
a205 1
<E v=object m=stringRepresentation [i=ID] />
a207 1
i: unsigned long
d211 1
a211 1
<X t=A|H [i=ID] /> ...PAIRS...
a213 1
i: unsigned long (reply only)
d245 2
a246 2
         keep object  keep array, send   binary             comment/php
          identity    Map, Coll.    ID     data              impl. (pure
d249 5
a253 5
    - -    no           no         yes    base64 encoded     default
    0 0    yes          yes        no     binary             PHP
    0 1    no           yes        no     binary             PHP
    1 0    no           yes        no     base64 encoded     PHP
    1 1    yes          yes        no     base64 encoded     PHP
@


1.35
log
@Release-4-3-0
@
text
@d180 1
a180 1
<O v=object m=TYPE p=TYPE [i=ID] />
d184 1
d194 1
a194 1
<V [i=ID] />
d196 1
d261 9
a269 9
         keep object  keep array, base  send   binary             comment/php
          identity    Map, Coll.         ID     data              impl. (pure
                      identity                                    PHP or C)

    - -    yes          no         16   yes    base64 encoded     default
    0 0    yes          yes        16   no     binary             PHP
    0 1    yes          yes        16   yes    binary             not used
    1 0    no           no         16   yes    binary             C, php=4
    1 1    yes          yes        16   no     base64 encoded     PHP
@


1.34
log
@Release-4-2-1
@
text
@d23 1
a23 1
->  <CreateInstance predicate="I" value="java.lang.Long" id="78532"> 
d29 1
a29 1
->  <Invoke predicate="I" value="1" method="toString" id="0">
@


1.33
log
@Release-4-2-0
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 4.2.1
d43 3
a45 6
->  <CreateInstance predicate="J" value="java.lang.Long" id="0"> 
      <Long value="6" /> 
    </CreateInstance>

->  <Invoke predicate="J" value="1" method="toString" id="0">
    </Invoke>
d47 1
a47 1
->  <Unref value="2" /> # result from toString
d49 1
a49 1
->  <Unref value="1" /> # result from CreateInstance
d263 1
a263 1
    - -    yes          no         10   yes    base64 encoded     default
@


1.32
log
@Release-4-1-8
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 4.2
d23 1
a23 1
->  <CreateInstance value="java.lang.Long" predicate="Instance" id="78532"> 
d29 1
a29 1
->  <Invoke value="1" method="toString" predicate="Invoke" id="0">
a39 1
     java_begin_document()
a41 1
     java_end_document();
d43 1
a43 6
->  <Invoke value="0" method="beginDocument" predicate="Invoke" id="0">
    </Invoke>

<-  <Null id="0"/>

->  <CreateInstance value="java.lang.Long" predicate="Instance" id="78532"> 
d47 1
a47 1
->  <Invoke value="1" method="toString" predicate="Invoke" id="0">
d50 1
a50 1
->  <Unref value="2" />
d52 1
a52 6
->  <Unref value="1" />

->  <Invoke value="0" method="endDocument" predicate="Invoke" id="0">
    </Invoke>

<-  <Null id="0"/>
d70 1
d73 1
a73 1
<C v=name p=C|I i=ID> ...ARGS...
d81 1
a81 1
<I v=object m=method p=P|I i=ID> ...ARGS...
d91 45
d152 4
a155 5
<->
Long:
<L v=l [i=ID] />
v: long
i: unsigned long (reply only)
d158 1
a158 1
unsigned Long: (if base 16, see protocol header description below)
d164 5
d183 1
a183 1
<O v=object p=TYPE i=ID />
d185 1
d191 6
a196 1
<N i=ID />
d201 1
a201 1
<A v=object p=cname m=fname n=param# i=ID> ...PAIRS...
d214 1
a214 1
<R i=ID> ...ARG...
d252 1
a252 2
After the F=... reply appeared, it is save to switch to a secondary
("override-redirect") channel.
d268 1
a268 1
    0 1    yes          yes        16   yes    binary             C, php>4
d281 2
a282 2
byte is not 0xFF. This is convenient as some clients don't know if
they use a fresh or a recycled connection.
@


1.31
log
@Release-4-0-2
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 4.0
d215 1
a215 2
If the first byte is 0x80 (i.e. it is neither a space or a "<"), the
following byte has a special meaning:
d236 10
@


1.30
log
@Release-3-1-8rc3
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 3.2
d215 2
a216 26
If the first byte is neither a "<" nor a space, bits [0,1], [2,4] and
[6,7] have a special meaning:

Bits 0..6 set to 1: the following byte contains an extended header
described below.

Bit 1 0
-------
    0 0: Backward compatibility disabled, client sends and receives O,
         O id's are base 10
    0 1: Backward compatibility disabled, client sends and receives O,
         O id's are base 16
    1 0: Backward compatibility disabled, clients sends and receives X/P
         O id's are base 10
    1 1: Backward compatibility enabled, client sends and receives X/P
         O id's are base 10

Bit 2,3,4: log level (from java.log_level)

Bit 5: always 0

Bit 6: set to 1 if bit[0,1] are used
Bit 7: set to 1 if bit[2,4] are used


Extended header (byte 1)
@


1.29
log
@Release-3-1-8rc1
@
text
@d218 24
d244 3
a246 3
         keep object  keep array, base  send   binary             comment/
          identity    Map, Coll.         ID     data              php impl.
                      identity
d249 4
a252 4
    0 0    yes          yes        16   no     binary             Java.php
    0 1    yes          yes        16   yes    binary             java.so (>4)
    1 0    no           no         16   yes    binary             java.so (=4)
    1 1    yes          yes        16   no     base64 encoded     Java.php
@


1.28
log
@Release-3-1-8rc
@
text
@d125 1
a125 1
unsigned Long: (if header bit [0,1] == 1)
@


1.27
log
@Release-3-1-8devel
@
text
@d147 1
a147 1
p: char ([A]rray, [C]ollection, [O]bject, [E]xception)
d220 3
a222 2
         keep object  keep array  base  send   binary             comment/
          identity     identity          ID     data              php impl.
@


1.26
log
@Release-3-2-0devel
@
text
@a111 5
or, if protocol header is 0XX3:
<-
String:
<S>string</S>

@


1.25
log
@Release-3-1-8devel
@
text
@d112 5
d152 1
a152 1
p: char ([A]rray, [O]bject)
d175 1
a175 1
<R i=ID> ...ARG... //FIXME: wozu id?
d225 8
a232 4
    0 0: Client sends and receives O, O id's are base 10
    0 1: Client sends and receives O, O id's are base 16
    1 0: Client sends and receives X/P O id's are base 10
    1 1: Client sends and receives O, id's are base 16, no context ID is used
a240 3
The default is 0304 for PHP5, protocol version < 3.0,  0306 for PHP4,
0307 for PHP5, protocol version >= 3.0.

@


1.24
log
@Release-3-1-2
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 3.0
d14 3
a16 1
exactly where to store the result.
d170 1
a170 1
<R i=ID> ...ARG...
d220 4
a223 8
    0 0: Backward compatibility disabled, client sends and receives O,
         O id's are base 10
    0 1: Backward compatibility disabled, client sends and receives O,
         O id's are base 16
    1 0: Backward compatibility disabled, clients sends and receives X/P
         O id's are base 10
    1 1: Backward compatibility enabled, client sends and receives X/P
         O id's are base 10
d232 2
a233 2
The default is 0304 for PHP5, protocol version < 3.0,  0307 for PHP4,
0306 for PHP5, protocol version >= 3.0.
@


1.23
log
@Release-3-1-0
@
text
@d155 1
a155 1
<A v=object p=cname m=fname n=param# i=ID> ...ARGS...
d181 1
a181 1
<X t=A|H [i=ID] /> ...PAIR...
@


1.22
log
@Release-3-1-0
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 2.3
d25 1
a25 1
<-  <Object value="1" id="78532"/>
d30 1
a30 1
<-  <String value="6" id="0"/>
d32 31
d86 1
a86 1
i: long
d92 1
a92 1
v: long
d95 1
a95 1
i: long
d108 1
a108 1
i: long (reply only)
d114 1
a114 1
i: long (reply only)
d120 8
a127 1
i: long (reply only)
d133 1
a133 1
i: long (reply only)
d138 1
a138 1
v: long
d144 1
a144 1
v: long
d146 1
a146 1
i: long 
d151 1
a151 1
i: long 
d157 1
a157 1
v: long
d160 2
a161 2
n: long
i: long
d170 1
a170 1
i: long
d175 1
a175 1
v: long
d177 1
a177 1
i: long
d184 1
a184 1
i: long (reply only)
d191 1
a191 1
v: long (if X=H and t=N)
d200 1
a200 1
v: long
d205 1
a205 1
p: char (Keep [Alive, [E]nd connection)
d216 10
a225 5
Bit 0: 1 for PHP4, 0 for >= PHP5(enable backward compatibility
with "ext/java", the predecessor of the PHP/Java Bridge).

Bit 1: Client wants arrays as values. The server will return X and P
instead of O.
d234 2
a235 1
The default is 0304 for PHP5 and 0307 for PHP4.
@


1.21
log
@Release-3-1-0
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 2.2
d40 5
d164 1
a164 1
->
d168 2
@


1.20
log
@Release-3-1-0
@
text
@d160 1
a160 1
EOF:
@


1.19
log
@Release-3.0.8pre2
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 2.1
d64 1
d159 5
@


1.18
log
@Release-3.0.7
@
text
@d7 8
a14 8
The communication must begin with [C]reateInstance. After that
[I]nvoke may be used. The server responds with a single ARG which also
carries the last request context ID. The request context ID is your
request context, for example the location of a cell where the response
should be stored; a structure or something like that. In PHP for
example we allocate a pval and pass it as the ID to the Invoke or
Create request. When the response arrives, we receive our ID along
with the result so we know exactly where to store the result.
@


1.17
log
@Release-3.0.5(pre)
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 2.0
a51 7
CreateInstanceAsync:
<F v=name p=C|I i=ID> ...ARGS...
</F>
v: string
p: char (Reference[C]lass, Create[I]nstance)
i: long

a60 8
InvokeAsync:
<G v=object m=method p=P|I i=ID> ...ARGS...
</I>
v: long
m: string
p: char (examine[P]roperty, [I]nvoke method)
i: long

d99 1
a99 1
<O v=object p=TYPE n=CLASS_ID i=ID />
a101 1
n: long
@


1.16
log
@Release-3-0-2
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 1.3
d52 7
d68 8
d106 7
a112 1
<->
d114 1
a114 1
<O v=object [i=ID] />
d116 8
a123 2
i: long (reply only)
NULL values can be send as either v="" or v="0"
@


1.15
log
@Release-3.0.0pre1
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 1.2
d154 2
a155 2
Bit 0: Always 0 (reserved to enable backward compatibility with
"ext/java", the predecessor of the PHP/Java Bridge)
d167 1
a167 1
The default is 0304 for PHP5 and 0306 for PHP4.
@


1.14
log
@Release-2.0.8-preview
@
text
@d154 2
a155 1
Bit 0: Reserved.
@


1.13
log
@PHP/JSP session sharing
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 1.1
d117 1
a117 1
<-
d119 1
a119 1
<E v=object m=stringRepresentation i=ID />
@


1.12
log
@PR1243638: Running php and jsp side by side
@
text
@d14 1
a14 1
with the result so we know exactly where to store the result).
d37 2
a38 3
However, this isn't necessary either.  The server tracks all handles
and automatically destroys them after EOF. It is an error to further
reference destroyed handles.
d107 3
@


1.11
log
@gtk, swing and swt examples added
@
text
@d101 1
a101 1
<A v=object p=pos# m=stringRepresentation n=param# i=ID> ...ARGS...
@


1.10
log
@Release-2.0.8pre
@
text
@d104 1
a104 1
p: long
@


1.9
log
@Tomcat 5
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 1.0.2
a35 6
The optional M, F requests may be used to capture a method and invoke
it more than once. The M (GetMethod) request responds with a method
[O]bject which can be used as the argument for all further F
(CallMethod) requests. [I]nvoke should be used instead of M/F. It is a
little bit slower but easier to handle.

d100 16
a140 16
MethodGet:
<M v=object, m=method id=ID > ...ARGS...
</M>
v: long
m: string
i: long

->
CallMethod:
<F v=object m=method i=ID > ...ARGS...
</F>
v: long
m: long
i: long

->
@


1.8
log
@tests for PR1174918
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 1.0.1
d155 2
a156 2
If the first byte is neither a "<" nor a space, bits 0 and 1
have a special meaning:
d163 8
a170 1
The default is 0 for PHP5 and 2 for PHP4.
@


1.7
log
@PR1174918: wrong charset
@
text
@d158 1
a158 2
Bit 0: Client sends and receives UTF-8 strings.  If not set, the
encoding depends on the LANG environment variable.
d163 1
a163 1
The default is 1 for PHP5 and 3 for PHP4.
@


1.6
log
@Release-2.0.2
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 1.0.0
d158 2
a159 1
Bit 0: Reserved.
d164 1
a164 1
Both "features" are turned off by default.
@


1.5
log
@Release 2.0
@
text
@d158 1
a158 2
Bit 0: Client sends and receives embedded binary fields: 1. byte zero,
2. byte length, followed by up to 255 bytes data.
@


1.4
log
@Release-2.0-beta
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 1.0
d42 1
a42 1
All aquired [O]bject handles may be destroyed by invoking [U]nref.
d147 1
a147 1
Unref:
@


1.3
log
@Protocol update
@
text
@d38 1
a38 1
[O]bject which can be used as the third argument for all further F
d52 1
a52 1
writeCreateObjectBegin(char*name, size_t strlen, char reference[C]lass_or_create[I]nstance, void *id);
a53 1
writeCreateObjectEnd()
d55 3
d60 1
a60 1
writeInvokeBegin(long object, char*method, size_t strlen, char examine[P]roperty_or_[I]nvoke, void*id);
a61 1
writeInvokeEnd()
d63 4
d73 1
a73 1
ARGS:
d75 1
a75 1
writeString(char*str, size_t strlen)
d77 2
d81 1
a81 1
writeBoolean(short b)
d83 2
d87 1
a87 1
writeLong(long l)
d89 2
d93 1
a93 1
writeDouble(double d)
d95 2
d99 1
a99 1
writeObject(long object)
d101 2
a102 1

d106 1
a106 1
Exception
d108 3
d113 2
a114 4
writeCompositeBegin_a()
writeCompositeBegin_h()
<X t=A|H [i=ID] /> ...[PAIR|ARG]...
writeCompositeEnd()
d116 2
d120 1
a120 3
writePairBegin_s(char *key, size_t strlen) // if X t=H
writePairBegin_n(unsigned long key)  // if X t=H
writePairBegin()  // if X t=A
a121 1
writePairEnd()
d123 3
d129 1
a129 1
OPTIONAL:
d131 1
a131 1
writeGetMethodBegin(long object, char*method, size_t strlen, void*id)
a132 1
writeGetMethodEnd()
d134 3
d139 2
a140 3
writeCallMethodBegin(long object, long method, void*id);
<F v=o m=method i=ID > ...ARGS...
writeCallMethodEnd()
d142 3
d147 1
a147 1
writeUnref(Object ob)
d149 1
@


1.2
log
@Replaced JNI with XML protocol
@
text
@d1 1
a1 1
PHP/Java Bridge protocol version 0.9
d4 2
a5 2
continues to process requests until EOF. For all tags only the first
character is significant.
d9 2
a10 2
carries the last session context ID. The session context ID is your
session context, for example the location of a cell where the response
d14 1
a14 2
with the result so we know exactly where to store the result we have
received).
d25 1
a25 1
<-  <Object value="0x1" id="78532"/>
d27 1
a27 1
->  <Invoke value="0x1" method="toString" predicate="Invoke" id="0">
d52 2
a53 2
writeCreateObjectBegin(char*name, size_t strlen, short referenceClass_or_createInstance, void *id);
<C v=name p=[C|I] i=ID> ...ARGS...
d58 1
a58 1
writeInvokeBegin(long object, char*method, size_t strlen, short examineProperty_or_Invoke, void*id);
d63 3
d75 1
a75 1
<B v=[T|F] [i=ID] />
d89 2
d93 1
a93 1
<E v=object m=stringRepresentation [i=ID] />
d98 1
a98 1
<X t=[A|H] [i=ID] /> ...[PAIR|ARG]...
d103 4
a106 3
writePairBegin_s(char *key, size_t strlen)
writePairBegin_n(unsigned long key)
<P t=[N|S] v=key> ...ARG...
d136 2
a137 3
Bit 0: Client sends and receives embedded BLOB fields; values are
embedded as binary data: 1. byte zero, 2. byte length, followed by up
to 255 bytes blob data.
@


1.1
log
@Replaced JNI with XML protocol
@
text
@d22 1
a22 1
->  <CreateInstance value="java.lang.Long" predicate="Instance" id="0x78532"> 
d26 1
a26 1
<-  <Object value="0x1" id="0x78532"/>
d28 1
a28 1
->  <Invoke value="0x1" method="toString" predicate="Invoke" id="0x0">
d31 1
a31 1
<-  <String value="6" id="0x0"/>
d101 1
a101 1
<P t=[N|S] v=key> <[O|D|..|S] id=0 [i=ID] /> ...ARG...
@

