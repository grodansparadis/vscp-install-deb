head	1.48;
access;
symbols
	Release-7-1-1:1.48.0.2
	Root_Release-7-1-1:1.48
	Root_Release_7-0-1:1.47
	Release_7-0-1:1.47.0.14
	Release_7-0-0:1.47.0.12
	Root_Release_7-0-0:1.47
	Release-6-2-2:1.47.0.10
	Release-6-1-2-3:1.47
	Root_Release-6-1-2-3:1.47
	Release-6-1-2-2:1.47.0.8
	Root_Release-6-1-2-2:1.47
	debian_version_6_1_2_1-1:1.47
	upstream_version_6_1_2_1:1.47
	Release-6-1-2-1_new:1.47.0.6
	Root_Release-6-1-2-1_new:1.47
	Release-6-1-2-1:1.47.0.4
	Root_Release-6-1-2-1:1.47
	upstream_version_6_1_2:1.47
	debian_version_6_1_2-1:1.47
	Release-6-1-2:1.47.0.2
	Root_Release-6-1-2:1.47
	debian_version_6_1_1-2:1.46
	debian_version_6_1_1-1:1.46
	upstream_version_6_1_1:1.46
	Release-6-1-1:1.46.0.2
	Root_Release-6-1-1:1.46
	Release-6-0-4:1.45.0.2
	Root_Release-6-0-4:1.45
	Release-6-0-3_NEW:1.44.0.4
	Root_Release-6-0-3_NEW:1.44
	Release-6-0-3:1.44.0.2
	Root_Release-6-0-3:1.44
	Release-6-0-0:1.42.0.2
	Root_Release-6-0-0:1.44
	Release-5-5-4-1:1.41.0.2
	Root_Release-5-5-4-1:1.41
	Release-5-5-4:1.40.0.4
	Root_Release-5-5-4:1.40
	Release-5-5-3:1.40.0.2
	ROOT_Release-5-5-3:1.40
	Release-5-5-2:1.39.0.2
	Root_Release-5-5-2:1.39
	debian_version_5_5_1-1:1.38
	Release-5-5-1:1.38.0.4
	upstream_version_5_5_1:1.38
	ROOT_Release-5-5-1:1.38
	debian_version_5_5-1:1.38
	upstream_version_5_5:1.38
	ROOT_Release-5-5:1.38
	Release-5-5:1.38.0.6
	debian_version_5_4_4_2-3:1.38
	Release-5-4-4-2-1:1.38.0.2
	debian_version_5_4_4_2-2:1.35
	debian_version_5_4_4_2-1:1.35
	upstream_version_5_4_4_2:1.35
	debian_version_5_4_4_1-1:1.31
	upstream_version_5_4_4_1:1.31
	debian_version_5_4_4-1:1.30
	upstream_version_5_4_4:1.30
	Release-5-4-4:1.30.0.6
	Root_Release-5-4-4:1.30
	debian_version_5_4_3_2-1:1.30
	upstream_version_5_4_3_2:1.30
	Release_5-4-3-2:1.30.0.2
	Root_Release_5-4-3-2:1.30
	upstream_version_5_4_3_1:1.30
	debian_version_5_4_3_1-1:1.30
	Release-5-4-3:1.29.0.4
	Root_Release-5-4-3:1.29
	Root_Release-5-4-1:1.29
	Release-5-4-1:1.29.0.2
	Root_Release-5-4:1.28
	Release-5-4:1.28.0.2
	upstream_version_5_3_4:1.25
	debian_version_5_3_4-1:1.25
	ROOT_Release-5-3-4:1.25
	Release-5-3-4:1.25.0.2
	ROOT_Release-5-3-3:1.22
	Release-5-3-3:1.22.0.2
	debian_version_5_3_2_1_2-1:1.19
	upstream_version_5_3_2_1_2:1.19
	debian_version_5_3_2_1_1-1:1.19
	debian_version_5_3_2_1_1:1.19
	upstream_version_5_3_2_1_1:1.19
	Root_Release-5-3-2-1:1.19
	Release-5-3-2-1:1.19
	ROOT_RELEASE-5-3-2-1:1.19
	RELEASE-5-3-2-1:1.19.0.4
	Release-5-3-2:1.18.0.4
	Root_Release-5-3-2:1.18
	Root_Release-5-3-1:1.18
	Release-5-3-1:1.18.0.2
	Release-5-2-3-1:1.17.0.8
	Root_Release-5-2-3-1:1.17
	Release-5-2-2-4:1.17.0.6
	Root_Release-5-2-2-4:1.17
	Release-5-2-2-1:1.17.0.4
	Root_Release-5-2-2-1:1.17
	upstream_version_5_2_2:1.17
	debian_version_5_2_2-1:1.17
	Release-5-2-2:1.17.0.2
	ROOT_Release-5-2-2:1.17
	ROOT_Release-5-2-1:1.16
	Release-5-2-1:1.16.0.2
	Release-5-2-0:1.15.0.8
	ROOT_Release-5-2-0:1.15
	ROOT_Release-5-1-2:1.15
	Release-5-1-2:1.15.0.6
	Version-5-1-1:1.15.0.4
	ROOT_Version-5-1-1:1.15
	debian_version_5_1_0-1:1.15
	upstream_version_5_1_0:1.15
	ROOT_Release-5-1-0:1.15
	Release-5-1-0:1.15.0.2
	ROOT_Release-5-0-0:1.14
	Release-5-0-0:1.14.0.2
	Release-4-3-3:1.13.0.2
	ROOT_Release-4-3-3:1.13
	upstream_version_4_3_2:1.12
	debian_version_4_3_2-1:1.12
	ROOT_Release-4-3-2:1.12
	Release-4-3-2:1.12.0.6
	Release-4-3-1:1.12.0.4
	ROOT_Release-4-3-1:1.12
	debian_version_4_3_0-1:1.12
	upstream_version_4_3_0:1.12
	ROOT_Release-4-3-0:1.12
	Release-4-3-0:1.12.0.2
	debian_version_3_2_1b-2:1.10.2.1
	debian_version_4_2_2-1:1.10
	upstream_version_4_2_2:1.10
	debian_version_3_2_1b-1:1.10.2.1
	Release-3-2-1:1.10.0.2
	Release-4-1-2:1.7.0.2
	Release-4-0-8:1.6.0.4
	debian_version_4_0_8a-1:1.6
	upstream_version_4_0_8a:1.6
	jostb-debian-ubuntu-patch:1.6.0.2
	debian_version_4_0_8-1:1.5
	upstream_version_4_0_8:1.5
	debian_version_4_0_7-1:1.4
	upstream_version_4_0_7:1.4
	debian_version_4_0_6-1:1.4
	upstream_version_4_0_6:1.4
	debian_version_4_0_2-1:1.2
	upstream_version_4_0_2:1.2
	Release-4-0-2_Root:1.2
	Release-4-0-2:1.2.0.2;
locks; strict;
comment	@# @;


1.48
date	2017.03.19.16.15.49;	author jost_boekemeier;	state Exp;
branches;
next	1.47;

1.47
date	2010.04.12.16.17.14;	author jost_boekemeier;	state Exp;
branches;
next	1.46;

1.46
date	2010.03.24.18.03.15;	author jost_boekemeier;	state Exp;
branches;
next	1.45;

1.45
date	2010.03.06.11.12.45;	author jost_boekemeier;	state Exp;
branches;
next	1.44;

1.44
date	2010.02.28.20.03.17;	author jost_boekemeier;	state Exp;
branches;
next	1.43;

1.43
date	2010.02.28.15.23.49;	author jost_boekemeier;	state Exp;
branches;
next	1.42;

1.42
date	2010.02.18.16.31.38;	author jost_boekemeier;	state Exp;
branches;
next	1.41;

1.41
date	2009.12.06.19.49.13;	author jost_boekemeier;	state Exp;
branches;
next	1.40;

1.40
date	2009.09.27.17.39.22;	author jost_boekemeier;	state Exp;
branches;
next	1.39;

1.39
date	2009.09.01.17.25.18;	author jost_boekemeier;	state Exp;
branches;
next	1.38;

1.38
date	2009.07.05.10.13.32;	author jost_boekemeier;	state Exp;
branches;
next	1.37;

1.37
date	2009.07.04.15.46.44;	author jost_boekemeier;	state Exp;
branches;
next	1.36;

1.36
date	2009.07.04.14.09.55;	author jost_boekemeier;	state Exp;
branches;
next	1.35;

1.35
date	2009.04.25.12.25.22;	author jost_boekemeier;	state Exp;
branches;
next	1.34;

1.34
date	2009.04.18.15.13.15;	author jost_boekemeier;	state Exp;
branches;
next	1.33;

1.33
date	2009.04.18.15.08.16;	author jost_boekemeier;	state Exp;
branches;
next	1.32;

1.32
date	2009.04.18.14.57.04;	author jost_boekemeier;	state Exp;
branches;
next	1.31;

1.31
date	2009.03.15.15.33.22;	author jost_boekemeier;	state Exp;
branches;
next	1.30;

1.30
date	2009.01.20.22.29.17;	author jost_boekemeier;	state Exp;
branches;
next	1.29;

1.29
date	2008.12.21.16.24.34;	author jost_boekemeier;	state Exp;
branches;
next	1.28;

1.28
date	2008.12.12.17.39.27;	author jost_boekemeier;	state Exp;
branches;
next	1.27;

1.27
date	2008.12.11.21.05.45;	author jost_boekemeier;	state Exp;
branches;
next	1.26;

1.26
date	2008.12.09.12.55.03;	author jost_boekemeier;	state Exp;
branches;
next	1.25;

1.25
date	2008.12.01.22.42.43;	author jost_boekemeier;	state Exp;
branches;
next	1.24;

1.24
date	2008.11.27.21.00.26;	author jost_boekemeier;	state Exp;
branches;
next	1.23;

1.23
date	2008.11.15.14.27.50;	author jost_boekemeier;	state Exp;
branches;
next	1.22;

1.22
date	2008.11.06.20.16.23;	author jost_boekemeier;	state Exp;
branches
	1.22.2.1;
next	1.21;

1.21
date	2008.11.01.13.14.32;	author jost_boekemeier;	state Exp;
branches;
next	1.20;

1.20
date	2008.11.01.12.41.04;	author jost_boekemeier;	state Exp;
branches;
next	1.19;

1.19
date	2008.10.06.20.01.35;	author jost_boekemeier;	state Exp;
branches;
next	1.18;

1.18
date	2008.10.03.15.48.13;	author jost_boekemeier;	state Exp;
branches;
next	1.17;

1.17
date	2008.03.30.17.01.33;	author jost_boekemeier;	state Exp;
branches;
next	1.16;

1.16
date	2008.03.22.12.04.54;	author jost_boekemeier;	state Exp;
branches;
next	1.15;

1.15
date	2008.01.21.19.23.28;	author jost_boekemeier;	state Exp;
branches;
next	1.14;

1.14
date	2008.01.06.20.59.19;	author jost_boekemeier;	state Exp;
branches;
next	1.13;

1.13
date	2007.12.28.13.56.41;	author jost_boekemeier;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.30.16.07.52;	author jost_boekemeier;	state Exp;
branches;
next	1.11;

1.11
date	2007.09.19.10.12.27;	author jost_boekemeier;	state Exp;
branches;
next	1.10;

1.10
date	2007.07.19.16.19.15;	author jost_boekemeier;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2007.07.03.15.50.52;	author jost_boekemeier;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.28.18.10.48;	author jost_boekemeier;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.13.19.51.47;	author jost_boekemeier;	state Exp;
branches;
next	1.6;

1.6
date	2007.04.10.13.30.47;	author jost_boekemeier;	state Exp;
branches;
next	1.5;

1.5
date	2007.04.07.16.22.39;	author jost_boekemeier;	state Exp;
branches;
next	1.4;

1.4
date	2007.03.26.14.32.05;	author jost_boekemeier;	state Exp;
branches;
next	1.3;

1.3
date	2007.03.25.16.28.20;	author jost_boekemeier;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.22.19.01.43;	author jost_boekemeier;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.19.13.03.16;	author jost_boekemeier;	state Exp;
branches;
next	;

1.10.2.1
date	2007.08.03.18.29.44;	author andremachado;	state Exp;
branches;
next	;

1.22.2.1
date	2008.11.09.17.01.41;	author jost_boekemeier;	state Exp;
branches;
next	1.22.2.2;

1.22.2.2
date	2008.11.13.21.31.50;	author jost_boekemeier;	state Exp;
branches;
next	1.22.2.3;

1.22.2.3
date	2008.11.15.14.22.31;	author jost_boekemeier;	state Exp;
branches;
next	;


desc
@@


1.48
log
@Temporarily disabled non-working tests
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html">
	<TITLE>VM Bridge FAQ</TITLE>
</HEAD>
<H1>VM Bridge FAQ</H1>
This file contains answers to frequently asked questions. Please see <a href="http://php-java-bridge.sourceforge.net/pjb">http://php-java-bridge.sourceforge.net</a> for more information.

<H2>General questions</H2>

<H4>Which alternatives exist?</H4>
<p>There are at least 4 other php to java bridges which offer a similar API. One was distributed with PHP 4.0.0 and has been discontinued. Two other bridges are proprietary software, built into a vendor-specific framework from Zend or a J2EE application server from Caucho.
Furthermore IBM's Zero framework for Eclipse contains a PHP interpreter written in pure Java and a php to java bridge which can call Java methods in-process.</p>
<p>The only free alternatives are SOAP and XML-RPC, which are up to 50 times slower than the XML protocol implementation used by this VM Bridge.</p>

<H4>How do I enable the Java extension in my php.ini file?</H4>
<p>A Java extension does not exist, so you can't enable it.</p>
<p>The VM Bridge is a network protocol, it requires a running Java VM, for example the servlet container Apache/Tomcat. Or, if you want to call PHP libraries from Java, a running PHP container, e.g. Apache or IIS.</p>

<H4>What do I need to communicate with Java?</H4>
<p>Only the PHP code from <code>Java.inc</code> and a running Java application, for example <code>JavaBridge.jar</code>, or a running Java servlet, for example <code>JavaBridge.war</code>.</p>
<p>Test code: 
<blockquote>
<code>
&lt;?php require_once("http://localhost:8080/JavaBridge/java/Java.inc"); <br>
echo java("java.lang.System")->getProperties(); ?&gt;
</code>
</blockquote>
</p>

<H4>What do I need to communicate with PHP?</H4>
<p>Only the PHP code from <code>JavaProxy.php</code> within your PHP web application, the Java libraries <code>JavaBridge.jar</code>, <code>php-script.jar</code> and <code>php-servlet.jar</code>, and a <code>ContextLoaderListener</code> declaration in your <code>WEB-INF/web.xml</code></p>
<p>Test code: 
<blockquote>
<code>
&lt;% javax.script.ScriptEngine e = php.java.script.servlet.EngineFactory.getInvocablePhpScriptEngine (this, application, request, response, new java.net.URI("http://yourIntranetHost:80/yourPhpWebApp/JavaProxy.php"));<br>
out.println("yourIntranetHost running PHP version: " + (String)((javax.script.Invocable)e).invokeFunction("phpversion", new Object[]{}));<br>
((java.io.Closeable)e).close();
%&gt;
</code>
</blockquote>
</p>

<H4>Which versions are supported?</H4>
<ul>
<li>PHP >= 5.1.2. PHP >= 5.3 recommended.</li>
<li>Java >= 1.4. Java >= 6 recommended.</li>
<li>J2EE >= 1.3.</li>
</ul>

<H4>Why doesn't the bridge throw a java.lang.RuntimeException or Error as a PHP JavaException by default?</H4>
<p>
All exceptions crossing the php/java container <strong>must</strong> be declared. If you want to catch <code>java.lang.RuntimeException</code> or <code>java.lang.Error</code> from PHP code, add a "throws" declaration. Example:
<blockquote>
<code>
public Object calculateValue(...) throws RuntimeException;
</code>
</blockquote>
It is a good programming practice to not allow <code>java.lang.RuntimeException</code> and <code>java.lang.Error</code> to cross an application container boundary. A JEE "enterprise java beans" container for example will terminate a transaction immediately if it encounters an exception derived from Error or RuntimeException.
</p>
<p>
However, since PHP/Java Bridge version 5.5.3 the bridge reports a java.lang.RuntimeException/Error as a PHP JavaException if the option <code>JAVA_PREFER_VALUES</code> is set. Please see the NEWS entry for version 5.5.3 from the PHP/Java Bridge documentation download for details.
</p>

<H4>Do I need a Java Application Server or Servlet Engine?</H4>
<p>Yes, Java needs an execution environment. Experienced users may use the execution environment built into JavaBridge.jar, see <code>java -jar JavaBridge.jar --help</code> for help.
</p>
<p>
You can also add PHP support to your standalone Java application by
adding the following line to its main class:
<blockquote>
<code>
static final php.java.bridge.JavaBridgeRunner runner = php.java.bridge.JavaBridgeRunner.getInstance(8087);
</code>
</blockquote>
The above code opens the port 8087, so that local PHP scripts can call
methods/procedures from your Java application, as long as your Java
application is running.
</p>
<p>The third option is the standard JSR 223 script interface, which
allows one to execute PHP code/scripts from Java applications.
</p>
<H4>Ho do I enable logging?</H4>
<p>
Copy <code>log4j.jar</code> into <code>java.ext.dirs</code>. Example for JDK 6:
<blockquote>
<code>
cp log4j.jar /usr/java/packages/lib/ext
</code>
</blockquote>
</p>
<p>
Start the log4j viewer. Example for JDK 6:
<blockquote>
<code>
/opt/jdk1.6/bin/java org.apache.log4j.chainsaw.Main
</code>
</blockquote>
</p>
<p>
Start the application server with the options <code>-Dphp.java.bridge.default_log_level=LEVEL</code>. Example for tomcat:
<blockquote>
<code>
JAVA_HOME=/opt/jdk1.6 JAVA_OPTS="-Dphp.java.bridge.default_log_level=5" bin/catalina.sh run
</code>
</blockquote>
Example for the standalone container:
<blockquote>
<code>
java -Dphp.java.bridge.default_log_level=5 -jar JavaBridge.jar SERVLET:8080
</code>
</blockquote>
</p>

<H4>How can I set Java options?</H4>
<p>
With the -D flag. See <code>java -jar JavaBridge.jar --help for details. If tomcat is being used, one can set these options as follows:
<blockquote>
<code>
JAVA_OPTS="-D... -D..." /opt/tomcat/bin/catalina.sh run
</code>
</blockquote>
</p>

<H4>How can I increase the memory available to Java?</H4>
<p>
Use a VM >= 1.6 and add more RAM to your computer. Older Java versions
support the <code>Xmx</code> flag:
<blockquote>
<code>
java -Xmx512M ... -jar JavaBridge.jar SERVLET:8080 
</code>
</blockquote>
</p>

<H4>How can I set PHP options?</H4>
<p>
With a <code>define</code> before a PHP library is loaded. Global options can also be set in the <code>php.ini</code> file. Use phpinfo() to see the location of this file.
</p>

<H4>How can I configure the bridge?</H4>

<p>Useful options which can be set before the Java.inc is loaded are:
<blockquote>
<code>
define ("JAVA_PREFER_VALUES", false);<br>
define ("JAVA_HOSTS", "127.0.0.1:8080");<br>
require_once ("java/Java.inc");<br>
...
</code>
</blockquote>
Please see the Options.inc for details.
</p>
<p>Server-side options can be set in the
php.java.bridge.global.properties file, see the JavaBridge.jar zip
file (contained in the JavaBridge.war zip file) for details.
</p>

<H4>Can I use Java libraries without installing java?</H4> <p>Yes. On a GNU operating system (e.g.: GNU/Linux, GNU/windows (aka "cygwin"), ...) you can use the GCC compiler to compile Java classes to native code. 
Simply compile the C based extension and omit the
<code>--with-java=</code> configure option. The bridge will use the
<code>libgcj</code> library, which is part of the GNU gcc compiler. This library also uses much less system
resources (memory, files) than a "real" Java VM.</p> 
<p>GCJ support has been removed in PHP/Java Bridge version 6. If
you want to compile JavaBridge.jar to native code, please use PHP/Java
Bridge version 5.5.4 instead.</p>

<H4>I can't load the resource or file from the current working directory!?!</H4>
<p>
The "current working directory" is not useful, as the Java back end may be running
on a different server or from a different working directory. Use a full path or a URL resource instead.
</p>

<H4>I get a blank page or some other error!?!</H4>
<p>
Check the PHP error log, see your <code>php.ini</code> file for details. If the command:
<blockquote>
<code>
echo '&lt;?php require_once("http://localhost:8080/JavaBridge/java/Java.inc"); echo java("java.lang.System")-&gt;getProperties();?&gt;' | php -n -d allow_url_include=On
</code>
</blockquote>
works in the shell but not within apache, then there's something wrong with your <code>php.ini</code> file.
</p>

<H4>Can I use Python instead of PHP?</H4>
<p>Yes, see the examples folder from the source download.</p>

<H4>Can I access Mono or .NET libraries using the pure PHP implementation?</H4>
<p>Yes, PHP/Java Bridge version < 6 contains a PHP library
"Mono.inc" generated from "Java.inc" and a "MonoBridge.exe" generated
from "JavaBridge.jar". If you want to compile from source, use the
configure option <code>--with-mono</code>.</p>
<p>Mono/.NET support has been removed in PHP/Java Bridge version
6. If you want to access Mono/.NET libraries, please use PHP/Java
Bridge version 5.5.4 instead.</p>

<H4>What does a "protocol error ..." mean?</H4>
<p>That your Java has problems, for example an OutOfMemoryError. Check the back end (Tomcat/J2EE/...) log for details.</p>
<p>It could also indicate a setup problem. If you use a servlet back end but haven't set the <code>java.servlet</code> or <code>JAVA_SERVLET</code> option, the PHP library <code>Java.inc</code> will confuse the HTML response from the servlet engine with the XML protocol used by the bridge.</p>

<H4>Does it support PHP 4?</H4>
<p>Start a simple socket listener and use the following "Java" class:
<blockquote>
<code>
&lt;?php<br>
// The following is the "Java" class definition, stripped down to fit<br>
// into one line. To use this sample start Java with: java -jar<br>
// JavaBridge.jar INET:9267. Then type: php sample.php<br>
//<br>
class P{var$Pc="&lt;C v=\"%s\" p=\"I\"&gt;",$PC="&lt;/C&gt;",$Pi="&lt;I v=\"%d\" m=\"%s\" p=\"I\"&gt;",$PI="&lt;/I&gt;",$Ps="&lt;S v=\"%s\"/&gt;",$Pl="&lt;L v=\"%d\" p=\"%s\"/&gt;",$Po="&lt;O v=\"%d\"/&gt;",$c;function str($s){fwrite($this-&gt;c,sprintf($this-&gt;Ps,$s));}function obj($s){fwrite($this-&gt;c,sprintf($this-&gt;Po,$s-&gt;j));}function P(){$this-&gt;c=fsockopen("127.0.0.1",9267);}function cB($s){fwrite($this-&gt;c,sprintf($this-&gt;Pc,$s));}function cE(){fwrite($this-&gt;c,$this-&gt;PC);}function iB($o,$m){fwrite($this-&gt;c,sprintf($this-&gt;Pi,$o,$m));}function iE(){fwrite($this-&gt;c,$this-&gt;PI);}function v($s){if(is_object($s))$this-&gt;obj($s);else$this-&gt;str((string)$s);}function res(){$r=sscanf(fread($this-&gt;c,8192),"%s v=\"%[^\"]\"");return$r[1];}}function gP(){static$p;if(!$p)$p=new P();return$p;}class Java{var$j,$p;function Java(){if(!func_num_args())return;$this-&gt;p=gP();$ar=func_get_args();$this-&gt;p-&gt;cB(array_shift($ar));foreach($ar as$arg)$this-&gt;p-&gt;v($arg);$this-&gt;p-&gt;cE();$ar=sscanf($this-&gt;p-&gt;res(),"%d");$this-&gt;j=$ar[0];}function __call($m,$a,&$rv){$this-&gt;p-&gt;iB($this-&gt;j,$m);foreach($a as$arg)$this-&gt;p-&gt;v($arg);$this-&gt;p-&gt;iE();$p=new Java();$ar=sscanf($this-&gt;p-&gt;res(),"%d");$p-&gt;j=$ar[0];$p-&gt;p=$this-&gt;p;$rv=$p;return true;}function toString(){$this-&gt;p-&gt;iB("","castToString");$this-&gt;p-&gt;v($this);$this-&gt;p-&gt;iE();return base64_decode($this-&gt;p-&gt;res());}}overload("Java");<br>
<br>
<br>
// Test<br>
$i1 = new Java("java.math.BigInteger",  "1");<br>
$i2 = new Java("java.math.BigInteger",  "2");<br>
$i3 = $i1-&gt;add($i2);<br>
echo $i3-&gt;toString() . "\n";<br>
?&gt;<br>
</code>
</blockquote>
</p> 

<H2>Class loading questions</H2>

<a name="java-require"></a>
<H4>Why has java_require() been deprecated?</H4>

<p>
Because Java doesn't have a module system.
</p>
<p>
For example a library "lucene-2.3.1.jar" required by application B,
cannot be loaded if an older version of the library, required by
application A, is already cached.<br>
An attempt to link the library anyway will cause "NoClassDefFound" or "NoSuchMethod" errors at runtime. Or some procedures may throw checked exceptions even though they haven't declared them.
</p>
<p>
To protect PHP developers from Java's "<a href="http://en.wikipedia.org/wiki/JAR_hell">jar hell</a>", I have removed the
dynamic class loading mechanism from PHP/Java Bridge version 6.0;
java_require() issues a warning.
</p>
<p>
A proper Java module system must use special Java VM hooks, which don't
exist until now.
</p>

<H4>How do I load Java libraries?</H4>
<p>You should link your Java application as described in the 
<a href="http://php-java-bridge.sourceforge.net/pjb/standalone.php">Java standalone</a>
or 
<a href="http://php-java-bridge.sourceforge.net/pjb/webapp.php">Java webapps</a>
documents. 
</p>

<H4>Where can I store my java libraries for the VM Bridge?</H4>
<p>In your web application <code>WEB-INF/lib</code> directory.</p>
<p> If libraries should be available globally, store them in <code>java.ext.dirs</code>, for example in <code>/usr/share/java/ext</code>.</p>

<H4>Why do I get a ClassNotFoundException?</H4>
<p>You probably haven't loaded the relevant Java library. Or the
class doesn't exist or it is not public or it throws a java.lang.Error
during initialization. Check which library exports the feature and add the library to your web application WEB-INF/lib directory.</p>

<a name="java-dll-hell"></a>
<H4>Why do I get a NoClassDefFoundError?</H4>
<p>Because Java doesn't have a module system.</p>
<p>All libraries and their dependencies must be loaded by one, and only one class loader.</p>
<p>Please read the previous sentence until you understand what it means; for example a simple file system copy(!) operation may be the cause for a NoClassDefFoundError.</p>
<p><em>Please do not report NoClassDefFoundErrors to the mailing list or via the bug tracker. This is not a bug and we cannot help you any further!</em></p>

<H4>How do I load impure Java libraries?</H4>
<p>You can't. Java libraries must be pure Java.</p>
<p> Please read the
documentation of your J2EE server, Servlet engine or Java VM to see if and
how the environment can handle impure Java libraries. A common approach is to store the Java part in <code>java.ext.dirs</code> and the native part in <code>java.library.path</code>.</p>

<H2>J2EE/Servlet questions</H2>

<a name="php-extensions">
<H4>I want to ship my own PHP web application. Where do I put PHP and PHP extensions?</H4>
<p>
PHP binaries go to <code>WEB-INF/cgi/</code> and should be named <code>php-cgi-ARCHITECTURE-OS.exe</code> (Windows) or <code>php-cgi-ARCHITECTURE-OS</code> (Linux/Unix).
</p>
<p>
PHP extensions go to <code>WEB-INF/cgi/ARCHITECTORE-OS/ext</code>. The extension can be customized with a <code>WEB-INF/cgi/ARCHITECTURE-OS/conf.d/EXTENSION.ini</code> file.
<p>
Pure PHP libraries go to <code>WEB-INF/pear/</code>.
</p>
<p>
Example for the PHP mysql extension for Linux and Windows (i386/x86):
<blockquote>
<code>
WEB-INF&nbsp;---&nbsp;cgi&nbsp;---&nbsp;php-cgi-x86-windows.exe<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;---&nbsp;x86-windows&nbsp;---&nbsp;conf.d&nbsp;---&nbsp;mysql.ini&nbsp;[extension="php_mysql.dll"]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;---&nbsp;ext&nbsp;---&nbsp;php_mysql.dll<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;---&nbsp;php-cgi-i386-linux<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;---&nbsp;i386-linux&nbsp;---&nbsp;conf.d&nbsp;---&nbsp;mysql.ini&nbsp;[extension="mysql.so"]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;---&nbsp;ext&nbsp;---&nbsp;mysql.so<br>
</code>
</blockquote>

<a name="custom-servlet">
<H4>I have written my own servlet. How do I call it from PHP?</H4>
<p>
Add the following code to your servlet:
<blockquote>
<code>
public String hello() { return "hello from MyServlet"; }<br>
[...]<br>
protected void doPut (HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {<br>
&nbsp;IContextFactory ctx = new RemoteHttpServletContextFactory(this, getServletContext(), req, req, res);<br>
&nbsp;res.setHeader("X_JAVABRIDGE_CONTEXT", ctx.getId());<br>
&nbsp;res.setHeader("Pragma", "no-cache");<br>
&nbsp;res.setHeader("Cache-Control", "no-cache");<br>
&nbsp;try { ctx.getBridge().handleRequests(req.getInputStream(), res.getOutputStream()); } finally { ctx.destroy(); }<br>
}<br>
</code>
</blockquote>
</p>
<p>
Then copy the libraries <code>JavaBridge.jar</code> and <code>php-servlet.jar</code> to your <code>WEB-INF/lib</code> directory and re-deploy your web application.
</p>
<p>
If your servlet is programmed so that it listens on localhost:8080/MyWebApp/MyServlet, set <code>JAVA_HOSTS</code> and <code>JAVA_SERVLET</code> to these values:
<blockquote>
<code>
&lt;?php
define("JAVA_HOSTS", "localhost:8080");<br>
define("JAVA_SERVLET", "/MyWebApp/MyServlet");<br>
require_once("java/Java.inc");<br>
<br>
echo java_context()-&gt;getServlet()-&gt;hello();<br>
?&gt;
</code>
</blockquote>
</p>

<a name="load-balancing">
<H4>How do I set up a load balancer for the VM Bridge cluster?</H4>
<p>
Set up the VM Bridge cluster as <a href="#cluster">described below</a>. The example uses two nodes named "carlos" and "diego". The HTTP server front end runs on the web server "timon".
</p>
<p>Install Apache 2.2.0 or higher.</p>
<p>Enable <code>proxy_module</code> and <code>proxy_balancer_module</code>. The following example is for Linux (lines marked with "+" should be added to the <code>conf/httpd.conf</code> file):
<blockquote>
<code>
&nbsp;&nbsp;&nbsp;LoadModule rewrite_module modules/mod_rewrite.so<br>
&nbsp;+&nbsp;LoadModule proxy_module modules/mod_proxy.so<br>
&nbsp;+&nbsp;LoadModule proxy_balancer_module modules/mod_proxy_balancer.so<br>
&nbsp;&nbsp;&nbsp;LoadModule cache_module modules/mod_cache.so<br>
</code>
</blockquote>
</p>
<p>
Add the following code to the bottom of your <code>conf/httpd.conf</code> file:
<blockquote>
<code>
ProxyPass /JavaBridge balancer://mycluster maxattempts=2<br>
&lt;Proxy balancer://mycluster&gt;<br>
&nbsp;&nbsp;BalancerMember http://diego:8080/JavaBridge<br>
&nbsp;&nbsp;BalancerMember http://carlos:8080/JavaBridge<br>
&lt;/Proxy&gt;<br>
&lt;Location /balancer-manager&gt;<br>
&nbsp;&nbsp;SetHandler balancer-manager<br>
&nbsp;&nbsp;Deny from all<br>
&nbsp;&nbsp;Allow from 127.0.0.1<br>
&lt;/Location&gt;<br>
</code>
</blockquote>
</p>
<p>Start the cluster nodes on "carlos" and "diego".</p>
<p>Browse to <code>http://timon/JavaBridge/</code> (note the trailing slash) and click on the test.php. Click on refresh. Check if both nodes respond.</p>
<p>Browse to <code>http://timon/JavaBridge/sessionSharing.php</code> and click on refresh. Check the cookie value.</p>
<p>Browse to <code>http://timon/balancer-manager/</code>.
<p>Please see the <code>mod_rewrite</code> documentation for more information how to rewrite incoming URLs.</p>
</a>


<a name="cluster">
<H4>Ho do I set up a tomcat cluster?</H4>
<p>
Download tomcat 5 or higher, a Java JRE 5 or higher and the VM Bridge 4.1.6 or higher.
</p>
<p>
The following example uses two nodes running on two machines called
"carlos" and "diego".
</p>
<p>
On all nodes: Extract the tomcat distribution into a directory.
</p>
<p>On <strong>"diego"</strong> add the following to <code>conf/server.xml</code>:
<blockquote>
<code>
&lt;Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"<br>
&nbsp;&nbsp;channelSendOptions="8"&gt;<br>
&nbsp;&nbsp;&lt;Manager className="org.apache.catalina.ha.session.DeltaManager"<br>
&nbsp;&nbsp;&nbsp;&nbsp;expireSessionsOnShutdown="false"<br>
&nbsp;&nbsp;&nbsp;&nbsp;notifyListenersOnReplication="true"/&gt;<br>
&nbsp;&nbsp;&lt;Channel className="org.apache.catalina.tribes.group.GroupChannel"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;Receiver className="org.apache.catalina.tribes.transport.nio.NioReceiver"<br>
&nbsp;&nbsp;&nbsp;&nbsp;address="<strong>diego</strong>"<br>
&nbsp;&nbsp;&nbsp;&nbsp;port="4000"<br>
&nbsp;&nbsp;&nbsp;&nbsp;autoBind="100"<br>
&nbsp;&nbsp;&nbsp;&nbsp;selectorTimeout="5000"<br>
&nbsp;&nbsp;&nbsp;&nbsp;maxThreads="6"/&gt;<br>
&nbsp;&nbsp;&lt;/Channel&gt;<br>
&lt;/Cluster&gt;<br>
</code>
</blockquote>
</p>
<p>On <strong>"carlos"</strong> add the following to <code>conf/server.xml</code>:
<blockquote>
<code>
&lt;Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"<br>
&nbsp;&nbsp;channelSendOptions="8"&gt;<br>
&nbsp;&nbsp;&lt;Manager className="org.apache.catalina.ha.session.DeltaManager"<br>
&nbsp;&nbsp;&nbsp;&nbsp;expireSessionsOnShutdown="false"<br>
&nbsp;&nbsp;&nbsp;&nbsp;notifyListenersOnReplication="true"/&gt;<br>
&nbsp;&nbsp;&lt;Channel className="org.apache.catalina.tribes.group.GroupChannel"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;Receiver className="org.apache.catalina.tribes.transport.nio.NioReceiver"<br>
&nbsp;&nbsp;&nbsp;&nbsp;address="<strong>carlos</strong>"<br>
&nbsp;&nbsp;&nbsp;&nbsp;port="4000"<br>
&nbsp;&nbsp;&nbsp;&nbsp;autoBind="100"<br>
&nbsp;&nbsp;&nbsp;&nbsp;selectorTimeout="5000"<br>
&nbsp;&nbsp;&nbsp;&nbsp;maxThreads="6"/&gt;<br>
&nbsp;&nbsp;&lt;/Channel&gt;<br>
&lt;/Cluster&gt;<br>
</code>
</blockquote>
</p>
<p>Copy the "JavaBridge.war" into the "webapps" directory on "diego" and "carlos" and start both nodes. For example with the command:
<blockquote>
<code>
JAVA_OPTS="-Dphp.java.bridge.promiscuous=true" JAVA_HOME=/usr/java/default bin/catalina.sh run
</code>
</blockquote>
</p>

<p>
Please see your HTTP server documentation and <a href="#load-balancing">the description above</a> how to set it up as a load balancer.
</p>
</a>
<a name="global-servlet">
<H4>I want to use PHP for all tomcat applications. Apache and IIS are not available, but performance is important. How do I install it?</H4>
</a>
<ol>
<li>
Download the PHP/Java Bridge binary.
<li>
Copy <code>JavaBridge.jar</code>, <code>php-servlet.jar</code> and <code>php-script.jar</code> from the <code>JavaBridge.war</code> zip archive to <code>$CATALINA_HOME/lib</code>.
<li>
Add the following 9 lines marked with a <code>+</code> to the tomcat <code>$CATALINA_HOME/conf/web.xml</code> web app:
<blockquote>
<code>
<br>
&lt;<em>web-app</em> xmlns=... &gt
<br><br>
+    &lt;listener&gt;&lt;listener-class&gt;php.java.servlet.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;<br>
+    &lt;servlet&gt;&lt;servlet-name&gt;PhpJavaServlet&lt;/servlet-name&gt;&lt;servlet-class&gt;php.java.servlet.PhpJavaServlet&lt;/servlet-class&gt;<br>
+    &lt;/servlet&gt;<br>
+    &lt;servlet&gt;&lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;&lt;servlet-class&gt;php.java.servlet.fastcgi.FastCGIServlet&lt;/servlet-class&gt;<br>
+        &lt;init-param&gt;&lt;param-name&gt;prefer_system_php_exec&lt;/param-name&gt;&lt;param-value&gt;On&lt;/param-value&gt;&lt;/init-param&gt;<br>
+        &lt;init-param&gt;&lt;param-name&gt;php_include_java&lt;/param-name&gt;&lt;param-value&gt;On&lt;/param-value&gt;&lt;/init-param&gt;<br>
+    &lt;/servlet&gt;<br>
+    &lt;servlet-mapping&gt;&lt;servlet-name&gt;PhpJavaServlet&lt;/servlet-name&gt;&lt;url-pattern&gt;*.phpjavabridge&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;<br>
+    &lt;servlet-mapping&gt;&lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;&lt;url-pattern&gt;*.php&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;<br>
...<br>
<br>
&lt;<em>/web-app</em>&gt;

</code>
</blockquote>
<li>
Start tomcat.
</ol>
To test the above settings, add a file <code>test.php</code>:
<blockquote>
<code>
&lt;?php echo java("java.lang.System")-&gt;getProperties(); ?&gt;
</code>
</blockquote>
to some web context, for example "examples", and browse to <code>http://yourHost.com:8080/examples/test.php</code>.
<p>
In case you don't need to access Java from all of your scripts, you can set the <code>php_include_java</code> option to <code>Off</code> and <code>require_once("java/Java.inc")</code>, if needed.
<p>

<a name="php-web-app">
<H4>How do I create a standalone PHP web application for distribution and how can users deploy it into tomcat?</H4>
</a>
<p>
Create a directory <code>myApplication</code>, create the directories <code>myApplication/WEB-INF/lib/</code> and <code>myApplication/WEB-INF/cgi/</code>.
Download the J2EE binary and copy the <code>JavaBridge.jar</code> and the <code>php-servlet.jar</code> from the JavaBridge.war to the <code>myApplication/WEB-INF/lib/</code> folder. Copy the contents of the <code>cgi</code> folder to <code>myApplication/WEB-INF/cgi/</code>. Create the file <code>myApplication/WEB-INF/web.xml</code> with the following content:
<blockquote>
<code>
<br>
&lt;web-app&gt;<br>
    &lt;!-- PHP Servlet --&gt;<br>
    &lt;servlet&gt;<br>
        &lt;servlet-name&gt;PhpJavaServlet&lt;/servlet-name&gt;<br>
        &lt;servlet-class&gt;php.java.servlet.PhpJavaServlet&lt;/servlet-class&gt;<br>
    &lt;/servlet&gt;<br>
    &lt;!-- PHP CGI processing servlet, used when Apache/IIS are not available --&gt;<br>
    &lt;servlet&gt;<br>
        &lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;<br>
        &lt;servlet-class&gt;php.java.servlet.fastcgi.FastCGIServlet&lt;/servlet-class&gt;<br>
    &lt;/servlet&gt;<br>
<br>
    &lt;!-- PHP Servlet Mapping --&gt;<br>
    &lt;servlet-mapping&gt;<br>
        &lt;servlet-name&gt;PhpJavaServlet&lt;/servlet-name&gt;<br>
        &lt;url-pattern&gt;*.phpjavabridge&lt;/url-pattern&gt;<br>
    &lt;/servlet-mapping&gt;<br>
    &lt;!--PHP CGI Servlet Mapping --&gt;<br>
    &lt;servlet-mapping&gt;<br>
        &lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;<br>
        &lt;url-pattern&gt;*.php&lt;/url-pattern&gt;<br>
    &lt;/servlet-mapping&gt;<br>
<br>
    &lt;!-- Welcome files --&gt;<br>
    &lt;welcome-file-list&gt;<br>
        &lt;welcome-file&gt;index.php&lt;/welcome-file&gt;<br>
    &lt;/welcome-file-list&gt;<br>
 &lt;/web-app&gt;<br>
</code>
</blockquote>
</p>
<p>

<p>
Copy the files <code>sessionSharing.jsp</code> and <code>sessionSharing.php</code> from the <code>JavaBridge.war</code> to <code>myApplication</code> and create <code>myApplication.war</code>, for example with the commands: <code>cd myApplication; jar cf ../myApplication.war *</code>. </p>
<p>The web archive can now be distributed, copy it to the tomcat <code>webapps</code> directory and re-start tomcat. Visit <code>http://localhost/myApplication/sessionSharing.php</code> and <code>http://localhost/myApplication/sessionSharing.jsp</code>.
</p>

<a name="tomcat-security">
<H4>I want to use Tomcat's security manager, how do I install the bridge?</H4>
</a>
<p>
Install the PHP/Java Bridge for all web application as described <a href="#global-servlet">here</a>.
</p>


<a name="php-jsp-session-sharing">
<H4>I want to use Apache/IIS as a front-end and tomcat as a back end. How do I enable PHP and JSP for all my applications?</H4>
</a>
<p> Set up Apache or IIS so that it forwards requests to the back
end. Please see <a href="#load-balancing">the description above</a>
for details.
</p>



<H4>Does the
bridge run native code within my servlet engine or application
server?</H4> <p>No. The bridge back end is written in pure java, it
doesn't use any native code. Native PHP runs within Apache, IIS, or a
FCGI server. If the PHP instance crashes, an error page is
returned to the client and the Apache, IIS, CGI container usually starts a new PHP instance for the next
request.</p> 

<H4>The EJB example works with the Sun J2EE server, but in JBoss I get a ClassCastException, what's wrong?</H4> 
<p>It's a JBoss problem, although this problem may also appear in other application servers which do not strictly separate the application/bean domains. The JavaBridge.war already contains the <code>documentClient.jar</code> as a library, so JBoss references the library classes instead of the bean classes. Just remove the <code>documentClient.jar</code> from the <code>JavaBridge.war</code>, re-deploy <code>JavaBridge.war</code> and run the test again.
</p><p>
In JBoss' default setup the code:
<blockquote>
<code>
  // access the home interface<br>
  $DocumentHome = java("DocumentHome");<br>
  $PortableRemoteObject = java("javax.rmi.PortableRemoteObject");<br>
  $home=$PortableRemoteObject-&gt;narrow($objref, $DocumentHome);<br>
</code>
</blockquote>
refences the <code>DocumentHome</code> from the library, which is assignment-incompatible to <code>DocumentHome</code> from the enterprise bean (<code>DocumentHome@@WebAppClassLoader</code> !=  <code>DocumentHome@@BeanClassLoader</code>), so you get a ClassCastException in <code>narrow</code>.
</p>
<p>
In contrast the Sun J2EE server correctly separates the beans/applications; the <code>$objref</code> is a unique proxy generated by a parent of the <code>WebAppClassLoader</code>, so that <code>narrow</code> can always cast the proxy to <code>DocumentHome@@WebAppClassLoader</code>, even if a class with the same name is already available from the <code>WebAppClassLoader</code>.</p>

 <H4>How do I install PHP into the Nutch, Spring, JSF, ..., Framework?</H4> 
<p>By providing JSR 223 based PHP beans and a description how to manage them, as usual. The code
<blockquote>
<code>
  javax.script.ScriptEngine e = <br>
      php.java.script.EngineFactory.getInvocablePhpScriptEngine (this, <br>
                                                        application, <br>
                                                        request, response);<br>
</code>
</blockquote>
can be used to access the JSR 223 ScriptEngine from the framework, provided that a listener has been configured in the WEB-INF/web.xml:
<blockquote>
<code>
   &lt;listener&gt;
       &lt;listener-class&gt;php.java.servlet.ContextLoaderListener&lt;/listener-class&gt;
   &lt;/listener&gt;
</code>
</blockquote>
</p>

<H2>General runtime questions</H2>

<H4>How do I include a local (*.asp, *.jsp, ...) resource?</H4>
<p>Use the <code><a href="http://us.php.net/manual/en/function.virtual.php">virtual()</a></code> or <code><a href="API/JavaBridge/_JavaBridge.inc.html#functionjava_virtual">java_virtual()</a></code> function.
</p>
<p><strong>Warning:</strong> Do not open a "loop back" url connection (e.g. via <code>fopen("http://localhost.../foo.asp")</code>) to include the <em>local</em> resource. This might exceed the HTTP server's pool size and create a deadlock!</p>

<H4>How do I reference a class w/o creating an instance?</H4>
<p>
With the <code>java</code> function, for example: <code>java("java.lang.System")</code>.
</p>
<p>The function is defined in <code>http://localhost:8080/JavaBridge/java/Java.inc</code> as:
<blockquote>
<code>
function java($clazz) {<br>
&nbsp;&nbsp;static $classMap = array();<br>
&nbsp;&nbsp;if(array_key_exists($clazz, $classMap)) return $classMap[$clazz];<br>
&nbsp;&nbsp;return classMap[$clazz]=new JavaClass($clazz);<br>
}
</code>
</blockquote>
</p>

<H4>Why does java_context()-&gt;getHttpServletRequest()-&gt;getSession() return null?</H4>
<p>
PHP scripts must explicitly allocate a session with <code><a href="API/JavaBridge/_JavaProxy.inc.html#functionjava_session">java_session()</a></code>. For example:
<blockquote>
<code>
java_session(); <br>
// now the (Remote-)HttpServletRequest knows about the session: <br>
echo java_context()-&gt;getHttpServletRequest()-&gt;getSession(); <br>
</code>
</blockquote>
</p>

<H4>Where is my output?</H4> <p><code>System.out</code> and
<code>System.err</code> are redirected to the server log file(s). When
PHP scripts are invoked from a java framework (Java Server Faces for
example), even the PHP output is redirected. For the standalone back
end the output appears in the
<code>/var/log/php-java-bridge.log</code> or in VMBridge.log, see
.ini option <code>java.log_file</code>. For the j2ee back end the
location of the log file(s) depends on the j2ee server
configuration.</p>


<H4>How do I make my script state (objects or variables) persistent?</H4> 
<p>If you must code it yourself: with
e.g. <code>java_session()-&gt;put("buf", $stringBuffer)</code></p> 


<H4>How many threads does the bridge start?</H4> 
<p>Request-handling threads are started
from a thread pool, which limits the number of user requests to 20
(default), see system property
<code>php.java.bridge.threads</code>. All further requests have to
wait until one of the worker threads returns to the pool. </p> 
<p>When running in a servlet engine, a <a
href="server/documentation/API/php/java/bridge/http/ContextServer.html">ContextServer</a>
is started which handles the pipe or local socket communication
channel.  </p> <p>When java invokes local scripts outside of a HTTP
environment, the bridge starts a <a
href="server/documentation/API/php/java/bridge/http/HttpServer.html">HttpServer</a>,
a <a
href="server/documentation/API/php/java/bridge/http/ContextServer.html">ContextServer</a>
and a <a
href="server/documentation/API/php/java/script/HttpProxy.html">HttpProxy</a>. The
HttpProxy represents the PHP continuation and the HttpServer the
request-handling java continuation associated with the JSR223 script.
</p> 

 <H4>How do I access enums or inner classes?</H4> 
With the <code>classname$inner</code> syntax. For example <br><br>
<code>
public interface php {<br>
&nbsp;public class java {<br>
&nbsp;&nbsp;public enum bridge {JavaBridge, JavaBridgeRunner};<br>
&nbsp;}<br>
}<br>
</code><br>
can be accessed with:<br><br>
<code>
&lt;?php<br>
$bridge = new java('php$java$bridge');<br>
echo $bridge-&gt;JavaBridgeRunner;<br>
?&gt;<br>
</code><br>
The above code is not a good programming example but it demonstrates why a different syntax is used to access inner classes. 
</p>

 <H4>How do I create a primitive array?</H4> 
<p>
Primitive types are wrapped by associated java classes. 
The following example uses <code>reflect.Array</code> to create a new <code>byte</code> array:<br><br>
<code>
$Byte = java("java.lang.Byte");<br>
$byte = $Byte-&gt;TYPE;<br>
$Array = java("java.lang.reflect.Array");<br>
$byteArray = $Array-&gt;newInstance($byte, 255);<br>
$System = java("java.lang.System");<br>
$length = $System-&gt;in-&gt;read($byteArray);<br>
$str = new Java("java.lang.String", $byteArray, 0, $length);<br>
echo "You have typed: $str\n";<br>
</code>
</p>

<a name="performance"></a> <H4>How fast is it?</H4> <p> 
The following scripts were
executed on one 1.5 GHZ x86 cpu running RedHat Fedora 10 Linux and Sun jdk1.6.0_02.
We have tested "Mozilla Rhino" 1.6 release 2 from <a href="http://java.sun.com">JDK 1.6</a>, <a href="http://caucho.com">Caucho "Quercus" version 3.2.1</a>, the <a href="http://php-java-bridge.sf.net">PHP/Java Bridge version 5.4.4</a>, and <a href="http://php.net/manual/en/book.java.php">PHP 4's ext/java</a>.
</p>
The PHP code (<code>t11.php</code>):<br>
<p>
<code>
&lt;?php<br>
$buf=new java("java.lang.StringBuilder");<br>
for ($i=0; $i<400000; $i++) $buf-&gt;append($i);<br>
echo $buf-&gt;length() . "\n";<br>
?&gt;
</code>
</p>
Another PHP code is necessary for Quercus 3.2.1 because it cannot run the above standard PHP code correctly (<code>t12.php</code>):<br>
<p>
<code>
&lt;?php<br>
$buf=new java("java.lang.StringBuilder");<br>
for ($i=0; $i<400000; $i++) $buf-&gt;append(new java("java.lang.String", $i));<br>
echo $buf-&gt;length() . "\n";<br>
?&gt;
</code>
</p>
The ECMAScript ("Mozilla Rhino") code (<code>t11.js</code>):<br>
<p>
<code>
buf = new java.lang.StringBuilder();<br>
for(i=0; i<400000; i++) buf.append(new java.lang.Integer(i));<br>
print (buf.length());<br>
</code>
</p>
<p>
<center>
<TABLE
BORDER="1"
><COL><COL><COL><COL><THEAD
><TR
><TH
>Command</TH
><TH
>Script Engine</TH
><TH
>Communication Channel</TH
><TH
>Execution time (real, user, sys)</TH
></TR
></THEAD>

<TR
><TD
>time jrunscript -l js t11.js</TD
><TD
><a href="http://java.sun.com">"Mozilla Rhino" 1.6 release 2</a></TD
><TD
>none (native code)</TD
><TD
>0m7.932s,<br>
0m7.701s,<br>
0m0.113s
</TD
></TR
>
<TR
><TD
>time jrunscript -classpath quercus.jar:resin-util.jar:servlet-api.jar -l quercus t12.php</TD
><TD
><a href="http://caucho.com">Quercus 3.2.1</a></TD
><TD
>none (native code)</TD
><TD
>0m7.134s,<br>
0m5.050s,<br>
0m1.934s
</TD
></TR
>

<TR
><TD
>time jrunscript -classpath JavaBridge.jar -l php t11.php</TD
><TD
><a href="http://php-java-bridge.sf.net">PHP/Java Bridge 5.4.4</a></TD
><TD
>named pipes (XML protocol)</TD
><TD
>0m16.059s,<br>
0m15.341s,<br>
0m0.197s
</TD
></TR
>

<TR
><TD
>php t11.php</TD
><TD
><a href="http://php.net/manual/en/book.java.php">PHP 4.4.7/PHP-Java extension</a></TD
><TD
>JNI (binary protocol)</TD
><TD
>0m57.689s,<br>
0m56.243s,<br>
0m0.467s
</TD
></TR
>

</TABLE
>
</center>
</p>
<p>
</p>

 <H4>How does the bridge handle OutOfMemoryErrors?</H4> 
<p>
OutOfMemoryErrors may happen because a cached object cannot be released, either because <p>
<ol>
<li> the object is permanently referenced by a request-handling thread or</li>
<li> the object has been entered into the session or application store or 
 the object is referenced by a thread outside of the scope of the VM Bridge.</li>
</ol>
</p>
</p>
<p>When a <code>java.lang.OutOfMemoryError</code> reaches the request-handling thread, the VM Bridge thread pool removes the thread from its pool and writes a message <code>FATAL: OutOfMemoryError</code> to the VM Bridge log file. The session store is cleaned and all client connections are terminated without confirmation.
</p>
<p>
If the OutOfMemoryError persists, this means that a thread outside of the VM Bridge has caused this error condition.
</p>
<p>
OutOfMemory conditions can be debugged by running the back end with e.g.:<br><br>
<code>
java -agentlib:hprof=heap=sites -jar JavaBridge.jar<br>
</code>
</p>
 
<H4>How can PHP classes extend Java classes and Java methods?</H4> 
<p>
By using <a href="API/JavaBridge/_JavaProxy.inc.html#functionjava_closure"><code>java_closure()</code></a> and the <a href="http://en.wikipedia.org/wiki/Visitor_pattern">visitor pattern</a> for example. 
</p>
<p> In PHP 5.3 or above the following code can be used:
<blockquote>
<code>
use java\lang\String as JString;<br><br>
class String extends JString {<br>
&nbsp;&nbsp;function toString(){return "I am " . parent::toString();}<br>
&nbsp;&nbsp;function __toString() {return $this->toString();}<br>
}<br><br>
echo new String("foo");<br><br>
=&gt; I am foo
</code>
</blockquote>

<H4>How can I convert a Java object into a PHP value?</H4>
<p>
With <code>java_values()</code>. For example:
<blockquote>
<code>
&nbsp;&nbsp;$ar = java("java.lang.reflect.Array")->newInstance(java("java.lang.Integer"), 2);<br>
&nbsp;&nbsp;$ar[0] = new java("java.lang.Integer", 2);$ar[1] = new java("java.lang.Integer", 5);<br>
&nbsp;&nbsp;print_r(java_values($ar));<br>
</code>
</blockquote>
</p>
<H4> How can I convert a PHP object into a Java object?</H4>
<p>
With <code>java_closure()</code>. For example:
<blockquote>
<code>
&nbsp;&nbsp;class Foo {<br>
&nbsp;&nbsp;&nbsp;function toString() {return "php::foo";}<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;$foo = new Foo();<br>
&nbsp;&nbsp;$jObj = java_closure($foo);<br>
&nbsp;&nbsp;$String = java("java.lang.String");<br>
&nbsp;&nbsp;echo $String-&gt;valueOf($jObj);<br>
</code>
</blockquote>
</p>
<H4>How do I call JSP tags from PHP?</H4>
<p>
Example:
<blockquote>
<code>
require_once("http://localhost:8080/JavaBridge/java/Java.inc");<br>
$tag = new Java("foo.bar.BazTag");<br>
<br>
$session = java_session();<br>
$ctx = java_context();<br>
$servlet = $ctx-&gt;getAttribute("php.java.servlet.Servlet");<br>
$response = $ctx-&gt;getAttribute("php.java.servlet.HttpServletResponse");<br>
$request = $ctx-&gt;getAttribute("php.java.servlet.HttpServletRequest");<br>
$factory = java("javax.servlet.jsp.JspFactory")-&gt;getDefaultFactory();<br>
$pc = $factory-&gt;getPageContext($servlet, $request, $response, null, true, 8192, false);<br>
<br>
$tag-&gt;setPageContext($pc);<br>
$value = $tag-&gt;doStartTag();<br>
if(($value != Java("javax.servlet.jsp.tagext.Tag")-&gt;SKIP_BODY) {<br>
&nbsp;&nbsp;if($value != Java("javax.servlet.jsp.tagext.Tag")-&gt;EVAL_BODY_INCLUDE)) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;$tag-&gt;setBodyContent($pc-&gt;pushBody());<br>
&nbsp;&nbsp;&nbsp;&nbsp;$tag-&gt;doInitBody();<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;do {<br>
&nbsp;&nbsp;&nbsp;&nbsp;...<br>
&nbsp;&nbsp;} while($tag-&gt;doAfterBody() == Java("javax.servlet.jsp.tagext.BodyTag")-&gt;EVAL_BODY_AGAIN)<br>
}<br>
if($value != Java("javax.servlet.jsp.tagext.Tag")-&gt;EVAL_BODY_INCLUDE) $pc-&gt;popBody();<br>
$tag-&gt;doEndTag();<br>
</blockquote>
</code>
</p><p>
The generated content (if any) can be retrieved from the servlet output stream with:
<blockquote>
<code>
java_values($response-&gt;getBufferContents();
</code>
</blockquote>
</p>
<p>Please see the <code>php_java_lib/JspTag.php</code> and <code>tests.php5/tag.php</code> for details.</p>
<H4>How does the bridge support Java generics?</H4>
<p>
You can ignore the parameter type.
</p>
<p>
Java doesn't support real generics on byte-code level. The generics in JDK 1.5 and above are implemented as "erasures"; they are syntactic sugar, useful only for the Java compiler. The generated byte-code is the same as in JDK 1.4.
</p>
<H4>What about Java 5 varargs?</H4>
<p>
Pass them as a PHP array. Example:
</p>
<p>
<blockquote>
<code>
&lt;?php require_once("http://localhost:8080/JavaBridge/java/Java.inc");<br>
$t1 = new java('Varargs$Test', 1);<br>
$t2 = new java('Varargs$Test', 2);<br>
echo java("Varargs")-&gt;varargs(array($t1, $t2));<br>
?&gt;
</code>
</blockquote>
</p>
<p>
<blockquote>
<code>
public class Varargs {<br>
&nbsp;public static class Test {<br>
&nbsp;&nbsp;public int i;<br>
&nbsp;&nbsp;public Test (int i) {<br>
&nbsp;&nbsp;&nbsp;this.i = i;<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;public String toString() {<br>
&nbsp;&nbsp;&nbsp;return String.valueOf(i);<br>
&nbsp;&nbsp;}<br>
&nbsp;}<br>
&nbsp;public static String varargs(Test ...tests) {<br>
&nbsp;&nbsp;StringBuffer buf = new StringBuffer();<br>
&nbsp;&nbsp;for (Test test : tests) {<br>
&nbsp;&nbsp;&nbsp;buf.append(test);<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;return buf.toString();<br>
&nbsp;}<br>
}<br>
</code>
</blockquote>
</p>
<H4>NULL tests</H4>
<p>
Use <code>java_is_null($value)</code> or <code>is_null (java_values ($value))</code> to test for a (Java-) NULL value.
</p>

<H4>How do I start the bridge back end when there's another Java VM listening on port 8080?</H4>
<p>Simply deploy the VM Bridge web archive into the servlet engine or application server listening on port 8080. Or use a different port.</p>

<H4>What's the difference between SERVLET_LOCAL:8080 and INET_LOCAL:8080?</H4>
<p>The standalone option SERVLET_LOCAL emulates a servlet engine and starts a HTTP server which can select the fastest channel supported on this operating system. On Linux this is a named pipe created in /dev/shm or INET_LOCAL as a fall back.</p>
<p>INET_LOCAL always uses local TCP socket communication.</p>

<H4>Whenever I reboot my computer I have to start the bridge back end again. How can I automate this?</H4>
<p>Download and install a servlet engine or J2EE server as a Windows
or Unix service.</p>

<H4>Do I have to require Java.inc in each of my scripts? Isn't that very slow?</H4>
<p>In order to communicate with Java, a PHP "Java" class definition is needed. Here's a simple PHP "Java" class definition which fits into one line:
<blockquote>
<code>
&lt;?php<br>
// The following is the "Java" class definition, stripped down to fit<br>
// into one line. To use this sample start Java with: java -jar<br>
// JavaBridge.jar INET:9267.Then type: php sample.php<br>
//<br>
class P{var$Pc="&lt;C v=\"%s\" p=\"I\"&gt;",$PC="&lt;/C&gt;",$Pi="&lt;I v=\"%d\" m=\"%s\" p=\"I\"&gt;",$PI="&lt;/I&gt;",$Ps="&lt;S v=\"%s\"/&gt;",$Pl="&lt;L v=\"%d\" p=\"%s\"/&gt;",$Po="&lt;O v=\"%d\"/&gt;",$c;function str($s){fwrite($this-&gt;c,sprintf($this-&gt;Ps,$s));}function obj($s){fwrite($this-&gt;c,sprintf($this-&gt;Po,$s-&gt;j));}function P(){$this-&gt;c=fsockopen("127.0.0.1",9267);}function cB($s){fwrite($this-&gt;c,sprintf($this-&gt;Pc,$s));}function cE(){fwrite($this-&gt;c,$this-&gt;PC);}function iB($o,$m){fwrite($this-&gt;c,sprintf($this-&gt;Pi,$o,$m));}function iE(){fwrite($this-&gt;c,$this-&gt;PI);}function v($s){if(is_object($s))$this-&gt;obj($s);else$this-&gt;str((string)$s);}function res(){$r=sscanf(fread($this-&gt;c,8192),"%s v=\"%[^\"]\"");return$r[1];}}function gP(){static$p;if(!$p)$p=new P();return$p;}class Java{var$j,$p;function Java(){if(!func_num_args())return;$this-&gt;p=gP();$ar=func_get_args();$this-&gt;p-&gt;cB(array_shift($ar));foreach($ar as$arg)$this-&gt;p-&gt;v($arg);$this-&gt;p-&gt;cE();$ar=sscanf($this-&gt;p-&gt;res(),"%d");$this-&gt;j=$ar[0];}function __call($m,$a){$this-&gt;p-&gt;iB($this-&gt;j,$m);foreach($a as$arg)$this-&gt;p-&gt;v($arg);$this-&gt;p-&gt;iE();$p=new Java();$ar=sscanf($this-&gt;p-&gt;res(),"%d");$p-&gt;j=$ar[0];$p-&gt;p=$this-&gt;p;return$p;}function toString(){$this-&gt;p-&gt;iB("","castToString");$this-&gt;p-&gt;v($this);$this-&gt;p-&gt;iE();return base64_decode($this-&gt;p-&gt;res());}};<br>
<br>
<br>
// Test<br>
$i1 = new Java("java.math.BigInteger",  "1");<br>
$i2 = new Java("java.math.BigInteger",  "2");<br>
$i3 = $i1-&gt;add($i2);<br>
echo $i3-&gt;toString() . "\n";<br>
?&gt;<br>
</code>
</blockquote>
</p>
<p>The above simple "Java" class assumes that some Java VM has been
started on host "127.0.0.1", port "9267". And it cannot handle values
larger than 8192 bytes. Therefore the VM Bridge
library <code>Java.inc</code> should be used. Scripts should contain
the statement
<blockquote>
<code>
&nbsp;&nbsp;require_once("...java/Java.inc");
</code>
</blockquote>
at the beginning of each script. PHP compiles and caches PHP scripts, the <code>Java.inc</code> library is loaded only once.
</p>

<H4>What does "The requested method PUT is not allowed ... at localhost Port 80" mean?</H4>
<p>It means that <code>request.getServerPort()</code> is lying. Port 80 is privileged and therefore cannot be the servlet engine's server port.</p>
<p>If you use the AJP connector, for example via <code>ProxyPassMatch ^(/.*\.jsp)$ ajp://127.0.0.1$1</code>, set the correct <code>proxyPort</code> in <code>tomcat/conf/server.xml</code>. Example:
<blockquote>
<code>
&lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;<br>
- &lt;Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /&gt;<br>
+ &lt;Connector port="8009" protocol="AJP/1.3" proxyPort="8080" redirectPort="8443" /&gt;<br>
</code>
</blockquote>
 Please see the <a href="http://tomcat.apache.org/tomcat-5.5-doc/config/ajp.html">AJP documentation<a> for details.

</BODY>
</HTML>
@


1.47
log
@Release-6-1-2
@
text
@d758 1
a758 1
></THEAD
@


1.46
log
@Release-6-1-1
@
text
@a49 1
<li>Mono >= 1.2.4 or .NET >= 2.</li>
d144 1
a144 1
<p>Useful options which can be set before the Java.inc/Mono.inc is loaded are:
a146 1
define ("JAVA_DEBUG", false);<br>
a148 1
define ("JAVA_PIPE_DIR", null);<br>
d165 3
d190 7
a196 4
<p>Yes, there's a PHP library "Mono.inc" generated from "Java.inc" and
a "MonoBridge.exe" generated from "JavaBridge.jar". If you want to
compile from source, use the configure
option <code>--with-mono</code>.</p>
d199 1
a199 1
<p>That your Java or .NET VM has problems, for example an OutOfMemoryError. Check the back end (Tomcat/J2EE/.NET/...) log for details.</p>
d239 1
a239 1
To protect PHP developers from Java's "dll hell", I have removed the
d257 1
a257 2
<p>Either within  your web application <code>WEB-INF/lib</code> directory or in <code>php.java.bridge.base</code>/lib.</p>
<p> When the system property <code>php.java.bridge.base</code> is not set, libraries are loaded from <code>$HOME/lib</code> where <code>$HOME</code> denotes the home directory of the person or component which has started the java VM.</p>
d280 65
d562 2
a563 2
doesn't use any native code. Native PHP runs within Apache, IIS, a
FCGI server or via CGI. If the PHP instance crashes, an error page is
a566 42

<a name="ssl">
<H4>On Windows some PHP binaries do not support HTTPS/SSL</H4> 
</a>
<p>
If you see the message:
<blockquote>
<code>
Warning: fsockopen() [function.fsockopen]: unable to connect to ssl://127.0.0.1:8443
(Unable to find the socket transport "ssl" - did you forget to enable it when you configured PHP?)
</code>
</blockquote>
this means that PHP cannot connect back to the official SSL port. 
Please check the 
"Registered Stream Socket Transports" from the <code>phpinfo()</code> (see the <code>test.php</code> page), it should display: <code>tcp, udp, ssl, sslv3, sslv2, tls</code>. If not, please recompile PHP with SSL enabled, use the flag <code>--with-openssl</code>.
<p>
A workaround is to use the official non-SSL port or to open a
dedicated local port for the PHP-Java communication. The following
example is for Tomcat:
<p>
<ol>
Disable <code>override_hosts</code> in the web application <code>WEB-INF/web.xml</code>:
<blockquote>
<code>
         &lt;context-param&gt;<br>
           &lt;param-name&gt;override_hosts&lt;/param-name&gt;<br>
           &lt;param-value&gt;Off&lt;/param-value&gt;<br>
         &lt;/context-param&gt;<br>
</code>
</blockquote>
Either fetch the <code>Java.inc</code> directly from your back end (which also adjusts the <code>JAVA_HOSTS</code>) or change the <code>JAVA_HOSTS</code> option, for example:
<blockquote>
<code>
define("JAVA_HOSTS", "127.0.0.1:9090");
</code>
</blockquote>
</ol>
<p>
Restart the application server or servlet engine. Check the settings by running <code>phpinfo()</code> or by visiting the <code>test.php</code> page. 
</p>


d607 1
a607 5
<p>Use the <code><a href="http://us.php.net/manual/en/function.virtual.php">virtual()</a></code> function.
If PHP is running in a JEE server or servlet engine, the <code>virtual()</code> function is an alias for 
<blockquote>
<code>java_context()-&gt;getHttpServletRequest()-&gt;getRequestDispatcher()-&gt;include()</code>
</blockquote>
d629 1
a629 1
PHP scripts must explicitly allocate a session with <code><a href="API/VM%20Bridge/_JavaProxy.inc.html#functionjava_session">java_session()</a></code>. For example:
d850 1
a850 1
By using <a href="API/VM%20Bridge/_JavaProxy.inc.html#functionjava_closure"><code>java_closure()</code></a> and the <a href="http://en.wikipedia.org/wiki/Visitor_pattern">visitor pattern</a> for example. 
d886 1
a886 1
&nbsp;&nbsp;$String = new Java("java.lang.String");<br>
@


1.45
log
@Release-6-0-4
@
text
@d401 1
a401 1
+    &lt;servlet&gt;&lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;&lt;servlet-class&gt;php.java.servletfastcgi.FastCGIServlet&lt;/servlet-class&gt;<br>
d445 1
a445 1
        &lt;servlet-class&gt;php.java.servletfastcgi.FastCGIServlet&lt;/servlet-class&gt;<br>
@


1.44
log
@Release-6-0-3
@
text
@d224 21
a257 7
<H4>Why can't Apache load my /foo/bar/baz.jar file?</H4>
<p>It probably doesn't have the permission to access it. Check if
baz.jar is a valid Java archive and if its main class is public. Try
to disable Security Enhanced Linux and store the jar file into a
folder accessible by the apache user and then extract the required
Security Enhanced Linux permissions from the audit log.</p>

@


1.43
log
@Release-6-0-3
@
text
@d387 1
a387 1
+    &lt;servlet&gt;&lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;&lt;servlet-class&gt;php.java.servlet.PhpCGIServlet&lt;/servlet-class&gt;<br>
d431 1
a431 1
        &lt;servlet-class&gt;php.java.servlet.PhpCGIServlet&lt;/servlet-class&gt;<br>
@


1.42
log
@Release-6-0-0
@
text
@a230 4
<p>For backward compatibility the PHP/Java Bridge also supports a <code>java_require('myApp.jar;myLib1.jar;myLibN.jar');</code> procedure, which <strong>may</strong> load java apps and their libraries dynamically.
But this procedure should not be used in new programs.
Please see the README from the documentation download and the PHP/Java Bridge API for details.
</p>
a235 1
<p> If a library is not yet API-stable, store it into a sub directory of the <code>lib</code> directory and use the <code>java_require()</code> procedure. For example <code>java_require("myLibs0.2/foo.jar")</code> loads <code>foo.jar</code> from <code>php.java.bridge.base/lib/myLibs0.2</code>.</p>
d245 1
a245 1
<p>You probably haven't required the relevant Java library. Or the
a255 23
<H4>I cannot require my JDBC driver!?!</H4>
<p> Please re-read the <a href="#java-require">class loading section</a>. The following code loads all interconnected libraries using a single java_require() call:
<blockquote>
<code>
&nbsp;&nbsp;java_require("myApplication.jar;myJdbcDriver.jar");<br>
&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;$myApplication->callWithMyJdbcDriver();<br>
</code>
</blockquote>
</p>
<p>
The following incorrect code fails because the application (the "JavaBridge.jar" in this case) cannot be
accessed by the jdbc driver. This constraint is checked by the DriverManager:
<blockquote>
<code>
&nbsp;&nbsp;java_require("myJdbcDriver.jar"); // WRONG!<br>
&nbsp;&nbsp;new java("my.jdbc.Driver");<br>
&nbsp;&nbsp;java("java.sql.DriverManager")-&gt;getDriver("myJdbcURL"); // FAILS!<br>
</code>
</blockquote>
If you really need to access the driver directly from PHP code, either use the driver API directly or load "JavaBridge.jar" and "myJdbcDriver.jar" from the same class loader so that the DriverManager can link them together. Use the web application WEB-INF/lib directory or the global repository (usually <code>/usr/java/packages/lib/ext</code>).
</p>

a651 1
java_require(getcwd()); // load php.class<br>
a861 1
java_require("myLibs/baz-taglib.jar");<br>
a910 1
$here=getcwd(); java_require("$here/varargs.jar");<br>
@


1.41
log
@*** empty log message ***
@
text
@d49 1
a49 1
<li>J2EE >= 1.3. For J2EE 1.3 remove the <code>RequestListener</code> declaration from the WEB-INF/web.xml.</li>
d231 1
a231 1
<p>For backward compatibility the PHP/Java Bridge also supports a <code>java_require()</code> procedure, which <strong>may</strong> load libraries dynamically.
d252 1
a252 2
during initialization. Check which library exports the feature and add
the library to the <code>java_require()</code> statement.</code></p>
d281 1
a281 1
If you really need to access the driver directly from PHP code, either use the driver API directly or load "JavaBridge.jar" and "myJdbcDriver.jar" from the same class loader so that the DriverManager can link them together. Use the extra library directory (usually <code>~/lib/</code>) or the global repository (usually <code>/usr/java/packages/lib/ext</code>).
d595 9
@


1.40
log
@Release 5.5.3
@
text
@d564 2
a565 2
  $DocumentHome = new JavaClass("DocumentHome");<br>
  $PortableRemoteObject = new JavaClass("javax.rmi.PortableRemoteObject");<br>
d685 1
a685 1
$Byte = new JavaClass("java.lang.Byte");<br>
d687 1
a687 1
$Array = new JavaClass("java.lang.reflect.Array");<br>
d689 1
a689 1
$System = new JavaClass("java.lang.System");<br>
d856 3
a858 4
&nbsp;&nbsp;$s = new Java("java.lang.String");<br>
&nbsp;&nbsp;$c = $chr = $s-&gt;toCharArray();<br>
&nbsp;&nbsp;print  (java_values($s));<br>
&nbsp;&nbsp;print_r(java_values($c));<br>
@


1.39
log
@Release-5-5-2
@
text
@d53 1
a53 1
<H4>Why doesn't the bridge catch java.lang.RuntimeExceptions or java.lang.Errors?</H4>
d55 1
a55 1
All exceptions crossing the php/java container <strong>must</strong> be declared, otherwise the behaviour is unspecified. If you want to catch <code>java.lang.RuntimeException</code> or <code>java.lang.Error</code> from PHP code, add a "throws" declaration. Example:
d61 4
a64 1
However, it is a good programming practice to not allow <code>java.lang.RuntimeException</code> and <code>java.lang.Error</code> to cross an application container boundary. A JEE "enterprise java beans" container for example will terminate a transaction immediately if it encounters an exception derived from Error or RuntimeException.
d197 1
d200 20
a219 1
<p>No. Use VM Bridge version 4.3.2 or below instead.</p>
d235 1
d240 1
d252 2
a253 1
during initialization.</p>
a482 7
To call Java code from PHP, copy the <code>java/Java.inc</code> 
to some directory and require it as usual, e.g.: <code>require_once("java/Java.inc");</code>.
</p>
<p>
To call PHP code from Java, copy the <code>java/JavaProxy.php</code> 
to some <em>web</em>directory and use the EngineFactory as usual, e.g.: <code>EngineFactory.getInvocablePhpScriptEngine(this, application, request, response);</code> or, if PHP is running somewhere else: <code>EngineFactory.getInvocablePhpScriptEngine(..., 80, "/phpApp/JavaProxy.php");</code>.
</p>
a840 1
java_autoload();<br><br>
a850 15

</p> 
<H4>How can I execute PHP code on the server?</H4> 
<p>
With <code>java_begin_document()/java_end_document()</code>. For example:
<blockquote>
<code>
&nbsp;&nbsp;java_begin_document();<br>
&nbsp;&nbsp;$s = new Java("java.lang.StringBuffer");<br>
&nbsp;&nbsp;for($i=0; $i<10000; $i++) $s-&gt;append($i);<br>
&nbsp;&nbsp;java_end_document();<br>
</code>
</blockquote>
The above code sends the PHP code as an XML image to the server and executes it there.
</p> 
d987 3
a989 4
// The following is the "Java" class definition, stripped down to fit into one line<br>
// To use this sample start Java with: java -jar JavaBridge.jar INET:9267<br>
// Or enable java.so or php_java.dll, which automatically start the above<br>
// process Then type: php sample.php<br>
d991 2
a992 1
class P {const Pc="&lt;C v=\"%s\" p=\"I\"&gt;", PC="&lt;/C&gt;"; const Pi="&lt;I v=\"%d\" m=\"%s\" p=\"I\"&gt;", PI="&lt;/I&gt;"; const Ps="&lt;S v=\"%s\"/&gt;", Pl="&lt;L v=\"%d\" p=\"%s\"/&gt;", Po="&lt;O v=\"%d\"/&gt;"; private $c; function str($s){fwrite($this-&gt;c, sprintf(self::Ps, $s));} function obj($s){fwrite($this-&gt;c, sprintf(self::Po, $s-&gt;java));} function __construct(){$this-&gt;c=fsockopen("127.0.0.1",9267);} function cBeg($s){fwrite($this-&gt;c, sprintf(self::Pc, $s));} function cEnd(){fwrite($this-&gt;c, self::PC);} function iBeg($o, $m){fwrite($this-&gt;c, sprintf(self::Pi, $o, $m));} function iEnd(){fwrite($this-&gt;c, self::PI);} function val($s){if(is_object($s))$this-&gt;obj($s);else $this-&gt;str((string)$s);} function res(){$r=sscanf(fread($this-&gt;c, 8192),"%s v=\"%[^\&quot;]\"");return $r[1];}} function gP() {static $p; if(!$p) $p=new P(); return $p;} class Java {var $java, $p; function __construct() {if(!func_num_args()) return; $this-&gt;p=gP(); $ar=func_get_args(); $this-&gt;p-&gt;cBeg(array_shift($ar)); foreach($ar as $arg) $this-&gt;p-&gt;val($arg); $this-&gt;p-&gt;cEnd(); $ar = sscanf($this-&gt;p-&gt;res(), "%d"); $this-&gt;java=$ar[0];} function __call($meth, $args) {$this-&gt;p-&gt;iBeg($this-&gt;java, $meth); foreach($args as $arg) $this-&gt;p-&gt;val($arg); $this-&gt;p-&gt;iEnd(); $proxy = new Java(); $ar = sscanf($this-&gt;p-&gt;res(), "%d"); $proxy-&gt;java=$ar[0]; $proxy-&gt;p=$this-&gt;p; return $proxy;} function toString() {$this-&gt;p-&gt;iBeg("", "castToString"); $this-&gt;p-&gt;val($this); $this-&gt;p-&gt;iEnd(); return base64_decode($this-&gt;p-&gt;res());}}<br>
a998 1
<br>
@


1.38
log
@Documentation update
@
text
@d202 10
a211 2
<p> During development simple libraries can be loaded dynamically with <code>java_require("myApplication.jar;myLib1.jar;myDriver1.jar;...");</code>. See the README for details.</p>

a215 1
<p> If a library is not yet API-stable, store it into a sub directory of the <code>lib</code> directory and use the <code>java_require()</code> procedure. For example <code>java_require("myLibs0.2/foo.jar")</code> loads <code>foo.jar</code> from <code>php.java.bridge.base/lib/myLibs0.2</code>.</p>
d227 1
a227 2
during initialization. Check which library exports the feature and add
the library to the <code>java_require()</code> statement.</code></p>
@


1.37
log
@Documentation update
@
text
@d55 1
a55 1
All exceptions crossing the php/java container <strong>must</strong> be declared, otherwise the behaviour is unspecified. If you want to catch these RuntimeException or Error, add a "throws" declaration. Example:
d61 1
a61 1
However, it is a good programming practice to not allow <code>java.lang.RuntimeException</code> or <code>java.lang.Error</code> cross an application container boundary. A JEE "enterprise java beans" container for example will terminate a transaction immediately if it encounters an exception derived from Error or RuntimeException.
d65 1
a65 1
<p>Java needs an execution environment.
@


1.36
log
@Documentation update
@
text
@d820 1
a820 1
&nbsp;&nbsp;function __toString{return toString();}<br>
@


1.35
log
@Release-5.4.4.2
@
text
@d53 11
d811 17
a827 1
By using <a href="API/VM%20Bridge/_JavaProxy.inc.html#functionjava_closure"><code>java_closure()</code></a> and the visitor pattern for example. The <code>tests.php5</code> folder contains a <code>script_api.php</code> example which shows how to implement <code>java.lang.Runnable</code> to run multiple PHP threads, concurrently accessing a shared resource.
@


1.34
log
@Release-5-4-4-2
@
text
@a43 2
<p>There must not be a firewall in between, the servlet thread pool must not be limited or twice the size of the PHP container's pool size, the PHP option "allow_url_include" and the Java <code>WEB-INF/web.xml</code> "promiscuous" option must be enabled. Both components should be behind a firewall.
</p>
@


1.33
log
@Release-5-4-4-2
@
text
@d1 996
a996 1011
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html">
	<TITLE>VM Bridge FAQ</TITLE>
</HEAD>
<H1>VM Bridge FAQ</H1>
This file contains answers to frequently asked questions. Please see <a href="http://php-java-bridge.sourceforge.net/pjb">http://php-java-bridge.sourceforge.net</a> for more information.

<H2>General questions</H2>

<H4>Which alternatives exist?</H4>
<p>There are at least 4 other php to java bridges which offer a similar API. One was distributed with PHP 4.0.0 and has been discontinued. Two other bridges are proprietary software, built into a vendor-specific framework from Zend or a J2EE application server from Caucho.
Furthermore IBM's Zero framework for Eclipse contains a PHP interpreter written in pure Java and a php to java bridge which can call Java methods in-process.</p>
<p>The only free alternatives are SOAP and XML-RPC, which are up to 50 times slower than the XML protocol implementation used by this VM Bridge.</p>

<H4>How do I enable the Java extension in my php.ini file?</H4>
<p>A Java extension does not exist, so you can't enable it.</p>
<p>The VM Bridge is a network protocol, it requires a running Java VM, for example the servlet container Apache/Tomcat. Or, if you want to call PHP libraries from Java, a running PHP container, e.g. Apache or IIS.</p>

<H4>What do I need to communicate with Java?</H4>
<p>Only the PHP code from <code>Java.inc</code> and a running Java application, for example <code>JavaBridge.jar</code>, or a running Java servlet, for example <code>JavaBridge.war</code>.</p>

<H4>What do I need to communicate with PHP?</H4>
<p>Only the PHP code from <code>JavaProxy.php</code> within your PHP web application and the Java libraries <code>JavaBridge.jar</code>, <code>php-script.jar</code> and <code>php-servlet.jar</code>.</p>

<H4>Which versions are supported?</H4>
<ul>
<li>PHP >= 5.1.2. PHP >= 5.3 recommended.</li>
<li>Java >= 1.4. Java >= 6 recommended.</li>
<li>J2EE >= 1.3. For J2EE 1.3 remove the <code>RequestListener</code> declaration from the WEB-INF/web.xml.</li>
<li>Mono >= 1.2.4 or .NET >= 2.</li>
</ul>

<H4>Do I need a Java Application Server or Servlet Engine?</H4>
<p>Java needs an execution environment.
</p>
<p>
You can also add PHP support to your standalone Java application by
adding the following line to its main class:
<blockquote>
<code>
static final php.java.bridge.JavaBridgeRunner runner = php.java.bridge.JavaBridgeRunner.getInstance(8087);
</code>
</blockquote>
The above code opens the port 8087, so that local PHP scripts can call
methods/procedures from your Java application, as long as your Java
application is running.
</p>
<p>The third option is the standard JSR 223 script interface, which
allows one to execute PHP code/scripts from Java applications.
</p>
<H4>Ho do I enable logging?</H4>
<p>
Copy <code>log4j.jar</code> into <code>java.ext.dirs</code>. Example for JDK 6:
<blockquote>
<code>
cp log4j.jar /usr/java/packages/lib/ext
</code>
</blockquote>
</p>
<p>
Start the log4j viewer. Example for JDK 6:
<blockquote>
<code>
/opt/jdk1.6/bin/java org.apache.log4j.chainsaw.Main
</code>
</blockquote>
</p>
<p>
Start the application server with the options <code>-Dphp.java.bridge.default_log_level=LEVEL</code>. Example for tomcat:
<blockquote>
<code>
JAVA_HOME=/opt/jdk1.6 JAVA_OPTS="-Dphp.java.bridge.default_log_level=5" bin/catalina.sh run
</code>
</blockquote>
Example for the standalone container:
<blockquote>
<code>
java -Dphp.java.bridge.default_log_level=5 -jar JavaBridge.jar SERVLET:8080
</code>
</blockquote>
</p>

<H4>How can I set Java options?</H4>
<p>
With the -D flag. See <code>java -jar JavaBridge.jar --help for details. If tomcat is being used, one can set these options as follows:
<blockquote>
<code>
JAVA_OPTS="-D... -D..." /opt/tomcat/bin/catalina.sh run
</code>
</blockquote>
</p>

<H4>How can I increase the memory available to Java?</H4>
<p>
Use a VM >= 1.6 and add more RAM to your computer. Older Java versions
support the <code>Xmx</code> flag:
<blockquote>
<code>
java -Xmx512M ... -jar JavaBridge.jar SERVLET:8080 
</code>
</blockquote>
</p>

<H4>How can I set PHP options?</H4>
<p>
With a <code>define</code> before a PHP library is loaded. Global options can also be set in the <code>php.ini</code> file. Use phpinfo() to see the location of this file.
</p>

<H4>How can I configure the bridge?</H4>

<p>Useful options which can be set before the Java.inc/Mono.inc is loaded are:
<blockquote>
<code>
define ("JAVA_DEBUG", false);<br>
define ("JAVA_PREFER_VALUES", false);<br>
define ("JAVA_HOSTS", "127.0.0.1:8080");<br>
define ("JAVA_PIPE_DIR", null);<br>
require_once ("java/Java.inc");<br>
...
</code>
</blockquote>
Please see the Options.inc for details.
</p>
<p>Server-side options can be set in the
php.java.bridge.global.properties file, see the JavaBridge.jar zip
file (contained in the JavaBridge.war zip file) for details.
</p>

<H4>Can I use Java libraries without installing java?</H4> <p>Yes. On a GNU operating system (e.g.: GNU/Linux, GNU/windows (aka "cygwin"), ...) you can use the GCC compiler to compile Java classes to native code. 
Simply compile the C based extension and omit the
<code>--with-java=</code> configure option. The bridge will use the
<code>libgcj</code> library, which is part of the GNU gcc compiler. This library also uses much less system
resources (memory, files) than a "real" Java VM.</p> 

<H4>I can't load the resource or file from the current working directory!?!</H4>
<p>
The "current working directory" is not useful, as the Java back end may be running
on a different server or from a different working directory. Use a full path or a URL resource instead.
</p>

<H4>I get a blank page or some other error!?!</H4>
<p>
Check the PHP error log, see your <code>php.ini</code> file for details. If the command:
<blockquote>
<code>
echo '&lt;?php require_once("http://localhost:8080/JavaBridge/java/Java.inc"); echo java("java.lang.System")-&gt;getProperties();?&gt;' | php -n -d allow_url_include=On
</code>
</blockquote>
works in the shell but not within apache, then there's something wrong with your <code>php.ini</code> file.
</p>

<H4>Can I use Python instead of PHP?</H4>
<p>Yes, see the examples folder from the source download.</p>

<H4>Can I access Mono or .NET libraries using the pure PHP implementation?</H4>
<p>Yes, there's a PHP library "Mono.inc" generated from "Java.inc" and
a "MonoBridge.exe" generated from "JavaBridge.jar". If you want to
compile from source, use the configure
option <code>--with-mono</code>.</p>

<H4>What does a "protocol error ..." mean?</H4>
<p>That your Java or .NET VM has problems, for example an OutOfMemoryError. Check the back end (Tomcat/J2EE/.NET/...) log for details.</p>

<H4>Does it support PHP 4?</H4>
<p>No. Use VM Bridge version 4.3.2 or below instead.</p>

<H2>Class loading questions</H2>

<a name="java-require"></a>
<H4>How do I load Java libraries?</H4>
<p> During development simple libraries can be loaded dynamically with <code>java_require("myApplication.jar;myLib1.jar;myDriver1.jar;...");</code>. See the README for details.</p>

<H4>Where can I store my java libraries for the VM Bridge?</H4>
<p>Either within  your web application <code>WEB-INF/lib</code> directory or in <code>php.java.bridge.base</code>/lib.</p>
<p> When the system property <code>php.java.bridge.base</code> is not set, libraries are loaded from <code>$HOME/lib</code> where <code>$HOME</code> denotes the home directory of the person or component which has started the java VM.</p>
<p> If libraries should be available globally, store them in <code>java.ext.dirs</code>, for example in <code>/usr/share/java/ext</code>.</p>
<p> If a library is not yet API-stable, store it into a sub directory of the <code>lib</code> directory and use the <code>java_require()</code> procedure. For example <code>java_require("myLibs0.2/foo.jar")</code> loads <code>foo.jar</code> from <code>php.java.bridge.base/lib/myLibs0.2</code>.</p>

<H4>Why can't Apache load my /foo/bar/baz.jar file?</H4>
<p>It probably doesn't have the permission to access it. Check if
baz.jar is a valid Java archive and if its main class is public. Try
to disable Security Enhanced Linux and store the jar file into a
folder accessible by the apache user and then extract the required
Security Enhanced Linux permissions from the audit log.</p>

<H4>Why do I get a ClassNotFoundException?</H4>
<p>You probably haven't required the relevant Java library. Or the
class doesn't exist or it is not public or it throws a java.lang.Error
during initialization. Check which library exports the feature and add
the library to the <code>java_require()</code> statement.</code></p>

<a name="java-dll-hell"></a>
<H4>Why do I get a NoClassDefFoundError?</H4>
<p>Because Java doesn't have a module system.</p>
<p>All libraries and their dependencies must be loaded by one, and only one class loader.</p>
<p>Please read the previous sentence until you understand what it means; for example a simple file system copy(!) operation may be the cause for a NoClassDefFoundError.</p>
<p><em>Please do not report NoClassDefFoundErrors to the mailing list or via the bug tracker. This is not a bug and we cannot help you any further!</em></p>

<H4>I cannot require my JDBC driver!?!</H4>
<p> Please re-read the <a href="#java-require">class loading section</a>. The following code loads all interconnected libraries using a single java_require() call:
<blockquote>
<code>
&nbsp;&nbsp;java_require("myApplication.jar;myJdbcDriver.jar");<br>
&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;$myApplication->callWithMyJdbcDriver();<br>
</code>
</blockquote>
</p>
<p>
The following incorrect code fails because the application (the "JavaBridge.jar" in this case) cannot be
accessed by the jdbc driver. This constraint is checked by the DriverManager:
<blockquote>
<code>
&nbsp;&nbsp;java_require("myJdbcDriver.jar"); // WRONG!<br>
&nbsp;&nbsp;new java("my.jdbc.Driver");<br>
&nbsp;&nbsp;java("java.sql.DriverManager")-&gt;getDriver("myJdbcURL"); // FAILS!<br>
</code>
</blockquote>
If you really need to access the driver directly from PHP code, either use the driver API directly or load "JavaBridge.jar" and "myJdbcDriver.jar" from the same class loader so that the DriverManager can link them together. Use the extra library directory (usually <code>~/lib/</code>) or the global repository (usually <code>/usr/java/packages/lib/ext</code>).
</p>

<H4>How do I load impure Java libraries?</H4>
<p>You can't. Java libraries must be pure Java.</p>
<p> Please read the
documentation of your J2EE server, Servlet engine or Java VM to see if and
how the environment can handle impure Java libraries. A common approach is to store the Java part in <code>java.ext.dirs</code> and the native part in <code>java.library.path</code>.</p>

<H2>J2EE/Servlet questions</H2>

<a name="load-balancing">
<H4>How do I set up a load balancer for the VM Bridge cluster?</H4>
<p>
Set up the VM Bridge cluster as <a href="#cluster">described below</a>. The example uses two nodes named "carlos" and "diego". The HTTP server front end runs on the web server "timon".
</p>
<p>Install Apache 2.2.0 or higher.</p>
<p>Enable <code>proxy_module</code> and <code>proxy_balancer_module</code>. The following example is for Linux (lines marked with "+" should be added to the <code>conf/httpd.conf</code> file):
<blockquote>
<code>
&nbsp;&nbsp;&nbsp;LoadModule rewrite_module modules/mod_rewrite.so<br>
&nbsp;+&nbsp;LoadModule proxy_module modules/mod_proxy.so<br>
&nbsp;+&nbsp;LoadModule proxy_balancer_module modules/mod_proxy_balancer.so<br>
&nbsp;&nbsp;&nbsp;LoadModule cache_module modules/mod_cache.so<br>
</code>
</blockquote>
</p>
<p>
Add the following code to the bottom of your <code>conf/httpd.conf</code> file:
<blockquote>
<code>
ProxyPass /JavaBridge balancer://mycluster maxattempts=2<br>
&lt;Proxy balancer://mycluster&gt;<br>
&nbsp;&nbsp;BalancerMember http://diego:8080/JavaBridge<br>
&nbsp;&nbsp;BalancerMember http://carlos:8080/JavaBridge<br>
&lt;/Proxy&gt;<br>
&lt;Location /balancer-manager&gt;<br>
&nbsp;&nbsp;SetHandler balancer-manager<br>
&nbsp;&nbsp;Deny from all<br>
&nbsp;&nbsp;Allow from 127.0.0.1<br>
&lt;/Location&gt;<br>
</code>
</blockquote>
</p>
<p>Start the cluster nodes on "carlos" and "diego".</p>
<p>Browse to <code>http://timon/JavaBridge/</code> (note the trailing slash) and click on the test.php. Click on refresh. Check if both nodes respond.</p>
<p>Browse to <code>http://timon/JavaBridge/sessionSharing.php</code> and click on refresh. Check the cookie value.</p>
<p>Browse to <code>http://timon/balancer-manager/</code>.
<p>Please see the <code>mod_rewrite</code> documentation for more information how to rewrite incoming URLs.</p>
</a>


<a name="cluster">
<H4>Ho do I set up a tomcat cluster?</H4>
<p>
Download tomcat 5 or higher, a Java JRE 5 or higher and the VM Bridge 4.1.6 or higher.
</p>
<p>
The following example uses two nodes running on two machines called
"carlos" and "diego".
</p>
<p>
On all nodes: Extract the tomcat distribution into a directory.
</p>
<p>On <strong>"diego"</strong> add the following to <code>conf/server.xml</code>:
<blockquote>
<code>
&lt;Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"<br>
&nbsp;&nbsp;channelSendOptions="8"&gt;<br>
&nbsp;&nbsp;&lt;Manager className="org.apache.catalina.ha.session.DeltaManager"<br>
&nbsp;&nbsp;&nbsp;&nbsp;expireSessionsOnShutdown="false"<br>
&nbsp;&nbsp;&nbsp;&nbsp;notifyListenersOnReplication="true"/&gt;<br>
&nbsp;&nbsp;&lt;Channel className="org.apache.catalina.tribes.group.GroupChannel"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;Receiver className="org.apache.catalina.tribes.transport.nio.NioReceiver"<br>
&nbsp;&nbsp;&nbsp;&nbsp;address="<strong>diego</strong>"<br>
&nbsp;&nbsp;&nbsp;&nbsp;port="4000"<br>
&nbsp;&nbsp;&nbsp;&nbsp;autoBind="100"<br>
&nbsp;&nbsp;&nbsp;&nbsp;selectorTimeout="5000"<br>
&nbsp;&nbsp;&nbsp;&nbsp;maxThreads="6"/&gt;<br>
&nbsp;&nbsp;&lt;/Channel&gt;<br>
&lt;/Cluster&gt;<br>
</code>
</blockquote>
</p>
<p>On <strong>"carlos"</strong> add the following to <code>conf/server.xml</code>:
<blockquote>
<code>
&lt;Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"<br>
&nbsp;&nbsp;channelSendOptions="8"&gt;<br>
&nbsp;&nbsp;&lt;Manager className="org.apache.catalina.ha.session.DeltaManager"<br>
&nbsp;&nbsp;&nbsp;&nbsp;expireSessionsOnShutdown="false"<br>
&nbsp;&nbsp;&nbsp;&nbsp;notifyListenersOnReplication="true"/&gt;<br>
&nbsp;&nbsp;&lt;Channel className="org.apache.catalina.tribes.group.GroupChannel"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;Receiver className="org.apache.catalina.tribes.transport.nio.NioReceiver"<br>
&nbsp;&nbsp;&nbsp;&nbsp;address="<strong>carlos</strong>"<br>
&nbsp;&nbsp;&nbsp;&nbsp;port="4000"<br>
&nbsp;&nbsp;&nbsp;&nbsp;autoBind="100"<br>
&nbsp;&nbsp;&nbsp;&nbsp;selectorTimeout="5000"<br>
&nbsp;&nbsp;&nbsp;&nbsp;maxThreads="6"/&gt;<br>
&nbsp;&nbsp;&lt;/Channel&gt;<br>
&lt;/Cluster&gt;<br>
</code>
</blockquote>
</p>
<p>Copy the "JavaBridge.war" into the "webapps" directory on "diego" and "carlos" and start both nodes. For example with the command:
<blockquote>
<code>
JAVA_OPTS="-Dphp.java.bridge.promiscuous=true" JAVA_HOME=/usr/java/default bin/catalina.sh run
</code>
</blockquote>
</p>

<p>
Please see your HTTP server documentation and <a href="#load-balancing">the description above</a> how to set it up as a load balancer.
</p>
</a>
<a name="global-servlet">
<H4>I want to use PHP for all tomcat applications. Apache and IIS are not available, but performance is important. How do I install it?</H4>
</a>
<ol>
<li>
Download and install the J2EE binary: copy <code>JavaBridge.war</code> into the tomcat <code>webapps</code> folder.<br>
<li>
Start tomcat, for example with: 
<blockquote>
<code>
JAVA_HOME=/usr/java/default /opt/tomcat/bin/catalina.sh run
</code>
</blockquote>
<li>
Move(!) all libraries from the created webapps/JavaBridge/WEB-INF/lib folder to the tomcat lib folder and remove(!) webapps/JavaBridge/WEB-INF/web.xml.
The only reason to keep the JavaBridge directory is the WEB-INF/cgi/launcher* FastCGI launcher and the java/Java.inc files. Example:
<blockquote>
<code>
mv /opt/tomcat/webapps/JavaBridge/WEB-INF/lib/* /opt/tomcat/lib<br>
rm /opt/tomcat/webapps/JavaBridge/WEB-INF/web.xml
</code>
</blockquote>
<li> 
Stop tomcat and remove webapps/JavaBridge.war. <em>Make sure that webapps/JavaBridge still exists, but without any libraries and web.xml!</em>
<blockquote></blockquote>
<li>
Add the lines marked with a <code>+</code> to the tomcat <code>conf/web.xml</code>:
<blockquote>
<code>
<br>
   &lt;!-- ================== Built In Servlet Definitions ==================== --&gt;<br>
<br>

+    &lt;!-- PHP Servlet --&gt;<br>
+    &lt;listener&gt; &lt;listener-class&gt;php.java.servlet.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt;<br>
+    &lt;listener&gt; &lt;listener-class&gt;php.java.servlet.RequestListener&lt;/listener-class&gt; &lt;/listener&gt;<br>
+    &lt;servlet&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpJavaServlet&lt;/servlet-name&gt;<br>
+        &lt;servlet-class&gt;php.java.servlet.PhpJavaServlet&lt;/servlet-class&gt;<br>
+    &lt;/servlet&gt;<br>
+    &lt;!-- PHP CGI Servlet --&gt;<br>
+    &lt;servlet&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpCGIServlet&lt;/servlet-name&gt;<br>
+        &lt;servlet-class&gt;php.java.servlet.PhpCGIServlet&lt;/servlet-class&gt;<br>
+        &lt;init-param&gt; &lt;param-name&gt;shared_fast_cgi_pool&lt;/param-name&gt;&lt;param-value&gt;On&lt;/param-value&gt;&lt;/init-param&gt;<br>
+        &lt;init-param&gt; &lt;param-name&gt;prefer_system_php_exec&lt;/param-name&gt;&lt;param-value&gt;On&lt;/param-value&gt;&lt;/init-param&gt;<br>
+    &lt;/servlet&gt;<br>
<br>
   &lt;!-- The default servlet for all web applications, that serves static     --&gt;<br>
   &lt;!-- resources.  It processes all requests that are not mapped to other   --&gt;<br>
[...]<br>
   &lt;!-- ================ Built In Servlet Mappings ========================= --&gt;<br>
<br>
+    &lt;!-- PHP Servlet Mapping --&gt;<br>
+    &lt;servlet-mapping&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpJavaServlet&lt;/servlet-name&gt;<br>
+        &lt;url-pattern&gt;*.phpjavabridge&lt;/url-pattern&gt;<br>
+    &lt;/servlet-mapping&gt;<br>
+    &lt;!-- CGI Servlet Mapping --&gt;<br>
+    &lt;servlet-mapping&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpCGIServlet&lt;/servlet-name&gt;<br>
+        &lt;url-pattern&gt;*.php&lt;/url-pattern&gt;<br>
+    &lt;/servlet-mapping&gt;<br>
<br>
   &lt;!-- The servlet mappings for the built in servlets defined above.  Note  --&gt;<br>
   &lt;!-- that, by default, the CGI and SSI servlets are *not* mapped.  You    --&gt;<br>
<br>
 &lt;/web-app&gt;<br>
</code>
</blockquote>
</p>
<li>
Start tomcat again.
</ol>
To test the above settings copy test.php to some other web context, for example "examples", adjust its require/include path and browse to
<code>http://yourHost.com:8080/examples/test.php</code>.
</p>


<a name="php-web-app">
<H4>How do I create a standalone PHP web application for distribution and how can users deploy it into tomcat?</H4>
</a>
<p>
Create a directory <code>myApplication</code>, create the directories <code>myApplication/WEB-INF/lib/</code> and <code>myApplication/WEB-INF/cgi/</code>.
Download the J2EE binary and copy the <code>JavaBridge.jar</code> and the <code>php-servlet.jar</code> from the JavaBridge.war to the <code>myApplication/WEB-INF/lib/</code> folder. Copy the contents of the <code>cgi</code> folder to <code>myApplication/WEB-INF/cgi/</code>. Create the file <code>myApplication/WEB-INF/web.xml</code> with the following content:
<blockquote>
<code>
<br>
&lt;web-app&gt;<br>
    &lt;!-- PHP Servlet --&gt;<br>
    &lt;servlet&gt;<br>
        &lt;servlet-name&gt;PhpJavaServlet&lt;/servlet-name&gt;<br>
        &lt;servlet-class&gt;php.java.servlet.PhpJavaServlet&lt;/servlet-class&gt;<br>
    &lt;/servlet&gt;<br>
    &lt;!-- PHP CGI processing servlet, used when Apache/IIS are not available --&gt;<br>
    &lt;servlet&gt;<br>
        &lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;<br>
        &lt;servlet-class&gt;php.java.servlet.PhpCGIServlet&lt;/servlet-class&gt;<br>
    &lt;/servlet&gt;<br>
<br>
    &lt;!-- PHP Servlet Mapping --&gt;<br>
    &lt;servlet-mapping&gt;<br>
        &lt;servlet-name&gt;PhpJavaServlet&lt;/servlet-name&gt;<br>
        &lt;url-pattern&gt;*.phpjavabridge&lt;/url-pattern&gt;<br>
    &lt;/servlet-mapping&gt;<br>
    &lt;!--PHP CGI Servlet Mapping --&gt;<br>
    &lt;servlet-mapping&gt;<br>
        &lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;<br>
        &lt;url-pattern&gt;*.php&lt;/url-pattern&gt;<br>
    &lt;/servlet-mapping&gt;<br>
<br>
    &lt;!-- Welcome files --&gt;<br>
    &lt;welcome-file-list&gt;<br>
        &lt;welcome-file&gt;index.php&lt;/welcome-file&gt;<br>
    &lt;/welcome-file-list&gt;<br>
 &lt;/web-app&gt;<br>
</code>
</blockquote>
</p>
<p>
To call Java code from PHP, copy the <code>java/Java.inc</code> 
to some directory and require it as usual, e.g.: <code>require_once("java/Java.inc");</code>.
</p>
<p>
To call PHP code from Java, copy the <code>java/JavaProxy.php</code> 
to some <em>web</em>directory and use the EngineFactory as usual, e.g.: <code>EngineFactory.getInvocablePhpScriptEngine(this, application, request, response);</code> or, if PHP is running somewhere else: <code>EngineFactory.getInvocablePhpScriptEngine(..., 80, "/phpApp/JavaProxy.php");</code>.
</p>

<p>
Copy the files <code>sessionSharing.jsp</code> and <code>sessionSharing.php</code> from the <code>JavaBridge.war</code> to <code>myApplication</code> and create <code>myApplication.war</code>, for example with the commands: <code>cd myApplication; jar cf ../myApplication.war *</code>. </p>
<p>The web archive can now be distributed, copy it to the tomcat <code>webapps</code> directory and re-start tomcat. Visit <code>http://localhost/myApplication/sessionSharing.php</code> and <code>http://localhost/myApplication/sessionSharing.jsp</code>.
</p>

<a name="tomcat-security">
<H4>I want to use Tomcat's security manager, how do I install the bridge?</H4>
</a>
<p>
Install the PHP/Java Bridge for all web application as described <a href="#global-servlet">here</a>.
</p>


<a name="php-jsp-session-sharing">
<H4>I want to use Apache/IIS as a front-end and tomcat as a back end. How do I enable PHP and JSP for all my applications?</H4>
</a>
<p> Set up Apache or IIS so that it forwards requests to the back
end. Please see <a href="#load-balancing">the description above</a>
for details.
</p>



<H4>Does the
bridge run native code within my servlet engine or application
server?</H4> <p>No. The bridge back end is written in pure java, it
doesn't use any native code. Native PHP runs within Apache, IIS, a
FCGI server or via CGI. If the PHP instance crashes, an error page is
returned to the client and the Apache, IIS, CGI container usually starts a new PHP instance for the next
request.</p> 


<a name="ssl">
<H4>On Windows some PHP binaries do not support HTTPS/SSL</H4> 
</a>
<p>
If you see the message:
<blockquote>
<code>
Warning: fsockopen() [function.fsockopen]: unable to connect to ssl://127.0.0.1:8443
(Unable to find the socket transport "ssl" - did you forget to enable it when you configured PHP?)
</code>
</blockquote>
this means that PHP cannot connect back to the official SSL port. 
Please check the 
"Registered Stream Socket Transports" from the <code>phpinfo()</code> (see the <code>test.php</code> page), it should display: <code>tcp, udp, ssl, sslv3, sslv2, tls</code>. If not, please recompile PHP with SSL enabled, use the flag <code>--with-openssl</code>.
<p>
A workaround is to use the official non-SSL port or to open a
dedicated local port for the PHP-Java communication. The following
example is for Tomcat:
<p>
<ol>
Disable <code>override_hosts</code> in the web application <code>WEB-INF/web.xml</code>:
<blockquote>
<code>
         &lt;context-param&gt;<br>
           &lt;param-name&gt;override_hosts&lt;/param-name&gt;<br>
           &lt;param-value&gt;Off&lt;/param-value&gt;<br>
         &lt;/context-param&gt;<br>
</code>
</blockquote>
Either fetch the <code>Java.inc</code> directly from your back end (which also adjusts the <code>JAVA_HOSTS</code>) or change the <code>JAVA_HOSTS</code> option, for example:
<blockquote>
<code>
define("JAVA_HOSTS", "127.0.0.1:9090");
</code>
</blockquote>
</ol>
<p>
Restart the application server or servlet engine. Check the settings by running <code>phpinfo()</code> or by visiting the <code>test.php</code> page. 
</p>


<H4>The EJB example works with the Sun J2EE server, but in JBoss I get a ClassCastException, what's wrong?</H4> 
<p>It's a JBoss problem, although this problem may also appear in other application servers which do not strictly separate the application/bean domains. The JavaBridge.war already contains the <code>documentClient.jar</code> as a library, so JBoss references the library classes instead of the bean classes. Just remove the <code>documentClient.jar</code> from the <code>JavaBridge.war</code>, re-deploy <code>JavaBridge.war</code> and run the test again.
</p><p>
In JBoss' default setup the code:
<blockquote>
<code>
  // access the home interface<br>
  $DocumentHome = new JavaClass("DocumentHome");<br>
  $PortableRemoteObject = new JavaClass("javax.rmi.PortableRemoteObject");<br>
  $home=$PortableRemoteObject-&gt;narrow($objref, $DocumentHome);<br>
</code>
</blockquote>
refences the <code>DocumentHome</code> from the library, which is assignment-incompatible to <code>DocumentHome</code> from the enterprise bean (<code>DocumentHome@@WebAppClassLoader</code> !=  <code>DocumentHome@@BeanClassLoader</code>), so you get a ClassCastException in <code>narrow</code>.
</p>
<p>
In contrast the Sun J2EE server correctly separates the beans/applications; the <code>$objref</code> is a unique proxy generated by a parent of the <code>WebAppClassLoader</code>, so that <code>narrow</code> can always cast the proxy to <code>DocumentHome@@WebAppClassLoader</code>, even if a class with the same name is already available from the <code>WebAppClassLoader</code>.</p>

 <H4>How do I install PHP into the Nutch, Spring, JSF, ..., Framework?</H4> 
<p>By providing JSR 223 based PHP beans and a description how to manage them, as usual. The code
<blockquote>
<code>
  javax.script.ScriptEngine e = <br>
      php.java.script.EngineFactory.getInvocablePhpScriptEngine (this, <br>
                                                        application, <br>
                                                        request, response);<br>
</code>
</blockquote>
can be used to access the JSR 223 ScriptEngine from the framework, provided that a listener has been configured in the WEB-INF/web.xml:
<blockquote>
<code>
   &lt;listener&gt;
       &lt;listener-class&gt;php.java.servlet.ContextLoaderListener&lt;/listener-class&gt;
   &lt;/listener&gt;
</code>
</blockquote>
</p>

<H2>General runtime questions</H2>

<H4>How do I reference a class w/o creating an instance?</H4>
<p>
With the <code>java</code> function, for example: <code>java("java.lang.System")</code>.
</p>
<p>The function is defined in <code>http://localhost:8080/JavaBridge/java/Java.inc</code> as:
<blockquote>
<code>
function java($clazz) {<br>
&nbsp;&nbsp;static $classMap = array();<br>
&nbsp;&nbsp;if(array_key_exists($clazz, $classMap)) return $classMap[$clazz];<br>
&nbsp;&nbsp;return classMap[$clazz]=new JavaClass($clazz);<br>
}
</code>
</blockquote>
</p>

<H4>Why does java_context()-&gt;getHttpServletRequest()-&gt;getSession() return null?</H4>
<p>
PHP scripts must explicitly allocate a session with <code><a href="API/VM%20Bridge/_JavaProxy.inc.html#functionjava_session">java_session()</a></code>. For example:
<blockquote>
<code>
java_session(); <br>
// now the (Remote-)HttpServletRequest knows about the session: <br>
echo java_context()-&gt;getHttpServletRequest()-&gt;getSession(); <br>
</code>
</blockquote>
</p>

<H4>Where is my output?</H4> <p><code>System.out</code> and
<code>System.err</code> are redirected to the server log file(s). When
PHP scripts are invoked from a java framework (Java Server Faces for
example), even the PHP output is redirected. For the standalone back
end the output appears in the
<code>/var/log/php-java-bridge.log</code> or in VMBridge.log, see
.ini option <code>java.log_file</code>. For the j2ee back end the
location of the log file(s) depends on the j2ee server
configuration.</p>


<H4>How do I make my script state (objects or variables) persistent?</H4> 
<p>If you must code it yourself: with
e.g. <code>java_session()-&gt;put("buf", $stringBuffer)</code></p> 


<H4>How many threads does the bridge start?</H4> 
<p>Request-handling threads are started
from a thread pool, which limits the number of user requests to 20
(default), see system property
<code>php.java.bridge.threads</code>. All further requests have to
wait until one of the worker threads returns to the pool. </p> 
<p>When running in a servlet engine, a <a
href="server/documentation/API/php/java/bridge/http/ContextServer.html">ContextServer</a>
is started which handles the pipe or local socket communication
channel.  </p> <p>When java invokes local scripts outside of a HTTP
environment, the bridge starts a <a
href="server/documentation/API/php/java/bridge/http/HttpServer.html">HttpServer</a>,
a <a
href="server/documentation/API/php/java/bridge/http/ContextServer.html">ContextServer</a>
and a <a
href="server/documentation/API/php/java/script/HttpProxy.html">HttpProxy</a>. The
HttpProxy represents the PHP continuation and the HttpServer the
request-handling java continuation associated with the JSR223 script.
</p> 

 <H4>How do I access enums or inner classes?</H4> 
With the <code>classname$inner</code> syntax. For example <br><br>
<code>
public interface php {<br>
&nbsp;public class java {<br>
&nbsp;&nbsp;public enum bridge {JavaBridge, JavaBridgeRunner};<br>
&nbsp;}<br>
}<br>
</code><br>
can be accessed with:<br><br>
<code>
&lt;?php<br>
java_require(getcwd()); // load php.class<br>
$bridge = new java('php$java$bridge');<br>
echo $bridge-&gt;JavaBridgeRunner;<br>
?&gt;<br>
</code><br>
The above code is not a good programming example but it demonstrates why a different syntax is used to access inner classes. 
</p>

 <H4>How do I create a primitive array?</H4> 
<p>
Primitive types are wrapped by associated java classes. 
The following example uses <code>reflect.Array</code> to create a new <code>byte</code> array:<br><br>
<code>
$Byte = new JavaClass("java.lang.Byte");<br>
$byte = $Byte-&gt;TYPE;<br>
$Array = new JavaClass("java.lang.reflect.Array");<br>
$byteArray = $Array-&gt;newInstance($byte, 255);<br>
$System = new JavaClass("java.lang.System");<br>
$length = $System-&gt;in-&gt;read($byteArray);<br>
$str = new Java("java.lang.String", $byteArray, 0, $length);<br>
echo "You have typed: $str\n";<br>
</code>
</p>

<a name="performance"></a> <H4>How fast is it?</H4> <p> 
The following scripts were
executed on one 1.5 GHZ x86 cpu running RedHat Fedora 10 Linux and Sun jdk1.6.0_02.
We have tested "Mozilla Rhino" 1.6 release 2 from <a href="http://java.sun.com">JDK 1.6</a>, <a href="http://caucho.com">Caucho "Quercus" version 3.2.1</a>, the <a href="http://php-java-bridge.sf.net">PHP/Java Bridge version 5.4.4</a>, and <a href="http://php.net/manual/en/book.java.php">PHP 4's ext/java</a>.
</p>
The PHP code (<code>t11.php</code>):<br>
<p>
<code>
&lt;?php<br>
$buf=new java("java.lang.StringBuilder");<br>
for ($i=0; $i<400000; $i++) $buf-&gt;append($i);<br>
echo $buf-&gt;length() . "\n";<br>
?&gt;
</code>
</p>
Another PHP code is necessary for Quercus 3.2.1 because it cannot run the above standard PHP code correctly (<code>t12.php</code>):<br>
<p>
<code>
&lt;?php<br>
$buf=new java("java.lang.StringBuilder");<br>
for ($i=0; $i<400000; $i++) $buf-&gt;append(new java("java.lang.String", $i));<br>
echo $buf-&gt;length() . "\n";<br>
?&gt;
</code>
</p>
The ECMAScript ("Mozilla Rhino") code (<code>t11.js</code>):<br>
<p>
<code>
buf = new java.lang.StringBuilder();<br>
for(i=0; i<400000; i++) buf.append(new java.lang.Integer(i));<br>
print (buf.length());<br>
</code>
</p>
<p>
<center>
<TABLE
BORDER="1"
><COL><COL><COL><COL><THEAD
><TR
><TH
>Command</TH
><TH
>Script Engine</TH
><TH
>Communication Channel</TH
><TH
>Execution time (real, user, sys)</TH
></TR
></THEAD

<TR
><TD
>time jrunscript -l js t11.js</TD
><TD
><a href="http://java.sun.com">"Mozilla Rhino" 1.6 release 2</a></TD
><TD
>none (native code)</TD
><TD
>0m7.932s,<br>
0m7.701s,<br>
0m0.113s
</TD
></TR
>
<TR
><TD
>time jrunscript -classpath quercus.jar:resin-util.jar:servlet-api.jar -l quercus t12.php</TD
><TD
><a href="http://caucho.com">Quercus 3.2.1</a></TD
><TD
>none (native code)</TD
><TD
>0m7.134s,<br>
0m5.050s,<br>
0m1.934s
</TD
></TR
>

<TR
><TD
>time jrunscript -classpath JavaBridge.jar -l php t11.php</TD
><TD
><a href="http://php-java-bridge.sf.net">PHP/Java Bridge 5.4.4</a></TD
><TD
>named pipes (XML protocol)</TD
><TD
>0m16.059s,<br>
0m15.341s,<br>
0m0.197s
</TD
></TR
>

<TR
><TD
>php t11.php</TD
><TD
><a href="http://php.net/manual/en/book.java.php">PHP 4.4.7/PHP-Java extension</a></TD
><TD
>JNI (binary protocol)</TD
><TD
>0m57.689s,<br>
0m56.243s,<br>
0m0.467s
</TD
></TR
>

</TABLE
>
</center>
</p>
<p>
</p>

 <H4>How does the bridge handle OutOfMemoryErrors?</H4> 
<p>
OutOfMemoryErrors may happen because a cached object cannot be released, either because <p>
<ol>
<li> the object is permanently referenced by a request-handling thread or</li>
<li> the object has been entered into the session or application store or 
 the object is referenced by a thread outside of the scope of the VM Bridge.</li>
</ol>
</p>
</p>
<p>When a <code>java.lang.OutOfMemoryError</code> reaches the request-handling thread, the VM Bridge thread pool removes the thread from its pool and writes a message <code>FATAL: OutOfMemoryError</code> to the VM Bridge log file. The session store is cleaned and all client connections are terminated without confirmation.
</p>
<p>
If the OutOfMemoryError persists, this means that a thread outside of the VM Bridge has caused this error condition.
</p>
<p>
OutOfMemory conditions can be debugged by running the back end with e.g.:<br><br>
<code>
java -agentlib:hprof=heap=sites -jar JavaBridge.jar<br>
</code>
</p>
 
<H4>How can PHP classes extend Java classes and Java methods?</H4> 
<p>
By using <a href="API/VM%20Bridge/_JavaProxy.inc.html#functionjava_closure"><code>java_closure()</code></a> and the visitor pattern for example. The <code>tests.php5</code> folder contains a <code>script_api.php</code> example which shows how to implement <code>java.lang.Runnable</code> to run multiple PHP threads, concurrently accessing a shared resource.
</p> 
<H4>How can I execute PHP code on the server?</H4> 
<p>
With <code>java_begin_document()/java_end_document()</code>. For example:
<blockquote>
<code>
&nbsp;&nbsp;java_begin_document();<br>
&nbsp;&nbsp;$s = new Java("java.lang.StringBuffer");<br>
&nbsp;&nbsp;for($i=0; $i<10000; $i++) $s-&gt;append($i);<br>
&nbsp;&nbsp;java_end_document();<br>
</code>
</blockquote>
The above code sends the PHP code as an XML image to the server and executes it there.
</p> 
<H4>How can I convert a Java object into a PHP value?</H4>
<p>
With <code>java_values()</code>. For example:
<blockquote>
<code>
&nbsp;&nbsp;$s = new Java("java.lang.String");<br>
&nbsp;&nbsp;$c = $chr = $s-&gt;toCharArray();<br>
&nbsp;&nbsp;print  (java_values($s));<br>
&nbsp;&nbsp;print_r(java_values($c));<br>
</code>
</blockquote>
</p>
<H4> How can I convert a PHP object into a Java object?</H4>
<p>
With <code>java_closure()</code>. For example:
<blockquote>
<code>
&nbsp;&nbsp;class Foo {<br>
&nbsp;&nbsp;&nbsp;function toString() {return "php::foo";}<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;$foo = new Foo();<br>
&nbsp;&nbsp;$jObj = java_closure($foo);<br>
&nbsp;&nbsp;$String = new Java("java.lang.String");<br>
&nbsp;&nbsp;echo $String-&gt;valueOf($jObj);<br>
</code>
</blockquote>
</p>
<H4>How do I call JSP tags from PHP?</H4>
<p>
Example:
<blockquote>
<code>
require_once("http://localhost:8080/JavaBridge/java/Java.inc");<br>
java_require("myLibs/baz-taglib.jar");<br>
$tag = new Java("foo.bar.BazTag");<br>
<br>
$session = java_session();<br>
$ctx = java_context();<br>
$servlet = $ctx-&gt;getAttribute("php.java.servlet.Servlet");<br>
$response = $ctx-&gt;getAttribute("php.java.servlet.HttpServletResponse");<br>
$request = $ctx-&gt;getAttribute("php.java.servlet.HttpServletRequest");<br>
$factory = java("javax.servlet.jsp.JspFactory")-&gt;getDefaultFactory();<br>
$pc = $factory-&gt;getPageContext($servlet, $request, $response, null, true, 8192, false);<br>
<br>
$tag-&gt;setPageContext($pc);<br>
$value = $tag-&gt;doStartTag();<br>
if(($value != Java("javax.servlet.jsp.tagext.Tag")-&gt;SKIP_BODY) {<br>
&nbsp;&nbsp;if($value != Java("javax.servlet.jsp.tagext.Tag")-&gt;EVAL_BODY_INCLUDE)) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;$tag-&gt;setBodyContent($pc-&gt;pushBody());<br>
&nbsp;&nbsp;&nbsp;&nbsp;$tag-&gt;doInitBody();<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;do {<br>
&nbsp;&nbsp;&nbsp;&nbsp;...<br>
&nbsp;&nbsp;} while($tag-&gt;doAfterBody() == Java("javax.servlet.jsp.tagext.BodyTag")-&gt;EVAL_BODY_AGAIN)<br>
}<br>
if($value != Java("javax.servlet.jsp.tagext.Tag")-&gt;EVAL_BODY_INCLUDE) $pc-&gt;popBody();<br>
$tag-&gt;doEndTag();<br>
</blockquote>
</code>
</p><p>
The generated content (if any) can be retrieved from the servlet output stream with:
<blockquote>
<code>
java_values($response-&gt;getBufferContents();
</code>
</blockquote>
</p>
<p>Please see the <code>php_java_lib/JspTag.php</code> and <code>tests.php5/tag.php</code> for details.</p>
<H4>How does the bridge support Java generics?</H4>
<p>
You can ignore the parameter type.
</p>
<p>
Java doesn't support real generics on byte-code level. The generics in JDK 1.5 and above are implemented as "erasures"; they are syntactic sugar, useful only for the Java compiler. The generated byte-code is the same as in JDK 1.4.
</p>
<H4>What about Java 5 varargs?</H4>
<p>
Pass them as a PHP array. Example:
</p>
<p>
<blockquote>
<code>
&lt;?php require_once("http://localhost:8080/JavaBridge/java/Java.inc");<br>
$here=getcwd(); java_require("$here/varargs.jar");<br>
$t1 = new java('Varargs$Test', 1);<br>
$t2 = new java('Varargs$Test', 2);<br>
echo java("Varargs")-&gt;varargs(array($t1, $t2));<br>
?&gt;
</code>
</blockquote>
</p>
<p>
<blockquote>
<code>
public class Varargs {<br>
&nbsp;public static class Test {<br>
&nbsp;&nbsp;public int i;<br>
&nbsp;&nbsp;public Test (int i) {<br>
&nbsp;&nbsp;&nbsp;this.i = i;<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;public String toString() {<br>
&nbsp;&nbsp;&nbsp;return String.valueOf(i);<br>
&nbsp;&nbsp;}<br>
&nbsp;}<br>
&nbsp;public static String varargs(Test ...tests) {<br>
&nbsp;&nbsp;StringBuffer buf = new StringBuffer();<br>
&nbsp;&nbsp;for (Test test : tests) {<br>
&nbsp;&nbsp;&nbsp;buf.append(test);<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;return buf.toString();<br>
&nbsp;}<br>
}<br>
</code>
</blockquote>
</p>
<H4>NULL tests</H4>
<p>
Use <code>java_is_null($value)</code> or <code>is_null (java_values ($value))</code> to test for a (Java-) NULL value.
</p>

<H4>How do I start the bridge back end when there's another Java VM listening on port 8080?</H4>
<p>Simply deploy the VM Bridge web archive into the servlet engine or application server listening on port 8080. Or use a different port.</p>

<H4>What's the difference between SERVLET_LOCAL:8080 and INET_LOCAL:8080?</H4>
<p>The standalone option SERVLET_LOCAL emulates a servlet engine and starts a HTTP server which can select the fastest channel supported on this operating system. On Linux this is a named pipe created in /dev/shm or INET_LOCAL as a fall back.</p>
<p>INET_LOCAL always uses local TCP socket communication.</p>

<H4>Whenever I reboot my computer I have to start the bridge back end again. How can I automate this?</H4>
<p>Download and install a servlet engine or J2EE server as a Windows
or Unix service.</p>

<H4>Do I have to require Java.inc in each of my scripts? Isn't that very slow?</H4>
<p>In order to communicate with Java, a PHP "Java" class definition is needed. Here's a simple PHP "Java" class definition which fits into one line:
<blockquote>
<code>
&lt;?php<br>
// The following is the "Java" class definition, stripped down to fit into one line<br>
// To use this sample start Java with: java -jar JavaBridge.jar INET:9267<br>
// Or enable java.so or php_java.dll, which automatically start the above<br>
// process Then type: php sample.php<br>
//<br>
class P {const Pc="&lt;C v=\"%s\" p=\"I\"&gt;", PC="&lt;/C&gt;"; const Pi="&lt;I v=\"%d\" m=\"%s\" p=\"I\"&gt;", PI="&lt;/I&gt;"; const Ps="&lt;S v=\"%s\"/&gt;", Pl="&lt;L v=\"%d\" p=\"%s\"/&gt;", Po="&lt;O v=\"%d\"/&gt;"; private $c; function str($s){fwrite($this-&gt;c, sprintf(self::Ps, $s));} function obj($s){fwrite($this-&gt;c, sprintf(self::Po, $s-&gt;java));} function __construct(){$this-&gt;c=fsockopen("127.0.0.1",9267);} function cBeg($s){fwrite($this-&gt;c, sprintf(self::Pc, $s));} function cEnd(){fwrite($this-&gt;c, self::PC);} function iBeg($o, $m){fwrite($this-&gt;c, sprintf(self::Pi, $o, $m));} function iEnd(){fwrite($this-&gt;c, self::PI);} function val($s){if(is_object($s))$this-&gt;obj($s);else $this-&gt;str((string)$s);} function res(){$r=sscanf(fread($this-&gt;c, 8192),"%s v=\"%[^\&quot;]\"");return $r[1];}} function gP() {static $p; if(!$p) $p=new P(); return $p;} class Java {var $java, $p; function __construct() {if(!func_num_args()) return; $this-&gt;p=gP(); $ar=func_get_args(); $this-&gt;p-&gt;cBeg(array_shift($ar)); foreach($ar as $arg) $this-&gt;p-&gt;val($arg); $this-&gt;p-&gt;cEnd(); $ar = sscanf($this-&gt;p-&gt;res(), "%d"); $this-&gt;java=$ar[0];} function __call($meth, $args) {$this-&gt;p-&gt;iBeg($this-&gt;java, $meth); foreach($args as $arg) $this-&gt;p-&gt;val($arg); $this-&gt;p-&gt;iEnd(); $proxy = new Java(); $ar = sscanf($this-&gt;p-&gt;res(), "%d"); $proxy-&gt;java=$ar[0]; $proxy-&gt;p=$this-&gt;p; return $proxy;} function toString() {$this-&gt;p-&gt;iBeg("", "castToString"); $this-&gt;p-&gt;val($this); $this-&gt;p-&gt;iEnd(); return base64_decode($this-&gt;p-&gt;res());}}<br>
<br>
// Test<br>
$i1 = new Java("java.math.BigInteger",  "1");<br>
$i2 = new Java("java.math.BigInteger",  "2");<br>
$i3 = $i1-&gt;add($i2);<br>
echo $i3-&gt;toString() . "\n";<br>
<br>
?&gt;<br>
</code>
</blockquote>
</p>
<p>The above simple "Java" class assumes that some Java VM has been
started on host "127.0.0.1", port "9267". And it cannot handle values
larger than 8192 bytes. Therefore the VM Bridge
library <code>Java.inc</code> should be used. Scripts should contain
the statement
<blockquote>
<code>
&nbsp;&nbsp;require_once("...java/Java.inc");
</code>
</blockquote>
at the beginning of each script. PHP compiles and caches PHP scripts, the <code>Java.inc</code> library is loaded only once.
</p>

<H4>What does "The requested method PUT is not allowed ... at localhost Port 80" mean?</H4>
<p>It means that <code>request.getServerPort()</code> is lying. Port 80 is privileged and therefore cannot be the servlet engine's server port.</p>
<p>If you use the AJP connector, for example via <code>ProxyPassMatch ^(/.*\.jsp)$ ajp://127.0.0.1$1</code>, set the correct <code>proxyPort</code> in <code>tomcat/conf/server.xml</code>. Example:
<blockquote>
<code>
&lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;<br>
- &lt;Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /&gt;<br>
+ &lt;Connector port="8009" protocol="AJP/1.3" proxyPort="8080" redirectPort="8443" /&gt;<br>
</code>
</blockquote>
 Please see the <a href="http://tomcat.apache.org/tomcat-5.5-doc/config/ajp.html">AJP documentation<a> for details.

</BODY>
</HTML>
@


1.32
log
@Release-5-4-4-2
@
text
@d1 1011
a1011 963
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html">
	<TITLE>VM Bridge FAQ</TITLE>
</HEAD>
<H1>VM Bridge FAQ</H1>
This file contains answers to frequently asked questions. Please see <a href="http://php-java-bridge.sourceforge.net/pjb">http://php-java-bridge.sourceforge.net</a> for more information.

<H2>General questions</H2>

<H4>Which alternatives exist?</H4>
<p>There are at least 4 other php to java bridges which offer a similar API. One was distributed with PHP 4.0.0 and has been discontinued. Two other bridges are proprietary software, built into a vendor-specific framework from Zend or a J2EE application server from Caucho.
Furthermore IBM's Zero framework for Eclipse contains a PHP interpreter written in pure Java and a php to java bridge which can call Java methods in-process.</p>
<p>The only free alternatives are SOAP and XML-RPC, which are up to 50 times slower than the XML protocol implementation used by this VM Bridge.</p>

<H4>How do I enable the Java extension in my php.ini file?</H4>
<p>A Java extension does not exist, so you can't enable it.</p>
<p>The VM Bridge is a network protocol, it requires a running Java VM, for example the servlet container Apache/Tomcat. Or, if you want to call PHP libraries from Java, a running PHP container, e.g. Apache or IIS.</p>

<H4>What do I need to communicate with Java?</H4>
<p>Only the PHP code from <code>Java.inc</code> and a running Java application, for example <code>JavaBridge.jar</code>, or a running Java servlet, for example <code>JavaBridge.war</code>.</p>
<p>Test code: 
<blockquote>
<code>
&lt;?php require_once("http://localhost:8080/JavaBridge/java/Java.inc"); <br>
echo java("java.lang.System")->getProperties(); ?&gt;
</code>
</blockquote>
</p>

<H4>What do I need to communicate with PHP?</H4>
<p>Only the PHP code from <code>JavaProxy.php</code> within your PHP web application, the Java libraries <code>JavaBridge.jar</code>, <code>php-script.jar</code> and <code>php-servlet.jar</code>, and a <code>ContextLoaderListener</code> declaration in your <code>WEB-INF/web.xml</code></p>
<p>Test code: 
<blockquote>
<code>
&lt;% javax.script.ScriptEngine e = php.java.script.servlet.EngineFactory.getInvocablePhpScriptEngine (this, application, request, response, new java.net.URI("http://yourIntranetHost:80/yourPhpWebApp/JavaProxy.php"));<br>
out.println("yourIntranetHost running PHP version: " + (String)((javax.script.Invocable)e).invokeFunction("phpversion", new Object[]{}));<br>
((java.io.Closeable)e).close();
%&gt;
</code>
</blockquote>
</p>
<p>There must not be a firewall in between, the servlet thread pool must not be limited or twice the size of the PHP container's pool size, the PHP option "allow_url_include" and the Java <code>WEB-INF/web.xml</code> "promiscuous" option must be enabled. Both components should be behind a firewall.
</p>

<H4>Which versions are supported?</H4>
<ul>
<li>PHP >= 5.1.2. PHP >= 5.3 recommended.</li>
<li>Java >= 1.4. Java >= 6 recommended.</li>
<li>J2EE >= 1.3. For J2EE 1.3 remove the <code>RequestListener</code> declaration from the WEB-INF/web.xml.</li>
<li>Mono >= 1.2.4 or .NET >= 2.</li>
</ul>

<H4>Do I need a Java Application Server or Servlet Engine?</H4>
<p>Java needs an execution environment.
</p>
<p>
You can also add PHP support to your standalone Java application by
adding the following line to its main class:
<blockquote>
<code>
static final php.java.bridge.JavaBridgeRunner runner = php.java.bridge.JavaBridgeRunner.getInstance(8087);
</code>
</blockquote>
The above code opens the port 8087, so that local PHP scripts can call
methods/procedures from your Java application, as long as your Java
application is running.
</p>
<p>The third option is the standard JSR 223 script interface, which
allows one to execute PHP code/scripts from Java applications.
</p>
<H4>Ho do I enable logging?</H4>
<p>
Copy <code>log4j.jar</code> into <code>java.ext.dirs</code>. Example for JDK 6:
<blockquote>
<code>
cp log4j.jar /usr/java/packages/lib/ext
</code>
</blockquote>
</p>
<p>
Start the log4j viewer. Example for JDK 6:
<blockquote>
<code>
/opt/jdk1.6/bin/java org.apache.log4j.chainsaw.Main
</code>
</blockquote>
</p>
<p>
Start the application server with the options <code>-Dphp.java.bridge.default_log_level=LEVEL</code>. Example for tomcat:
<blockquote>
<code>
JAVA_HOME=/opt/jdk1.6 JAVA_OPTS="-Dphp.java.bridge.default_log_level=5" bin/catalina.sh run
</code>
</blockquote>
Example for the standalone container:
<blockquote>
<code>
java -Dphp.java.bridge.default_log_level=5 -jar JavaBridge.jar SERVLET:8080
</code>
</blockquote>
</p>

<H4>How can I set Java options?</H4>
<p>
With the -D flag. See <code>java -jar JavaBridge.jar --help for details. If tomcat is being used, one can set these options as follows:
<blockquote>
<code>
JAVA_OPTS="-D... -D..." /opt/tomcat/bin/catalina.sh run
</code>
</blockquote>
</p>

<H4>How can I increase the memory available to Java?</H4>
<p>
Use a VM >= 1.6 and add more RAM to your computer. Older Java versions
support the <code>Xmx</code> flag:
<blockquote>
<code>
java -Xmx512M ... -jar JavaBridge.jar SERVLET:8080 
</code>
</blockquote>
</p>

<H4>How can I set PHP options?</H4>
<p>
With a <code>define</code> before a PHP library is loaded. Global options can also be set in the <code>php.ini</code> file. Use phpinfo() to see the location of this file.
</p>

<H4>How can I configure the bridge?</H4>

<p>Useful options which can be set before the Java.inc/Mono.inc is loaded are:
<blockquote>
<code>
define ("JAVA_DEBUG", false);<br>
define ("JAVA_PREFER_VALUES", false);<br>
define ("JAVA_HOSTS", "127.0.0.1:8080");<br>
define ("JAVA_PIPE_DIR", null);<br>
require_once ("java/Java.inc");<br>
...
</code>
</blockquote>
Please see the Options.inc for details.
</p>
<p>Server-side options can be set in the
php.java.bridge.global.properties file, see the JavaBridge.jar zip
file (contained in the JavaBridge.war zip file) for details.
</p>

<H4>Can I use Java libraries without installing java?</H4> <p>Yes. On a GNU operating system (e.g.: GNU/Linux, GNU/windows (aka "cygwin"), ...) you can use the GCC compiler to compile Java classes to native code. 
Simply compile the C based extension and omit the
<code>--with-java=</code> configure option. The bridge will use the
<code>libgcj</code> library, which is part of the GNU gcc compiler. This library also uses much less system
resources (memory, files) than a "real" Java VM.</p> 

<H4>I can't load the resource or file from the current working directory!?!</H4>
<p>
The "current working directory" is not useful, as the Java back end may be running
on a different server or from a different working directory. Use a full path or a URL resource instead.
</p>

<H4>I get a blank page or some other error!?!</H4>
<p>
Check the PHP error log, see your <code>php.ini</code> file for details. If the command:
<blockquote>
<code>
echo '&lt;?php require_once("http://localhost:8080/JavaBridge/java/Java.inc"); echo java("java.lang.System")-&gt;getProperties();?&gt;' | php -n -d allow_url_include=On
</code>
</blockquote>
works in the shell but not within apache, then there's something wrong with your <code>php.ini</code> file.
</p>

<H4>Can I use Python instead of PHP?</H4>
<p>Yes, see the examples folder from the source download.</p>

<H4>Can I access Mono or .NET libraries using the pure PHP implementation?</H4>
<p>Yes, there's a PHP library "Mono.inc" generated from "Java.inc" and
a "MonoBridge.exe" generated from "JavaBridge.jar". If you want to
compile from source, use the configure
option <code>--with-mono</code>.</p>

<H4>What does a "protocol error ..." mean?</H4>
<p>That your Java or .NET VM has problems, for example an OutOfMemoryError. Check the back end (Tomcat/J2EE/.NET/...) log for details.</p>

<H4>Does it support PHP 4?</H4>
<p>No. Use VM Bridge version 4.3.2 or below instead.</p>

<H2>Class loading questions</H2>

<a name="java-require"></a>
<H4>How do I load Java libraries?</H4>
<p> During development simple libraries can be loaded dynamically with <code>java_require("myApplication.jar;myLib1.jar;myDriver1.jar;...");</code>. See the README for details.</p>

<H4>Where can I store my java libraries for the VM Bridge?</H4>
<p>Either within  your web application <code>WEB-INF/lib</code> directory or in <code>php.java.bridge.base</code>/lib.</p>
<p> When the system property <code>php.java.bridge.base</code> is not set, libraries are loaded from <code>$HOME/lib</code> where <code>$HOME</code> denotes the home directory of the person or component which has started the java VM.</p>
<p> If libraries should be available globally, store them in <code>java.ext.dirs</code>, for example in <code>/usr/share/java/ext</code>.</p>
<p> If a library is not yet API-stable, store it into a sub directory of the <code>lib</code> directory and use the <code>java_require()</code> procedure. For example <code>java_require("myLibs0.2/foo.jar")</code> loads <code>foo.jar</code> from <code>php.java.bridge.base/lib/myLibs0.2</code>.</p>

<H4>Why can't Apache load my /foo/bar/baz.jar file?</H4>
<p>It probably doesn't have the permission to access it. Check if
baz.jar is a valid Java archive and if its main class is public. Try
to disable Security Enhanced Linux and store the jar file into a
folder accessible by the apache user and then extract the required
Security Enhanced Linux permissions from the audit log.</p>

<H4>Why do I get a ClassNotFoundException?</H4>
<p>You probably haven't required the relevant Java library. Or the
class doesn't exist or it is not public or it throws a java.lang.Error
during initialization. Check which library exports the feature and add
the library to the <code>java_require()</code> statement.</code></p>

<a name="java-dll-hell"></a>
<H4>Why do I get a NoClassDefFoundError?</H4>
<p>Because Java doesn't have a module system.</p>
<p>All libraries and their dependencies must be loaded by one, and only one class loader.</p>
<p>Please read the previous sentence until you understand what it means; for example a simple file system copy(!) operation may be the cause for a NoClassDefFoundError.</p>
<p><em>Please do not report NoClassDefFoundErrors to the mailing list or via the bug tracker. This is not a bug and we cannot help you any further!</em></p>

<H4>I cannot require my JDBC driver!?!</H4>
<p> Please re-read the <a href="#java-require">class loading section</a>. The following code loads all interconnected libraries using a single java_require() call:
<blockquote>
<code>
&nbsp;&nbsp;java_require("myApplication.jar;myJdbcDriver.jar");<br>
&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;$myApplication->callWithMyJdbcDriver();<br>
</code>
</blockquote>
</p>
<p>
The following incorrect code fails because the application (the "JavaBridge.jar" in this case) cannot be
accessed by the jdbc driver. This constraint is checked by the DriverManager:
<blockquote>
<code>
&nbsp;&nbsp;java_require("myJdbcDriver.jar"); // WRONG!<br>
&nbsp;&nbsp;new java("my.jdbc.Driver");<br>
&nbsp;&nbsp;java("java.sql.DriverManager")-&gt;getDriver("myJdbcURL"); // FAILS!<br>
</code>
</blockquote>
If you really need to access the driver directly from PHP code, either use the driver API directly or load "JavaBridge.jar" and "myJdbcDriver.jar" from the same class loader so that the DriverManager can link them together. Use the extra library directory (usually <code>~/lib/</code>) or the global repository (usually <code>/usr/java/packages/lib/ext</code>).
</p>

<H4>How do I load impure Java libraries?</H4>
<p>You can't. Java libraries must be pure Java.</p>
<p> Please read the
documentation of your J2EE server, Servlet engine or Java VM to see if and
how the environment can handle impure Java libraries. A common approach is to store the Java part in <code>java.ext.dirs</code> and the native part in <code>java.library.path</code>.</p>

<H2>J2EE/Servlet questions</H2>

<a name="load-balancing">
<H4>How do I set up a load balancer for the VM Bridge cluster?</H4>
<p>
Set up the VM Bridge cluster as <a href="#cluster">described below</a>. The example uses two nodes named "carlos" and "diego". The HTTP server front end runs on the web server "timon".
</p>
<p>Install Apache 2.2.0 or higher.</p>
<p>Enable <code>proxy_module</code> and <code>proxy_balancer_module</code>. The following example is for Linux (lines marked with "+" should be added to the <code>conf/httpd.conf</code> file):
<blockquote>
<code>
&nbsp;&nbsp;&nbsp;LoadModule rewrite_module modules/mod_rewrite.so<br>
&nbsp;+&nbsp;LoadModule proxy_module modules/mod_proxy.so<br>
&nbsp;+&nbsp;LoadModule proxy_balancer_module modules/mod_proxy_balancer.so<br>
&nbsp;&nbsp;&nbsp;LoadModule cache_module modules/mod_cache.so<br>
</code>
</blockquote>
</p>
<p>
Add the following code to the bottom of your <code>conf/httpd.conf</code> file:
<blockquote>
<code>
ProxyPass /JavaBridge balancer://mycluster maxattempts=2<br>
&lt;Proxy balancer://mycluster&gt;<br>
&nbsp;&nbsp;BalancerMember http://diego:8080/JavaBridge<br>
&nbsp;&nbsp;BalancerMember http://carlos:8080/JavaBridge<br>
&lt;/Proxy&gt;<br>
&lt;Location /balancer-manager&gt;<br>
&nbsp;&nbsp;SetHandler balancer-manager<br>
&nbsp;&nbsp;Deny from all<br>
&nbsp;&nbsp;Allow from 127.0.0.1<br>
&lt;/Location&gt;<br>
</code>
</blockquote>
</p>
<p>Start the cluster nodes on "carlos" and "diego".</p>
<p>Browse to <code>http://timon/JavaBridge/</code> (note the trailing slash) and click on the test.php. Click on refresh. Check if both nodes respond.</p>
<p>Browse to <code>http://timon/JavaBridge/sessionSharing.php</code> and click on refresh. Check the cookie value.</p>
<p>Browse to <code>http://timon/balancer-manager/</code>.
<p>Please see the <code>mod_rewrite</code> documentation for more information how to rewrite incoming URLs.</p>
</a>


<a name="cluster">
<H4>Ho do I set up a tomcat cluster?</H4>
<p>
Download tomcat 5 or higher, a Java JRE 5 or higher and the VM Bridge 4.1.6 or higher.
</p>
<p>
The following example uses two nodes running on two machines called
"carlos" and "diego".
</p>
<p>
On all nodes: Extract the tomcat distribution into a directory.
</p>
<p>On <strong>"diego"</strong> add the following to <code>conf/server.xml</code>:
<blockquote>
<code>
&lt;Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"<br>
&nbsp;&nbsp;channelSendOptions="8"&gt;<br>
&nbsp;&nbsp;&lt;Manager className="org.apache.catalina.ha.session.DeltaManager"<br>
&nbsp;&nbsp;&nbsp;&nbsp;expireSessionsOnShutdown="false"<br>
&nbsp;&nbsp;&nbsp;&nbsp;notifyListenersOnReplication="true"/&gt;<br>
&nbsp;&nbsp;&lt;Channel className="org.apache.catalina.tribes.group.GroupChannel"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;Receiver className="org.apache.catalina.tribes.transport.nio.NioReceiver"<br>
&nbsp;&nbsp;&nbsp;&nbsp;address="<strong>diego</strong>"<br>
&nbsp;&nbsp;&nbsp;&nbsp;port="4000"<br>
&nbsp;&nbsp;&nbsp;&nbsp;autoBind="100"<br>
&nbsp;&nbsp;&nbsp;&nbsp;selectorTimeout="5000"<br>
&nbsp;&nbsp;&nbsp;&nbsp;maxThreads="6"/&gt;<br>
&nbsp;&nbsp;&lt;/Channel&gt;<br>
&lt;/Cluster&gt;<br>
</code>
</blockquote>
</p>
<p>On <strong>"carlos"</strong> add the following to <code>conf/server.xml</code>:
<blockquote>
<code>
&lt;Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"<br>
&nbsp;&nbsp;channelSendOptions="8"&gt;<br>
&nbsp;&nbsp;&lt;Manager className="org.apache.catalina.ha.session.DeltaManager"<br>
&nbsp;&nbsp;&nbsp;&nbsp;expireSessionsOnShutdown="false"<br>
&nbsp;&nbsp;&nbsp;&nbsp;notifyListenersOnReplication="true"/&gt;<br>
&nbsp;&nbsp;&lt;Channel className="org.apache.catalina.tribes.group.GroupChannel"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;Receiver className="org.apache.catalina.tribes.transport.nio.NioReceiver"<br>
&nbsp;&nbsp;&nbsp;&nbsp;address="<strong>carlos</strong>"<br>
&nbsp;&nbsp;&nbsp;&nbsp;port="4000"<br>
&nbsp;&nbsp;&nbsp;&nbsp;autoBind="100"<br>
&nbsp;&nbsp;&nbsp;&nbsp;selectorTimeout="5000"<br>
&nbsp;&nbsp;&nbsp;&nbsp;maxThreads="6"/&gt;<br>
&nbsp;&nbsp;&lt;/Channel&gt;<br>
&lt;/Cluster&gt;<br>
</code>
</blockquote>
</p>
<p>Copy the "JavaBridge.war" into the "webapps" directory on "diego" and "carlos" and start both nodes. For example with the command:
<blockquote>
<code>
JAVA_OPTS="-Dphp.java.bridge.promiscuous=true" JAVA_HOME=/usr/java/default bin/catalina.sh run
</code>
</blockquote>
</p>

<p>
Please see your HTTP server documentation and <a href="#load-balancing">the description above</a> how to set it up as a load balancer.
</p>
</a>
<a name="global-servlet">
<H4>I want to use PHP for all tomcat applications. Apache and IIS are not available, but performance is important. How do I install it?</H4>
</a>
<ol>
<li>
Download the PHP/Java Bridge binary.
<li>
Copy <code>JavaBridge.jar</code>, <code>php-servlet.jar</code> and <code>php-script.jar</code> from the <code>JavaBridge.war</code> zip archive to <code>$CATALINA_HOME/lib</code>.
<li>
Add the following 9 lines marked with a <code>+</code> to the tomcat <code>$CATALINA_HOME/conf/web.xml</code> web app:
<blockquote>
<code>
<br>
&lt;<em>web-app</em> xmlns=... &gt
<br><br>
+    &lt;listener&gt;&lt;listener-class&gt;php.java.servlet.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;<br>
+    &lt;servlet&gt;&lt;servlet-name&gt;PhpJavaServlet&lt;/servlet-name&gt;&lt;servlet-class&gt;php.java.servlet.PhpJavaServlet&lt;/servlet-class&gt;<br>
+    &lt;/servlet&gt;<br>
+    &lt;servlet&gt;&lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;&lt;servlet-class&gt;php.java.servlet.PhpCGIServlet&lt;/servlet-class&gt;<br>
+        &lt;init-param&gt;&lt;param-name&gt;prefer_system_php_exec&lt;/param-name&gt;&lt;param-value&gt;On&lt;/param-value&gt;&lt;/init-param&gt;<br>
+        &lt;init-param&gt;&lt;param-name&gt;php_include_java&lt;/param-name&gt;&lt;param-value&gt;On&lt;/param-value&gt;&lt;/init-param&gt;<br>
+    &lt;/servlet&gt;<br>
+    &lt;servlet-mapping&gt;&lt;servlet-name&gt;PhpJavaServlet&lt;/servlet-name&gt;&lt;url-pattern&gt;*.phpjavabridge&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;<br>
+    &lt;servlet-mapping&gt;&lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;&lt;url-pattern&gt;*.php&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;<br>
...<br>
<br>
&lt;<em>/web-app</em>&gt;

</code>
</blockquote>
<li>
Start tomcat.
</ol>
To test the above settings, add a file <code>test.php</code>:
<blockquote>
<code>
&lt;?php echo java("java.lang.System")-&gt;getProperties(); ?&gt;
</code>
</blockquote>
to some web context, for example "examples", and browse to <code>http://yourHost.com:8080/examples/test.php</code>.
<p>
In case you don't need to access Java from all of your scripts, you can set the <code>php_include_java</code> option to <code>Off</code> and <code>require_once("java/Java.inc")</code>, if needed.
<p>

<a name="php-web-app">
<H4>How do I create a standalone PHP web application for distribution and how can users deploy it into tomcat?</H4>
</a>
<p>
Create a directory <code>myApplication</code>, create the directories <code>myApplication/WEB-INF/lib/</code> and <code>myApplication/WEB-INF/cgi/</code>.
Download the J2EE binary and copy the <code>JavaBridge.jar</code> and the <code>php-servlet.jar</code> from the JavaBridge.war to the <code>myApplication/WEB-INF/lib/</code> folder. Copy the contents of the <code>cgi</code> folder to <code>myApplication/WEB-INF/cgi/</code>. Create the file <code>myApplication/WEB-INF/web.xml</code> with the following content:
<blockquote>
<code>
<br>
&lt;web-app&gt;<br>
    &lt;!-- PHP Servlet --&gt;<br>
    &lt;servlet&gt;<br>
        &lt;servlet-name&gt;PhpJavaServlet&lt;/servlet-name&gt;<br>
        &lt;servlet-class&gt;php.java.servlet.PhpJavaServlet&lt;/servlet-class&gt;<br>
    &lt;/servlet&gt;<br>
    &lt;!-- PHP CGI processing servlet, used when Apache/IIS are not available --&gt;<br>
    &lt;servlet&gt;<br>
        &lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;<br>
        &lt;servlet-class&gt;php.java.servlet.PhpCGIServlet&lt;/servlet-class&gt;<br>
    &lt;/servlet&gt;<br>
<br>
    &lt;!-- PHP Servlet Mapping --&gt;<br>
    &lt;servlet-mapping&gt;<br>
        &lt;servlet-name&gt;PhpJavaServlet&lt;/servlet-name&gt;<br>
        &lt;url-pattern&gt;*.phpjavabridge&lt;/url-pattern&gt;<br>
    &lt;/servlet-mapping&gt;<br>
    &lt;!--PHP CGI Servlet Mapping --&gt;<br>
    &lt;servlet-mapping&gt;<br>
        &lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;<br>
        &lt;url-pattern&gt;*.php&lt;/url-pattern&gt;<br>
    &lt;/servlet-mapping&gt;<br>
<br>
    &lt;!-- Welcome files --&gt;<br>
    &lt;welcome-file-list&gt;<br>
        &lt;welcome-file&gt;index.php&lt;/welcome-file&gt;<br>
    &lt;/welcome-file-list&gt;<br>
 &lt;/web-app&gt;<br>
</code>
</blockquote>
</p>
<p>
To call Java code from PHP, copy the <code>java/Java.inc</code> 
to some directory and require it as usual, e.g.: <code>require_once("java/Java.inc");</code>.
</p>
<p>
To call PHP code from Java, copy the <code>java/JavaProxy.php</code> 
to some <em>web</em>directory and use the EngineFactory as usual, e.g.: <code>EngineFactory.getInvocablePhpScriptEngine(this, application, request, response);</code> or, if PHP is running somewhere else: <code>EngineFactory.getInvocablePhpScriptEngine(..., 80, "/phpApp/JavaProxy.php");</code>.
</p>

<p>
Copy the files <code>sessionSharing.jsp</code> and <code>sessionSharing.php</code> from the <code>JavaBridge.war</code> to <code>myApplication</code> and create <code>myApplication.war</code>, for example with the commands: <code>cd myApplication; jar cf ../myApplication.war *</code>. </p>
<p>The web archive can now be distributed, copy it to the tomcat <code>webapps</code> directory and re-start tomcat. Visit <code>http://localhost/myApplication/sessionSharing.php</code> and <code>http://localhost/myApplication/sessionSharing.jsp</code>.
</p>

<a name="tomcat-security">
<H4>I want to use Tomcat's security manager, how do I install the bridge?</H4>
</a>
<p>
Install the PHP/Java Bridge for all web application as described <a href="#global-servlet">here</a>.
</p>


<a name="php-jsp-session-sharing">
<H4>I want to use Apache/IIS as a front-end and tomcat as a back end. How do I enable PHP and JSP for all my applications?</H4>
</a>
<p> Set up Apache or IIS so that it forwards requests to the back
end. Please see <a href="#load-balancing">the description above</a>
for details.
</p>



<H4>Does the
bridge run native code within my servlet engine or application
server?</H4> <p>No. The bridge back end is written in pure java, it
doesn't use any native code. Native PHP runs within Apache, IIS, a
FCGI server or via CGI. If the PHP instance crashes, an error page is
returned to the client and the Apache, IIS, CGI container usually starts a new PHP instance for the next
request.</p> 


<a name="ssl">
<H4>On Windows some PHP binaries do not support HTTPS/SSL</H4> 
</a>
<p>
If you see the message:
<blockquote>
<code>
Warning: fsockopen() [function.fsockopen]: unable to connect to ssl://127.0.0.1:8443
(Unable to find the socket transport "ssl" - did you forget to enable it when you configured PHP?)
</code>
</blockquote>
this means that PHP cannot connect back to the official SSL port. 
Please check the 
"Registered Stream Socket Transports" from the <code>phpinfo()</code> (see the <code>test.php</code> page), it should display: <code>tcp, udp, ssl, sslv3, sslv2, tls</code>. If not, please recompile PHP with SSL enabled, use the flag <code>--with-openssl</code>.
<p>
A workaround is to use the official non-SSL port or to open a
dedicated local port for the PHP-Java communication. The following
example is for Tomcat:
<p>
<ol>
Disable <code>override_hosts</code> in the web application <code>WEB-INF/web.xml</code>:
<blockquote>
<code>
         &lt;context-param&gt;<br>
           &lt;param-name&gt;override_hosts&lt;/param-name&gt;<br>
           &lt;param-value&gt;Off&lt;/param-value&gt;<br>
         &lt;/context-param&gt;<br>
</code>
</blockquote>
Either fetch the <code>Java.inc</code> directly from your back end (which also adjusts the <code>JAVA_HOSTS</code>) or change the <code>JAVA_HOSTS</code> option, for example:
<blockquote>
<code>
define("JAVA_HOSTS", "127.0.0.1:9090");
</code>
</blockquote>
</ol>
<p>
Restart the application server or servlet engine. Check the settings by running <code>phpinfo()</code> or by visiting the <code>test.php</code> page. 
</p>


<H4>The EJB example works with the Sun J2EE server, but in JBoss I get a ClassCastException, what's wrong?</H4> 
<p>It's a JBoss problem, although this problem may also appear in other application servers which do not strictly separate the application/bean domains. The JavaBridge.war already contains the <code>documentClient.jar</code> as a library, so JBoss references the library classes instead of the bean classes. Just remove the <code>documentClient.jar</code> from the <code>JavaBridge.war</code>, re-deploy <code>JavaBridge.war</code> and run the test again.
</p><p>
In JBoss' default setup the code:
<blockquote>
<code>
  // access the home interface<br>
  $DocumentHome = new JavaClass("DocumentHome");<br>
  $PortableRemoteObject = new JavaClass("javax.rmi.PortableRemoteObject");<br>
  $home=$PortableRemoteObject-&gt;narrow($objref, $DocumentHome);<br>
</code>
</blockquote>
refences the <code>DocumentHome</code> from the library, which is assignment-incompatible to <code>DocumentHome</code> from the enterprise bean (<code>DocumentHome@@WebAppClassLoader</code> !=  <code>DocumentHome@@BeanClassLoader</code>), so you get a ClassCastException in <code>narrow</code>.
</p>
<p>
In contrast the Sun J2EE server correctly separates the beans/applications; the <code>$objref</code> is a unique proxy generated by a parent of the <code>WebAppClassLoader</code>, so that <code>narrow</code> can always cast the proxy to <code>DocumentHome@@WebAppClassLoader</code>, even if a class with the same name is already available from the <code>WebAppClassLoader</code>.</p>

 <H4>How do I install PHP into the Nutch, Spring, JSF, ..., Framework?</H4> 
<p>By providing JSR 223 based PHP beans and a description how to manage them, as usual. The code
<blockquote>
<code>
  javax.script.ScriptEngine e = <br>
      php.java.script.EngineFactory.getInvocablePhpScriptEngine (this, <br>
                                                        application, <br>
                                                        request, response);<br>
</code>
</blockquote>
can be used to access the JSR 223 ScriptEngine from the framework, provided that a listener has been configured in the WEB-INF/web.xml:
<blockquote>
<code>
   &lt;listener&gt;
       &lt;listener-class&gt;php.java.servlet.ContextLoaderListener&lt;/listener-class&gt;
   &lt;/listener&gt;
</code>
</blockquote>
</p>

<H2>General runtime questions</H2>

<H4>How do I reference a class w/o creating an instance?</H4>
<p>
With the <code>java</code> function, for example: <code>java("java.lang.System")</code>.
</p>
<p>The function is defined in <code>http://localhost:8080/JavaBridge/java/Java.inc</code> as:
<blockquote>
<code>
function java($clazz) {<br>
&nbsp;&nbsp;static $classMap = array();<br>
&nbsp;&nbsp;if(array_key_exists($clazz, $classMap)) return $classMap[$clazz];<br>
&nbsp;&nbsp;return classMap[$clazz]=new JavaClass($clazz);<br>
}
</code>
</blockquote>
</p>

<H4>Why does java_context()-&gt;getHttpServletRequest()-&gt;getSession() return null?</H4>
<p>
PHP scripts must explicitly allocate a session with <code><a href="API/VM%20Bridge/_JavaProxy.inc.html#functionjava_session">java_session()</a></code>. For example:
<blockquote>
<code>
java_session(); <br>
// now the (Remote-)HttpServletRequest knows about the session: <br>
echo java_context()-&gt;getHttpServletRequest()-&gt;getSession(); <br>
</code>
</blockquote>
</p>

<H4>Where is my output?</H4> <p><code>System.out</code> and
<code>System.err</code> are redirected to the server log file(s). When
PHP scripts are invoked from a java framework (Java Server Faces for
example), even the PHP output is redirected. For the standalone back
end the output appears in the
<code>/var/log/php-java-bridge.log</code> or in VMBridge.log, see
.ini option <code>java.log_file</code>. For the j2ee back end the
location of the log file(s) depends on the j2ee server
configuration.</p>


<H4>How do I make my script state (objects or variables) persistent?</H4> 
<p>If you must code it yourself: with
e.g. <code>java_session()-&gt;put("buf", $stringBuffer)</code></p> 


<H4>How many threads does the bridge start?</H4> 
<p>Request-handling threads are started
from a thread pool, which limits the number of user requests to 20
(default), see system property
<code>php.java.bridge.threads</code>. All further requests have to
wait until one of the worker threads returns to the pool. </p> 
<p>When running in a servlet engine, a <a
href="server/documentation/API/php/java/bridge/http/ContextServer.html">ContextServer</a>
is started which handles the pipe or local socket communication
channel.  </p> <p>When java invokes local scripts outside of a HTTP
environment, the bridge starts a <a
href="server/documentation/API/php/java/bridge/http/HttpServer.html">HttpServer</a>,
a <a
href="server/documentation/API/php/java/bridge/http/ContextServer.html">ContextServer</a>
and a <a
href="server/documentation/API/php/java/script/HttpProxy.html">HttpProxy</a>. The
HttpProxy represents the PHP continuation and the HttpServer the
request-handling java continuation associated with the JSR223 script.
</p> 

 <H4>How do I access enums or inner classes?</H4> 
With the <code>classname$inner</code> syntax. For example <br><br>
<code>
public interface php {<br>
&nbsp;public class java {<br>
&nbsp;&nbsp;public enum bridge {JavaBridge, JavaBridgeRunner};<br>
&nbsp;}<br>
}<br>
</code><br>
can be accessed with:<br><br>
<code>
&lt;?php<br>
java_require(getcwd()); // load php.class<br>
$bridge = new java('php$java$bridge');<br>
echo $bridge-&gt;JavaBridgeRunner;<br>
?&gt;<br>
</code><br>
The above code is not a good programming example but it demonstrates why a different syntax is used to access inner classes. 
</p>

 <H4>How do I create a primitive array?</H4> 
<p>
Primitive types are wrapped by associated java classes. 
The following example uses <code>reflect.Array</code> to create a new <code>byte</code> array:<br><br>
<code>
$Byte = new JavaClass("java.lang.Byte");<br>
$byte = $Byte-&gt;TYPE;<br>
$Array = new JavaClass("java.lang.reflect.Array");<br>
$byteArray = $Array-&gt;newInstance($byte, 255);<br>
$System = new JavaClass("java.lang.System");<br>
$length = $System-&gt;in-&gt;read($byteArray);<br>
$str = new Java("java.lang.String", $byteArray, 0, $length);<br>
echo "You have typed: $str\n";<br>
</code>
</p>

 <H4>How fast is it?</H4> <p> 
The following scripts were
executed on one 1.688 GHZ x86 cpu running RedHat Fedora Core 4 Linux and Sun jdk1.6.0_02:
</p>
The PHP 5.2.2 code<br>
<p>
<code>
&lt;?php<br>
$buf=new java("java.lang.StringBuffer");<br>
<br>
$i=0;<br>
while($i&lt;400000) {<br>
&nbsp;&nbsp;$i=$i+1;<br>
&nbsp;&nbsp;$buf-&gt;append($i);<br>
}<br>
<br>
print $buf-&gt;length() . "\n";<br>
?&gt;<br>
</code>
</p>
The ECMAScript ("Mozilla Rhino") code<br>
<p>
<code>
buf = new java.lang.StringBuffer();<br>
for(i=0; i<400000; i++) buf.append(new String(i));<br>
print (buf.toString().length());<br>
</code>
</p>
<p>
<center>
<TABLE
BORDER="1"
><COL><COL><COL><COL><THEAD
><TR
><TH
>Command</TH
><TH
>Script Engine</TH
><TH
>Communication Channel</TH
><TH
>Execution time (real, user, sys)</TH
></TR
></THEAD

<TBODY
><TR
><TD
>time jrunscript -l php t11.php</TD
><TD
>PHP5 + VM Bridge 4.3.3</TD
><TD
>named pipes</TD
><TD
>0m18.703s,<br>
0m16.209s,<br>
0m0.138s
</TD
></TR
>
<TBODY
><TR
><TD
>time jrunscript -l js t11.js</TD
><TD
>ECMA script</TD
><TD
>none (native code)</TD
><TD
>0m15.338s,<br>
0m14.996s,<br>
0m0.116s
</TD
></TR
>

</TABLE
>
</center>
</p>
<p>
</p>

 <H4>How does the bridge handle OutOfMemoryErrors?</H4> 
<p>
OutOfMemoryErrors may happen because a cached object cannot be released, either because <p>
<ol>
<li> the object is permanently referenced by a request-handling thread or</li>
<li> the object has been entered into the session or application store or 
 the object is referenced by a thread outside of the scope of the VM Bridge.</li>
</ol>
</p>
</p>
<p>When a <code>java.lang.OutOfMemoryError</code> reaches the request-handling thread, the VM Bridge thread pool removes the thread from its pool and writes a message <code>FATAL: OutOfMemoryError</code> to the VM Bridge log file. The session store is cleaned and all client connections are terminated without confirmation.
</p>
<p>
If the OutOfMemoryError persists, this means that a thread outside of the VM Bridge has caused this error condition.
</p>
<p>
OutOfMemory conditions can be debugged by running the back end with e.g.:<br><br>
<code>
java -agentlib:hprof=heap=sites -jar JavaBridge.jar<br>
</code>
</p>
 
<H4>How can PHP classes extend Java classes and Java methods?</H4> 
<p>
By using <a href="API/VM%20Bridge/_JavaProxy.inc.html#functionjava_closure"><code>java_closure()</code></a> and the visitor pattern for example. The <code>tests.php5</code> folder contains a <code>script_api.php</code> example which shows how to implement <code>java.lang.Runnable</code> to run multiple PHP threads, concurrently accessing a shared resource.
</p> 
<H4>How can I execute PHP code on the server?</H4> 
<p>
With <code>java_begin_document()/java_end_document()</code>. For example:
<blockquote>
<code>
&nbsp;&nbsp;java_begin_document();<br>
&nbsp;&nbsp;$s = new Java("java.lang.StringBuffer");<br>
&nbsp;&nbsp;for($i=0; $i<10000; $i++) $s-&gt;append($i);<br>
&nbsp;&nbsp;java_end_document();<br>
</code>
</blockquote>
The above code sends the PHP code as an XML image to the server and executes it there.
</p> 
<H4>How can I convert a Java object into a PHP value?</H4>
<p>
With <code>java_values()</code>. For example:
<blockquote>
<code>
&nbsp;&nbsp;$s = new Java("java.lang.String");<br>
&nbsp;&nbsp;$c = $chr = $s-&gt;toCharArray();<br>
&nbsp;&nbsp;print  (java_values($s));<br>
&nbsp;&nbsp;print_r(java_values($c));<br>
</code>
</blockquote>
</p>
<H4> How can I convert a PHP object into a Java object?</H4>
<p>
With <code>java_closure()</code>. For example:
<blockquote>
<code>
&nbsp;&nbsp;class Foo {<br>
&nbsp;&nbsp;&nbsp;function toString() {return "php::foo";}<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;$foo = new Foo();<br>
&nbsp;&nbsp;$jObj = java_closure($foo);<br>
&nbsp;&nbsp;$String = new Java("java.lang.String");<br>
&nbsp;&nbsp;echo $String-&gt;valueOf($jObj);<br>
</code>
</blockquote>
</p>
<H4>How do I call JSP tags from PHP?</H4>
<p>
Example:
<blockquote>
<code>
require_once("http://localhost:8080/JavaBridge/java/Java.inc");<br>
java_require("myLibs/baz-taglib.jar");<br>
$tag = new Java("foo.bar.BazTag");<br>
<br>
$session = java_session();<br>
$ctx = java_context();<br>
$servlet = $ctx-&gt;getAttribute("php.java.servlet.Servlet");<br>
$response = $ctx-&gt;getAttribute("php.java.servlet.HttpServletResponse");<br>
$request = $ctx-&gt;getAttribute("php.java.servlet.HttpServletRequest");<br>
$factory = java("javax.servlet.jsp.JspFactory")-&gt;getDefaultFactory();<br>
$pc = $factory-&gt;getPageContext($servlet, $request, $response, null, true, 8192, false);<br>
<br>
$tag-&gt;setPageContext($pc);<br>
$value = $tag-&gt;doStartTag();<br>
if(($value != Java("javax.servlet.jsp.tagext.Tag")-&gt;SKIP_BODY) {<br>
&nbsp;&nbsp;if($value != Java("javax.servlet.jsp.tagext.Tag")-&gt;EVAL_BODY_INCLUDE)) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;$tag-&gt;setBodyContent($pc-&gt;pushBody());<br>
&nbsp;&nbsp;&nbsp;&nbsp;$tag-&gt;doInitBody();<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;do {<br>
&nbsp;&nbsp;&nbsp;&nbsp;...<br>
&nbsp;&nbsp;} while($tag-&gt;doAfterBody() == Java("javax.servlet.jsp.tagext.BodyTag")-&gt;EVAL_BODY_AGAIN)<br>
}<br>
if($value != Java("javax.servlet.jsp.tagext.Tag")-&gt;EVAL_BODY_INCLUDE) $pc-&gt;popBody();<br>
$tag-&gt;doEndTag();<br>
</blockquote>
</code>
</p><p>
The generated content (if any) can be retrieved from the servlet output stream with:
<blockquote>
<code>
java_values($response-&gt;getBufferContents();
</code>
</blockquote>
</p>
<p>Please see the <code>php_java_lib/JspTag.php</code> and <code>tests.php5/tag.php</code> for details.</p>
<H4>How does the bridge support Java generics?</H4>
<p>
You can ignore the parameter type.
</p>
<p>
Java doesn't support real generics on byte-code level. The generics in JDK 1.5 and above are implemented as "erasures"; they are syntactic sugar, useful only for the Java compiler. The generated byte-code is the same as in JDK 1.4.
</p>
<H4>What about Java 5 varargs?</H4>
<p>
Pass them as a PHP array. Example:
</p>
<p>
<blockquote>
<code>
&lt;?php require_once("http://localhost:8080/JavaBridge/java/Java.inc");<br>
$here=getcwd(); java_require("$here/varargs.jar");<br>
$t1 = new java('Varargs$Test', 1);<br>
$t2 = new java('Varargs$Test', 2);<br>
echo java("Varargs")-&gt;varargs(array($t1, $t2));<br>
?&gt;
</code>
</blockquote>
</p>
<p>
<blockquote>
<code>
public class Varargs {<br>
&nbsp;public static class Test {<br>
&nbsp;&nbsp;public int i;<br>
&nbsp;&nbsp;public Test (int i) {<br>
&nbsp;&nbsp;&nbsp;this.i = i;<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;public String toString() {<br>
&nbsp;&nbsp;&nbsp;return String.valueOf(i);<br>
&nbsp;&nbsp;}<br>
&nbsp;}<br>
&nbsp;public static String varargs(Test ...tests) {<br>
&nbsp;&nbsp;StringBuffer buf = new StringBuffer();<br>
&nbsp;&nbsp;for (Test test : tests) {<br>
&nbsp;&nbsp;&nbsp;buf.append(test);<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;return buf.toString();<br>
&nbsp;}<br>
}<br>
</code>
</blockquote>
</p>
<H4>NULL tests</H4>
<p>
Use <code>java_is_null($value)</code> or <code>is_null (java_values ($value))</code> to test for a (Java-) NULL value.
</p>

<H4>How do I start the bridge back end when there's another Java VM listening on port 8080?</H4>
<p>Simply deploy the VM Bridge web archive into the servlet engine or application server listening on port 8080. Or use a different port.</p>

<H4>What's the difference between SERVLET_LOCAL:8080 and INET_LOCAL:8080?</H4>
<p>The standalone option SERVLET_LOCAL emulates a servlet engine and starts a HTTP server which can select the fastest channel supported on this operating system. On Linux this is a named pipe created in /dev/shm or INET_LOCAL as a fall back.</p>
<p>INET_LOCAL always uses local TCP socket communication.</p>

<H4>Whenever I reboot my computer I have to start the bridge back end again. How can I automate this?</H4>
<p>Download and install a servlet engine or J2EE server as a Windows
or Unix service.</p>

<H4>Do I have to require Java.inc in each of my scripts? Isn't that very slow?</H4>
<p>In order to communicate with Java, a PHP "Java" class definition is needed. Here's a simple PHP "Java" class definition which fits into one line:
<blockquote>
<code>
&lt;?php<br>
// The following is the "Java" class definition, stripped down to fit into one line<br>
// To use this sample start Java with: java -jar JavaBridge.jar INET:9267<br>
// Or enable java.so or php_java.dll, which automatically start the above<br>
// process Then type: php sample.php<br>
//<br>
class P {const Pc="&lt;C v=\"%s\" p=\"I\"&gt;", PC="&lt;/C&gt;"; const Pi="&lt;I v=\"%d\" m=\"%s\" p=\"I\"&gt;", PI="&lt;/I&gt;"; const Ps="&lt;S v=\"%s\"/&gt;", Pl="&lt;L v=\"%d\" p=\"%s\"/&gt;", Po="&lt;O v=\"%d\"/&gt;"; private $c; function str($s){fwrite($this-&gt;c, sprintf(self::Ps, $s));} function obj($s){fwrite($this-&gt;c, sprintf(self::Po, $s-&gt;java));} function __construct(){$this-&gt;c=fsockopen("127.0.0.1",9267);} function cBeg($s){fwrite($this-&gt;c, sprintf(self::Pc, $s));} function cEnd(){fwrite($this-&gt;c, self::PC);} function iBeg($o, $m){fwrite($this-&gt;c, sprintf(self::Pi, $o, $m));} function iEnd(){fwrite($this-&gt;c, self::PI);} function val($s){if(is_object($s))$this-&gt;obj($s);else $this-&gt;str((string)$s);} function res(){$r=sscanf(fread($this-&gt;c, 8192),"%s v=\"%[^\&quot;]\"");return $r[1];}} function gP() {static $p; if(!$p) $p=new P(); return $p;} class Java {var $java, $p; function __construct() {if(!func_num_args()) return; $this-&gt;p=gP(); $ar=func_get_args(); $this-&gt;p-&gt;cBeg(array_shift($ar)); foreach($ar as $arg) $this-&gt;p-&gt;val($arg); $this-&gt;p-&gt;cEnd(); $ar = sscanf($this-&gt;p-&gt;res(), "%d"); $this-&gt;java=$ar[0];} function __call($meth, $args) {$this-&gt;p-&gt;iBeg($this-&gt;java, $meth); foreach($args as $arg) $this-&gt;p-&gt;val($arg); $this-&gt;p-&gt;iEnd(); $proxy = new Java(); $ar = sscanf($this-&gt;p-&gt;res(), "%d"); $proxy-&gt;java=$ar[0]; $proxy-&gt;p=$this-&gt;p; return $proxy;} function toString() {$this-&gt;p-&gt;iBeg("", "castToString"); $this-&gt;p-&gt;val($this); $this-&gt;p-&gt;iEnd(); return base64_decode($this-&gt;p-&gt;res());}}<br>
<br>
// Test<br>
$i1 = new Java("java.math.BigInteger",  "1");<br>
$i2 = new Java("java.math.BigInteger",  "2");<br>
$i3 = $i1-&gt;add($i2);<br>
echo $i3-&gt;toString() . "\n";<br>
<br>
?&gt;<br>
</code>
</blockquote>
</p>
<p>The above simple "Java" class assumes that some Java VM has been
started on host "127.0.0.1", port "9267". And it cannot handle values
larger than 8192 bytes. Therefore the VM Bridge
library <code>Java.inc</code> should be used. Scripts should contain
the statement
<blockquote>
<code>
&nbsp;&nbsp;require_once("...java/Java.inc");
</code>
</blockquote>
at the beginning of each script. PHP compiles and caches PHP scripts, the <code>Java.inc</code> library is loaded only once.
</p>

<H4>What does "The requested method PUT is not allowed ... at localhost Port 80" mean?</H4>
<p>It means that <code>request.getServerPort()</code> is lying. Port 80 is privileged and therefore cannot be the servlet engine's server port.</p>
<p>If you use the AJP connector, for example via <code>ProxyPassMatch ^(/.*\.jsp)$ ajp://127.0.0.1$1</code>, set the correct <code>proxyPort</code> in <code>tomcat/conf/server.xml</code>. Example:
<blockquote>
<code>
&lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;<br>
- &lt;Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /&gt;<br>
+ &lt;Connector port="8009" protocol="AJP/1.3" proxyPort="8080" redirectPort="8443" /&gt;<br>
</code>
</blockquote>
 Please see the <a href="http://127.0.0.1:8080/docs/config/ajp.html#Proxy%20Support">AJP documentation<a> for details.

</BODY>
</HTML>
@


1.31
log
@*** empty log message ***
@
text
@d362 1
a362 1
Download and install the J2EE binary: copy <code>JavaBridge.war</code> into the tomcat <code>webapps</code> folder.<br>
d364 1
a364 18
Start tomcat, for example with: 
<blockquote>
<code>
JAVA_HOME=/usr/java/default /opt/tomcat/bin/catalina.sh run
</code>
</blockquote>
<li>
Move(!) all libraries from the created webapps/JavaBridge/WEB-INF/lib folder to the tomcat lib folder and remove(!) webapps/JavaBridge/WEB-INF/web.xml.
The only reason to keep the JavaBridge directory is the WEB-INF/cgi/launcher* FastCGI launcher and the java/Java.inc files. Example:
<blockquote>
<code>
mv /opt/tomcat/webapps/JavaBridge/WEB-INF/lib/* /opt/tomcat/lib<br>
rm /opt/tomcat/webapps/JavaBridge/WEB-INF/web.xml
</code>
</blockquote>
<li> 
Stop tomcat and remove webapps/JavaBridge.war. <em>Make sure that webapps/JavaBridge still exists, but without any libraries and web.xml!</em>
<blockquote></blockquote>
d366 1
a366 1
Add the lines marked with a <code>+</code> to the tomcat <code>conf/web.xml</code>:
d370 4
a373 9
   &lt;!-- ================== Built In Servlet Definitions ==================== --&gt;<br>
<br>

+    &lt;!-- PHP Servlet --&gt;<br>
+    &lt;listener&gt; &lt;listener-class&gt;php.java.servlet.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt;<br>
+    &lt;listener&gt; &lt;listener-class&gt;php.java.servlet.RequestListener&lt;/listener-class&gt; &lt;/listener&gt;<br>
+    &lt;servlet&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpJavaServlet&lt;/servlet-name&gt;<br>
+        &lt;servlet-class&gt;php.java.servlet.PhpJavaServlet&lt;/servlet-class&gt;<br>
d375 3
a377 6
+    &lt;!-- PHP CGI Servlet --&gt;<br>
+    &lt;servlet&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpCGIServlet&lt;/servlet-name&gt;<br>
+        &lt;servlet-class&gt;php.java.servlet.PhpCGIServlet&lt;/servlet-class&gt;<br>
+        &lt;init-param&gt; &lt;param-name&gt;shared_fast_cgi_pool&lt;/param-name&gt;&lt;param-value&gt;On&lt;/param-value&gt;&lt;/init-param&gt;<br>
+        &lt;init-param&gt; &lt;param-name&gt;prefer_system_php_exec&lt;/param-name&gt;&lt;param-value&gt;On&lt;/param-value&gt;&lt;/init-param&gt;<br>
d379 3
d383 2
a384 20
   &lt;!-- The default servlet for all web applications, that serves static     --&gt;<br>
   &lt;!-- resources.  It processes all requests that are not mapped to other   --&gt;<br>
[...]<br>
   &lt;!-- ================ Built In Servlet Mappings ========================= --&gt;<br>
<br>
+    &lt;!-- PHP Servlet Mapping --&gt;<br>
+    &lt;servlet-mapping&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpJavaServlet&lt;/servlet-name&gt;<br>
+        &lt;url-pattern&gt;*.phpjavabridge&lt;/url-pattern&gt;<br>
+    &lt;/servlet-mapping&gt;<br>
+    &lt;!-- CGI Servlet Mapping --&gt;<br>
+    &lt;servlet-mapping&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpCGIServlet&lt;/servlet-name&gt;<br>
+        &lt;url-pattern&gt;*.php&lt;/url-pattern&gt;<br>
+    &lt;/servlet-mapping&gt;<br>
<br>
   &lt;!-- The servlet mappings for the built in servlets defined above.  Note  --&gt;<br>
   &lt;!-- that, by default, the CGI and SSI servlets are *not* mapped.  You    --&gt;<br>
<br>
 &lt;/web-app&gt;<br>
a386 1
</p>
d388 1
a388 1
Start tomcat again.
d390 10
a399 4
To test the above settings copy test.php to some other web context, for example "examples", adjust its require/include path and browse to
<code>http://yourHost.com:8080/examples/test.php</code>.
</p>

@


1.30
log
@Release-5-4-3-1
@
text
@d23 8
d33 13
a45 1
<p>Only the PHP code from <code>JavaProxy.php</code> within your PHP web application and the Java libraries <code>JavaBridge.jar</code>, <code>php-script.jar</code> and <code>php-servlet.jar</code>.</p>
@


1.29
log
@Release-5-4-1
@
text
@d965 11
@


1.28
log
@Backward compatibility with BEA WL 8.1
@
text
@d197 2
a198 1
<p>All libraries and their dependencies must be loaded by one and only one class loader, for example with a single <code>java_require()</code> call. See the README for details.</p>
@


1.27
log
@java autostart removed
@
text
@d19 1
a19 1
<p>The VM Bridge is a network protocol, it requires a running Java VM, e.g. Apache/Tomcat. Or, if you want to call PHP libraries from Java, a running PHP container, e.g. Apache or IIS.</p>
d22 1
a22 1
<p>Only the PHP code from <code>Java.inc</code> and a running Java application, for example <code>JavaBridge.jar</code>, or a Java servlet, for example <code>JavaBridge.war</code>.</p>
d25 1
a25 1
<p>Only the PHP code from <code>JavaProxy.php</code> within your PHP web application and the Java libraries <code>JavaBridge.jar</code>, <code>php-script.jar</code> and <code>php-servlet.jar</code> and a <code>ContextLoaderListener</code> declaration within your Java web application.</p>
d39 2
a40 2
You can also add PHP support to your Java application by adding the
following line to its main class:
@


1.26
log
@Backward compatibility with BEA WL 8.1
@
text
@d36 1
a36 4
<p>Java needs an execution environment. Although there's a "java.so"
and a "php_java.dll", which can start Java as a sub process of a HTTP
server, a servlet engine or J2EE service is <a href="http://tomcat.apache.org">easier to install</a> and to
handle than a standalone Java process started from some HTTP server.
@


1.25
log
@Release 5.3.4
@
text
@d27 8
@


1.24
log
@Release 5.3.3.1
@
text
@d345 2
a346 1
Move(!) all libraries from the created webapps/JavaBridge/WEB-INF/lib folder to the tomcat lib folder. Example:
d349 2
a350 1
mv /opt/tomcat/webapps/JavaBridge/WEB-INF/lib/* /opt/tomcat/lib
d354 2
a355 1
Stop tomcat and remove webapps/JavaBridge.war. <em>Make sure that webapps/JavaBridge still exists but webapps/JavaBridge/WEB-INF/lib is empty!</em><br>
d376 1
d405 1
a405 1
To test the above settings copy test.php to some other web context, for example "examples" and browse to
@


1.23
log
@Release 5.3.3
@
text
@d21 5
a25 15
<H4>What about portability?</H4>
<p>A portable PHP application can use the "new Java(...)" constructor
and the "java(...)" function. To access a Java type use
<blockquote>
<code>
$System = java("java.lang.System");
</code>
</blockquote>
To create an instance of a Java type use
<blockquote>
<code>
$hashMap = new java("java.util.HashMap");
</code>
</blockquote>
</p>
a125 46
<H4>How do I start the bridge back end when there's another Java VM listening on port 8080?</H4>
<p>Simply deploy the VM Bridge web archive into the servlet engine or application server listening on port 8080. Or use a different port.</p>

<H4>What's the difference between SERVLET_LOCAL:8080 and INET_LOCAL:8080?</H4>
<p>The standalone option SERVLET_LOCAL emulates a servlet engine and starts a HTTP server which can select the fastest channel supported on this operating system. On Linux this is a named pipe created in /dev/shm or INET_LOCAL as a fall back.</p>
<p>INET_LOCAL always uses local TCP socket communication.</p>

<H4>Whenever I reboot my computer I have to start the bridge back end again. How can I automate this?</H4>
<p>Download and install a servlet engine or J2EE server as a Windows
or Unix service.</p>

<H4>Do I have to require Java.inc in each of my scripts? Isn't that very slow?</H4>
<p>In order to communicate with Java, a PHP "Java" class definition is needed. Here's a simple PHP "Java" class definition which fits into one line:
<blockquote>
<code>
&lt;?php<br>
// The following is the "Java" class definition, stripped down to fit into one line<br>
// To use this sample start Java with: java -jar JavaBridge.jar INET:9267<br>
// Or enable java.so or php_java.dll, which automatically start the above<br>
// process Then type: php sample.php<br>
//<br>
class P {const Pc="&lt;C v=\"%s\" p=\"I\"&gt;", PC="&lt;/C&gt;"; const Pi="&lt;I v=\"%d\" m=\"%s\" p=\"I\"&gt;", PI="&lt;/I&gt;"; const Ps="&lt;S v=\"%s\"/&gt;", Pl="&lt;L v=\"%d\" p=\"%s\"/&gt;", Po="&lt;O v=\"%d\"/&gt;"; private $c; function str($s){fwrite($this-&gt;c, sprintf(self::Ps, $s));} function obj($s){fwrite($this-&gt;c, sprintf(self::Po, $s-&gt;java));} function __construct(){$this-&gt;c=fsockopen("127.0.0.1",9267);} function cBeg($s){fwrite($this-&gt;c, sprintf(self::Pc, $s));} function cEnd(){fwrite($this-&gt;c, self::PC);} function iBeg($o, $m){fwrite($this-&gt;c, sprintf(self::Pi, $o, $m));} function iEnd(){fwrite($this-&gt;c, self::PI);} function val($s){if(is_object($s))$this-&gt;obj($s);else $this-&gt;str((string)$s);} function res(){$r=sscanf(fread($this-&gt;c, 8192),"%s v=\"%[^\&quot;]\"");return $r[1];}} function gP() {static $p; if(!$p) $p=new P(); return $p;} class Java {var $java, $p; function __construct() {if(!func_num_args()) return; $this-&gt;p=gP(); $ar=func_get_args(); $this-&gt;p-&gt;cBeg(array_shift($ar)); foreach($ar as $arg) $this-&gt;p-&gt;val($arg); $this-&gt;p-&gt;cEnd(); $ar = sscanf($this-&gt;p-&gt;res(), "%d"); $this-&gt;java=$ar[0];} function __call($meth, $args) {$this-&gt;p-&gt;iBeg($this-&gt;java, $meth); foreach($args as $arg) $this-&gt;p-&gt;val($arg); $this-&gt;p-&gt;iEnd(); $proxy = new Java(); $ar = sscanf($this-&gt;p-&gt;res(), "%d"); $proxy-&gt;java=$ar[0]; $proxy-&gt;p=$this-&gt;p; return $proxy;} function toString() {$this-&gt;p-&gt;iBeg("", "castToString"); $this-&gt;p-&gt;val($this); $this-&gt;p-&gt;iEnd(); return base64_decode($this-&gt;p-&gt;res());}}<br>
<br>
// Test<br>
$i1 = new Java("java.math.BigInteger",  "1");<br>
$i2 = new Java("java.math.BigInteger",  "2");<br>
$i3 = $i1-&gt;add($i2);<br>
echo $i3-&gt;toString() . "\n";<br>
<br>
?&gt;<br>
</code>
</blockquote>
</p>
<p>The above simple "Java" class assumes that some Java VM has been
started on host "127.0.0.1", port "9267". And it cannot handle values
larger than 8192 bytes. Therefore the VM Bridge
library <code>Java.inc</code> should be used. Scripts should contain
the statement
<blockquote>
<code>
&nbsp;&nbsp;require_once("...java/Java.inc");
</code>
</blockquote>
at the beginning of each script. PHP compiles and caches PHP scripts, the <code>Java.inc</code> library is loaded only once.
</p>

a147 61
<H4>How do I create a distributable PHP web application and how can users publish PHP/Java pages?</H4>
<p>
Check if the ISP supports Java. Look for a servlet engine like "tomcat" or a J2EE application server like "resin". Check if your ISP supports PHP >= 4.3.2.
</p>
<p>
In the following example we'll call our web context "webContext".
</p>
<p> Unzip the JavaBridge.jar file and edit Java.inc, replace 8080 with your j2EE port number and JAVA_SERVLET=On to JAVA_SERVLET=User. Example for Linux:
<blockquote>
<code>
mkdir webContext <br>
cd webContext <br>
jar xvf ../JavaBridge.war<br>
</code>
</blockquote>
Edit <code>java/Java.inc</code> as follows (lines marked with a "-" should be 
removed, lines marked with a "+" should be added):
<blockquote>
<code>
&nbsp;&nbsp;if(!defineHostFromInitialQuery($JAVA_BASE)) {<br>
-&nbsp;define("JAVA_HOSTS", "127.0.0.1:8080");<br>
+&nbsp;define("JAVA_HOSTS", "127.0.0.1:YOUR_J2EE_PORT_NUMBER");<br>
-&nbsp;define("JAVA_SERVLET", "On");<br>
+&nbsp;define("JAVA_SERVLET", "User");<br>
&nbsp;&nbsp;}<br>
</code>
</blockquote>
</p>
<p>
Create a Java web archive, for example "webContext.war". Example for Linux:
<blockquote>
<code>
# ... still within the webContext directory ... <br>
cp ../myJavaLibs/*.jar WEB-INF/lib/ <br>
cp ../myPhpPages/*.php . <br>
jar cvf ../webContext.war *<br>
</code>
</blockquote>
Users can deploy it into their J2EE application server or servlet engine. Example for Linux:
<blockquote>
<code>
cp ../webContext.war /usr/share/tomcat5/webapps/<br>
</code>
</blockquote>
</p>
<p>
Then they need to copy or symlink the created web context "webContext" (or whatever you've called it) to their Apache or IIS document root directory. Example for Linux:
<blockquote>
<code>
ln -s /usr/share/tomcat5/webapps/webContext /var/www/html/webContext<br>
</code>
</blockquote>
</p>
<p>
After restarting the HTTP server, they can
browse to <code>http://HOSTNAME/webContext/yourPhpScript.php</code>. Again, replace the web context "webContext" with the name of your web context.
</p>
<p>NOTE: If users want to run the Java VM on a different computer, they need to start 
Tomcat or the J2EE server on that computer using the option <code>-Dphp.java.bridge.promiscuous=true</code>.
And change the <code>127.0.0.1</code> above to the IP address of the computer running
the Java VM and make sure that the computer cannot be accessed directly from the internet!
d158 3
d447 9
d464 1
a464 1
Remove all VM Bridge libraries from your application.war file and install them in the tomcat lib folder or some other folder which has the necessary privileges.
d585 1
a585 1
PHP scripts must explicitly allocate a session with <code><a href="documentation/PHP-API/html/java_8c.html#doc25">java_session()</a></code>. For example:
d608 1
a608 9
e.g. <code>java_session()-&gt;put("buf", $stringBuffer)</code> or via
<code>$_SESSION["buf"]=$stringBuffer</code>. The
<code>$_SESSION</code> is syntactic sugar provided by the <a
href="http://www.php.net/manual/en/ref.session.php">php session
module</a>, it uses <code><a
href="documentation/PHP-API/html/java_8c.html#doc25">java_session()<a></code>
internaly. If you don't want depend on the PHP session module, for
example if you have compiled PHP without the <code>session.so</code>,
use java_session() instead.</p> 
a765 10
The following code example could cause an OutOfMemoryError:<br><br>
<code>
&lt;?php<br>
session_start();<br>
if(!$_SESSION["buffer"]) $_SESSION["buffer"]=new java("java.lang.StringBuffer");<br>
$_SESSION["buffer"]-&gt;append(...);<br>
?&gt;
</code>
</p>
<p>
d774 1
a774 1
By using <a href="documentation/PHP-API/html/java_8c.html#doc32"><code>java_closure()</code></a> and the visitor pattern for example. The <code>tests.php5</code> folder contains a <code>script_api.php</code> example which shows how to implement <code>java.lang.Runnable</code> to run multiple PHP threads, concurrently accessing a shared resource.
d909 46
@


1.22
log
@Apache/IIS and JSR 223 integration
@
text
@d5 1
a5 1
	<TITLE>PHP/ Java Bridge FAQ</TITLE>
d7 1
a7 1
<H1>PHP/Java Bridge FAQ</H1>
d15 1
a15 1
<p>The only free alternatives are SOAP and XML-RPC, which are up to 50 times slower than the XML protocol implementation used by this PHP/Java Bridge.</p>
d19 1
a19 1
<p>The PHP/Java Bridge is a network protocol, it requires a running Java VM, e.g. Apache/Tomcat. Or, if you want to call PHP libraries from Java, a running PHP container, e.g. Apache or IIS.</p>
d137 1
a137 1
<p>Simply deploy the PHP/Java Bridge web archive into the servlet engine or application server listening on port 8080. Or use a different port.</p>
d171 1
a171 1
larger than 8192 bytes. Therefore the PHP/Java Bridge
d250 1
a250 1
Then they need to copy or symlink the created web context "webContext" (or whatever you've called it) to their Apache or IIS htdocs (sometimes called "public_html") directory. Example for Linux:
d253 1
a253 1
ln -s /usr/share/tomcat5/webapps/webContext $HOME/public_html/webContext<br>
d276 1
a276 1
<p>No. Use PHP/Java Bridge version 4.3.2 or below instead.</p>
d284 1
a284 1
<H4>Where can I store my java libraries for the PHP/Java Bridge?</H4>
d341 1
a341 1
<H4>How do I set up a load balancer for the PHP/Java Bridge cluster?</H4>
d343 1
a343 1
Set up the PHP/Java Bridge cluster as <a href="#cluster">described below</a>. The example uses two nodes named "carlos" and "diego". The HTTP server front end runs on the web server "timon".
d384 1
a384 1
Download tomcat 5 or higher, a Java JRE 5 or higher and the PHP/Java Bridge 4.1.6 or higher.
d569 1
a569 1
Remove all PHP/Java Bridge libraries from your application.war file and install them in the tomcat lib folder or some other folder which has the necessary privileges.
d615 1
a615 1
         &lt;init-param&gt;<br>
d618 1
a618 1
         &lt;/init-param&gt;<br>
d621 1
a621 1
 Open a local port in the tomcat <code>conf/server.xml</code> (only necessary if you have disabled the official non-SSL port):
d624 1
a624 13
  &lt;Service name="Catalina"&gt;<br>
     [...]<br>
     &lt;Connector port="9157" address="127.0.0.1"  /&gt;<br>
     [...]<br>
  &lt;/Service&gt;<br>
</code>
</blockquote>
 Set the communication port in the PHP <code>.ini</code> (the <code>phpinfo()</code> or <code>test.php</code> displays the location of the responsible <code>.ini</code> file):
<blockquote>
<code>
  [java]<br>
  java.hosts = 127.0.0.1:9157<br>
  java.servlet = User<br>
d628 1
a628 2
If you want to use the official non-SSL port (usually port number
8080), change the <code>java.hosts</code> line accordingly.<p>
d830 1
a830 1
>PHP5 + PHP/Java Bridge 4.3.3</TD
d869 1
a869 1
 the object is referenced by a thread outside of the scope of the PHP/Java Bridge.</li>
d873 1
a873 1
<p>When a <code>java.lang.OutOfMemoryError</code> reaches the request-handling thread, the PHP/Java Bridge thread pool removes the thread from its pool and writes a message <code>FATAL: OutOfMemoryError</code> to the PHP/Java Bridge log file. The session store is cleaned and all client connections are terminated without confirmation.
d876 1
a876 1
If the OutOfMemoryError persists, this means that a thread outside of the PHP/Java Bridge has caused this error condition.
@


1.22.2.1
log
@Release 5.3.3
@
text
@d5 1
a5 1
	<TITLE>VM Bridge FAQ</TITLE>
d7 1
a7 1
<H1>VM Bridge FAQ</H1>
d15 1
a15 1
<p>The only free alternatives are SOAP and XML-RPC, which are up to 50 times slower than the XML protocol implementation used by this VM Bridge.</p>
d19 1
a19 1
<p>The VM Bridge is a network protocol, it requires a running Java VM, e.g. Apache/Tomcat. Or, if you want to call PHP libraries from Java, a running PHP container, e.g. Apache or IIS.</p>
d137 1
a137 1
<p>Simply deploy the VM Bridge web archive into the servlet engine or application server listening on port 8080. Or use a different port.</p>
d171 1
a171 1
larger than 8192 bytes. Therefore the VM Bridge
d276 1
a276 1
<p>No. Use VM Bridge version 4.3.2 or below instead.</p>
d284 1
a284 1
<H4>Where can I store my java libraries for the VM Bridge?</H4>
d341 1
a341 1
<H4>How do I set up a load balancer for the VM Bridge cluster?</H4>
d343 1
a343 1
Set up the VM Bridge cluster as <a href="#cluster">described below</a>. The example uses two nodes named "carlos" and "diego". The HTTP server front end runs on the web server "timon".
d384 1
a384 1
Download tomcat 5 or higher, a Java JRE 5 or higher and the VM Bridge 4.1.6 or higher.
d569 1
a569 1
Remove all VM Bridge libraries from your application.war file and install them in the tomcat lib folder or some other folder which has the necessary privileges.
d843 1
a843 1
>PHP5 + VM Bridge 4.3.3</TD
d882 1
a882 1
 the object is referenced by a thread outside of the scope of the VM Bridge.</li>
d886 1
a886 1
<p>When a <code>java.lang.OutOfMemoryError</code> reaches the request-handling thread, the VM Bridge thread pool removes the thread from its pool and writes a message <code>FATAL: OutOfMemoryError</code> to the VM Bridge log file. The session store is cleaned and all client connections are terminated without confirmation.
d889 1
a889 1
If the OutOfMemoryError persists, this means that a thread outside of the VM Bridge has caused this error condition.
@


1.22.2.2
log
@Release 5.3.3
@
text
@d615 1
a615 1
         &lt;context-param&gt;<br>
d618 1
a618 1
         &lt;/context-param&gt;<br>
d621 1
a621 1
Either fetch the <code>Java.inc</code> directly from your back end (which also adjusts the <code>JAVA_HOSTS</code>) or change the <code>JAVA_HOSTS</code> option, for example:
d624 13
a636 1
define("JAVA_HOSTS", "127.0.0.1:9090");
d640 2
a641 1
<p>
@


1.22.2.3
log
@Release 5.3.3
@
text
@d250 1
a250 1
Then they need to copy or symlink the created web context "webContext" (or whatever you've called it) to their Apache or IIS document root directory. Example for Linux:
d253 1
a253 1
ln -s /usr/share/tomcat5/webapps/webContext /var/www/html/webContext<br>
@


1.21
log
@Apache/IIS and JSR 223 integration
@
text
@d285 1
a285 1
<p>Either within  your web application <code>WEB-INF/web.xml</code> directory or in <code>php.java.bridge.base</code>/lib.</p>
d306 1
a306 1
<p>All interconnected libraries must be loaded by one class loader, for example by a single <code>java_require()</code> call. Furthermore all libraries must be stored at unique locations and all class loaders must load libraries from unique locations. See the README for details.</p>
@


1.20
log
@Apache/IIS and JSR 223 integration
@
text
@d307 1
a307 1
<p><strong>Please do not report NoClassDefFoundErrors to the mailing list or via the bug tracker. This is not a bug and we cannot help you any further!</strong></p>
d569 1
a569 1
Remove all PHP/Java Bridge libraries from your application.war file and install them in the tomcat lib folder or some other folder which has the neccessary privileges.
@


1.19
log
@Release-5-3-2-1
@
text
@d17 3
a19 2
<H4>Does it support PHP 4?</H4>
<p>No. Use PHP/Java Bridge version 4.3.2 or below instead.</p>
d90 26
d275 3
d280 1
a280 1
<a name="java-require">
d282 1
a282 1
<p> With <code>java_require("myApplication.jar;myLib1.jar;myDriver1.jar;...");</code>. See the README for details.</p>
d285 1
a285 1
<p>In <code>php.java.bridge.base</code>/lib.</p>
d303 1
d305 3
a307 1
<p>Because Java doesn't have a module system. All interconnected libraries must be loaded with a single <code>java_require()</code> call. See the README for details.</p>
d565 7
@


1.18
log
@Release-5-3-1
@
text
@d47 1
a47 1
static final php.java.bridge.JavaBridgeRunner runner = php.java.bridge.JavaBridgeRunner.getRequiredInstance(8087);
d95 1
@


1.17
log
@Release-5-2-2
@
text
@d354 1
a354 3
"carlos" and "diego". The web server is running on a third machine
which has full access to both nodes (at least it needs access to the
ports from the range [9267, [9367).
d402 1
a402 1
JAVA_OPTS="-Dphp.java.bridge.promiscuous=true" JAVA_HOME=/opt/jdk1.5 bin/catalina.sh run
d406 3
a408 6
<p>Start the web server on the third computer "timon". For example with the command:
<blockquote>
<code>
apachectl restart
</code>
</blockquote>
d410 9
a418 1
<p>Create a PHP script called "sessionSharing-diego.php" and copy it into the web server document root (usually "/var/www/html" or "~/public_html") on "timon":
d421 1
a421 11
&lt;?php<br>
require_once("http://diego:8080/JavaBridge/java/Java.inc"); // change to "java/Java.inc" if you use a load balancer<br>
$session = java_session();<br>
if(is_null($session-&gt;get("counter"))) <br>
&nbsp;&nbsp;$session-&gt;put("counter", new Java("java.lang.Integer", 1));<br>
<br>
$counter = java_values($session-&gt;get("counter"));<br>
print "HttpSession variable \"counter\": $counter&lt;br&gt;\n";<br>
$next = new Java("java.lang.Integer", $counter+1);<br>
$session-&gt;put("counter", $next);<br>
?&gt;<br>
d424 2
a425 2
</p>
<p>Create a PHP script called "sessionSharing-carlos.php" and copy it into the web server document root (usually "/var/www/html" or "~/public_html") on "timon":
d428 1
a428 11
&lt;?php<br>
require_once("http://carlos:8080/JavaBridge/java/Java.inc"); // change to "java/Java.inc" if you use a load balancer<br>
$session = java_session();<br>
if(is_null($session-&gt;get("counter"))) <br>
&nbsp;&nbsp;$session-&gt;put("counter", new Java("java.lang.Integer", 1));<br>
<br>
$counter = java_values($session-&gt;get("counter"));<br>
print "HttpSession variable \"counter\": $counter&lt;br&gt;\n";<br>
$next = new Java("java.lang.Integer", $counter+1);<br>
$session-&gt;put("counter", $next);<br>
?&gt;<br>
d431 4
a434 42
</p>
<p>Start a web brower and remove all cookies</p>
<p>
Browse to <code>http://timon/sessionSharing-carlos.php</code> and check the generated cookie. It should have the key "JSESSIONID", host attribute "timon" and the path attribute "/". The value should be "1". Click on the browser refresh button to increase the value.
</p>
<p>
Use the same browser window and navigate to <code>http://timon/sessionSharing-diego.php</code> and check if there is still only one cookie with the same attributes as before. The value should be "3"
</p>
<p>
Use the same browser window and navigate to <code>http://timon/sessionSharing-carlos.php</code> and check if there is still only one cookie with the same attributes as before. The value should be "4".
</p>
<p>
Switch off "diego" and start it again.
</p>
<p>
Use the same browser window and navigate to <code>http://timon/sessionSharing-diego.php</code> and check if there is still only one cookie with the same attributes as before. The value should be "5"
</p>
<p>
Switch off "carlos".
</p>
<p>
Use the same browser window and navigate to <code>http://timon/sessionSharing-carlos.php</code> and check if you get an exception.
</p>
<p>
Start "carlos".
</p>
<p>
Use the same browser window and navigate to <code>http://timon/sessionSharing-carlos.php</code> and check if there is still only one cookie with the same attributes as before. The value should be "6"
</p>
<p>
Please see your HTTP server documentation and <a href="#load-balancing">the description above</a> how to set it up as a load balancer. This differs from the architecture described above in that the load balancer forwards the requests to the nodes and the nodes run PHP using the FastCGI mechanism.
</p>
</a>
<a name="global-servlet">
<H4>I want to use PHP for all tomcat applications. Apache and IIS are not available, but performance is important. How do I install it?</H4>
</a>
<p> Check if your PHP cgi binary supports the <code>-b</code> flag. If not, compile PHP with the <code>--enable-fastcgi</code> option </p>
<p>
Download and install the J2EE binary: copy <code>JavaBridge.war</code> into the tomcat <code>webapps</code> folder.
</p>
<p>
Copy the <code>JavaBridge.jar</code> and the <code>php-servlet.jar</code> from the JavaBridge.war into the tomcat <code>shared/lib</code> folder. Uncomment the <code>shared_fast_cgi_pool</code> parameter in the <code>JavaBridge/WEB-INF/web.xml</code> and add the lines marked with a <code>+</code> to the tomcat <code>conf/web.xml</code>:
d440 1
d442 2
d452 1
a452 6
+        &lt;init-param&gt;<br>
+        &lt;!-- Remember to set the shared_fast_cgi_pool option --&gt;<br>
+        &lt;!-- in JavaBridge/WEB-INF/web.xml to On, too. --&gt;<br>
+        &lt;param-name&gt;shared_fast_cgi_pool&lt;/param-name&gt;<br>
+        &lt;param-value&gt;On&lt;/param-value&gt;<br>
+        &lt;/init-param&gt;<br>
d478 5
a482 6
To test the above settings create a directory <code>testapp</code> and copy the <code>test.php</code> file from the <code>JavaBridge.war</code> into this folder. Type <code>cd testapp; jar cf ../testapp.war *</code> and copy the testapp.war into the tomcat <code>webapps</code> folder.
Restart tomcat, browse to 
<code>http://yourHost.com:8080/testapp/test.php</code>.
</p>
<p>
Check if the PHP Fast-CGI server is running. The process list should display 5 (default) PHP instances waiting in the PHP Fast-CGI pool. If not, check if your PHP binary has been compiled with Fast-CGI enabled. Copy a Fast-CGI enabled binary into the <code>webapps/JavaBridge/WEB-INF/cgi/</code> folder, if necessary.
d484 2
a530 38
<a name="http-front-end">
<H4>I want to use Apache/IIS as a front-end and tomcat as a back end. How do I enable PHP for all my applications?</H4>
</a>
<p>
Download and install the J2EE binary: copy <code>JavaBridge.war</code> into the tomcat <code>webapps</code> folder.
Check if the tomcat <code>webapps</code> directory is shared with the Apache/IIS <code>htdocs</code> directory. If not, change the Apache/IIS setting, the following example is for Apache 2. Edit e.g. <code>/etc/httpd/conf/httpd.conf</code> as follows: 
<blockquote>
<code>
 # documents. By default, all requests are taken from this directory, but<br>
 # symbolic links and aliases may be used to point to other locations.<br>
 #<br>
-DocumentRoot "/var/www/html"<br>
+DocumentRoot "/var/lib/tomcat5/webapps"<br>
<br>
 #<br>
 # Each directory to which Apache has access can be configured with respect<br>
 #<br>
 # This should be changed to whatever you set DocumentRoot to.<br>
 #<br>
-&lt;Directory "/var/www/html"&gt;<br>
+&lt;Directory "/var/lib/tomcat5/webapps"&gt;<br>
</code>
</blockquote>
</p>
<p>
Edit the <code>java.host</code> and <code>java.servlet</code> options in your <code>Java.inc</code> or, if you use the C implementation, the <code>php.ini</code>:
<blockquote>
<code>
[java]<br>
java.hosts = 127.0.0.1:8080<br>
java.servlet = On<br>
</code>
</blockquote>
</p>
To test the above settings create a directory <code>testapp</code> and copy the <code>sessionSharing.php</code> file from the <code>JavaBridge.war</code> into this folder. Type <code>cd testapp; jar cf ../testapp.war *</code> and copy the testapp.war into the tomcat <code>webapps</code> folder.
Restart Apache or IIS and tomcat, browse to 
<code>http://localhost/testapp</code>, click on sessionSharing.php and check the generated cookie value. The <code>path</code> value must be <code>/</code>.
</p>
d535 3
a537 85
<p>
Download the J2EE binary and copy the <code>JavaBridge.jar</code> and the <code>php-servlet.jar</code> from the JavaBridge.war into the tomcat <code>shared/lib</code> folder. Add the lines marked with a <code>+</code> to the tomcat <code>conf/web.xml</code>:
<blockquote>
<code>
<br>
   &lt;!-- ================== Built In Servlet Definitions ==================== --&gt;<br>
<br>
+    &lt;!-- PHP Servlet --&gt;<br>
+    &lt;servlet&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpJavaServlet&lt;/servlet-name&gt;<br>
+        &lt;servlet-class&gt;php.java.servlet.PhpJavaServlet&lt;/servlet-class&gt;<br>
+    &lt;/servlet&gt;<br>
<br>
   &lt;!-- The default servlet for all web applications, that serves static     --&gt;<br>
   &lt;!-- resources.  It processes all requests that are not mapped to other   --&gt;<br>
[...]<br>
   &lt;!-- ================ Built In Servlet Mappings ========================= --&gt;<br>
<br>
+    &lt;!-- PHP Servlet Mapping --&gt;<br>
+    &lt;servlet-mapping&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpJavaServlet&lt;/servlet-name&gt;<br>
+        &lt;url-pattern&gt;*.phpjavabridge&lt;/url-pattern&gt;<br>
+    &lt;/servlet-mapping&gt;<br>
<br>
   &lt;!-- The servlet mappings for the built in servlets defined above.  Note  --&gt;<br>
   &lt;!-- that, by default, the CGI and SSI servlets are *not* mapped.  You    --&gt;<br>
<br>
 &lt;/web-app&gt;<br>
</code>
</blockquote>
</p>
<p>
Check if the tomcat <code>webapps</code> directory is shared with the Apache/IIS <code>htdocs</code> directory. If not, change the Apache/IIS setting, the following example is for Apache 2. Edit e.g. <code>/etc/httpd/conf/httpd.conf</code> as follows: 
<blockquote>
<code>
 # documents. By default, all requests are taken from this directory, but<br>
 # symbolic links and aliases may be used to point to other locations.<br>
 #<br>
-DocumentRoot "/var/www/html"<br>
+DocumentRoot "/var/lib/tomcat5/webapps"<br>
<br>
 #<br>
 # Each directory to which Apache has access can be configured with respect<br>
 #<br>
 # This should be changed to whatever you set DocumentRoot to.<br>
 #<br>
-&lt;Directory "/var/www/html"&gt;<br>
+&lt;Directory "/var/lib/tomcat5/webapps"&gt;<br>
</code>
</blockquote>
</p>
<p>
Now that tomcat knows how to handle PHP <code>.phpjavabridge</code> requests and Apache or IIS can access the tomcat webapps, connect the two components: Edit the <code>java.host</code> and <code>java.servlet</code> options in your <code>Java.inc</code> or, if you use the C implementation, the <code>php.ini</code>:
<blockquote>
<code>
[java]<br>
java.hosts = 127.0.0.1:8080<br>
java.servlet = User<br>
</code>
</blockquote>
The above <code>User</code> setting enables session sharing between PHP and JSP, it forwards from <code>http://host<em>/myApp/foo.php</em></code> to the tomcat back end at <code>127.0.0.1:8080</code> using the request <code>PUT <em>/myApp/foo.php</em>javabridge</code>. This triggers the <code>GlobalPhpJavaServlet</code> configured in the tomcat <code>web.xml</code>.
</p>
<p>
Now you need to do the same for JSP. Unlike the PHP/Java Bridge, which only forwards embedded java statements, the tomcat <code>mod_jk</code> adapter must forward all JSP requests.
Download and install <code>mod jk</code>, for example
<code>jakarta-tomcat-connectors-1.2.14.1-src.tar.gz</code>, extract the file into a
folder and type the following commands:
<blockquote>
<code>
cd jakarta-tomcat-connectors-1.2.14.1-src/jk/native/<br>
./configure --with-apxs && make && su -c "make install"<br>
</code>
</blockquote>
Add the following lines to the end of the <code>httpd.conf</code>, the following example is for Apache 2:
<blockquote>
<code>
LoadModule jk_module modules/mod_jk.so<br>
JkAutoAlias /var/lib/tomcat5/webapps<br>
JkMount *.jsp ajp13<br>
</code>
</blockquote>
</p>
To test the above settings create a directory <code>testapp</code> and copy the <code>sessionSharing.php</code> and <code>sessionSharing.jsp</code> from the <code>JavaBridge.war</code> into this folder. Type <code>cd testapp; jar cf ../testapp.war *</code> and copy the testapp.war into the tomcat <code>webapps</code> folder.
Restart Apache or IIS and tomcat, browse to 
<code>http://localhost/testapp</code>, click on sessionSharing.php and check the generated cookie value. The <code>path</code> value must be <code>/testapp</code>. Click on sessionSharing.jsp.
@


1.16
log
@Release-5-2-1
@
text
@d129 1
a129 1
class P {const Pc="&lt;C v=\"%s\" p=\"I\"&gt;", PC="&lt;/C&gt;"; const Pi="&lt;I v=\"%d\" m=\"%s\" p=\"I\"&gt;", PI="&lt;/I&gt;"; const Ps="&lt;S v=\"%s\"/&gt;", Pl="&lt;L v=\"%d\" p=\"%s\"/&gt;", Po="&lt;O v=\"%d\"/&gt;"; private $c; function str($s){fwrite($this-&gt;c, sprintf(self::Ps, $s));} function obj($s){fwrite($this-&gt;c, sprintf(self::Po, $s-&gt;java));} function __construct(){$this-&gt;c=fsockopen("127.0.0.1",9267);} function cBeg($s){fwrite($this-&gt;c, sprintf(self::Pc, $s));} function cEnd(){fwrite($this-&gt;c, self::PC);} function iBeg($o, $m){fwrite($this-&gt;c, sprintf(self::Pi, $o, $m));} function iEnd(){fwrite($this-&gt;c, self::PI);} function val($s){if(is_object($s))$this-&gt;obj($s);else $this-&gt;str((string)$s);} function res(){$r=sscanf(fread($this-&gt;c, 8192),"%s v=\"%[^\&quot;]\"");return $r[1];}} class Java {var $java, $p; function __construct() {if(!func_num_args()) return; $this-&gt;p=new P(); $ar=func_get_args(); $this-&gt;p-&gt;cBeg(array_shift($ar)); foreach($ar as $arg) $this-&gt;p-&gt;val($arg); $this-&gt;p-&gt;cEnd(); $ar = sscanf($this-&gt;p-&gt;res(), "%d"); $this-&gt;java=$ar[0];} function __call($meth, $args) {$this-&gt;p-&gt;iBeg($this-&gt;java, $meth); foreach($args as $arg) $this-&gt;p-&gt;val($arg); $this-&gt;p-&gt;iEnd(); $proxy = new Java(); $ar = sscanf($this-&gt;p-&gt;res(), "%d"); $proxy-&gt;java=$ar[0]; $proxy-&gt;p=$this-&gt;p; return $proxy;} function toString() {$this-&gt;p-&gt;iBeg("", "castToString"); $this-&gt;p-&gt;val($this); $this-&gt;p-&gt;iEnd(); return base64_decode($this-&gt;p-&gt;res());}}<br>
@


1.15
log
@Release-5-0-1
@
text
@d37 19
a55 2
<p>Not necessarily. But a servlet engine or J2EE service is easier to
install and to handle than a standalone Java service.
a56 1

d116 2
a117 1
<p>Download and install a servlet engine or J2EE server, for example tomcat.</p>
d120 26
a145 1
<p>The PHP/Java Bridge library <code>Java.inc</code> must be included before it can be used. Therefore the scripts should contain the statement
d151 1
a151 1
at the beginning of the script. PHP compiles and caches PHP scripts, the <code>Java.inc</code> library is loaded only once.
d160 6
d1175 5
@


1.14
log
@Release-5-0-0
@
text
@d37 2
a38 25
<p>Not necessarily. The bridge and the VM can run as a sub component
of IIS or Apache. If you have compiled and installed the support
library "java.so" or "php_java.dll", it can automatically start a VM when
the HTTP server activates the PHP script engine pool (in
<code>minit()</code>) and terminates it when the pool is destroyed (in
the <code>mshutdown()</code> hook). The request-handling threads
attach to the persistent VM using the PHP/Java Bridge protocol.
</p>
<p>
However, the main advantage of starting the VM via an external
application server or servlet engine is that it provides a standard
execution environment for Java which is independent of the HTTP server
and how it manages its internal PHP script engine pool.
</p>
<p>
A simple "servlet engine" emulation is built into the
JavaBridge.jar. It can be started by double-clicking on JavaBridge.jar
or with the command:
<blockquote>
<code>
java JVM-OPTIONS -jar JavaBridge.jar SOCKET LOG-LEVEL LOG-FILE
</code>
</blockquote>
Please see the output of <code>java -jar JavaBridge.jar --help</code>
and the INSTALL.STANDALONE document for details.
d201 1
d203 1
a203 1
<p> With <code>java_require("foo.jar;bar.jar;...");</code>. See the README for details.</p>
d228 1
a228 1
<p>The <code>java_require()</code> uses the current class loader, not the bootstrap loader. Use:
d231 1
a231 1
&nbsp;&nbsp;java_require("foo.jar");<br>
d233 12
a244 1
&nbsp;&nbsp;Class.forName("foo",true,Thread.currentThread().getContextClassLoader());<br>
d247 1
a247 1
instead.
@


1.13
log
@Release-4-3-3
@
text
@a898 1
java_begin_document();<br>
a907 1
java_end_document();<br>
@


1.12
log
@Release-4-3-0
@
text
@d18 1
a18 9
<p>Yes. But for PHP versions < 5.1.4 you must compile and install a support library called "java.so" or "php_java.dll" from the C sources; please see the INSTALL document for details.</p>
<p>Use the following code to detect the binary and skip loading the Java.inc:
<blockquote>
<code>
if(!extension_loaded("java"))<br>
&nbsp;&nbsp;require_once("http://localhost:8080/JavaBridge/java/Java.inc");
</code> 
</blockquote>
</p>
a34 20
<p>PHP 4 does not support exceptions. And results from method
invocations and property access are always converted into the appropriate PHP
value. For example the following code does <strong>not</strong> work in PHP 4:
<blockquote>
<code>
$s = new Java("java.lang.String", '${var}');<br>
$s = $s-&gt;substring(2); // PHP4 returns a PHP string, not a Java string <br>
echo $s-&gt;substring(0,$s-&gt;length()-1);<br>
</code>
</blockquote>
</p>
<p>PHP 4 needs a "java.so" or "php_java.dll" support library. Use the following code to load it:
<code>
&lt;?php<br>
if(!extension_loaded("java")) require_once("http://localhost:8080/JavaBridge/java/Java.inc");<br>
...<br>
?&gt;
</code>
</blockquote>
</p>
d57 1
a57 1
java JVM-OPTIONS -jar BRIDGE-OPTIONS JavaBridge.jar SOCKET LOG-LEVEL LOG-FILE
d64 11
a74 6
<H4>How can I configure the bridge?</H4>

<p>You may add a file <code>java.ini</code> to your project or to the
directory which contains the PHP module descriptions
(usually <code>/etc/php.d/</code> on Linux) with the following
content:
d77 1
a77 4
;extension=java.so ;; or php_java.dll, uncomment if you have compiled and installed the extension<br>
[java]<br>
;java.hosts=127.0.0.1:8080 ;; the location of your Java process<br>
;java.servlet=On ;; or Off or User <br>
d81 13
a93 6
<p>However, it is recommended to not use a ini file and to not store any Java
related information in the global php.ini file. When the library is
loaded
via <code>require_once("http://SERVER:PORT/path/to/Java.inc");</code>,
it has all the information needed to locate the running Java
process.
d96 1
a96 1
<H4>What if the Java back end is not available anymore?</H4>
d98 15
a112 4
<p>
Then the bridge uses the next entry from the <code>java.hosts</code>
list. If there are no more entries, the php function java_server_name()
returns null and all other java procedures cannot be used anymore.
a204 9
Users who want to use the C implementation, "java.so" or "php_java.dll", need to edit the php.ini so that the java.hosts and java.servlet point to their servlet/J2EE back end. Example:
<blockquote>
<code>
java.hosts=127.0.0.1:8080 # replace 8080 with the port number of your J2EE server<br>
java.servlet="User" # or "On" or "/webContext/JavaBridge.phpjavabridge"<br>
</code>
</blockquote>
</p>
<p>
a268 26
<H4>Ho do I enable logging?</H4>
<p>
Copy <code>log4j.jar</code> into <code>java.ext.dirs</code>. Example for JDK 6:
<blockquote>
<code>
cp log4j.jar /usr/java/packages/lib/ext
</code>
</blockquote>
</p>
<p>
Start the log4j viewer. Example for JDK 6:
<blockquote>
<code>
/opt/jdk1.6/bin/java org.apache.log4j.chainsaw.Main
</code>
</blockquote>
</p>
<p>
Start the application server with the options <code>-Dphp.java.bridge.default_log_level=LEVEL</code>. Example for tomcat:
<blockquote>
<code>
JAVA_HOME=/opt/jdk1.6 JAVA_OPTS="-Dphp.java.bridge.default_log_level=5" bin/catalina.sh run
</code>
</blockquote>
</p>

d762 1
a762 1
<p>By providing PHP beans and a description how to manage them, as usual. IOC (sometimes called "dependency injection") requires that you give up control so that the framework can call you when it becomes necessary. The code
d765 4
a768 2
  class Bean { ... }<br>
  java_context()-&gt;call(java_closure(new Bean())) || header("$framework");
d771 1
a771 4
can be used to pass control from the web server to the framework running on a J2EE node. 
</p>
<p>
The standard <a href="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">java script interface</a> or the proxy used by the <a href="server/documentation/API/php/java/bridge/Invocable.html">invocable interface</a> can be used to call from the framework running on a J2EE node into the allocated PHP scripts running on the web server. The following excerpt from the JSF implementation calls methods from the above PHP bean:
d774 3
a776 1
  ((Invocable)((PhpFacesContext)FacesContext.getCurrentInstance()).getScriptEngine(this, new URL(phpScript))).invoke(method, args); 
a778 1
Please see the JSF implementation for a reference.
d816 1
a816 1
<code>/var/log/php-java-bridge.log</code> or in JavaBridge.log, see
d893 1
a893 1
executed on one 1.688 GHZ x86 cpu running RedHat Fedora Core 4 Linux and Sun jdk1.6.0:
d895 1
a895 1
The PHP 5.1.2 code<br>
d899 1
a899 1
$String = new JavaClass("java.lang.String");<br>
a902 1
java_begin_document();<br>
d905 1
a905 1
&nbsp;&nbsp;$buf-&gt;append(new java("java.lang.String", $String-&gt;valueOf($i)));<br>
a906 1
java_end_document();<br>
d909 1
a912 14
The BSH 2.0 code<br>
<p>
<code>
buf=new java.lang.StringBuffer();<br>
<br>
int i=0;<br>
while(i<400000) {<br>
&nbsp;i=i+1;<br>
&nbsp;buf.append(new String(String.valueOf(i)));<br>
}<br>
<br>
print (buf.length()); print("\n");<br>
</code>
</p>
d943 1
a943 1
>PHP5 + PHP/Java Bridge 3.0.8</TD
d947 3
a949 3
>0m20.112s,<br>
0m18.999s,<br>
0m0.651s
a952 18

<TBODY
><TR
><TD
>time jrunscript -l bsh t11.bsh</TD
><TD
>BSH 2.0</TD
><TD
>none (native code)</TD
><TD
>0m21.342s,<br>
0m20.779s,<br>
0m0.291s
</TD
></TR
>
</TBODY>

d956 1
a956 1
>time jrunscript -J-Xmx512M -J-Xms512M -l js t11.js</TD
d962 3
a964 3
>1m36.877s,<br>
0m55.398s,<br>
0m0.323s
@


1.11
log
@Release-4-3-0
@
text
@d17 47
d66 3
a68 2
of IIS or Apache. The C based extension automatically starts
a VM when the HTTP server activates the PHP script engine pool (in
d77 1
a77 1
and its PHP script engine pool.
d79 4
a82 5

<H4>Does it support PHP 4?</H4>
<p>Yes. But for PHP versions < 5.1.4 you must compile and install a support library called "java.so" or "php_java.dll" from the C sources; please see the INSTALL document for details.</p>
<p>For X86 windows operating systems a "php_java.dll" for PHP 4 is contained in the binary download.</p>
<p>Add the following <code>php.ini</code> entries:
d85 2
a86 5
extension=java.so ;; php_java.dll on windows<br>
[java]<br>
java.hosts=127.0.0.1:8080<br>
java.servlet=On<br>
</code> 
d88 2
d91 7
a97 1
<p>And use the following code to skip loading the Java.inc:
d100 5
a104 3
if(!extension_loaded("java"))<br>
&nbsp;&nbsp;require_once("http://localhost:8080/JavaBridge/java/Java.inc");
</code> 
d107 7
a113 17

<H4>Why is Java.inc obfuscated?</H4>
<p>The pure PHP implementation contained in <code>Java.inc</code> is created during installation from the other *.inc files located in the java folder. Since some older PHP implementations don't have a opcode cache (sometimes called "accelerator"), we have removed all comments and white space from the source files. Use 
<blockquote>
<code>
&nbsp;&nbsp;require_once("http://localhost:8080/JavaBridge/java/JavaBridge.inc");
</code> 
</blockquote>
if you want to run the original code.</p>

<H4>Can I use Java libraries without installing java?</H4> <p>Yes. Simply compile the C based extension and omit the
<code>--with-java=</code> configure option. The bridge will use the
<code>libgcj</code> library, which is part of the GNU gcc compiler. This library also uses much less system
resources (memory, files) than a "real" Java VM.</p> 
<H4>How can I configure the bridge?</H4>

<p>The three config options <code>java.log_level</code>, <code>java.servlet</code> and <code>java.hosts</code> can be changed in the <code>php.ini</code> file (C based implementation) or <code>Java.inc</code>, which is created from <code>Options.inc</code> (pure PHP implementation).
d131 1
a131 2
<p>Install a servlet engine or J2EE server, for example tomcat.</p>
<p>Download and install the tomcat servlet engine, deploy the PHP/Java Bridge web archive into the tomcat servlet engine and configure it so that it only listens for requests from local PHP scripts (default).<p>
d143 6
a229 2
<H4>Can I install the Linux RedHat RPM package on Suse Linux?</H4> 
<p>No. RedHat and compatibles (Fedora, CenOs, ...) are the only distributions which support Security Enhanced Linux contexts built into the RPM.</p> <p>If you use a distribution which doesn't support SEL, install Java and use the generic binary download instead.</p>
d232 1
d234 4
a237 1
<p>Yes, there's a PHP library "Mono.inc" generated from "Java.inc". However, you can also compile the C implementation and use the configure option <code>--with-mono</code>.</p>
@


1.10
log
@Release-4-2-0
@
text
@d10 6
a15 1
<H2>General questions about the C- or pure PHP implementation</H2>
d18 7
a24 1
<p>No. The bridge and the VM can run as a sub component of IIS or Apache. The C based extension automatically starts a VM in the <code>minit()</code> and terminates it in the <code>mshutdown()</code> hook. The request-handling threads attach themselfs to the persistent VM using the PHP/Java Bridge protocol.
d26 28
d55 1
a55 1
<p>The pure PHP implementation contained in <code>Java.inc</code> is created during compilation from the other *.inc files located in the java folder. Since some older PHP implementations don't have a opcode cache (sometimes called "accelerator"), we have removed all comments and white space from the source files. Use 
a66 5
<H4>Can I compile the C based implementation of the PHP/Java Bridge without compiling the Java classes to native code?</H4> <p>Yes. If your C compiler cannot compile Java classes to native code, use the <code>--disable-backend</code> configure option and add a <code>java.java=/path/to/your/java/executable</code> option to your php.ini <code>[java]</code> section.</p> 
<H4>Can I use Python instead of PHP?</H4>
<p>Yes, see the examples folder from the source download.</p>
<H4>Can I access Mono or .NET libraries using the pure PHP implementation?</H4>
<p>No. You need to compile the C implementation and use the configure option <code>--with-mono</code>.</p>
d79 2
a80 3
<H4>Can I set the java.hosts option at run-time?</H4>

<p>Yes. Simply use <code>require_once("http://YOURSERVER:PORT/CONTEXT/java/Java.inc");</code></p>
d82 3
a84 2
<H4>How do I start the bridge back end when there's another Java VM listening on port 8080?</H4>
<p>Simply deploy the PHP/Java Bridge web archive into the servlet engine or application server listening on port 8080.</p>
d87 1
a87 1
<p>Tomcat starts and stops as a system service on Unix and Windows.</p>
d100 1
a100 1
<H4>I get a blank page!?!</H4>
d110 1
a110 1
<H4>How do I publish my PHP/Java pages?</H4>
d112 1
a112 1
Check if your ISP supports Java. Look for a servlet engine like "tomcat" or a J2EE application server like "resin". Check if your ISP supports PHP >= 4.3.2.
d148 1
a148 1
Deploy it into the J2EE application server or servlet engine. Example for Linux:
d156 1
a156 1
Copy or symlink the web context "webContext" (or whatever you've called it) to the Apache or IIS htdocs (sometimes called "public_html") directory. Example for Linux:
d164 1
a164 1
If you want to use the C implementation, "java.so" or "php_java.dll", edit the php.ini so that the java.hosts and java.servlet point to your servlet/J2EE back end. Example:
d173 2
a174 1
Browse to <code>http://HOSTNAME/webContext/yourPhpScript.php</code>. Again, replace the web context "webContext" with the name of your web context.
d176 1
a176 1
<p>NOTE: If you want to run the Java VM on a different computer, start 
d178 1
a178 1
Change the <code>127.0.0.1</code> above to the IP address of the computer running
d181 6
a186 75
<H2>Apache or IIS</H2>
<a name="load-balancing">
<H4>How do I set up a load balancer for the PHP/Java Bridge cluster?</H4>
<p>
Set up the PHP/Java Bridge cluster as <a href="#cluster">described below</a>. The example uses two nodes named "carlos" and "diego". The HTTP server front end runs on the web server "timon".
</p>
<p>Install Apache 2.2.0 or higher.</p>
<p>Enable <code>proxy_module</code> and <code>proxy_balancer_module</code>. The following example is for Linux (lines marked with "+" should be added to the <code>conf/httpd.conf</code> file):
<blockquote>
<code>
&nbsp;&nbsp;&nbsp;LoadModule rewrite_module modules/mod_rewrite.so<br>
&nbsp;+&nbsp;LoadModule proxy_module modules/mod_proxy.so<br>
&nbsp;+&nbsp;LoadModule proxy_balancer_module modules/mod_proxy_balancer.so<br>
&nbsp;&nbsp;&nbsp;LoadModule cache_module modules/mod_cache.so<br>
</code>
</blockquote>
</p>
<p>
Add the following code to the bottom of your <code>conf/httpd.conf</code> file:
<blockquote>
<code>
ProxyPass /JavaBridge balancer://mycluster maxattempts=2<br>
&lt;Proxy balancer://mycluster&gt;<br>
&nbsp;&nbsp;BalancerMember http://diego:8080/JavaBridge<br>
&nbsp;&nbsp;BalancerMember http://carlos:8080/JavaBridge<br>
&lt;/Proxy&gt;<br>
&lt;Location /balancer-manager&gt;<br>
&nbsp;&nbsp;SetHandler balancer-manager<br>
&nbsp;&nbsp;Deny from all<br>
&nbsp;&nbsp;Allow from 127.0.0.1<br>
&lt;/Location&gt;<br>
</code>
</blockquote>
</p>
<p>Start the cluster nodes on "carlos" and "diego".</p>
<p>Browse to <code>http://timon/JavaBridge/</code> (note the trailing slash) and click on the test.php. Click on refresh. Check if both nodes respond.</p>
<p>Browse to <code>http://timon/JavaBridge/sessionSharing.php</code> and click on refresh. Check the cookie value.</p>
<p>Browse to <code>http://timon/JavaBridge/numberGuess.jsp</code>. You should get an exception saying that the class does not implement <code>java.io.Serializable</code>.</p>
<p>Browse to <code>http://timon/balancer-manager/</code>.
<p>Please see the <code>mod_rewrite</code> documentation for more information how to rewrite incoming URLs.</p>
</a>

<H4>How do I hard code the path to java into the C extension?</H4>
<p>With the configure option <code>--with-java=COMPILETIME_JAVA_HOME,RUNTIME_JAVA_HOME</code>. For example:
<blockquote>
<code>
phpize &&<br>
./configure --with-java=/opt/jdk1.5,/usr/java/default &&<br>
make &&<br>
make install<br>
</code>
</blockquote>
</p>

<H4>How do I lock down the VM so that users cannot start threads or call System.exit?</H4> <p>Usually with a java policy
file. An <a href="server/javabridge.policy">example file</a> has been installed in the php extension directory and can be enabled with:
<code>
java.security_policy=On
</code>
 </p> 

<H4>I want to start the back end automatically as a sub-component of my HTTP Server. How do I pass my own java options and how do I change the security context and the UID of the Java process?</H4> 
<p>
The bridge uses a wrapper binary which can carry the SUID bit and can be tagged with the SEL security context. This wrapper also allows you to change the standard options, which are: <code>java -Djava.library.path=...  -Djava.class.path=... -Djava.awt.headless=true -Dphp.java.bridge.base=... php.java.bridge.JavaBridge SOCKET_NAME LOG_LEVEL LOG_FILE</code>.
A custom wrapper can be set with:<br><br>
<code>
java.wrapper=/path/to/wrapper/binary<br>
</code>
</p>
<p>
On Unix the bridge terminates the sub-process hierarchy with <code>SIGTERM</code>, sleep 5 seconds and <code>SIGTERM</code>, if necessary, sleep 5 seconds and <code>SIGKILL</code>, if necessary. On Windows the bridge emulates the Unix kill behaviour, the bridge kills the entire sub-process hierarchy so that you can use a <code>cmd /c</code> wrapper.
</p>
<p>
Please see the wrapper <code>RunJavaBridge</code> for an example.
</p>
d233 1
a233 5
<H4>I have two different classes with the same name in two different web apps. 
When using the <a href="#global-servlet">GlobalPhpJavaServlet</a>, the bridge uses only one of these classes!?!</H4>
<p>This is a known bug in all PHP/Java Bridge versions < 4.1.0.</p>
<p>Please upgrade to a PHP/Java Bridge version >= 4.1.0 or use a PHP/Java Bridge version <= 3.0.8 and switch off persistent connections: <code>java.persistent_connections=Off</code>.</p>
<p>Since version 4.1.0, the PHP/Java Bridge correctly uses the current thread context class loader so that, when the Java.inc is loaded from a <code>webApp</code>, the class loader from that web application is used. For example:
d235 3
d240 1
a240 3
require_once("http://localhost:8080/webApp1/java/Java.inc");<br>
echo java("my.TestClass")->getId(); // assuming that a getId() procedure exists<br>
=> TestClass of webApp1<br>
d243 3
d248 1
a248 3
require_once("http://localhost:8080/webApp2/java/Java.inc");<br>
echo java("my.TestClass")->getId(); // assuming that a getId() procedure exists<br>
=> TestClass of webApp2<br>
d251 1
a251 5


<H2>J2EE/Servlet questions</H2>

<H4>Ho do I enable logging?</H4>
d253 1
a253 1
Copy <code>log4j.jar</code> into <code>java.ext.dirs</code>. Example for JDK 6:
d256 1
a256 1
cp log4j.jar /usr/java/packages/lib/ext
d260 3
d264 4
a267 1
Start the log4j viewer. Example for JDK 6:
d270 4
a273 1
/opt/jdk1.6/bin/java org.apache.log4j.chainsaw.Main
d278 1
a278 1
Start the application server with the options <code>-Dphp.java.bridge.default_log_level=LEVEL</code>. Example for tomcat:
d281 10
a290 1
JAVA_HOME=/opt/jdk1.6 JAVA_OPTS="-Dphp.java.bridge.default_log_level=5" bin/catalina.sh run
d294 8
a1000 68
<H4>How fast is the pure PHP/Java implementation compared with the C based implementation or JSP?</H4>
<p>On modern operating systems (Windows, Solaris and Linux) and PHP >= 5.1.4 with an opcode cache enabled, the pure PHP implementation is only 2-3 times slower than either the C based implementation or compiled JSP (=Java servlets).<p>
<p>
The following table displays the result of the command:
<blockquote>
<code>
time for i in `seq 200`<br> 
&nbsp;&nbsp;do wget -O/dev/null -o/dev/null http://localhost:8080/JavaBridge/sessionSharing.[php|jsp]<br>
done
</code>
</blockquote>
<center>
<TABLE
BORDER="1"
><COL><COL><COL><COL><THEAD
><TR
><TH
>OS</TH
><TH
>PHP (tcp sockets)</TH
><TH
>PHP (named pipes)</TH
><TH
>JSP</TH
></TR
></THEAD
<TBODY>
<TR>
<TD>Linux (RedHat Fedora 6)</TD
><TD>0m9.465s</TD><TD
>0m9.477s</TD><TD
>0m3.126s</TD>
</TR>
<TR>
<TD>WinNT (2000)</TD
><TD>0m39.439s</TD><TD
>not available</TD><TD
>0m22.904s</TD>
</TR>
</TBODY>
</TABLE>
</center>
</p>


<H4>How do I start a persistent VM?</H4> 
<p> 
During development the bridge back end can be started with <code>java -jar JavaBridge.jar SERVLET_LOCAL:port#</code>. Unfortunately the simple servlet engine built into JavaBridge.jar is not very efficient. Please use some other servlet engine instead.
The tomcat servlet engine for example contains scripts which allow you to start Java as a system service on Windows and Unix/Linux.
</p>
<p>If you have compiled the C implementation, Apache or IIS can automatically start/stop the Java VM as a sub component.
But in this setup the Java VM runs with the same (restricted) rights as the HTTP server, which may or may not be what you want. On Linux for example the VM is started by a RunJavaBridge executable as a child of the Apache main process. The Java VM runs as user apache/apache and uses the Security Enhanced Linux domain <code>javabridge_t</code>. It cannot access files such as /etc/passwd and it cannot open tcp sockets to other servers.
</p>
<p>
Unless you know how to pass options to child processes on Windows or Unix (see the java.wrapper option), and how set/change permissions (see chcon, chmod, chown), we recommend to start the PHP/Java Bridge via a servlet engine or J2EE server. -- You probably already have a servlet engine or J2EE server listening on 8080 or some other port, so that it might not be necessary to install a servlet engine or J2EE server to start the bridge back end.</p>

<!--
AS test ports  (Sun Mar 16 09:54:17 CET 2003, Jost Boekemeier)

* Oracle:     http://localhost:8888/

* Websphere:  http://localhost:9060/ibm/console/secure/logon.do
                   http://localhost:9080/JavaBridge/

* BEA:        http://localhost:7001
* Jrun4:      https://localhost:9100
-->
 
d1125 41
a1167 1

@


1.10.2.1
log
@including for 3.2.1b Debian packaging.
@
text
@@


1.9
log
@Release-4-1-7
@
text
@a14 8
<H4>What's the advantage/disadvantage of the pure PHP implementation?</H4>
<p>Both implementations support the same features. But since PHP doesn't contain a "just in time compiler", the C based extension module is 2 to 10 times faster than the pure PHP implementation (depending on whether a PHP opcode cache is used).
</p>
<p>The pure PHP implementation needs an external Java process. It can be started with <code>java -jar JavaBridge.jar SERVLET:8080</code>, but it is recommended to start the external Java VM via a J2EE server or servlet engine. The tomcat servlet engine can be used to start Java as a system service on Windows and Linux.
</p>
<p>
The C based implementation compiles and works on all operating systems, including Windows. But we cannot provide binaries for all operating systems. If you cannot compile C code, use the pure PHP implementation instead.
</p>
d146 1
a146 1
<H2>Running Java as a sub component of Apache or IIS</H2>
@


1.8
log
@Release-4-1-5
@
text
@d155 40
d324 1
d327 1
a327 1
Download tomcat 5 or higher, a Java JRE 5 or higher and the PHP/Java Bridge 4.1.5 or higher.
d396 1
a396 1
require_once("http://diego:8080/JavaBridge/java/Java.inc");<br>
d413 1
a413 1
require_once("http://carlos:8080/JavaBridge/java/Java.inc");<br>
d455 1
a455 1
Please see your HTTP server documentation how to set it up as a load balancer. This differs from the architecture described above in that the load balancer forwards the requests to the nodes and the nodes run PHP using the FastCGI mechanism.
d457 1
@


1.7
log
@Release-4-1-0
@
text
@d259 1
a259 1
<H4>I want to use the bridge as a replacement for the PHP 4 servlet API, how do I install it into tomcat?</H4>
d261 154
a414 2
Download the J2EE binary and copy the <code>JavaBridge.war</code> into the tomcat <code>webapps</code> folder. After that visit <code>http://localhost:8080/JavaBridge</code> and run the supplied PHP examples.
Please see <code>webapps/JavaBridge/WEB-INF/cgi/README</code> for details.
a415 1

d1175 1
@


1.6
log
@Release-3-0-8
@
text
@d84 69
a152 1

a189 1

d193 7
a199 1
<p> With <code>java_require("foo.jar;bar.jar;...");. See the README for details.</p>
d235 21
d1015 7
@


1.5
log
@Release-3-0-8
@
text
@d88 13
a100 2
<H4>How do I lock down the VM so that users cannot start
threads or call System.exit?</H4> <p>Usually with a java policy
@


1.4
log
@Release-4-0-6
@
text
@d55 1
a55 35
<p>Yes. The bridge examines the environment variables
<code>X_JAVABRIDGE_OVERRIDE_HOSTS</code> and
<code>X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT</code>.
</p>
<p>To direct a php <em>script</em> to a web context FOO running on computer
192.168.4.98, port 8080, use the following code: 

<blockquote> <code> &nbsp;&nbsp;&lt?php<br>
&nbsp;&nbsp;$_SERVER['X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT']="h:192.168.4.98:8080//FOO/JavaBridge.phpjavabridge";<br>
&nbsp;&nbsp;if(!extension_loaded('java')) require_once("http://localhost:8080/JavaBridge/java/Java.inc");<br>
&nbsp;&nbsp;echo java_server_name();<br>
&nbsp;&nbsp;?&gt; </code> </blockquote>

Assuming that the option <code>java.servlet</code> or
<code>JAVA_SERVLET</code> (pure PHP implementation) is set to
<code>On</code>, the above example uses plain HTTP to connect to the
server 192.168.4.98 on port 8080 using the web context FOO. If PHP has
been compiled with openssl enabled, <code>s:..</code> can be used to
connect to a SSL port. When <code>java.servlet</code> or
<code>JAVA_SERVLET</code> is set to <code>User</code> or
<code>Off</code>, the bridge ignores the specified <code>FOO</code>
context and uses the request context instead, or it connects to a
standalone socket listener directly (if the option is Off).
</p>
<p>
To direct a php <em>instance</em> to a web context FOO running on computer
192.168.4.98, port 8080, use the variable
<code>X_JAVABRIDGE_OVERRIDE_HOSTS</code> instead. This variable must
be set before the PHP instance starts.
</p>
<p>
When <code>X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT</code> is used and
the php instance already has a persistent connection to another host,
it opens a second persistent connection to the new host.
</p>
d65 1
a65 1
<p>The pure PHP/Java Bridge library <code>Java.inc</code> must be included before it can be used. Therefore the scripts should contain the statement
d73 4
a76 1
<p>If the C based implementation is used, the pure PHP implementation can be used as a fall back:
d79 1
a79 2
&nbsp;&nbsp;if(!extension_loaded('java'))<br>
&nbsp;&nbsp;require_once("http://localhost:8080/JavaBridge/java/Java.inc");
d82 1
d85 1
d115 1
a115 1
<p> With <code>java_require("foo.jar;bar.jar, ...");. See the README for details.</p>
d482 1
a482 1
  java_context()->call(java_closure(new Bean())) || header("$framework");
d499 1
a499 1
<H4>How can is access the Servlet, ServletContext or ServletRequest from a remote PHP script?</H4>
d501 15
a515 15
Unless you write your own servlet (see
testContextAwarePhpJavaServlet.php from the tests.php5 folder), you
can't. The default implementation of the PhpJavaServlet does not wait
for a RemoteServletContextFactory to finish because it cannot reliably
determine if a remote script terminated or not.
</p>
<p>If you can provide this information, override the PhpJavaServlet's
<code>getContextFactory()</code>. Provide your own
RemoteServletContextFactory and create a custom Context in your
<code>createContext()</code> method. Then wait for the context by
overriding the <code>waitForContext() method.</code>. Ask yourself how
to handle a situation where a script asks for a context but doesn't
do anything with it, for example: <code>&lt;?php java_context();
?&gt;</code>. Is it okay that the servlet waits 10 minutes until the
orphaned context is destroyed?
d517 9
d540 1
a540 1
e.g. <code>java_session()->put("buf", $stringBuffer)</code> or via
d549 1
a549 11
<!--
<p> If you use the <a
href="http://www.jcp.org/en/jsr/detail?id=127">Java Server Faces</a>
framework, you declare the scope of the script in the <a
href="server/WEB-INF/faces-config.xml">PHP
managed bean descriptor<a>. For example, if the
<code>managed-bean-scope</code> is changed from <code>request</code>
to <code>session</code>, the framework automatically saves the state
of the PHP script instance and restores it when the next request
belonging to the same session comes in.</p>  
-->
d556 2
a557 2
wait until one of the worker threads returns to the pool. <p> <p>When
running in a servlet engine, a <a
d585 1
a585 1
echo $bridge->JavaBridgeRunner;<br>
d597 1
a597 1
$byte = $Byte->TYPE;<br>
d599 1
a599 1
$byteArray = $Array->newInstance($byte, 255);<br>
d601 1
a601 1
$length = $System->in->read($byteArray);<br>
d770 4
a773 6
<!--
 <H4>How do I start a persistent VM?</H4> 
<p>
If you want to start <em>one persistent VM per HTTP server</em> running on a computer, see 
the <a href="#mode2">web server installation</a> description. 
If you want to start <em>one persistent VM per computer</em>, please see the <a href="#mode4">application server or servlet engine</a> description.
d775 2
a776 13
<p>Furthermore it is possible to start a standalone back end, for example with the command:<br><br>
<code>
&nbsp;java -jar JavaBridge.jar INET_LOCAL:9676 3<br>
</code>
<br>
The <code>php.ini</code> entry might look like:<br><br>
<code>
&nbsp;[java]<br>
&nbsp;java.hosts = 127.0.0.1:9676<br>
&nbsp;java.servlet = Off<br>
</code>
<br>
Please see the <a href="server/documentation/API/php/java/bridge/JavaBridge.html">JavaBridge</a> documentation for details.
d778 2
d781 1
d797 3
a799 3
 the object is permanently referenced by a request-handling thread or
 the object has been entered into the session or application store or 
 the object is referenced by a thread outside of the scope of the PHP/Java Bridge.
d814 1
a814 1
$_SESSION["buffer"]->append(...);<br>
d836 1
a836 1
&nbsp;&nbsp;for($i=0; $i<10000; $i++) $s->append($i);<br>
d842 1
a842 1
<H4>How can I convert a Java object into a PHP object?</H4>
d848 1
a848 1
&nbsp;&nbsp;$c = $chr = $s->toCharArray();<br>
d865 41
a905 1
&nbsp;&nbsp;echo $String->valueOf($jObj);<br>
d909 1
a909 1

@


1.3
log
@Release-4-0-5
@
text
@d16 1
a16 1
<p>Both implementations support the same features. But since PHP doesn't contain a "just in time compiler", the C based extension module is 2 to 10 times faster than the the pure PHP implementation (depending on whether a PHP opcode cache is used).
d59 1
a59 1
<p>To direct a php script to a web context FOO running on computer
d64 1
a64 1
&nbsp;&nbsp;if(!extension_loaded('java') require_once("http://localhost:8080/JavaBridge/java/Java.inc");<br>
d80 1
a80 1
To direct a php instance to a to a web context FOO running on computer
d756 2
a757 2
<H4>How fast is the pure PHP/Java implementation compared to the C based implementation or JSP?</H4>
<p>On modern operating systems (Windows, Solaris and Linux), the pure PHP implementation is only 2-3 times slower than either the C based implementation or compiled JSP (=Java servlets).<p>
d775 1
a775 1
>PHP (tcp sockets + tcp sockets)</TH
d777 1
a777 1
>PHP (named pipes + tcp sockets)</TH
@


1.2
log
@Release-4-0-2
@
text
@d27 1
a27 1
&nbsp;&nbsp;require_once("http://localhost:8080/JavaBridge/java/JavaBridge.inc";
d36 1
a36 1
<H4>Can I compile the C code without compiling the Java classes to native code?</H4> <p>Yes. If your C compiler cannot compile Java classes to native code, use the <code>--disable-backend</code> configure option and add a <code>java.java=/path/to/your/java/executable</code> option to your php.ini <code>[java]</code> section.</p> 
d64 1
d91 25
d193 1
a193 1
<p> Check if your PHP cgi binary supports the <code>-b</code> flag. If not, compile PHP with the <code>--enable-fastcgi</code> option or <a href="#http-front-end">use Apache or IIS as a front-end</a> instead. On Windows one could also copy a wrapper binary into the <code>WEB-INF/cgi/</code> folder, for example the <code>launcher.exe</code> from the <code>PHPIntKitForWindows.zip</code> available from <a href="http://www-128.ibm.com/alphaworks">alphaworks</a>.</p>
d531 5
a535 4
Unless you write your own servlet, you can't. The default
implementation of the PhpJavaServlet does not wait for a
RemoteServletContextFactory to finish because it cannot reliably determine if a
remote script terminated or not.
d755 46
@


1.1
log
@Release-4-0-2
@
text
@d8 1
a8 1
This file contains answers to frequently asked questions.
d12 2
a13 2
<H4>Do I need a Java Application server or Servlet engine?</H4>
<p>No. The bridge and the VM can run as a sub component of IIS or Apache. The C based extension automatically starts a VM in the <code>minit()</code> and terminates it in the <code>mshutdown()</code> hook. The request-handling threads attach themselfs to the VM (using the PHP/Java Bridge protocol) to execute Java methods.
d21 1
a21 1
The C based implementation compiles and works on all operating systems, including Windows, see the INSTALL document for details. But we cannot provide binaries for all operating systems. If you cannot compile C code, use the pure PHP implementation instead.
d27 1
a27 1
&nbsp;&nbsp;&nbsp;&nbsp;require_once("http://localhost:8080/java/JavaBridge.inc";
d33 2
a34 2
<code>--with-java=</code> configure option. The <a href="README.GNU_JAVA">bridge will use the
<code>libgcj</code> library</a>, which is part of the GNU gcc compiler. This library also uses much less system
a40 2
<H4>Where is my output?</H4> <p><code>System.out</code> and <code>System.err</code> are redirected to the server log file(s). When PHP scripts are invoked from a java framework (Java Server Faces for example), even the PHP output is redirected. For the standalone back end the output appears in the <code>/var/log/php-java-bridge.log</code> or in JavaBridge.log, see .ini option <code>java.log_file</code>. For the j2ee back end the location of the log file(s) depends on the j2ee server configuration.</p> 

d45 44
d122 5
a126 1
<p>It probably doesn't have the permission to access it. Try to disable Security Enhanced Linux and store the jar file into a folder accessible by the apache user and then extract the required Security Enhanced Linux permissions from the audit log.</p>
d129 4
a132 1
<p>You probably haven't required the relevant Java library. Check which library exports the feature and add the library to the <code>java_require()</code> statement.</code></p>
d141 3
a143 3
&nbsp;&nbsp;&nbsp;&nbsp;java_require("foo.jar");<br>
&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;Class.forName("foo",true,Thread.currentThread().getContextClassLoader());<br>
d503 28
d542 3
a544 1
use java_session() instead.</p> <p> If you use the <a
d553 1
d579 3
a581 3
&nbsp;&nbsp;public class java {<br>
&nbsp;&nbsp;&nbsp;&nbsp;public enum bridge {JavaBridge, JavaBridgeRunner};<br>
&nbsp;&nbsp;}<br>
d625 2
a626 2
&nbsp;&nbsp;&nbsp;&nbsp;$i=$i+1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;$buf-&gt;append(new java("java.lang.String", $String-&gt;valueOf($i)));<br>
d641 2
a642 2
&nbsp;&nbsp;i=i+1;<br>
&nbsp;&nbsp;buf.append(new String(String.valueOf(i)));<br>
d728 1
d737 1
a737 1
&nbsp;&nbsp;java -jar JavaBridge.jar INET_LOCAL:9676 3<br>
d742 3
a744 3
&nbsp;&nbsp;[java]<br>
&nbsp;&nbsp;java.hosts = 127.0.0.1:9676<br>
&nbsp;&nbsp;java.servlet = Off<br>
a749 1
<!--
d802 4
a805 4
&nbsp;&nbsp;&nbsp;&nbsp;java_begin_document();<br>
&nbsp;&nbsp;&nbsp;&nbsp;$s = new Java("java.lang.StringBuffer");<br>
&nbsp;&nbsp;&nbsp;&nbsp;for($i=0; $i<10000; $i++) $s->append($i);<br>
&nbsp;&nbsp;&nbsp;&nbsp;java_end_document();<br>
d815 4
a818 4
&nbsp;&nbsp;&nbsp;&nbsp;$s = new Java("java.lang.String");<br>
&nbsp;&nbsp;&nbsp;&nbsp;$c = $chr = $s->toCharArray();<br>
&nbsp;&nbsp;&nbsp;&nbsp;print  (java_values($s));<br>
&nbsp;&nbsp;&nbsp;&nbsp;print_r(java_values($c));<br>
d827 7
a833 7
&nbsp;&nbsp;&nbsp;&nbsp;class Foo {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function toString() {return "php::foo";}<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;$foo = new Foo();<br>
&nbsp;&nbsp;&nbsp;&nbsp;$jObj = java_closure($foo);<br>
&nbsp;&nbsp;&nbsp;&nbsp;$String = new Java("java.lang.String");<br>
&nbsp;&nbsp;&nbsp;&nbsp;echo $String->valueOf($jObj);<br>
@

