head	1.3;
access;
symbols
	upstream_version_5_3_4:1.2
	debian_version_5_3_4-1:1.2
	ROOT_Release-5-3-4:1.2
	Release-5-3-4:1.2.0.50
	ROOT_Release-5-3-3:1.2
	Release-5-3-3:1.2.0.46
	debian_version_5_3_2_1_2-1:1.2
	upstream_version_5_3_2_1_2:1.2
	debian_version_5_3_2_1_1-1:1.2
	debian_version_5_3_2_1_1:1.2
	upstream_version_5_3_2_1_1:1.2
	Root_Release-5-3-2-1:1.2
	Release-5-3-2-1:1.2
	ROOT_RELEASE-5-3-2-1:1.2
	RELEASE-5-3-2-1:1.2.0.48
	Release-5-3-2:1.2.0.44
	Root_Release-5-3-2:1.2
	Root_Release-5-3-1:1.2
	Release-5-3-1:1.2.0.42
	Release-5-2-3-1:1.2.0.40
	Root_Release-5-2-3-1:1.2
	Release-5-2-2-4:1.2.0.38
	Root_Release-5-2-2-4:1.2
	Release-5-2-2-1:1.2.0.36
	Root_Release-5-2-2-1:1.2
	upstream_version_5_2_2:1.2
	debian_version_5_2_2-1:1.2
	Release-5-2-2:1.2.0.34
	ROOT_Release-5-2-2:1.2
	ROOT_Release-5-2-1:1.2
	Release-5-2-1:1.2.0.32
	Release-5-2-0:1.2.0.30
	ROOT_Release-5-2-0:1.2
	ROOT_Release-5-1-2:1.2
	Release-5-1-2:1.2.0.28
	Version-5-1-1:1.2.0.26
	ROOT_Version-5-1-1:1.2
	debian_version_5_1_0-1:1.2
	upstream_version_5_1_0:1.2
	ROOT_Release-5-1-0:1.2
	Release-5-1-0:1.2.0.24
	ROOT_Release-5-0-0:1.2
	Release-5-0-0:1.2.0.22
	Release-4-3-3:1.2.0.20
	ROOT_Release-4-3-3:1.2
	upstream_version_4_3_2:1.2
	debian_version_4_3_2-1:1.2
	ROOT_Release-4-3-2:1.2
	Release-4-3-2:1.2.0.18
	Release-4-3-1:1.2.0.16
	ROOT_Release-4-3-1:1.2
	debian_version_4_3_0-1:1.2
	upstream_version_4_3_0:1.2
	ROOT_Release-4-3-0:1.2
	Release-4-3-0:1.2.0.14
	debian_version_3_2_1b-2:1.2
	debian_version_4_2_2-1:1.2
	upstream_version_4_2_2:1.2
	debian_version_3_2_1b-1:1.2
	upstream_version_3_2_1b:1.2
	Release-4-1-2:1.2.0.12
	Release-4-0-8:1.2.0.10
	debian_version_4_0_8a-1:1.2
	upstream_version_4_0_8a:1.2
	jostb-debian-ubuntu-patch:1.2.0.8
	debian_version_4_0_8-1:1.2
	upstream_version_4_0_8:1.2
	debian_version_4_0_7-1:1.2
	upstream_version_4_0_7:1.2
	debian_version_4_0_6-1:1.2
	upstream_version_4_0_6:1.2
	debian_version_4_0_2-1:1.2
	upstream_version_4_0_2:1.2
	Release-4-0-2_Root:1.2
	Release-4-0-2:1.2.0.6
	upstream_version_4_0_1:1.2
	debian_version_4_0_1-2:1.2
	Release-3-2-1:1.2.0.4
	Release-3-1-8:1.2.0.2
	Release-3-0-8_root:1.1.2.1
	Release-3-0-8_Root:1.2
	Release-3-0-8:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2008.12.12.17.48.16;	author jost_boekemeier;	state dead;
branches;
next	1.2;

1.2
date	2006.04.26.19.13.40;	author jost2345;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.23.19.26.40;	author jost2345;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.04.23.19.26.40;	author jost2345;	state Exp;
branches;
next	;


desc
@@


1.3
log
@removed java.so
@
text
@<?php

define("JBOSS",1);
define("WEBSPHERE",2);
define("SUN",3);
define("ORACLE",4);

// -------------- adjust these variables, if necessary
$server=array_key_exists(1, $argv)? $argv[1] : JBOSS;
$WAS_HOME=array_key_exists(2, $argv)? $argv[2]: "/opt/IBM/WebSphere/AppServer";
$JBOSS_HOME=array_key_exists(2, $argv)? $argv[2] : "/opt/jboss-4.0.2/";
$app_server=array_key_exists(2, $argv)? $argv[2] : getenv("HOME")."/SUNWappserver";
// ---------------

$System = new JavaClass("java.lang.System");
$props = $System->getProperties();
echo "Using java VM from: ${props['java.vm.vendor']}\n";
echo "connecting to server: ";

$clientJar = getcwd() . "/documentBeanClient.jar";
switch($server) {
 case JBOSS: 
   echo "jboss. Loading $JBOSS_HOME/lib \n";

   $vendor=new java("java.lang.String", strtolower($props['java.vm.vendor']));
   if(!$vendor->startsWith("sun"))
      echo "WARNING: You need to run this example with the SUN VM\n";
   if(!is_dir($JBOSS_HOME)) die("ERROR: Incorrect $JBOSS_HOME.");

   $name = "DocumentEJB";
   java_require("$JBOSS_HOME/client/;$clientJar");
   $server=array("java.naming.factory.initial"=>
		 "org.jnp.interfaces.NamingContextFactory",
		 "java.naming.provider.url"=>
		 "jnp://127.0.0.1:1099");
   break;
 case WEBSPHERE: 
   echo "websphere. Loading $WAS_HOME/lib/\n";

   $vendor=new java("java.lang.String", strtolower($props['java.vm.vendor']));
   if(!$vendor->startsWith("ibm"))
      echo "WARNING: You need to run this example with the IBM VM\n";
   if(!is_dir($WAS_HOME)) die("ERROR: Incorrect $WAS_HOME.");

   $name = "RMIdocument";
   java_require("$WAS_HOME/lib/;$clientJar");
   $server=array("java.naming.factory.initial"=>
		 "com.ibm.websphere.naming.WsnInitialContextFactory",
		 "java.naming.provider.url"=>
		 "iiop://localhost:2809");
   break;
 case SUN:
   echo "sun. Loading: $app_server/lib\n";

   $vendor=new java("java.lang.String", strtolower($props['java.vm.vendor']));
   if(!$vendor->startsWith("sun"))
      echo "WARNING: You need to run this example with the SUN VM\n";
   if(!is_dir($app_server)) die("ERROR: Incorrect $app_server.");

   $name = "RMIdocument";
   java_require("$app_server/lib/;$clientJar");
   $server=array("java.naming.factory.initial"=>
		 "com.sun.jndi.cosnaming.CNCtxFactory",
		 "java.naming.provider.url"=>
		 "iiop://localhost:3700");
   break;
 }

java_last_exception_clear();
$doc=@@createDocument($name, $server);
$e=java_last_exception_get();
if($e) {  
  echo "Could not create remote document. Have you deployed documentBean.jar?\n";
  echo $e->getCause() ."\n";
  exit (1);
}

/* add pages to the remote document */
$doc->addPage(new java ("Page", 0, "this is page 1"));
$doc->addPage(new java ("Page", 0, "this is page 2"));
/* and print a summary */
print $doc->analyze() . "\n";

destroyDocument($doc);


/* Utility procedures */

/*
 * convenience function which connects to the AS server using the URL
 * $url, looks up the service $jndiname and returns a new remote
 * document.
 * @@param jndiname The name of the remote document, see sun-ejb-jar.xml
 * @@param serverArgs An array describing the connection parameters.
 */
function createDocument($jndiname, $serverArgs) {
  // find initial context
  $initial = new java("javax.naming.InitialContext", $serverArgs);
  
  // find the service
  $objref  = $initial->lookup("$jndiname");
  
  // access the home interface
  $DocumentHome = new JavaClass("DocumentHome");
  $PortableRemoteObject = new JavaClass("javax.rmi.PortableRemoteObject");
  $home=$PortableRemoteObject->narrow($objref, $DocumentHome);

  // create a new remote document and return it
  $doc = $home->create();
  return $doc;
}

/*
 * convenience function which destroys the reference to the remote
 * document
 * @@param The remote document.
 */
function destroyDocument($doc) {
	$doc->remove();
}

?>
@


1.2
log
@Release-3-1-0
@
text
@@


1.1
log
@file documentClient.php4 was initially added on branch Release-3-0-8.
@
text
@d1 122
@


1.1.2.1
log
@Release-3-0-8-1
@
text
@a0 122
<?php

define("JBOSS",1);
define("WEBSPHERE",2);
define("SUN",3);
define("ORACLE",4);

// -------------- adjust these variables, if necessary
$server=array_key_exists(1, $argv)? $argv[1] : JBOSS;
$WAS_HOME=array_key_exists(2, $argv)? $argv[2]: "/opt/IBM/WebSphere/AppServer";
$JBOSS_HOME=array_key_exists(2, $argv)? $argv[2] : "/opt/jboss-4.0.2/";
$app_server=array_key_exists(2, $argv)? $argv[2] : getenv("HOME")."/SUNWappserver";
// ---------------

$System = new JavaClass("java.lang.System");
$props = $System->getProperties();
echo "Using java VM from: ${props['java.vm.vendor']}\n";
echo "connecting to server: ";

$clientJar = getcwd() . "/documentBeanClient.jar";
switch($server) {
 case JBOSS: 
   echo "jboss. Loading $JBOSS_HOME/lib \n";

   $vendor=new java("java.lang.String", strtolower($props['java.vm.vendor']));
   if(!$vendor->startsWith("sun"))
      echo "WARNING: You need to run this example with the SUN VM\n";
   if(!is_dir($JBOSS_HOME)) die("ERROR: Incorrect $JBOSS_HOME.");

   $name = "DocumentEJB";
   java_require("$JBOSS_HOME/client/;$clientJar");
   $server=array("java.naming.factory.initial"=>
		 "org.jnp.interfaces.NamingContextFactory",
		 "java.naming.provider.url"=>
		 "jnp://127.0.0.1:1099");
   break;
 case WEBSPHERE: 
   echo "websphere. Loading $WAS_HOME/lib/\n";

   $vendor=new java("java.lang.String", strtolower($props['java.vm.vendor']));
   if(!$vendor->startsWith("ibm"))
      echo "WARNING: You need to run this example with the IBM VM\n";
   if(!is_dir($WAS_HOME)) die("ERROR: Incorrect $WAS_HOME.");

   $name = "RMIdocument";
   java_require("$WAS_HOME/lib/;$clientJar");
   $server=array("java.naming.factory.initial"=>
		 "com.ibm.websphere.naming.WsnInitialContextFactory",
		 "java.naming.provider.url"=>
		 "iiop://localhost:2809");
   break;
 case SUN:
   echo "sun. Loading: $app_server/lib\n";

   $vendor=new java("java.lang.String", strtolower($props['java.vm.vendor']));
   if(!$vendor->startsWith("sun"))
      echo "WARNING: You need to run this example with the SUN VM\n";
   if(!is_dir($app_server)) die("ERROR: Incorrect $app_server.");

   $name = "RMIdocument";
   java_require("$app_server/lib/;$clientJar");
   $server=array("java.naming.factory.initial"=>
		 "com.sun.jndi.cosnaming.CNCtxFactory",
		 "java.naming.provider.url"=>
		 "iiop://localhost:3700");
   break;
 }

java_last_exception_clear();
$doc=@@createDocument($name, $server);
$e=java_last_exception_get();
if($e) {  
  echo "Could not create remote document. Have you deployed documentBean.jar?\n";
  echo $e->getCause() ."\n";
  exit (1);
}

/* add pages to the remote document */
$doc->addPage(new java ("Page", 0, "this is page 1"));
$doc->addPage(new java ("Page", 0, "this is page 2"));
/* and print a summary */
print $doc->analyze() . "\n";

destroyDocument($doc);


/* Utility procedures */

/*
 * convenience function which connects to the AS server using the URL
 * $url, looks up the service $jndiname and returns a new remote
 * document.
 * @@param jndiname The name of the remote document, see sun-ejb-jar.xml
 * @@param serverArgs An array describing the connection parameters.
 */
function createDocument($jndiname, $serverArgs) {
  // find initial context
  $initial = new java("javax.naming.InitialContext", $serverArgs);
  
  // find the service
  $objref  = $initial->lookup("$jndiname");
  
  // access the home interface
  $DocumentHome = new JavaClass("DocumentHome");
  $PortableRemoteObject = new JavaClass("javax.rmi.PortableRemoteObject");
  $home=$PortableRemoteObject->narrow($objref, $DocumentHome);

  // create a new remote document and return it
  $doc = $home->create();
  return $doc;
}

/*
 * convenience function which destroys the reference to the remote
 * document
 * @@param The remote document.
 */
function destroyDocument($doc) {
	$doc->remove();
}

?>
@

