head	1.5;
access;
symbols
	Release-7-1-1:1.5.0.68
	Root_Release-7-1-1:1.5
	Root_Release_7-0-1:1.5
	Release_7-0-1:1.5.0.66
	Release_7-0-0:1.5.0.64
	Root_Release_7-0-0:1.5
	Release-6-2-2:1.5.0.62
	Release-6-1-2-3:1.5
	Root_Release-6-1-2-3:1.5
	Release-6-1-2-2:1.5.0.60
	Root_Release-6-1-2-2:1.5
	debian_version_6_1_2_1-1:1.5
	upstream_version_6_1_2_1:1.5
	Release-6-1-2-1_new:1.5.0.58
	Root_Release-6-1-2-1_new:1.5
	Release-6-1-2-1:1.5.0.56
	Root_Release-6-1-2-1:1.5
	upstream_version_6_1_2:1.5
	debian_version_6_1_2-1:1.5
	Release-6-1-2:1.5.0.54
	Root_Release-6-1-2:1.5
	debian_version_6_1_1-2:1.5
	debian_version_6_1_1-1:1.5
	upstream_version_6_1_1:1.5
	Release-6-1-1:1.5.0.52
	Root_Release-6-1-1:1.5
	Release-6-0-4:1.5.0.50
	Root_Release-6-0-4:1.5
	Release-6-0-3_NEW:1.5.0.46
	Root_Release-6-0-3_NEW:1.5
	Release-6-0-3:1.5.0.48
	Root_Release-6-0-3:1.5
	Release-6-0-0:1.5.0.44
	Root_Release-6-0-0:1.5
	Release-5-5-4-1:1.5.0.42
	Root_Release-5-5-4-1:1.5
	Release-5-5-4:1.5.0.40
	Root_Release-5-5-4:1.5
	Release-5-5-3:1.5.0.38
	ROOT_Release-5-5-3:1.5
	Release-5-5-2:1.5.0.36
	Root_Release-5-5-2:1.5
	debian_version_5_5_1-1:1.5
	Release-5-5-1:1.5.0.32
	upstream_version_5_5_1:1.5
	ROOT_Release-5-5-1:1.5
	debian_version_5_5-1:1.5
	upstream_version_5_5:1.5
	ROOT_Release-5-5:1.5
	Release-5-5:1.5.0.34
	debian_version_5_4_4_2-3:1.5
	Release-5-4-4-2-1:1.5.0.28
	debian_version_5_4_4_2-2:1.5
	debian_version_5_4_4_2-1:1.5
	upstream_version_5_4_4_2:1.5
	debian_version_5_4_4_1-1:1.5
	upstream_version_5_4_4_1:1.5
	debian_version_5_4_4-1:1.5
	upstream_version_5_4_4:1.5
	Release-5-4-4:1.5.0.30
	Root_Release-5-4-4:1.5
	debian_version_5_4_3_2-1:1.5
	upstream_version_5_4_3_2:1.5
	Release_5-4-3-2:1.5.0.26
	Root_Release_5-4-3-2:1.5
	upstream_version_5_4_3_1:1.5
	debian_version_5_4_3_1-1:1.5
	Release-5-4-3:1.5.0.24
	Root_Release-5-4-3:1.5
	Root_Release-5-4-1:1.5
	Release-5-4-1:1.5.0.22
	Root_Release-5-4:1.5
	Release-5-4:1.5.0.20
	upstream_version_5_3_4:1.5
	debian_version_5_3_4-1:1.5
	ROOT_Release-5-3-4:1.5
	Release-5-3-4:1.5.0.18
	ROOT_Release-5-3-3:1.5
	Release-5-3-3:1.5.0.14
	debian_version_5_3_2_1_2-1:1.5
	upstream_version_5_3_2_1_2:1.5
	debian_version_5_3_2_1_1-1:1.5
	debian_version_5_3_2_1_1:1.5
	upstream_version_5_3_2_1_1:1.5
	Root_Release-5-3-2-1:1.5
	Release-5-3-2-1:1.5
	ROOT_RELEASE-5-3-2-1:1.5
	RELEASE-5-3-2-1:1.5.0.16
	Release-5-3-2:1.5.0.12
	Root_Release-5-3-2:1.5
	Root_Release-5-3-1:1.5
	Release-5-3-1:1.5.0.10
	Release-5-2-3-1:1.5.0.8
	Root_Release-5-2-3-1:1.5
	Release-5-2-2-4:1.5.0.6
	Root_Release-5-2-2-4:1.5
	Release-5-2-2-1:1.5.0.4
	Root_Release-5-2-2-1:1.5
	upstream_version_5_2_2:1.5
	debian_version_5_2_2-1:1.5
	Release-5-2-2:1.5.0.2
	ROOT_Release-5-2-2:1.5
	ROOT_Release-5-2-1:1.4
	Release-5-2-1:1.4.0.2
	Release-5-2-0:1.3.0.8
	ROOT_Release-5-2-0:1.3
	ROOT_Release-5-1-2:1.3
	Release-5-1-2:1.3.0.6
	Version-5-1-1:1.3.0.4
	ROOT_Version-5-1-1:1.3
	debian_version_5_1_0-1:1.3
	upstream_version_5_1_0:1.3
	ROOT_Release-5-1-0:1.3
	Release-5-1-0:1.3.0.2
	ROOT_Release-5-0-0:1.2
	Release-5-0-0:1.2.0.20
	Release-4-3-3:1.2.0.18
	ROOT_Release-4-3-3:1.2
	upstream_version_4_3_2:1.2
	debian_version_4_3_2-1:1.2
	ROOT_Release-4-3-2:1.2
	Release-4-3-2:1.2.0.16
	Release-4-3-1:1.2.0.14
	ROOT_Release-4-3-1:1.2
	debian_version_4_3_0-1:1.2
	upstream_version_4_3_0:1.2
	ROOT_Release-4-3-0:1.2
	Release-4-3-0:1.2.0.12
	debian_version_3_2_1b-2:1.2
	debian_version_4_2_2-1:1.2
	upstream_version_4_2_2:1.2
	debian_version_3_2_1b-1:1.2
	upstream_version_3_2_1b:1.2
	Release-4-1-2:1.2.0.10
	Release-4-0-8:1.2.0.8
	debian_version_4_0_8a-1:1.2
	upstream_version_4_0_8a:1.2
	jostb-debian-ubuntu-patch:1.2.0.6
	debian_version_4_0_8-1:1.2
	upstream_version_4_0_8:1.2
	debian_version_4_0_7-1:1.2
	upstream_version_4_0_7:1.2
	debian_version_4_0_6-1:1.2
	upstream_version_4_0_6:1.2
	debian_version_4_0_2-1:1.2
	upstream_version_4_0_2:1.2
	Release-4-0-2_Root:1.2
	Release-4-0-2:1.2.0.4
	upstream_version_4_0_1:1.2
	debian_version_4_0_1-2:1.2
	Release-3-2-1:1.2.0.2
	Release-3-1-8:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2008.03.30.17.01.34;	author jost_boekemeier;	state Exp;
branches;
next	1.4;

1.4
date	2008.03.22.12.04.55;	author jost_boekemeier;	state Exp;
branches;
next	1.3;

1.3
date	2008.01.21.19.23.30;	author jost_boekemeier;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.25.17.00.32;	author jost2345;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.05.20.43.36;	author jost2345;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Release-5-2-2
@
text
@<?php
// The following is the "Java" class definition, stripped down to fit
// into one line<br To use this sample start Java with: java -jar
// JavaBridge.jar INET:9267<br> Or enable java.so or php_java.dll,
// which automatically start the above<br> process. Then
// type: php sample.php<br>
//
class P {const Pc="<C v=\"%s\" p=\"I\">", PC="</C>"; const Pi="<I v=\"%d\" m=\"%s\" p=\"I\">", PI="</I>"; const Ps="<S v=\"%s\"/>", Pl="<L v=\"%d\" p=\"%s\"/>", Po="<O v=\"%d\"/>"; private $c; function str($s){fwrite($this->c, sprintf(self::Ps, $s));} function obj($s){fwrite($this->c, sprintf(self::Po, $s->java));} function __construct(){$this->c=fsockopen("127.0.0.1",9267);} function cBeg($s){fwrite($this->c, sprintf(self::Pc, $s));} function cEnd(){fwrite($this->c, self::PC);} function iBeg($o, $m){fwrite($this->c, sprintf(self::Pi, $o, $m));} function iEnd(){fwrite($this->c, self::PI);} function val($s){if(is_object($s))$this->obj($s);else $this->str((string)$s);} function res(){$r=sscanf(fread($this->c, 8192),"%s v=\"%[^\"]\"");return $r[1];}} function gP() {static $p; if(!$p) $p=new P(); return $p;} class Java {var $java, $p; function __construct() {if(!func_num_args()) return; $this->p=gP(); $ar=func_get_args(); $this->p->cBeg(array_shift($ar)); foreach($ar as $arg) $this->p->val($arg); $this->p->cEnd(); $ar = sscanf($this->p->res(), "%d"); $this->java=$ar[0];} function __call($meth, $args) {$this->p->iBeg($this->java, $meth); foreach($args as $arg) $this->p->val($arg); $this->p->iEnd(); $proxy = new Java(); $ar = sscanf($this->p->res(), "%d"); $proxy->java=$ar[0]; $proxy->p=$this->p; return $proxy;} function toString() {$this->p->iBeg("", "castToString"); $this->p->val($this); $this->p->iEnd(); return base64_decode($this->p->res());}}

// Test
$i1 = new Java("java.math.BigInteger",  "1");
$i2 = new Java("java.math.BigInteger",  "2");
$i3 = $i1->add($i2);
echo $i3->toString() . "\n";

?>
@


1.4
log
@Release-5-2-1
@
text
@d8 1
a8 3
// Then type: php sample.php
//
class P {const Pc="<C v=\"%s\" p=\"I\">", PC="</C>"; const Pi="<I v=\"%d\" m=\"%s\" p=\"I\">", PI="</I>"; const Ps="<S v=\"%s\"/>", Pl="<L v=\"%d\" p=\"%s\"/>", Po="<O v=\"%d\"/>"; private $c; function str($s){fwrite($this->c, sprintf(self::Ps, $s));} function obj($s){fwrite($this->c, sprintf(self::Po, $s->java));} function __construct(){$this->c=fsockopen("127.0.0.1",9267);} function cBeg($s){fwrite($this->c, sprintf(self::Pc, $s));} function cEnd(){fwrite($this->c, self::PC);} function iBeg($o, $m){fwrite($this->c, sprintf(self::Pi, $o, $m));} function iEnd(){fwrite($this->c, self::PI);} function val($s){if(is_object($s))$this->obj($s);else $this->str((string)$s);} function res(){$r=sscanf(fread($this->c, 8192),"%s v=\"%[^\"]\"");return $r[1];}} class Java {var $java, $p; function __construct() {if(!func_num_args()) return; $this->p=new P(); $ar=func_get_args(); $this->p->cBeg(array_shift($ar)); foreach($ar as $arg) $this->p->val($arg); $this->p->cEnd(); $ar = sscanf($this->p->res(), "%d"); $this->java=$ar[0];} function __call($meth, $args) {$this->p->iBeg($this->java, $meth); foreach($args as $arg) $this->p->val($arg); $this->p->iEnd(); $proxy = new Java(); $ar = sscanf($this->p->res(), "%d"); $proxy->java=$ar[0]; $proxy->p=$this->p; return $proxy;} function toString() {$this->p->iBeg("", "castToString"); $this->p->val($this); $this->p->iEnd(); return base64_decode($this->p->res());}}
@


1.3
log
@Release-5-0-1
@
text
@d2 9
a10 7
class Protocol {
  const Pc="<C v=\"%s\" p=\"I\">", PC="</C>";
  const Pi="<I v=\"%d\" m=\"%s\" p=\"I\">", PI="</I>";
  const Ps="<S v=\"%s\"/>", Pl="<L v=\"%d\" p=\"%s\"/>", Po="<O v=\"%d\"/>";
  var $c;
  
  function __construct() { $this->c=fsockopen("127.0.0.1",9267); }
a11 50
  function createBegin($s) { fwrite($this->c, sprintf(self::Pc, $s)); }
  function createEnd() { fwrite($this->c, self::PC); }

  function invokeBegin($o, $m) { fwrite($this->c, sprintf(self::Pi, $o, $m)); }
  function invokeEnd() { fwrite($this->c, self::PI); }

  function writeString($s) {fwrite($this->c, sprintf(self::Ps, $s));}
  function writeInt($s) { fwrite($this->c, sprintf(self::Pl, $s<0?-$s:$s, $s<0?"A":"P")); }
  function writeObject($s) { fwrite($this->c, sprintf(self::Po, $s->java)); }
  function writeVal($s) {
    if(is_string($s)) $this->writeString($s);
    else if(is_int($s)) $this->writeInt($s);
    else $this->writeObject($s);
  }

  function getResult() { $res = fread($this->c, 8192); $ar = sscanf($res, '%s v="%[^"]"'); return $ar[1]; }
}

function getProtocol() { static $protocol; if(!isset($protocol)) $protocol=new Protocol(); return $protocol; }

class Java {
  var $java;
  function __construct() {
    if(!func_num_args()) return;
    $protocol=getProtocol();
    $ar = func_get_args();
    $protocol->createBegin(array_shift($ar));
    foreach($ar as $arg) { $protocol->writeVal($arg); }
    $protocol->createEnd();
    $ar = sscanf($protocol->getResult(), "%d");
    $this->java=$ar[0];
  }
  function __call($method, $args) {
    $protocol=getProtocol();
    $protocol->invokeBegin($this->java, $method);
    foreach($args as $arg) { $protocol->writeVal($arg); }
    $protocol->invokeEnd();
    $proxy = new Java();
    $ar = sscanf($protocol->getResult(), "%d");
    $proxy->java=$ar[0];
    return $proxy;
  }
  function toString() {
    $protocol=getProtocol();
    $protocol->invokeBegin("", "castToString");
    $protocol->writeVal($this);
    $protocol->invokeEnd();
    return base64_decode($protocol->getResult());
  }
}
d17 1
@


1.2
log
@Release-3-2-1
@
text
@d8 1
a8 1
  function __construct() { $this->c=fsockopen("127.0.0.1",9267); fwrite($this->c, "\177@@"); }
d57 1
a57 1
    return $protocol->getResult();
@


1.1
log
@Release-3-1-8rc3
@
text
@d8 1
a8 1
  function __construct() { $this->c=fsockopen("192.168.5.203",9267); fwrite($this->c, "\177@@"); }
d25 1
a25 1
  function getResult() { $res = fread($this->c, 8192); $ar = sscanf($res, '%s v="%[^"]"'); var_dump($ar); return $ar[1]; }
@

