head	1.22;
access;
symbols
	Release-7-1-1:1.21.0.8
	Root_Release-7-1-1:1.21
	Root_Release_7-0-1:1.21
	Release_7-0-1:1.21.0.6
	Release_7-0-0:1.21.0.4
	Root_Release_7-0-0:1.21
	Release-6-2-2:1.21.0.2
	Release-6-1-2-3:1.12
	Root_Release-6-1-2-3:1.12
	Release-6-1-2-2:1.12.0.16
	Root_Release-6-1-2-2:1.12
	debian_version_6_1_2_1-1:1.12
	upstream_version_6_1_2_1:1.12
	Release-6-1-2-1_new:1.12.0.14
	Root_Release-6-1-2-1_new:1.12
	Release-6-1-2-1:1.12.0.12
	Root_Release-6-1-2-1:1.12
	upstream_version_6_1_2:1.12
	debian_version_6_1_2-1:1.12
	Release-6-1-2:1.12.0.10
	Root_Release-6-1-2:1.12
	debian_version_6_1_1-2:1.12
	debian_version_6_1_1-1:1.12
	upstream_version_6_1_1:1.12
	Release-6-1-1:1.12.0.8
	Root_Release-6-1-1:1.12
	Release-6-0-4:1.12.0.6
	Root_Release-6-0-4:1.12
	Release-6-0-3_NEW:1.12.0.2
	Root_Release-6-0-3_NEW:1.12
	Release-6-0-3:1.12.0.4
	Root_Release-6-0-3:1.12
	Release-6-0-0:1.11.0.2
	Root_Release-6-0-0:1.12
	Release-5-5-4-1:1.10.0.14
	Root_Release-5-5-4-1:1.10
	Release-5-5-4:1.10.0.12
	Root_Release-5-5-4:1.10
	Release-5-5-3:1.10.0.10
	ROOT_Release-5-5-3:1.10
	Release-5-5-2:1.10.0.8
	Root_Release-5-5-2:1.10
	debian_version_5_5_1-1:1.10
	Release-5-5-1:1.10.0.4
	upstream_version_5_5_1:1.10
	ROOT_Release-5-5-1:1.10
	debian_version_5_5-1:1.10
	upstream_version_5_5:1.10
	ROOT_Release-5-5:1.10
	Release-5-5:1.10.0.6
	debian_version_5_4_4_2-3:1.10
	Release-5-4-4-2-1:1.10.0.2
	debian_version_5_4_4_2-2:1.10
	debian_version_5_4_4_2-1:1.10
	upstream_version_5_4_4_2:1.10
	debian_version_5_4_4_1-1:1.8
	upstream_version_5_4_4_1:1.8
	debian_version_5_4_4-1:1.7
	upstream_version_5_4_4:1.7
	Release-5-4-4:1.7.0.4
	Root_Release-5-4-4:1.7
	debian_version_5_4_3_2-1:1.6
	upstream_version_5_4_3_2:1.6
	Release_5-4-3-2:1.6.0.8
	Root_Release_5-4-3-2:1.6
	upstream_version_5_4_3_1:1.6
	debian_version_5_4_3_1-1:1.6
	Release-5-4-3:1.6.0.6
	Root_Release-5-4-3:1.6
	Root_Release-5-4-1:1.6
	Release-5-4-1:1.6.0.4
	Root_Release-5-4:1.6
	Release-5-4:1.6.0.2
	upstream_version_5_3_4:1.5
	debian_version_5_3_4-1:1.5
	ROOT_Release-5-3-4:1.5
	Release-5-3-4:1.5.0.14
	ROOT_Release-5-3-3:1.5
	Release-5-3-3:1.5.0.10
	debian_version_5_3_2_1_2-1:1.5
	upstream_version_5_3_2_1_2:1.5
	debian_version_5_3_2_1_1-1:1.5
	debian_version_5_3_2_1_1:1.5
	upstream_version_5_3_2_1_1:1.5
	Root_Release-5-3-2-1:1.5
	Release-5-3-2-1:1.5
	ROOT_RELEASE-5-3-2-1:1.5
	RELEASE-5-3-2-1:1.5.0.12
	Release-5-3-2:1.5.0.8
	Root_Release-5-3-2:1.5
	Root_Release-5-3-1:1.5
	Release-5-3-1:1.5.0.6
	Release-5-2-3-1:1.5.0.4
	Root_Release-5-2-3-1:1.5
	Release-5-2-2-4:1.5.0.2
	Root_Release-5-2-2-4:1.5
	Release-5-2-2-1:1.4.0.2
	Root_Release-5-2-2-1:1.4
	upstream_version_5_2_2:1.3
	debian_version_5_2_2-1:1.3
	Release-5-2-2:1.3.0.14
	ROOT_Release-5-2-2:1.3
	ROOT_Release-5-2-1:1.3
	Release-5-2-1:1.3.0.12
	Release-5-2-0:1.3.0.10
	ROOT_Release-5-2-0:1.3
	ROOT_Release-5-1-2:1.3
	Release-5-1-2:1.3.0.8
	Version-5-1-1:1.3.0.6
	ROOT_Version-5-1-1:1.3
	debian_version_5_1_0-1:1.3
	upstream_version_5_1_0:1.3
	ROOT_Release-5-1-0:1.3
	Release-5-1-0:1.3.0.4
	ROOT_Release-5-0-0:1.3
	Release-5-0-0:1.3.0.2
	Release-4-3-3:1.2.0.2
	ROOT_Release-4-3-3:1.2
	upstream_version_4_3_2:1.1
	debian_version_4_3_2-1:1.1
	ROOT_Release-4-3-2:1.1
	Release-4-3-2:1.1.0.4
	Release-4-3-1:1.1.0.2
	ROOT_Release-4-3-1:1.1;
locks; strict;
comment	@# @;


1.22
date	2017.04.14.13.01.11;	author jost_boekemeier;	state dead;
branches;
next	1.21;

1.21
date	2010.10.31.14.12.42;	author jost_boekemeier;	state Exp;
branches;
next	1.20;

1.20
date	2010.09.25.11.18.30;	author jost_boekemeier;	state Exp;
branches;
next	1.19;

1.19
date	2010.08.01.10.38.36;	author jost_boekemeier;	state Exp;
branches;
next	1.18;

1.18
date	2010.07.17.11.38.16;	author jost_boekemeier;	state Exp;
branches;
next	1.17;

1.17
date	2010.07.13.11.48.52;	author jost_boekemeier;	state Exp;
branches;
next	1.16;

1.16
date	2010.07.12.15.33.47;	author jost_boekemeier;	state Exp;
branches;
next	1.15;

1.15
date	2010.07.12.15.30.29;	author jost_boekemeier;	state Exp;
branches;
next	1.14;

1.14
date	2010.07.11.11.57.48;	author jost_boekemeier;	state Exp;
branches;
next	1.13;

1.13
date	2010.07.04.11.00.06;	author jost_boekemeier;	state Exp;
branches;
next	1.12;

1.12
date	2010.02.28.15.24.52;	author jost_boekemeier;	state Exp;
branches;
next	1.11;

1.11
date	2010.02.21.16.24.10;	author jost_boekemeier;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.25.12.25.23;	author jost_boekemeier;	state Exp;
branches;
next	1.9;

1.9
date	2009.04.19.17.24.30;	author jost_boekemeier;	state Exp;
branches;
next	1.8;

1.8
date	2009.03.15.15.33.21;	author jost_boekemeier;	state Exp;
branches;
next	1.7;

1.7
date	2009.03.08.14.34.47;	author jost_boekemeier;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.09.12.55.03;	author jost_boekemeier;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.24.22.24.40;	author jost2345;	state Exp;
branches;
next	1.4;

1.4
date	2008.09.20.15.00.58;	author jost_boekemeier;	state Exp;
branches;
next	1.3;

1.3
date	2008.01.06.20.59.20;	author jost_boekemeier;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.28.13.56.42;	author jost_boekemeier;	state Exp;
branches;
next	1.1;

1.1
date	2007.12.02.18.05.08;	author jost_boekemeier;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Removed JavaProxy.php
@
text
@<%@@page import="javax.script.*" %>
<%@@page import="php.java.script.servlet.PhpHttpScriptContext" %>

<%!
private static final CompiledScript script;
static {
	try {
		script =((Compilable)(new ScriptEngineManager().getEngineByName("php"))).compile(
        "<?php echo 'Hello '.java_context()->get('hello').'!<br>\n'; ?>");
	} catch (ScriptException e) {
		throw new RuntimeException(e);
	}
}
%>

<%
  // create a new copy of the compiled script
  CompiledScript instance = (CompiledScript)((java.security.cert.CertStoreParameters)script).clone();
  try {
	  // create a custom ScriptContext to connect the engine to the ContextLoaderListener's FastCGI runner 
	  instance.getEngine().setContext(new PhpHttpScriptContext(instance.getEngine().getContext(),this,application,request,response));
	  
	  // display hello world
	  instance.getEngine().put("hello", "eval1: " + Thread.currentThread());
	  instance.eval();
	  instance.getEngine().put("hello", "eval2: " + Thread.currentThread());
	  instance.eval();
	  instance.getEngine().put("hello", "eval3: " + Thread.currentThread());
	  instance.eval();
	  instance.getEngine().put("hello", "eval4: " + Thread.currentThread());
	  instance.eval();
	  out.println("thread ended: " + Thread.currentThread());
  } catch (Exception ex) {
	out.println("Could not evaluate script: "+ex);
  }
%>
@


1.21
log
@Release-6-2-1
@
text
@@


1.20
log
@Release-6-2-1
@
text
@d21 1
a21 1
	  instance.getEngine().setContext(new PhpCompiledHttpScriptContext(instance.getEngine().getContext(),this,application,request,response));
@


1.19
log
@Release-6-2-1
@
text
@d2 1
a2 1
<%@@page import="php.java.script.servlet.PhpCompiledHttpScriptContext" %>
@


1.18
log
@Release-6-2-1
@
text
@d23 1
a23 1
	  // diplay hello world
@


1.17
log
@Release-6-3-1-test3

Fixed synchronisation issue
@
text
@d19 17
a35 14

  // create a custom ScriptContext to connect the engine to the ContextLoaderListener's FastCGI runner 
  instance.getEngine().setContext(new PhpCompiledHttpScriptContext(instance.getEngine().getContext(),this,application,request,response));
  
  // diplay hello world
  instance.getEngine().put("hello", "eval1: " + Thread.currentThread());
  instance.eval();
  instance.getEngine().put("hello", "eval2: " + Thread.currentThread());
  instance.eval();
  instance.getEngine().put("hello", "eval3: " + Thread.currentThread());
  instance.eval();
  instance.getEngine().put("hello", "eval4: " + Thread.currentThread());
  instance.eval();
  out.println("thread ended: " + Thread.currentThread());
@


1.16
log
@Release-6-2-1
@
text
@a2 1
<%@@page import="php.java.script.CloneableScript" %>
d9 1
a9 1
        "<?php echo 'Hello '.java_context()->get('hello').'!<br>'; ?>");
d18 1
a18 1
  CompiledScript  instance = (CompiledScript)((CloneableScript)script).clone();
d21 1
a21 2
  ScriptContext ctx = new PhpCompiledHttpScriptContext(script.getEngine().getContext(),this,application,request,response);
  instance.getEngine().setContext(ctx);
d24 1
a24 1
  instance.getEngine().put("hello", "world");
d26 1
a26 1
  instance.getEngine().put("hello", String.valueOf(this));
d28 1
a28 1
  instance.getEngine().put("hello", "world");
d30 1
a30 1
  instance.getEngine().put("hello", String.valueOf(instance));
d32 2
a33 1
%>@


1.15
log
@Release-6-2-1
@
text
@d3 1
a3 1
<%@@page import="java.security.cert.CertStoreParameters" %>
d19 1
a19 1
  CompiledScript instance = (CompiledScript)((CertStoreParameters)script).clone();
d22 2
a23 5
  instance.getEngine().setContext(new PhpCompiledHttpScriptContext(script.getEngine().getContext(),this,application,request,response));
  
  // connect its output
  instance.getEngine().getContext().setWriter(out);
  instance.getEngine().getContext().setErrorWriter(out);
d26 1
a26 1
  instance.getEngine().put("hello", "world!");
d30 4
@


1.14
log
@Release-6-2-1
@
text
@d2 2
d18 15
a32 7
  script.getEngine().getContext().setWriter(out);
  script.getEngine().getContext().setErrorWriter(out);
  script.getEngine().put("hello", "world!");
  ScriptContext ctx = new php.java.script.servlet.PhpCompiledHttpScriptContext(script.getEngine().getContext(),this,application,request,response);
  script.eval(ctx);
  script.getEngine().put("hello", String.valueOf(this));
  script.eval(ctx);
@


1.13
log
@Release-6-2-1
@
text
@d1 23
a23 1
<jsp:include page="/index.php" />@


1.12
log
@Release-6-0-3
@
text
@d1 1
a1 35
<%@@page import="java.io.*" %>
<%@@page import="javax.script.*" %>
<%@@page import="php.java.script.servlet.EngineFactory" %>

<%!
private static final Reader HELLO_SCRIPT_READER = EngineFactory.createPhpScriptReader("<?php echo 'Hello java world!'; ?>");
%>

<%
/** access the JSR 223 script engine from the current web app */
    ScriptEngine e = EngineFactory.getPhpScriptEngine (this, 
                                                    application, 
                                                    request, 
                                                    response);
/** the script engine shall use the same output as the servlet */
e.getContext().setWriter (out);

/** evaluate the script, use the file: servlet +"._cache_.php" as a script cache */
Reader reader = EngineFactory.createPhpScriptFileReader(getClass().getName()+"._cache_.php", HELLO_SCRIPT_READER);
try {
    e.eval (reader);
} catch (Exception ex) {
  ex.printStackTrace(new java.io.PrintWriter(out));
}
reader.close();
out.println("<br><br><code>request variables:<br>");
out.println("<br>contextPath:&nbsp;"+request.getContextPath());
out.println("<br>pathInfo:&nbsp;&nbsp;&nbsp;&nbsp;"+request.getPathInfo());
out.println("<br>servletPath:&nbsp;"+request.getServletPath());
out.println("<br>queryString:&nbsp;"+request.getQueryString());
out.println("<br>requestUri:&nbsp;&nbsp;"+request.getRequestURI());
out.println("<br>requestURL:&nbsp;&nbsp;"+request.getRequestURL());
out.println("<br>pathTranslated:&nbsp;&nbsp;"+request.getPathTranslated());
out.println("</code><br><br>");
%>
@


1.11
log
@Release-6-0-0
@
text
@d20 5
a24 1
e.eval (reader);
@


1.10
log
@Release-5.4.4.2
@
text
@d19 1
a19 1
Reader reader = EngineFactory.createPhpScriptFileReader(request.getServletPath()+"._cache_.php", HELLO_SCRIPT_READER);
d22 9
@


1.9
log
@Release-5-4-4-2
@
text
@d6 1
a6 1
private static final Reader HELLO_SCRIPT_READER = new StringReader("<?php echo 'Hello java world!'; ?>");
@


1.8
log
@*** empty log message ***
@
text
@d6 1
a6 11
/* The following code makes sure that the PHP script is generated with the servlet instance.
   When the servlet is generated, a file .../jsr223.jsp._cache_.php appears */

private static File helloScript = null;

/** return a new instance of the php hello script, or the cached script */
private static synchronized File getHelloScript(String path) {
 if (helloScript!=null) return helloScript;
 return helloScript = EngineFactory.getPhpScript(path, 
        new StringReader("<?php echo 'Hello java world!'; ?>"));
}
d11 1
a11 1
ScriptEngine e = EngineFactory.getPhpScriptEngine (this, 
d19 1
a19 1
FileReader reader = EngineFactory.createPhpScriptFileReader(getHelloScript(EngineFactory.getRealPath(application, request.getServletPath())+"._cache_.php"));
@


1.7
log
@Release-5-4-4
@
text
@d29 1
a29 1
FileReader reader = EngineFactory.createPhpScriptFileReader(getHelloScript(EngineFactory.getRealPath(application, request.getServletPath())));
@


1.6
log
@Backward compatibility with BEA WL 8.1
@
text
@d12 1
a12 1
private static File getHelloScript(String path) {
@


1.5
log
@*** empty log message ***
@
text
@d1 4
d9 1
a9 1
private static java.io.File helloScript = null;
d12 1
a12 1
private static java.io.File getHelloScript(String path) {
d14 2
a15 2
 return helloScript=php.java.script.servlet.EngineFactory.getPhpScript(path, 
        new java.io.StringReader("<?php echo 'Hello java world!'; ?>"));
d21 1
a21 2
javax.script.ScriptEngine e = 
  php.java.script.servlet.EngineFactory.getPhpScriptEngine (this, 
d29 1
a29 2
java.io.File script = getHelloScript(application.getRealPath(request.getServletPath()));
java.io.FileReader reader = php.java.script.servlet.EngineFactory.createPhpScriptFileReader(script);
@


1.4
log
@Release-5-2-2-1
@
text
@d5 1
a5 1
private static java.io.Reader helloScript = null;
d8 1
a8 1
private static java.io.Reader getHelloScript(String path) {
d10 1
a10 1
 return helloScript=php.java.script.EngineFactory.getPhpScript(path, 
d18 1
a18 1
  php.java.script.EngineFactory.getPhpScriptEngine (this, 
d26 4
a29 2
e.eval (getHelloScript(application.getRealPath(request.getServletPath())));

@


1.3
log
@Release-5-0-0
@
text
@d1 5
a5 1
<%
d7 7
a13 1
out.println ("hello from the servlet <br>");
d15 2
d22 1
d24 3
a26 7
e.eval (
    "<?php "+
     "require_once ($_SERVER['DOCUMENT_ROOT'].'/java/Java.inc');" +
     "$ctx = java_context();" +
     "echo 'hello from PHP '.$ctx.'<br>\n'"+
    "?>"
);
@


1.2
log
@Release-4-3-3
@
text
@d11 7
a17 1
e.eval ("<?php $x = java_context(); echo 'hello from PHP '.$x.'<br>\n'?>");
@


1.1
log
@Release-4-3-1
@
text
@a12 5
e = (new javax.script.ScriptEngineManager()).getEngineByName("js");
e.getContext().setWriter (out);
e.eval ("print (\"hello from ECMA script\")");


@

