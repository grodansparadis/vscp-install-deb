head	1.1;
access;
symbols
	Release-7-1-1:1.1.0.52
	Root_Release-7-1-1:1.1
	Root_Release_7-0-1:1.1
	Release_7-0-1:1.1.0.50
	Release_7-0-0:1.1.0.48
	Root_Release_7-0-0:1.1
	Release-6-2-2:1.1.0.46
	Release-6-1-2-3:1.1
	Root_Release-6-1-2-3:1.1
	Release-6-1-2-2:1.1.0.44
	Root_Release-6-1-2-2:1.1
	debian_version_6_1_2_1-1:1.1
	upstream_version_6_1_2_1:1.1
	Release-6-1-2-1_new:1.1.0.42
	Root_Release-6-1-2-1_new:1.1
	Release-6-1-2-1:1.1.0.40
	Root_Release-6-1-2-1:1.1
	upstream_version_6_1_2:1.1
	debian_version_6_1_2-1:1.1
	Release-6-1-2:1.1.0.38
	Root_Release-6-1-2:1.1
	debian_version_6_1_1-2:1.1
	debian_version_6_1_1-1:1.1
	upstream_version_6_1_1:1.1
	Release-6-1-1:1.1.0.36
	Root_Release-6-1-1:1.1
	Release-6-0-4:1.1.0.34
	Root_Release-6-0-4:1.1
	Release-6-0-3_NEW:1.1.0.30
	Root_Release-6-0-3_NEW:1.1
	Release-6-0-3:1.1.0.32
	Root_Release-6-0-3:1.1
	Release-6-0-0:1.1.0.28
	Root_Release-6-0-0:1.1
	Release-5-5-4-1:1.1.0.26
	Root_Release-5-5-4-1:1.1
	Release-5-5-4:1.1.0.24
	Root_Release-5-5-4:1.1
	Release-5-5-3:1.1.0.22
	ROOT_Release-5-5-3:1.1
	Release-5-5-2:1.1.0.20
	Root_Release-5-5-2:1.1
	debian_version_5_5_1-1:1.1
	Release-5-5-1:1.1.0.16
	upstream_version_5_5_1:1.1
	ROOT_Release-5-5-1:1.1
	debian_version_5_5-1:1.1
	upstream_version_5_5:1.1
	ROOT_Release-5-5:1.1
	Release-5-5:1.1.0.18
	debian_version_5_4_4_2-3:1.1
	Release-5-4-4-2-1:1.1.0.12
	debian_version_5_4_4_2-2:1.1
	debian_version_5_4_4_2-1:1.1
	upstream_version_5_4_4_2:1.1
	debian_version_5_4_4_1-1:1.1
	upstream_version_5_4_4_1:1.1
	debian_version_5_4_4-1:1.1
	upstream_version_5_4_4:1.1
	Release-5-4-4:1.1.0.14
	Root_Release-5-4-4:1.1
	debian_version_5_4_3_2-1:1.1
	upstream_version_5_4_3_2:1.1
	Release_5-4-3-2:1.1.0.10
	Root_Release_5-4-3-2:1.1
	upstream_version_5_4_3_1:1.1
	debian_version_5_4_3_1-1:1.1
	Release-5-4-3:1.1.0.8
	Root_Release-5-4-3:1.1
	Root_Release-5-4-1:1.1
	Release-5-4-1:1.1.0.6
	Root_Release-5-4:1.1
	Release-5-4:1.1.0.4
	upstream_version_5_3_4:1.1
	debian_version_5_3_4-1:1.1
	ROOT_Release-5-3-4:1.1
	Release-5-3-4:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2008.11.27.21.02.11;	author jost_boekemeier;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.StringReader;

import javax.script.Invocable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;


/**
* Create and run THREAD_COUNT PHP threads, concurrently accessing a
* shared resource.
* 
* Create 5 script engines, passing each a shared resource allocated
* from Java. Each script engine has to implement Runnable.
*
* Java accesses the Runnable script engine using
* scriptEngine.getInterface() and calls thread.start() to invoke each
* PHP Runnable implementations concurrently.
*/
public class PhpThreads {

    public static final String runnable = new String("<?php\n" +
    		"function run() {\n" +
    		" $out = java_context()->getAttribute('sharedResource', 100);\n" +
    		" $nr = (string)java_context()->getAttribute('nr', 100);\n" +
    		" echo \"started thread: $nr\n\";\n" +
    		" for($i=0; $i<100; $i++) {\n" +
    		"  $out->write(ord($nr));\n" +
    		"  java('java.lang.Thread')->sleep(1);\n" +
    		" }\n" +
    		"}\n" +
    		"?>\n");
    
    static final int THREAD_COUNT = 5;
    public static void main(String[] args) throws Exception {
	ScriptEngineManager manager = new ScriptEngineManager();
	Thread threads[] = new Thread[THREAD_COUNT];
	ScriptEngine engines[] = new ScriptEngine[THREAD_COUNT];
	ByteArrayOutputStream sharedResource = new ByteArrayOutputStream();
	StringReader runnableReader = new StringReader(runnable);

	// create THREAD_COUNT PHP threads
	for (int i=0; i<THREAD_COUNT; i++) {
	    engines[i] = manager.getEngineByName("php-invocable");
	    if (engines[i] == null)
		throw new NullPointerException ("php script engine not found");
	    
	    engines[i].put("nr", new Integer(i+1));
	    engines[i].put("sharedResource", sharedResource);
	    
	    engines[i].eval(runnableReader);
	    runnableReader.reset();

	    // cast the whole script to Runnable; note also getInterface(continuation, type)
	    Runnable r = (Runnable) ((Invocable)engines[i]).getInterface(Runnable.class);
	    threads[i] = new Thread(r);
	}
	
	// run the THREAD_COUNT PHP threads
	for (int i=0; i<THREAD_COUNT; i++) {
	    threads[i].start();
	}
	
	// wait for the THREAD_COUNT PHP threads to finish
	for (int i=0; i<THREAD_COUNT; i++) {
	    threads[i].join();
	    ((Closeable)engines[i]).close();
	}
	
	// print the output generated by the THREAD_COUNT concurrent threads
	String result = sharedResource.toString();
	System.out.println(result);
	
	// Check result
	Object res=manager.getEngineByName("php").eval(
		"<?php " +
		"exit((int)('10011002100310041005'!=" +
		"@@system(\"echo -n "+result+"|sed 's/./&\\\n/g'|sort|uniq -c|tr -d ' \\\n'\")));" +
		"?>");
	
	System.exit(((Number)res).intValue());
    }
}
@
