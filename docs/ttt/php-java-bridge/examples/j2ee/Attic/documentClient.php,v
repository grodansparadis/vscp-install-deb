head	1.7;
access;
symbols
	Release-3-0-8:1.6.0.2
	Release-2-0-8:1.3.0.6
	Release-2-0-7_Root:1.3
	Release-2-0-7:1.3.0.2
	Release-2-0-6-branch:1.2.0.2
	Version-1:1.1.0.6
	Version-2:1.1.0.4
	Release-2:1.1.0.2;
locks; strict;
comment	@# @;


1.7
date	2006.04.26.19.14.23;	author jost2345;	state dead;
branches;
next	1.6;

1.6
date	2006.03.21.18.11.16;	author jost2345;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2006.02.20.19.09.22;	author jost2345;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.18.15.42.49;	author jost2345;	state Exp;
branches;
next	1.3;

1.3
date	2005.07.08.17.57.24;	author jost2345;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.09.21.02.41;	author jost2345;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.28.16.32.52;	author jost2345;	state Exp;
branches;
next	;

1.6.2.1
date	2006.04.23.19.26.41;	author jost2345;	state dead;
branches;
next	;


desc
@@


1.7
log
@*** empty log message ***
@
text
@<?php

class SERVER {const JBOSS=1, WEBSPHERE=2, SUN=3, ORACLE=4;}

// -------------- adjust these variables, if necessary
$server=array_key_exists(1, $argv)? $argv[1] : SERVER::JBOSS;
$WAS_HOME=array_key_exists(2, $argv)? $argv[2]: "/opt/IBM/WebSphere/AppServer";
$JBOSS_HOME=array_key_exists(2, $argv)? $argv[2] : "/opt/jboss-4.0.2/";
$app_server=array_key_exists(2, $argv)? $argv[2] : getenv("HOME")."/SUNWappserver";
// ---------------

$System = new JavaClass("java.lang.System");
$props = $System->getProperties();
echo "Using java VM from: ${props['java.vm.vendor']}\n";
echo "connecting to server: ";

$clientJar = getcwd() . "/documentBeanClient.jar";
switch($server) {
 case SERVER::JBOSS: 
   echo "jboss. Loading $JBOSS_HOME/lib \n";

   if(!$props['java.vm.vendor']->toLowerCase()->startsWith("sun"))
      echo "WARNING: You need to run this example with the SUN VM\n";
   if(!is_dir($JBOSS_HOME)) die("ERROR: Incorrect $JBOSS_HOME.");

   $name = "DocumentEJB";
   java_require("$JBOSS_HOME/client/;$clientJar");
   $server=array("java.naming.factory.initial"=>
		 "org.jnp.interfaces.NamingContextFactory",
		 "java.naming.provider.url"=>
		 "jnp://127.0.0.1:1099");
   break;
 case SERVER::WEBSPHERE: 
   echo "websphere. Loading $WAS_HOME/lib/\n";

   if(!$props['java.vm.vendor']->toLowerCase()->startsWith("ibm"))
      echo "WARNING: You need to run this example with the IBM VM\n";
   if(!is_dir($WAS_HOME)) die("ERROR: Incorrect $WAS_HOME.");

   $name = "RMIdocument";
   java_require("$WAS_HOME/lib/;$clientJar");
   $server=array("java.naming.factory.initial"=>
		 "com.ibm.websphere.naming.WsnInitialContextFactory",
		 "java.naming.provider.url"=>
		 "iiop://localhost:2809");
   break;
 case SERVER::SUN:
   echo "sun. Loading: $app_server/lib\n";

   if(!$props['java.vm.vendor']->toLowerCase()->startsWith("sun"))
      echo "WARNING: You need to run this example with the SUN VM\n";
   if(!is_dir($app_server)) die("ERROR: Incorrect $app_server.");

   $name = "RMIdocument";
   java_require("$app_server/lib/;$clientJar");
   $server=array("java.naming.factory.initial"=>
		 "com.sun.jndi.cosnaming.CNCtxFactory",
		 "java.naming.provider.url"=>
		 "iiop://localhost:3700");
   break;
 }

try {
  $doc=createDocument($name, $server);
} catch (JavaException $e) {
  echo "Could not create remote document. Have you deployed documentBean.jar?\n";
  echo $e->getCause() ."\n";
  exit (1);
}

/* add pages to the remote document */
$doc->addPage(new java ("Page", 0, "this is page 1"));
$doc->addPage(new java ("Page", 0, "this is page 2"));
/* and print a summary */
print $doc->analyze() . "\n";

destroyDocument($doc);


/* Utility procedures */

/*
 * convenience function which connects to the AS server using the URL
 * $url, looks up the service $jndiname and returns a new remote
 * document.
 * @@param jndiname The name of the remote document, see sun-ejb-jar.xml
 * @@param serverArgs An array describing the connection parameters.
 */
function createDocument($jndiname, $serverArgs) {
  // find initial context
  $initial = new java("javax.naming.InitialContext", $serverArgs);
  
  // find the service
  $objref  = $initial->lookup("$jndiname");
  
  // access the home interface
  $DocumentHome = new JavaClass("DocumentHome");
  $PortableRemoteObject = new JavaClass("javax.rmi.PortableRemoteObject");
  $home=$PortableRemoteObject->narrow($objref, $DocumentHome);

  // create a new remote document and return it
  $doc = $home->create();
  return $doc;
}

/*
 * convenience function which destroys the reference to the remote
 * document
 * @@param The remote document.
 */
function destroyDocument($doc) {
	$doc->remove();
}

?>
@


1.6
log
@Release-3.0.8rc
@
text
@@


1.6.2.1
log
@Release-3-0-8-1
@
text
@@


1.5
log
@Release-3.0.7a
@
text
@d9 1
a9 1
$app_server=array_key_exists(2, $argv)? $argv[2] : "~/SUNWappserver";
@


1.4
log
@Release-3.0.7a
@
text
@a3 1
$server=SERVER::JBOSS;
d5 10
d17 1
a17 1
$here = getcwd();
d20 6
a25 1
   echo "jboss\n";
d27 1
a27 2
   $JBOSS_HOME=isset($JBOSS_HOME) ? $JBOSS_HOME : "/opt/jboss-4.0.2/";
   java_require("$JBOSS_HOME/client/;$here/documentBean.jar");
d34 6
a39 1
   echo "websphere\n";
d41 1
a41 2
   $WAS_HOME=isset($WAS_HOME) ? $WAS_HOME : "/opt/IBM/WebSphere/AppServer";
   java_require("$WAS_HOME/lib/;$here/documentBean.jar");
d48 6
a53 1
   echo "sun\n";
d55 1
a55 2
   $app_server=isset($app_server) ? $app_server : "~/SUNWappserver";
   java_require("$app_server/lib/;$here/documentBean.jar");
d64 1
a64 1
  $doc=createDocument("$name", $server);
d99 2
a100 2
  $home = $PortableRemoteObject->narrow($objref, $DocumentHome);
  
@


1.3
log
@Release-2.0.7
@
text
@d3 2
a4 1
include("globals.php");
d6 1
a6 1
$doc=createDocument($app_url, "RMIdocument");
d8 43
d53 1
d58 36
@


1.2
log
@corrected sample
@
text
@d9 1
a9 1
print $doc->analyze();
@


1.1
log
@Release-1.0.8
@
text
@a13 2

		@

