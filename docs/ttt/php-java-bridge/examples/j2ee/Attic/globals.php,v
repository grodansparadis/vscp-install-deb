head	1.6;
access;
symbols
	Release-2-0-8:1.5.0.4
	Release-2-0-7_Root:1.4
	Release-2-0-7:1.4.0.4
	Release-2-0-6-branch:1.4.0.2
	Version-1:1.3.0.6
	Version-2:1.3.0.4
	Release-2:1.3.0.2;
locks; strict;
comment	@# @;


1.6
date	2006.02.18.15.42.49;	author jost2345;	state dead;
branches;
next	1.5;

1.5
date	2005.08.11.18.08.17;	author jost2345;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.09.21.02.41;	author jost2345;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.03.16.56.08;	author jost2345;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.31.16.18.48;	author jost2345;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.28.16.32.53;	author jost2345;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Release-3.0.7a
@
text
@<?php

// please adjust the following line if your server runs on a different host
$app_url="iiop://localhost:3700"; // e.g.: "iiop://192.168.5.1:3700";

$here=getcwd();
$client="$here/documentBeanClient.jar";
$j2ee_jar="$here/j2ee.jar";
java_set_library_path("$client;$j2ee_jar");

/*
 * convenience function which connects to the AS server using the URL
 * $url, looks up the service $jndiname and returns a new remote
 * document.
 */
function createDocument($url, $jndiname) {

        /*
         * Set up the initial context.  The following code is AS
         * specific, WebLogic for example uses a different URL.
         * Please consult your AS documentation for details.
         */
	$env = new java("java.util.Properties");
	$env->put("java.naming.factory.initial", "com.sun.jndi.cosnaming.CNCtxFactory");
	$env->put("java.naming.provider.url", $url);
	$initial = new java("javax.naming.InitialContext", $env);

        // find the service
	$objref  = $initial->lookup($jndiname);

        // access the home interface
	$DocumentHome = new java_class("DocumentHome");
	$PortableRemoteObject = new java_class("javax.rmi.PortableRemoteObject");
	$home = $PortableRemoteObject->narrow($objref, $DocumentHome);

        // create a new remote document and return it
	$doc = $home->create();
	return $doc;
}

/*
 * convenience function which destroys the reference to the remote
 * document
 */
function destroyDocument($doc) {
	$doc->remove();
}

?>
@


1.5
log
@Release-2.0.8-preview
@
text
@@


1.4
log
@corrected sample
@
text
@d6 1
a6 1
$here=trim(`pwd`);
@


1.3
log
@Release-1.0.8
@
text
@d7 1
a7 1
client="$here/documentClient.jar";
@


1.2
log
@Release-1.0.8
@
text
@d6 10
a15 17
$here=trim("`pwd`");
$app_server=getenv("app_server");
if(!$app_server || strlen($app_server)==0) {
	echo ('app_server environment variable not set. Assuming that you have copied the j2ee.jar and the documentClient.jar from the remote application server into the local directory.');
}

// add the J2EE classes and the documentClient.jar generated by the AS
// to our classpath
$location1="$app_server/domains/domain1/applications/j2ee-modules/documentBean/documentClient.jar";
$location2="$here/documentClient.jar";
$j2ee_jar1="$app_server/lib/j2ee.jar";
$j2ee_jar2="$here/j2ee.jar";
java_set_library_path("$location1;$location2;$j2ee_jar1;j2ee_jar2");

// convenience function which connects to the AS server using the URL
// $url, looks up the service $jndiname and returns a new remote
// document.
d18 5
a22 3
        // Set up the initial context.  The following code is AS
        // specific, WebLogic for example uses a different URL.
        // Please consult your AS documentation for details.
d41 4
a44 2
// convenience function which destroys the reference to the remote
// document
@


1.1
log
@Release-1.0.8
@
text
@d3 1
a3 2
// please adjust the following two lines
$app_server="";                   // e.g.: "~/SUNWappserver";
a5 1

d7 1
a7 1
if(strlen($app_server)==0) $app_server=getenv("app_server");
d9 1
a9 1
	die('please set the $app_server environment variable');
d16 3
a18 2
$j2ee_jar="$app_home/lib/j2ee.jar";
java_set_library_path("$location1;$location2;$j2ee_jar");
@

