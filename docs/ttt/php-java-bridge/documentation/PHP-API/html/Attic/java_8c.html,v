head	1.10;
access;
symbols
	debian_version_3_2_1b-2:1.8
	debian_version_3_2_1b-1:1.8
	upstream_version_3_2_1b:1.8
	Release-4-1-2:1.9.0.8
	Release-4-0-8:1.9.0.6
	debian_version_4_0_8a-1:1.9
	upstream_version_4_0_8a:1.9
	jostb-debian-ubuntu-patch:1.9.0.4
	debian_version_4_0_8-1:1.9
	upstream_version_4_0_8:1.9
	debian_version_4_0_7-1:1.9
	upstream_version_4_0_7:1.9
	debian_version_4_0_6-1:1.9
	upstream_version_4_0_6:1.9
	debian_version_4_0_2-1:1.9
	upstream_version_4_0_2:1.9
	Release-4-0-2_Root:1.9
	Release-4-0-2:1.9.0.2
	upstream_version_4_0_1:1.9
	debian_version_4_0_1-2:1.9
	Release-3-2-1:1.8.0.4
	Release-3-1-8:1.8.0.2
	Release-3-0-8_root:1.5.2.1
	Release-3-0-8_Root:1.6
	Release-3-0-8:1.5.0.2;
locks; strict;
comment	@# @;


1.10
date	2007.07.19.16.19.18;	author jost_boekemeier;	state dead;
branches;
next	1.9;

1.9
date	2007.03.09.20.28.08;	author andremachado;	state Exp;
branches;
next	1.8;

1.8
date	2006.09.10.17.31.12;	author jost2345;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.19.20.37.15;	author jost2345;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.12.17.46.47;	author jost2345;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.05.18.47.00;	author jost2345;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2006.01.15.21.05.35;	author jost2345;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.08.23.44.46;	author jost2345;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.11.22.24.41;	author jost2345;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.08.18.49.32;	author jost2345;	state Exp;
branches;
next	;

1.5.2.1
date	2006.04.23.19.09.08;	author jost2345;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Release-4-2-0
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>php-java-bridge: java.c File Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.2 -->
<div class="qindex"><a class="qindex" href="index.html">Main&nbsp;Page</a> | <a class="qindex" href="annotated.html">Data&nbsp;Structures</a> | <a class="qindex" href="files.html">File&nbsp;List</a> | <a class="qindex" href="functions.html">Data&nbsp;Fields</a> | <a class="qindex" href="globals.html">Globals</a> | <a class="qindex" href="pages.html">Related&nbsp;Pages</a></div>
<h1>java.c File Reference</h1><hr><a name="_details"></a><h2>Detailed Description</h2>
This is the main entry point for the java extension. 
<p>
It contains the global structures and the callbacks required for zend engine 1 and 2.<p>
Copyright (C) 2003-2007 Jost Boekemeier<p>
This file is part of the PHP/Java Bridge.<p>
The PHP/Java Bridge ("the library") is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.<p>
The library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.<p>
You should have received a copy of the GNU General Public License along with the PHP/Java Bridge; see the file COPYING. If not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.<p>
Linking this file statically or dynamically with other modules is making a combined work based on this library. Thus, the terms and conditions of the GNU General Public License cover the whole combination.<p>
As a special exception, the copyright holders of this library give you permission to link this library with independent modules to produce an executable, regardless of the license terms of these independent modules, and to copy and distribute the resulting executable under terms of your choice, provided that you also meet, for each linked independent module, the terms and conditions of the license of that module. An independent module is a module which is not derived from or based on this library. If you modify this library, you may extend this exception to your version of the library, but you are not obligated to do so. If you do not wish to do so, delete this exception statement from your version. 
<p>
<code>#include "php_java.h"</code><br>
<code>#include &lt;sys/types.h&gt;</code><br>
<code>#include &lt;sys/wait.h&gt;</code><br>
<code>#include &lt;stdio.h&gt;</code><br>
<code>#include &lt;stdlib.h&gt;</code><br>
<code>#include &lt;assert.h&gt;</code><br>
<code>#include &lt;errno.h&gt;</code><br>
<code>#include "php_globals.h"</code><br>
<code>#include "ext/standard/info.h"</code><br>
<code>#include "java_bridge.h"</code><br>
<code>#include "api.h"</code><br>
<code>#include "zend_interfaces.h"</code><br>
<code>#include "zend_exceptions.h"</code><br>
<code>#include "zend_extensions.h"</code><br>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a0">API_CALL</a>(proc)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">try calling the procedure again with a new connection, if persistent connections are enabled  <a href="#a0"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a13">PHP_RINIT_FUNCTION</a> (EXT)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when a new request starts.  <a href="#a13"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a15">PHP_RSHUTDOWN_FUNCTION</a> (EXT)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the request terminates.  <a href="#a15"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a17">last_exception_get</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_last_exception_get(void).  <a href="#a17"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a18">last_exception_clear</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_last_exception_clear(void).  <a href="#a18"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a19">set_file_encoding</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_set_file_encoding(string).  <a href="#a19"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a20">require</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_require(string path) or java_set_library_path(string path).  <a href="#a20"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a21">instanceof</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: bool java_instanceof(object object, object clazz).  <a href="#a21"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a22">get_session</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_session([string], [bool]) or object java_get_session([string], [bool]).  <a href="#a22"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a23">get_context</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_context(void) or object java_get_context(void).  <a href="#a23"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a24">get_server_name</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string java_server_name(void) or string java_get_server_name(void).  <a href="#a24"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a25">reset</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_reset(void);.  <a href="#a25"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a27">cast</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_cast(object, string).  <a href="#a27"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a28">begin_document</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_begin_document(void).  <a href="#a28"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a29">end_document</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_end_document(void).  <a href="#a29"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a30">get_values</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: mixed java_values(val) or mixed java_get_values(object ob).  <a href="#a30"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a31">get_closure</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_closure([object],[array|string],[object]) or object java_get_closure([object],[array|string],[object]).  <a href="#a31"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a32" doxytag="java.c::exception_handler"></a>
PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a32">exception_handler</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Only for internal use. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a38" doxytag="java.c::call_with_exception_handler"></a>
PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a38">call_with_exception_handler</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Only for internal use. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a39">inspect</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_inspect(object);.  <a href="#a39"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a53">construct</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::Java (string classname [, string argument1, . . . ]) or object Java::Java (array arguments) or object Java::java_exception (string classname [, string argument1, . . . ]) or object Java::JavaException (string classname [, string argument1, . . . ]);.  <a href="#a53"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a54">construct_class</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::JavaClass ( string classname) or object java::java_class ( string classname);.  <a href="#a54"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a55">__call</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: mixed <a class="el" href="java_8c.html#a55">Java::__call</a> ( string procedure_name [, array arguments ]).  <a href="#a55"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a56">__tostring</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::__toString (void).  <a href="#a56"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a57">__set</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void Java::__set(object, object).  <a href="#a57"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a58">__destruct</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void <a class="el" href="java_8c.html#a58">Java::__destruct()</a>.  <a href="#a58"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a59">__get</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::__get(object).  <a href="#a59"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a60">__sleep</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a60">Java::__sleep()</a>.  <a href="#a60"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a61">__wakeup</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a61">Java::__wakeup()</a>.  <a href="#a61"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a62">offsetExists</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: bool <a class="el" href="java_8c.html#a62">Java::offsetExists()</a>.  <a href="#a62"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a63">offsetGet</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object <a class="el" href="java_8c.html#a63">Java::offsetGet()</a>.  <a href="#a63"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a64">offsetSet</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void Java::offsetSet(object, object);.  <a href="#a64"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a65">offsetUnset</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a65">Java::offsetUnset()</a>.  <a href="#a65"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a76">PHP_MINIT_FUNCTION</a> (EXT)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module is initialized.  <a href="#a76"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a79" doxytag="java.c::PHP_MINFO_FUNCTION"></a>
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a79">PHP_MINFO_FUNCTION</a> (EXT)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Displays the module info. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a80">PHP_MSHUTDOWN_FUNCTION</a> (EXT)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module terminates.  <a href="#a80"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Variables</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="java_8c.html#a1">cfg</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a1">cfg</a> = 0</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Holds the global configuration.  <a href="#a1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a2">ini_override</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Holds the flags set/unset for all overridden java ini entries these are U_HOST, U_SERVLET and U_SOCKNAME.  <a href="#a2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a3" doxytag="java.c::ini_updated"></a>
int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a3">ini_updated</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Holds the flags set/unset for all java ini entries. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a4" doxytag="java.c::ini_user"></a>
int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a4">ini_user</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">The options set by the user. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a5" doxytag="java.c::ini_set"></a>
int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a5">ini_set</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">The options which carry a value. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a6" doxytag="java.c::class_entry"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a6">class_entry</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents the java class struct. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a7" doxytag="java.c::array_entry"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a7">array_entry</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents the java class array struct. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a8" doxytag="java.c::class_class_entry"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a8">class_class_entry</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents the java_class class struct. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a9" doxytag="java.c::class_class_entry_jsr"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a9">class_class_entry_jsr</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents the javaclass class struct. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a10" doxytag="java.c::exception_class_entry"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a10">exception_class_entry</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents the javaexception class struct. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a11" doxytag="java.c::handlers"></a>
zend_object_handlers&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a11">handlers</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">The object handlers, see create_object. <br></td></tr>
</table>
<hr><h2>Define Documentation</h2>
<a class="anchor" name="a0" doxytag="java.c::API_CALL"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">#define API_CALL          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">proc&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Value:</b><div class="fragment"><pre class="fragment">EXT_GLOBAL(proc)(INTERNAL_FUNCTION_PARAM_PASSTHRU) ||   \
  (can_reconnect(TSRMLS_C) &amp;&amp;                           \
   shutdown_connections(TSRMLS_C) &amp;&amp;                    \
   EXT_GLOBAL(proc)(INTERNAL_FUNCTION_PARAM_PASSTHRU))
</pre></div>try calling the procedure again with a new connection, if persistent connections are enabled 
<p>
    </td>
  </tr>
</table>
<hr><h2>Function Documentation</h2>
<a class="anchor" name="a55" doxytag="java.c::__call"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD __call           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: mixed <a class="el" href="java_8c.html#a55">Java::__call</a> ( string procedure_name [, array arguments ]). 
<p>
Calls a Java procedure Example: <div class="fragment"><pre class="fragment"><span class="preprocessor"> # The JPersistenceAdapter makes it possible to serialize java values.</span>
<span class="preprocessor"></span><span class="preprocessor"> #</span>
<span class="preprocessor"></span><span class="preprocessor"> # Example:</span>
<span class="preprocessor"></span><span class="preprocessor"> # $v=new JPersistenceAdapter(new Java("java.lang.StringBuffer", "hello"));</span>
<span class="preprocessor"></span><span class="preprocessor"> # $id=serialize($v);</span>
<span class="preprocessor"></span><span class="preprocessor"> # $file=fopen("file.out","w");</span>
<span class="preprocessor"></span><span class="preprocessor"> # fwrite($file, $id);</span>
<span class="preprocessor"></span><span class="preprocessor"> # fclose($file);</span>
<span class="preprocessor"></span><span class="preprocessor"> #</span>
<span class="preprocessor"></span>
 <span class="keyword">class </span>JPersistenceProxy {
  var $java;
  var $serialID;

  function __construct($java){ 
    $this-&gt;java=$java; 
    $this-&gt;serialID; 
  }
  function <a class="code" href="java_8c.html#a60">__sleep</a>() {
    $buf = <span class="keyword">new</span> Java(<span class="stringliteral">"java.io.ByteArrayOutputStream"</span>);
    $out = <span class="keyword">new</span> Java(<span class="stringliteral">"java.io.ObjectOutputStream"</span>, $buf);
    $out-&gt;writeObject($this-&gt;java);
    $out-&gt;close();
    $this-&gt;serialID = base64_encode((string)$buf-&gt;toByteArray());
    <span class="keywordflow">return</span> array(<span class="stringliteral">"serialID"</span>);
  }
  function <a class="code" href="java_8c.html#a61">__wakeup</a>() {
    $buf = <span class="keyword">new</span> Java(<span class="stringliteral">"java.io.ByteArrayInputStream"</span>,base64_decode($this-&gt;serialID));
    $in = <span class="keyword">new</span> Java(<span class="stringliteral">"java.io.ObjectInputStream"</span>, $buf);
    $this-&gt;java = $in-&gt;readObject();
    $in-&gt;close();
  }
  function getJava() {
    <span class="keywordflow">return</span> $this-&gt;java;
  }
  function <a class="code" href="java_8c.html#a58">__destruct</a>() { 
    <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__destruct(); 
  }
 }

 <span class="keyword">class </span>JPersistenceAdapter <span class="keyword">extends</span> JPersistenceProxy {
  function <a class="code" href="java_8c.html#a59">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__get($arg); }
  function __put($key, $val) { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__put($key, $val); }
  function <a class="code" href="java_8c.html#a55">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__call($m,$a); }
  function __toString()      { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__toString(); }
 }
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a58" doxytag="java.c::__destruct"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD __destruct           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void <a class="el" href="java_8c.html#a58">Java::__destruct()</a>. 
<p>
Example: <div class="fragment"><pre class="fragment"><span class="preprocessor"> # The JSessionAdapter makes it possible to store java values into the</span>
<span class="preprocessor"></span><span class="preprocessor"> # $_SESSION variable. </span>
<span class="preprocessor"></span> 
<span class="preprocessor"> # Example:</span>
<span class="preprocessor"></span><span class="preprocessor"> # $vector = new JSessionAdapter(new Java("java.util.Vector"));</span>
<span class="preprocessor"></span><span class="preprocessor"> # $vector-&gt;addElement(...);</span>
<span class="preprocessor"></span><span class="preprocessor"> # $_SESSION["v"]=$vector;</span>
<span class="preprocessor"></span>

 <span class="keyword">class </span>JSessionProxy {
  var $java;
  var $serialID;

  function __construct($java){ 
    $this-&gt;java=$java; 
    $this-&gt;serialID = uniqid(<span class="stringliteral">""</span>); 
  }
  function <a class="code" href="java_8c.html#a60">__sleep</a>() {
    $session=java_get_session(<span class="stringliteral">"PHPSESSION"</span>.session_id());
    $session-&gt;put($this-&gt;serialID, $this-&gt;java);
    <span class="keywordflow">return</span> array(<span class="stringliteral">"serialID"</span>);
  }
  function <a class="code" href="java_8c.html#a61">__wakeup</a>() {
    $session=java_get_session(<span class="stringliteral">"PHPSESSION"</span>.session_id());
    $this-&gt;java = $session-&gt;get($this-&gt;serialID);
  }
  function getJava() {
    <span class="keywordflow">return</span> $this-&gt;java;
  }
  function <a class="code" href="java_8c.html#a58">__destruct</a>() { 
    <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__destruct(); 
  }
 }

 <span class="keyword">class </span>JSessionAdapter <span class="keyword">extends</span> JSessionProxy {
  function <a class="code" href="java_8c.html#a59">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__get($arg); }
  function __put($key, $val) { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__put($key, $val); }
  function <a class="code" href="java_8c.html#a55">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__call($m,$a); }
  function __toString()      { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__toString(); }
 }
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a59" doxytag="java.c::__get"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD __get           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object Java::__get(object). 
<p>
The getter. Example: <div class="fragment"><pre class="fragment"> echo (string) $object-&gt;property;
</pre></div> If no property exists, the bean properties are examined and the getter is called, example: <div class="fragment"><pre class="fragment"> $object-&gt;getProperty()
</pre></div>.     </td>
  </tr>
</table>
<a class="anchor" name="a57" doxytag="java.c::__set"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD __set           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void Java::__set(object, object). 
<p>
The setter<p>
Example: <div class="fragment"><pre class="fragment"> $obj-&gt;property = <span class="stringliteral">"value"</span>; 
</pre></div> If no property exists, the bean properties are examined and a setter is called: <div class="fragment"><pre class="fragment"> $object-&gt;setProperty(value)
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a60" doxytag="java.c::__sleep"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD __sleep           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: string <a class="el" href="java_8c.html#a60">Java::__sleep()</a>. 
<p>
Serializes the object. Example: <div class="fragment"><pre class="fragment">   $vector=<span class="keyword">new</span> JPersistenceAdapter(<span class="keyword">new</span> Java(<span class="stringliteral">"java.lang.StringBuffer"</span>, <span class="stringliteral">"hello"</span>));
  $v=array (
    <span class="stringliteral">"test"</span>,
    $vector,
    3.14);
  $id=serialize($v);
  $file=fopen(<span class="stringliteral">"test.ser"</span>,<span class="stringliteral">"w"</span>);
  fwrite($file, $<span class="keywordtype">id</span>);
  fclose($file);
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a56" doxytag="java.c::__tostring"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD __tostring           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object Java::__toString (void). 
<p>
Displays the java object as a string. Note: it doesn't cast the object to a string, thus echo $ob displays a string representation of $ob, e.g.: <div class="fragment"><pre class="fragment"> [o(String)<span class="stringliteral">"hello"</span>]
</pre></div><p>
Use a string cast or java_values(), if you want to display the java string as a php string, e.g.: <div class="fragment"><pre class="fragment"> echo (string)$string; <span class="comment">// explicit cast</span>
 echo "$string"; <span class="comment">// implicit cast</span>
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a61" doxytag="java.c::__wakeup"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD __wakeup           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: string <a class="el" href="java_8c.html#a61">Java::__wakeup()</a>. 
<p>
Deserializes the object. Example: <div class="fragment"><pre class="fragment">  <span class="keywordflow">try</span> {
    $v=unserialize($<span class="keywordtype">id</span>);
  } <span class="keywordflow">catch</span> (JavaException $e) {
    echo <span class="stringliteral">"Warning: Could not deserialize: "</span>. $e-&gt;getCause() . <span class="stringliteral">"\n"</span>;
  }
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a28" doxytag="java.c::begin_document"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION begin_document           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void java_begin_document(void). 
<p>
<a class="anchor" name="doc29"></a> Enters stream mode (asynchronuous protocol). The statements are sent to the back-end in one XML stream.     </td>
  </tr>
</table>
<a class="anchor" name="a27" doxytag="java.c::cast"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION cast           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object java_cast(object, string). 
<p>
<a class="anchor" name="doc88"></a> Converts the java object obj into a PHP object. The second argument must be [s]tring, [b]oolean, [i]nteger, [f]loat or [d]ouble, [a]rray, [n]ull or [o]bject (which does nothing).<p>
This procedure is for compatibility with the pure PHP implementation, in the C implementation this procedure is called automatically for each type cast or when settype() is called.<p>
Example: <div class="fragment"><pre class="fragment"> $str = <span class="keyword">new</span> java(<span class="stringliteral">"java.lang.String"</span>, <span class="stringliteral">"12"</span>);
 echo $str;
 =&gt; [o(String):<span class="stringliteral">"12"</span>]
 $phpString = <span class="stringliteral">"$str"</span>;
 echo $phpString;
 =&gt; <span class="stringliteral">"12"</span>
 $phpNumber = (integer)$str;
 echo $phpNumber;
 =&gt; 12
 $phpNumber2 = java_cast($str, <span class="stringliteral">"integer"</span>);
 echo $phpNumber2;
 =&gt; 12
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a53" doxytag="java.c::construct"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION construct           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object Java::Java (string classname [, string argument1, . . . ]) or object Java::Java (array arguments) or object Java::java_exception (string classname [, string argument1, . . . ]) or object Java::JavaException (string classname [, string argument1, . . . ]);. 
<p>
<a class="anchor" name="doc54"></a> Java constructor. Example: <div class="fragment"><pre class="fragment"> $object = <span class="keyword">new</span> Java(<span class="stringliteral">"java.lang.String"</span>, <span class="stringliteral">"hello world"</span>); 
 echo (string)$object;
</pre></div> <div class="fragment"><pre class="fragment"> $ex = <span class="keyword">new</span> JavaException(<span class="stringliteral">"java.lang.NullPointerException"</span>);
 <span class="keywordflow">throw</span> $ex;
</pre></div> <div class="fragment"><pre class="fragment"> require_once(<span class="stringliteral">"rt/java_util_LinkedList.php"</span>);
 <span class="keyword">class </span>org_apache_lucene_search_IndexSearcher <span class="keyword">extends</span> java_Bridge {
   __construct() { 
     $args = func_get_args();
     array_unshift($args, <span class="stringliteral">"org.apache.lucene.search.IndexSearcher"</span>);
     $java = <span class="keyword">new</span> Java($args); 
   }
 }
 <span class="keyword">class </span>org_apache_lucene_search_PhraseQuery <span class="keyword">extends</span> java_Bridge {
   __construct() { 
     $args = func_get_args();
     array_unshift($args, <span class="stringliteral">"org.apache.lucene.search.PhraseQuery"</span>);
     $java = <span class="keyword">new</span> Java($args); 
   }
 }
 <span class="keyword">class </span>org_apache_lucene_index_Term <span class="keyword">extends</span> java_Bridge {
   __construct() { 
     $args = func_get_args();
     array_unshift($args, <span class="stringliteral">"org.apache.lucene.index.Term"</span>);
     $java = <span class="keyword">new</span> Java($args); 
   }
 }
 $searcher = <span class="keyword">new</span> org_apache_lucene_search_IndexSearcher(getcwd());
 $term = <span class="keyword">new</span> org_apache_lucene_index_Term(<span class="stringliteral">"name"</span>, <span class="stringliteral">"test.php"</span>);
 $phrase = <span class="keyword">new</span> org_apache_lucene_search_PhraseQuery();
 phrase-&gt;add($term);
 $hits = $searcher-&gt;search($phrase);
 $iter = $hits-&gt;iterator();
 $list = <span class="keyword">new</span> java_util_LinkedList();
 <span class="keywordflow">while</span>($iter-&gt;hasNext()) {
 $next = $iter-&gt;next();
 $name = $next-&gt;get(<span class="stringliteral">"name"</span>);
 $list-&gt;append($name);
 }
 echo $list;
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a54" doxytag="java.c::construct_class"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION construct_class           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object Java::JavaClass ( string classname) or object java::java_class ( string classname);. 
<p>
<a class="anchor" name="doc55"></a> References a java class. Example: <div class="fragment"><pre class="fragment"> $Object = <span class="keyword">new</span> JavaClass(<span class="stringliteral">"java.lang.Object"</span>);
 $object = $Object-&gt;newInstance();
</pre></div> <div class="fragment"><pre class="fragment"> $Thread = <span class="keyword">new</span> JavaClass(<span class="stringliteral">"java.lang.Thread"</span>);
 $Thread-&gt;sleep(1000);
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a29" doxytag="java.c::end_document"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION end_document           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void java_end_document(void). 
<p>
Ends stream mode.     </td>
  </tr>
</table>
<a class="anchor" name="a31" doxytag="java.c::get_closure"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION get_closure           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object java_closure([object],[array|string],[object]) or object java_get_closure([object],[array|string],[object]). 
<p>
<a class="anchor" name="doc32"></a> Closes over the php environment and packages it up as a java class. Example: <div class="fragment"><pre class="fragment"> function toString() {<span class="keywordflow">return</span> <span class="stringliteral">"helloWorld"</span>;};
 $object = java_get_closure();
 echo <span class="stringliteral">"Java says that PHP says: $object\n"</span>;
</pre></div><p>
When a php instance is supplied as an argument, the environment will be used instead. When a string or key/value map is supplied as a second argument, the java procedure names are mapped to the php procedure names. Example: <div class="fragment"><pre class="fragment"> function hello() {<span class="keywordflow">return</span> <span class="stringliteral">"hello"</span>;};
 echo (string)java_get_closure(null, "hello");
</pre></div><p>
When an array of java interfaces is supplied as a third argument, the environment must implement these interfaces. Example: <div class="fragment"><pre class="fragment"> <span class="keyword">class </span>Listener {
   function actionPerformed($actionEvent) {
   ...
   }
 }
 function getListener() {
   <span class="keywordflow">return</span> java_get_closure(<span class="keyword">new</span> Listener(), null, array(<span class="keyword">new</span> Java(<span class="stringliteral">"java.awt.event.ActionListener"</span>)));
 }
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a23" doxytag="java.c::get_context"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION get_context           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object java_context(void) or object java_get_context(void). 
<p>
<a class="anchor" name="doc26"></a> Returns the jsr223 script context handle.<p>
Example which closes over the current environment and passes it back to java: <div class="fragment"><pre class="fragment"> java_get_context()-&gt;call(java_closure()) || die <span class="stringliteral">"Script should be called from java"</span>;
</pre></div><p>
It is possible to access implicit web objects (the session, the application store etc.) from the context. Please see the JSR223 documentation for details. Example: <div class="fragment"><pre class="fragment"> java_get_context()-&gt;getHttpServletRequest();
</pre></div> <dl compact><dt><b>See also:</b></dt><dd><a class="el" href="java_8c.html#a22">get_session()</a> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a24" doxytag="java.c::get_server_name"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION get_server_name           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: string java_server_name(void) or string java_get_server_name(void). 
<p>
Returns the name of the back-end or null, if the back-end is not running. Example: <div class="fragment"><pre class="fragment"> $backend = java_get_server_name();
 <span class="keywordflow">if</span>(!$backend) wakeup_administrator(<span class="stringliteral">"back-end not running"</span>);
 echo <span class="stringliteral">"Connected to the back-end: $backend\n"</span>;
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a22" doxytag="java.c::get_session"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION get_session           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object java_session([string], [bool]) or object java_get_session([string], [bool]). 
<p>
<a class="anchor" name="doc25"></a> Return a session handle. When java_session() is called without arguments, the session is shared with java. Example: <div class="fragment"><pre class="fragment"> java_get_session()-&gt;put(<span class="stringliteral">"key"</span>, <span class="keyword">new</span> Java(<span class="stringliteral">"java.lang.Object"</span>));
 [...]
</pre></div> The java components (jsp, servlets) can retrieve the value, for example with: <div class="fragment"><pre class="fragment"> getSession().getAttribute(<span class="stringliteral">"key"</span>); 
</pre></div><p>
When java_get_session() is called with a session name, the session is not shared with java and no cookies are set. Example: <div class="fragment"><pre class="fragment"> java_get_session(<span class="stringliteral">"myPublicApplicationStore"</span>)-&gt;put(<span class="stringliteral">"key"</span>, <span class="stringliteral">"value"</span>);
</pre></div><p>
When java_get_session() is called with a second argument set to true, a new session is allocated, the old session is destroyed if necessary. Example: <div class="fragment"><pre class="fragment"> java_get_session(null, <span class="keyword">true</span>)-&gt;put(<span class="stringliteral">"key"</span>, <span class="stringliteral">"val"</span>);
</pre></div>. <dl compact><dt><b>See also:</b></dt><dd><a class="el" href="java_8c.html#a23">get_context()</a> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a30" doxytag="java.c::get_values"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION get_values           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: mixed java_values(val) or mixed java_get_values(object ob). 
<p>
<a class="anchor" name="doc31"></a> Evaluates the object and fetches its content, if possible. A java array, Map or Collection object is returned as a php array. An array, Map or Collection proxy is returned as a java array, Map or Collection object, and a null proxy is returned as null. All values of java types for which a primitive php type exists are returned as php values. Everything else is returned unevaluated. Please make sure that the values do not not exceed php's memory limit. Example:<p>
<div class="fragment"><pre class="fragment"> $str = <span class="keyword">new</span> java(<span class="stringliteral">"java.lang.String"</span>, <span class="stringliteral">"hello"</span>);
 echo $str;
 =&gt; [o(String):<span class="stringliteral">"hello"</span>]
 echo java_values($str);
 =&gt; hello
 $chr = $str-&gt;toCharArray();
 echo $chr;
 =&gt; [o(array_of-C):<span class="stringliteral">"[C@@1b10d42"</span>]
 $ar = java_values($chr);
 print $ar;
 =&gt; Array
 print $ar[0];
 =&gt; [o(Character):<span class="stringliteral">"h"</span>]
 print java_values($ar[0]);
 =&gt; h
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a39" doxytag="java.c::inspect"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION inspect           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void java_inspect(object);. 
<p>
Returns the contents (public fields, public methods, public classes) of object as a string. Example: <div class="fragment"><pre class="fragment"> echo java_inspect(java_get_context());
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a21" doxytag="java.c::instanceof"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION instanceof           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: bool java_instanceof(object object, object clazz). 
<p>
<a class="anchor" name="doc24"></a> Tests if object is an instance of clazz. Example: <div class="fragment"><pre class="fragment"> <span class="keywordflow">return</span>($o <a class="code" href="java_8c.html#a21">instanceof</a> Java &amp;&amp; $c <a class="code" href="java_8c.html#a21">instanceof</a> Java &amp;&amp; java_instanceof($o, $c)); 
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a18" doxytag="java.c::last_exception_clear"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION last_exception_clear           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void java_last_exception_clear(void). 
<p>
<a class="anchor" name="doc21"></a> Clear last java extension. <dl compact><dt><b><a class="el" href="deprecated.html#_deprecated000002">Deprecated:</a></b></dt><dd>Use PHP5 try/catch instead.</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a17" doxytag="java.c::last_exception_get"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION last_exception_get           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object java_last_exception_get(void). 
<p>
<a class="anchor" name="doc20"></a> Get last Java exception <dl compact><dt><b><a class="el" href="deprecated.html#_deprecated000001">Deprecated:</a></b></dt><dd>Use PHP5 try/catch instead.</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a62" doxytag="java.c::offsetExists"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD offsetExists           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: bool <a class="el" href="java_8c.html#a62">Java::offsetExists()</a>. 
<p>
Checks if an object exists at the given position. Example: <div class="fragment"><pre class="fragment"> $System = <span class="keyword">new</span> Java(<span class="stringliteral">"java.lang.System"</span>);
 $props = $System-&gt;getProperties();
 <span class="keywordflow">if</span>(!$props[<span class="stringliteral">"user.home"</span>]) die(<span class="stringliteral">"No home dir!?!"</span>);
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a63" doxytag="java.c::offsetGet"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD offsetGet           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object <a class="el" href="java_8c.html#a63">Java::offsetGet()</a>. 
<p>
Get the object at a given position.<p>
Example: <div class="fragment"><pre class="fragment"> $System = <span class="keyword">new</span> Java(<span class="stringliteral">"java.lang.System"</span>);
 $props = $System-&gt;getProperties();
 echo $props[<span class="stringliteral">"user.home"</span>]);
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a64" doxytag="java.c::offsetSet"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD offsetSet           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void Java::offsetSet(object, object);. 
<p>
Set the object at a given position. Example: <div class="fragment"><pre class="fragment"> $Array = <span class="keyword">new</span> JavaClass(<span class="stringliteral">"java.lang.reflect.Array"</span>);
 $testobj=$Array-&gt;newInstance(<span class="keyword">new</span> JavaClass(<span class="stringliteral">"java.lang.String"</span>), array(2, 2, 2, 2, 2, 2));

 $testobj[0][0][0][0][0][1] = 1;
 $testobj[0][0][0][0][1][0] = 2;
 $testobj[0][0][0][1][0][0] = 3;
 $testobj[0][0][1][0][0][0] = 4;
 $testobj[0][1][0][0][0][0] = 5;
 $testobj[1][0][0][0][0][0] = 6;
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a65" doxytag="java.c::offsetUnset"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD offsetUnset           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: string <a class="el" href="java_8c.html#a65">Java::offsetUnset()</a>. 
<p>
Remove the entry at a given position. Used internally.     </td>
  </tr>
</table>
<a class="anchor" name="a76" doxytag="java.c::PHP_MINIT_FUNCTION"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_MINIT_FUNCTION           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">EXT&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Called when the module is initialized. 
<p>
Creates the Java and JavaClass structures and tries to start the back-end if java.socketname, java.servlet or java.hosts are not set. The back-end is not started if the environment variable X_JAVABRIDGE_OVERRIDE_HOSTS exists and contains either "/" or "host:port//context/servlet". When running as a Apache/IIS module or Fast CGI, this procedure is called only once. When running as a CGI binary, it is called whenever the CGI binary is called.     </td>
  </tr>
</table>
<a class="anchor" name="a80" doxytag="java.c::PHP_MSHUTDOWN_FUNCTION"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_MSHUTDOWN_FUNCTION           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">EXT&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Called when the module terminates. 
<p>
Stops the back-end, if it is running. When running in Apache/IIS or as a FastCGI binary, this procedure is called only once. When running as a CGI binary this is called whenever the CGI binary terminates.     </td>
  </tr>
</table>
<a class="anchor" name="a13" doxytag="java.c::PHP_RINIT_FUNCTION"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_RINIT_FUNCTION           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">EXT&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Called when a new request starts. 
<p>
Opens a connection to the back-end, creates an instance of the proxyenv structure and clones the servlet, hosts and ini_user flags.     </td>
  </tr>
</table>
<a class="anchor" name="a15" doxytag="java.c::PHP_RSHUTDOWN_FUNCTION"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_RSHUTDOWN_FUNCTION           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">EXT&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Called when the request terminates. 
<p>
Closes the connection to the back-end, destroys the proxyenv instance.     </td>
  </tr>
</table>
<a class="anchor" name="a20" doxytag="java.c::require"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION require           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void java_require(string path) or java_set_library_path(string path). 
<p>
<a class="anchor" name="doc23"></a> Set the library path. Example: <div class="fragment"><pre class="fragment"> java_require(<span class="stringliteral">"foo.jar;bar.jar"</span>); 
</pre></div><p>
The .jar files should be stored in /usr/share/java or extension_dir/lib one of its sub-directories. However, it is also possible to fetch .jar files from a remote server, for example: <div class="fragment"><pre class="fragment"> java_require(<span class="stringliteral">"http://php-java-bridge.sf.net/kawa.jar;..."</span>);
</pre></div><p>
Note that the classloader isolates the loaded libraries: When you call java_require("foo.jar"); java_require("bar.jar"), the classes from foo cannot see the classes loaded from bar. If you get a NoClassDefFound error saying that one of your classes cannot access the library you have loaded, you must reset the back-end to clear the loader cache and load your classes and the library in one java_require() call.     </td>
  </tr>
</table>
<a class="anchor" name="a25" doxytag="java.c::reset"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION reset           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void java_reset(void);. 
<p>
Tries to reset the back-end to its initial state. If the call succeeds, all caches are gone.<p>
Example: <div class="fragment"><pre class="fragment"> echo <span class="stringliteral">"Resetting back-end to initial state\n"</span>;
 java_reset();
</pre></div><p>
This procedure does nothing when the back-end runs in a servlet environment or an application server.     </td>
  </tr>
</table>
<a class="anchor" name="a19" doxytag="java.c::set_file_encoding"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION set_file_encoding           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void java_set_file_encoding(string). 
<p>
Set the java file encoding, for example UTF-8 or ASCII. Needed because php does not support unicode. All string to byte array conversions use this encoding. Example: <div class="fragment"><pre class="fragment"> java_set_file_encoding(<span class="stringliteral">"ISO-8859-1"</span>); 
</pre></div>     </td>
  </tr>
</table>
<hr><h2>Variable Documentation</h2>
<a class="anchor" name="a1" doxytag="java.c::cfg"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">struct <a class="el" href="java_8c.html#a1">cfg</a>* <a class="el" href="java_8c.html#a1">cfg</a> = 0          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Holds the global configuration. 
<p>
This structure is shared by all php instances     </td>
  </tr>
</table>
<a class="anchor" name="a2" doxytag="java.c::ini_override"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int <a class="el" href="java_8c.html#a2">ini_override</a>          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Holds the flags set/unset for all overridden java ini entries these are U_HOST, U_SERVLET and U_SOCKNAME. 
<p>
<dl compact><dt><b>See also:</b></dt><dd>X_JAVABRIDGE_OVERRIDE_HOSTS </dd></dl>
    </td>
  </tr>
</table>
<hr size="1"><address style="align: right;"><small>Generated on Sun Sep 10 13:04:05 2006 for php-java-bridge by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.2 </small></address>
</body>
</html>
@


1.9
log
@Files update 3.2.2 to 4.0.1. Extracted from the src.tar.gz downloaded from sf.net, uploaded by Jost Boekemeier. Update to repository by Andre Felipe Machado.
@
text
@@


1.8
log
@Release-3-1-8
@
text
@d12 1
a12 1
Copyright (C) 2006 Jost Boekemeier<p>
@


1.7
log
@Release-3-1-0
@
text
@d11 8
a18 1
It contains the global structures and the callbacks required for zend engine 1 and 2. 
d20 1
a26 1
<code>#include "<a class="el" href="php__java_8h-source.html">php_java.h</a>"</code><br>
d29 2
a30 2
<code>#include "<a class="el" href="java__bridge_8h-source.html">java_bridge.h</a>"</code><br>
<code>#include "<a class="el" href="api_8h-source.html">api.h</a>"</code><br>
d40 2
a41 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a1" doxytag="java.c::EXT_ARRAY"></a>
#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>EXT_ARRAY</b>&nbsp;&nbsp;&nbsp;EXTC##Array</td></tr>
d43 2
a44 2
<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a17">PHP_RINIT_FUNCTION</a> (EXT)</td></tr>
d46 2
a47 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when a new request starts.  <a href="#a17"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a19">PHP_RSHUTDOWN_FUNCTION</a> (EXT)</td></tr>
d49 2
a50 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the request terminates.  <a href="#a19"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a20">last_exception_get</a> ()</td></tr>
d52 2
a53 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_last_exception_get(void).  <a href="#a20"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a21">last_exception_clear</a> ()</td></tr>
d55 2
a56 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_last_exception_clear(void).  <a href="#a21"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a22">set_file_encoding</a> ()</td></tr>
d58 2
a59 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_set_file_encoding(string).  <a href="#a22"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a23">require</a> ()</td></tr>
d61 2
a62 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_require(string path) or java_set_library_path(string path).  <a href="#a23"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a24">instanceof</a> ()</td></tr>
d64 2
a65 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: bool java_instanceof(object object, object clazz).  <a href="#a24"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a25">get_session</a> ()</td></tr>
d67 2
a68 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_session([string], [bool]) or object java_get_session([string], [bool]).  <a href="#a25"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a26">get_context</a> ()</td></tr>
d70 2
a71 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_context(void) or object java_get_context(void).  <a href="#a26"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a27">get_server_name</a> ()</td></tr>
d73 2
a74 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string java_server_name(void) or string java_get_server_name(void).  <a href="#a27"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a28">reset</a> ()</td></tr>
d76 2
a77 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_reset(void);.  <a href="#a28"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a29">begin_document</a> ()</td></tr>
d79 2
a80 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_begin_document(void).  <a href="#a29"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a30">end_document</a> ()</td></tr>
d82 2
a83 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_end_document(void).  <a href="#a30"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a31">get_values</a> ()</td></tr>
d85 2
a86 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: mixed java_values(val) or mixed java_get_values(object ob) Evaluates the object and fetches its content, if possible.  <a href="#a31"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a32">get_closure</a> ()</td></tr>
d88 3
a90 3
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_closure([object],[array|string],[object]) or object java_get_closure([object],[array|string],[object]).  <a href="#a32"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a33" doxytag="java.c::exception_handler"></a>
PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a33">exception_handler</a> ()</td></tr>
d100 1
a100 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a54">construct</a> ()</td></tr>
d102 2
a103 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::Java (string classname [, string argument1, . . . ]) or object Java::Java (array arguments) or object Java::java_exception (string classname [, string argument1, . . . ]) or object Java::JavaException (string classname [, string argument1, . . . ]);.  <a href="#a54"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a55">construct_class</a> ()</td></tr>
d105 2
a106 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::JavaClass ( string classname) or object java::java_class ( string classname);.  <a href="#a55"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a56">__call</a> ()</td></tr>
d108 2
a109 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: mixed <a class="el" href="java_8c.html#a56">Java::__call</a> ( string procedure_name [, array arguments ]).  <a href="#a56"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a57">__tostring</a> ()</td></tr>
d111 2
a112 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::__toString (void).  <a href="#a57"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a58">__set</a> ()</td></tr>
d114 2
a115 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void Java::__set(object, object).  <a href="#a58"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a59">__destruct</a> ()</td></tr>
d117 2
a118 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void <a class="el" href="java_8c.html#a59">Java::__destruct()</a>.  <a href="#a59"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a60">__get</a> ()</td></tr>
d120 2
a121 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::__get(object).  <a href="#a60"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a61">__sleep</a> ()</td></tr>
d123 2
a124 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a61">Java::__sleep()</a>.  <a href="#a61"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a62">__wakeup</a> ()</td></tr>
d126 2
a127 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a62">Java::__wakeup()</a>.  <a href="#a62"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a63">offsetExists</a> ()</td></tr>
d129 2
a130 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: bool Java::offsetExists().  <a href="#a63"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a64">offsetGet</a> ()</td></tr>
d132 2
a133 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::offsetGet().  <a href="#a64"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a65">offsetSet</a> ()</td></tr>
d135 2
a136 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void Java::offsetSet(object, object);.  <a href="#a65"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a66">offsetUnset</a> ()</td></tr>
d138 2
a139 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string Java::offsetUnset().  <a href="#a66"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a80">PHP_MINIT_FUNCTION</a> (EXT)</td></tr>
d141 3
a143 3
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module is initialized.  <a href="#a80"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a83" doxytag="java.c::PHP_MINFO_FUNCTION"></a>
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a83">PHP_MINFO_FUNCTION</a> (EXT)</td></tr>
d146 1
a146 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a84">PHP_MSHUTDOWN_FUNCTION</a> (EXT)</td></tr>
d148 1
a148 1
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module terminates.  <a href="#a84"></a><br></td></tr>
d150 1
a150 5
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="structcfg.html">cfg</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a2">cfg</a> = 0</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Holds the global configuration.  <a href="#a2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a3" doxytag="java.c::functions"></a>
function_entry&nbsp;</td><td class="memItemRight" valign="bottom"><b>functions</b> []</td></tr>
d152 2
a153 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">zend_module_entry&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a4">module_entry</a></td></tr>
d155 3
a157 6
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">PROTOCOL.TXT doesn't have a way to send hex numbers, if backward compatibility is enabled.  <a href="#a4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a5">ini_override</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Holds the flags set/unset for all overridden java ini entries these are U_HOST, U_SERVLET and U_SOCKNAME.  <a href="#a5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a6" doxytag="java.c::ini_updated"></a>
int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a6">ini_updated</a></td></tr>
d160 2
a161 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a7" doxytag="java.c::ini_user"></a>
int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a7">ini_user</a></td></tr>
d164 2
a165 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a8" doxytag="java.c::ini_set"></a>
int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a8">ini_set</a></td></tr>
d168 2
a169 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a9" doxytag="java.c::class_entry"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a9">class_entry</a></td></tr>
d172 2
a173 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a10" doxytag="java.c::array_entry"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a10">array_entry</a></td></tr>
d176 2
a177 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a11" doxytag="java.c::class_class_entry"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a11">class_class_entry</a></td></tr>
d180 2
a181 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a12" doxytag="java.c::class_class_entry_jsr"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a12">class_class_entry_jsr</a></td></tr>
d184 2
a185 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a13" doxytag="java.c::exception_class_entry"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a13">exception_class_entry</a></td></tr>
d188 2
a189 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a14" doxytag="java.c::handlers"></a>
zend_object_handlers&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a14">handlers</a></td></tr>
a191 2
<tr><td class="memItemLeft" nowrap align="right" valign="top">function_entry&nbsp;</td><td class="memItemRight" valign="bottom"><b>class_functions</b> []</td></tr>

d220 1
a220 1
  (EXT_GLOBAL(<a class="code" href="structcfg.html">cfg</a>)-&gt;persistent_connections &amp;&amp;           \
d229 1
a229 1
<a class="anchor" name="a56" doxytag="java.c::__call"></a><p>
d253 1
a253 1
Proto: mixed <a class="el" href="java_8c.html#a56">Java::__call</a> ( string procedure_name [, array arguments ]). 
d273 1
a273 1
  function <a class="code" href="java_8c.html#a61">__sleep</a>() {
d281 1
a281 1
  function <a class="code" href="java_8c.html#a62">__wakeup</a>() {
d290 1
a290 1
  function <a class="code" href="java_8c.html#a59">__destruct</a>() { 
d296 1
a296 1
  function <a class="code" href="java_8c.html#a60">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__get($arg); }
d298 1
a298 1
  function <a class="code" href="java_8c.html#a56">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__call($m,$a); }
d304 1
a304 1
<a class="anchor" name="a59" doxytag="java.c::__destruct"></a><p>
d328 1
a328 1
Proto: void <a class="el" href="java_8c.html#a59">Java::__destruct()</a>. 
d347 1
a347 1
  function <a class="code" href="java_8c.html#a61">__sleep</a>() {
d352 1
a352 1
  function <a class="code" href="java_8c.html#a62">__wakeup</a>() {
d359 1
a359 1
  function <a class="code" href="java_8c.html#a59">__destruct</a>() { 
d365 1
a365 1
  function <a class="code" href="java_8c.html#a60">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__get($arg); }
d367 1
a367 1
  function <a class="code" href="java_8c.html#a56">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__call($m,$a); }
d373 1
a373 1
<a class="anchor" name="a60" doxytag="java.c::__get"></a><p>
d404 1
a404 1
<a class="anchor" name="a58" doxytag="java.c::__set"></a><p>
d436 1
a436 1
<a class="anchor" name="a61" doxytag="java.c::__sleep"></a><p>
d460 1
a460 1
Proto: string <a class="el" href="java_8c.html#a61">Java::__sleep()</a>. 
d474 1
a474 1
<a class="anchor" name="a57" doxytag="java.c::__tostring"></a><p>
d507 1
a507 1
<a class="anchor" name="a62" doxytag="java.c::__wakeup"></a><p>
d531 1
a531 1
Proto: string <a class="el" href="java_8c.html#a62">Java::__wakeup()</a>. 
d541 1
a541 1
<a class="anchor" name="a29" doxytag="java.c::begin_document"></a><p>
d567 1
a567 1
Enters stream mode (asynchronuous protocol). The statements are sent to the back-end in one XML stream.     </td>
d570 44
a613 1
<a class="anchor" name="a54" doxytag="java.c::construct"></a><p>
d639 1
a639 1
Java constructor. Example: <div class="fragment"><pre class="fragment"> $object = <span class="keyword">new</span> Java(<span class="stringliteral">"java.lang.String"</span>, <span class="stringliteral">"hello world"</span>); 
d644 1
a644 1
 <span class="keyword">class </span>org_apache_lucene_search_IndexSearcher <span class="keyword">extends</span> php_Java {
d651 1
a651 1
 <span class="keyword">class </span>org_apache_lucene_search_PhraseQuery <span class="keyword">extends</span> php_Java {
d658 1
a658 1
 <span class="keyword">class </span>org_apache_lucene_index_Term <span class="keyword">extends</span> php_Java {
d681 1
a681 1
<a class="anchor" name="a55" doxytag="java.c::construct_class"></a><p>
d707 1
a707 1
References a java class. Example: <div class="fragment"><pre class="fragment"> $Object = <span class="keyword">new</span> JavaClass(<span class="stringliteral">"java.lang.Object"</span>);
d714 1
a714 1
<a class="anchor" name="a30" doxytag="java.c::end_document"></a><p>
d743 1
a743 1
<a class="anchor" name="a32" doxytag="java.c::get_closure"></a><p>
d769 1
a769 1
Closes over the php environment and packages it up as a java class. Example: <div class="fragment"><pre class="fragment"> function toString() {<span class="keywordflow">return</span> <span class="stringliteral">"helloWorld"</span>;};
d773 1
a773 1
When a php instance is supplied as a argument, that environment will be used instead. When a string or key/value map is supplied as a second argument, the java procedure names are mapped to the php procedure names. Example: <div class="fragment"><pre class="fragment"> function hello() {<span class="keywordflow">return</span> <span class="stringliteral">"hello"</span>;};
d787 1
a787 1
<a class="anchor" name="a26" doxytag="java.c::get_context"></a><p>
d813 1
a813 1
Returns the jsr223 script context handle.<p>
d817 1
a817 1
</pre></div> <dl compact><dt><b>See also:</b></dt><dd><a class="el" href="java_8c.html#a25">get_session()</a> </dd></dl>
d821 1
a821 1
<a class="anchor" name="a27" doxytag="java.c::get_server_name"></a><p>
d853 1
a853 1
<a class="anchor" name="a25" doxytag="java.c::get_session"></a><p>
d879 1
a879 1
Return a session handle. When java_session() is called without arguments, the session is shared with java. Example: <div class="fragment"><pre class="fragment"> java_get_session()-&gt;put(<span class="stringliteral">"key"</span>, <span class="keyword">new</span> Java(<span class="stringliteral">"java.lang.Object"</span>));
d883 1
a883 1
When java_get_session() is called with a session handle, the session is not shared with java and no cookies are set. Example: <div class="fragment"><pre class="fragment"> java_get_session(<span class="stringliteral">"myPublicApplicationStore"</span>)-&gt;put(<span class="stringliteral">"key"</span>, <span class="stringliteral">"value"</span>);
d886 1
a886 1
</pre></div>. <dl compact><dt><b>See also:</b></dt><dd><a class="el" href="java_8c.html#a26">get_context()</a> </dd></dl>
d890 1
a890 1
<a class="anchor" name="a31" doxytag="java.c::get_values"></a><p>
d914 1
a914 1
Proto: mixed java_values(val) or mixed java_get_values(object ob) Evaluates the object and fetches its content, if possible. 
d916 1
a916 1
A java array, Map or Collection object is returned as a php array. An array, Map or Collection proxy is returned as a java array, Map or Collection object, and a null proxy is returned as null. All values of java types for which a primitive php type exists are returned as php values. Everything else is returned unevaluated. Please make sure that the values do not not exceed php's memory limit. Example:<p>
d965 1
a965 1
<a class="anchor" name="a24" doxytag="java.c::instanceof"></a><p>
d991 1
a991 1
Tests if object is an instance of clazz. Example: <div class="fragment"><pre class="fragment"> <span class="keywordflow">return</span>($o instanceof Java &amp;&amp; $c instanceof Java &amp;&amp; java_instanceof($o, $c)); 
d995 1
a995 1
<a class="anchor" name="a21" doxytag="java.c::last_exception_clear"></a><p>
d1021 1
a1021 1
Clear last java extension. <dl compact><dt><b><a class="el" href="deprecated.html#_deprecated000002">Deprecated:</a></b></dt><dd>Use PHP5 try/catch instead.</dd></dl>
d1025 1
a1025 1
<a class="anchor" name="a20" doxytag="java.c::last_exception_get"></a><p>
d1051 1
a1051 1
Get last Java exception <dl compact><dt><b><a class="el" href="deprecated.html#_deprecated000001">Deprecated:</a></b></dt><dd>Use PHP5 try/catch instead.</dd></dl>
d1055 1
a1055 1
<a class="anchor" name="a63" doxytag="java.c::offsetExists"></a><p>
d1079 1
a1079 1
Proto: bool Java::offsetExists(). 
d1087 1
a1087 1
<a class="anchor" name="a64" doxytag="java.c::offsetGet"></a><p>
d1111 1
a1111 1
Proto: object Java::offsetGet(). 
d1120 1
a1120 1
<a class="anchor" name="a65" doxytag="java.c::offsetSet"></a><p>
d1158 1
a1158 1
<a class="anchor" name="a66" doxytag="java.c::offsetUnset"></a><p>
d1182 1
a1182 1
Proto: string Java::offsetUnset(). 
d1187 1
a1187 1
<a class="anchor" name="a80" doxytag="java.c::PHP_MINIT_FUNCTION"></a><p>
d1217 1
a1217 1
<a class="anchor" name="a84" doxytag="java.c::PHP_MSHUTDOWN_FUNCTION"></a><p>
d1247 1
a1247 1
<a class="anchor" name="a17" doxytag="java.c::PHP_RINIT_FUNCTION"></a><p>
d1277 1
a1277 1
<a class="anchor" name="a19" doxytag="java.c::PHP_RSHUTDOWN_FUNCTION"></a><p>
d1307 1
a1307 1
<a class="anchor" name="a23" doxytag="java.c::require"></a><p>
d1333 1
a1333 1
Set the library path. Example: <div class="fragment"><pre class="fragment"> java_require(<span class="stringliteral">"foo.jar;bar.jar"</span>); 
d1340 1
a1340 1
<a class="anchor" name="a28" doxytag="java.c::reset"></a><p>
d1373 1
a1373 1
<a class="anchor" name="a22" doxytag="java.c::set_file_encoding"></a><p>
d1404 1
a1404 1
<a class="anchor" name="a2" doxytag="java.c::cfg"></a><p>
d1410 1
a1410 1
          <td class="md" nowrap valign="top">struct <a class="el" href="structcfg.html">cfg</a>* <a class="el" href="structcfg.html">cfg</a> = 0          </td>
d1429 1
a1429 1
<a class="anchor" name="a15" doxytag="java.c::class_functions"></a><p>
d1435 1
a1435 36
          <td class="md" nowrap valign="top">function_entry class_functions[]          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
  ZEND_FENTRY(__construct, EXT_FN( construct ), NULL, 0)







  
  {NULL, NULL, NULL}
}
</pre></div>    </td>
  </tr>
</table>
<a class="anchor" name="a5" doxytag="java.c::ini_override"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int <a class="el" href="php__java_8h.html#a27">ini_override</a>          </td>
d1455 1
a1455 38
<a class="anchor" name="a4" doxytag="java.c::module_entry"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">zend_module_entry <a class="el" href="php__java_8h.html#a15">module_entry</a>          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
  STANDARD_MODULE_HEADER,
  EXT_NAME(),
   functions ,
  EXT_MINIT(EXT),
  EXT_MSHUTDOWN(EXT),
  EXT_RINIT(EXT),
  EXT_RSHUTDOWN(EXT),
  EXT_MINFO(EXT),
  NO_VERSION_YET,
  STANDARD_MODULE_PROPERTIES
}
</pre></div>PROTOCOL.TXT doesn't have a way to send hex numbers, if backward compatibility is enabled. 
<p>
    </td>
  </tr>
</table>
<hr size="1"><address style="align: right;"><small>Generated on Mon Jun 12 19:45:48 2006 for php-java-bridge by&nbsp;
@


1.6
log
@Release-3.0.8
@
text
@d23 1
d26 1
d30 4
a33 1
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a0" doxytag="java.c::EXT_ARRAY"></a>
d37 1
a37 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a22">PHP_RINIT_FUNCTION</a> (EXT)</td></tr>
d39 2
a40 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when a new request starts.  <a href="#a22"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a23">PHP_RSHUTDOWN_FUNCTION</a> (EXT)</td></tr>
d42 2
a43 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the request terminates.  <a href="#a23"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a25">last_exception_get</a> ()</td></tr>
d45 2
a46 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_last_exception_get(void).  <a href="#a25"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a27">last_exception_clear</a> ()</td></tr>
d48 2
a49 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_last_exception_clear(void).  <a href="#a27"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a28">set_file_encoding</a> ()</td></tr>
d51 2
a52 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_set_file_encoding(string).  <a href="#a28"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a30">require</a> ()</td></tr>
d54 2
a55 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_require(string path) or java_set_library_path(string path).  <a href="#a30"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a31">instanceof</a> ()</td></tr>
d57 2
a58 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: bool java_instanceof(object object, object clazz).  <a href="#a31"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a34">get_session</a> ()</td></tr>
d60 2
a61 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_session([string], [bool]) or object java_get_session([string], [bool]).  <a href="#a34"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a36">get_context</a> ()</td></tr>
d63 2
a64 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_context(void) or object java_get_context(void).  <a href="#a36"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a37">get_server_name</a> ()</td></tr>
d66 2
a67 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string java_server_name(void) or string java_get_server_name(void).  <a href="#a37"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a38">reset</a> ()</td></tr>
d69 2
a70 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_reset(void);.  <a href="#a38"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a39">begin_document</a> ()</td></tr>
d72 2
a73 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_begin_document(void).  <a href="#a39"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a40">end_document</a> ()</td></tr>
d75 2
a76 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_end_document(void).  <a href="#a40"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a44">get_values</a> ()</td></tr>
d78 2
a79 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: mixed java_values(val) or mixed java_get_values(object ob) Evaluates the object and fetches its content, if possible.  <a href="#a44"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a45">get_closure</a> ()</td></tr>
d81 3
a83 3
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_closure([object],[array|string],[object]) or object java_get_closure([object],[array|string],[object]).  <a href="#a45"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a46" doxytag="java.c::exception_handler"></a>
PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a46">exception_handler</a> ()</td></tr>
d86 2
a87 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a51" doxytag="java.c::call_with_exception_handler"></a>
PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a51">call_with_exception_handler</a> ()</td></tr>
d90 1
a90 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a52">inspect</a> ()</td></tr>
d92 2
a93 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_inspect(object);.  <a href="#a52"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a65">construct</a> ()</td></tr>
d95 2
a96 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::Java (string classname [, string argument1, . . . ]) or object Java::java_exception (string classname [, string argument1, . . . ]) or object Java::JavaException (string classname [, string argument1, . . . ]);.  <a href="#a65"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a66">construct_class</a> ()</td></tr>
d98 2
a99 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::JavaClass ( string classname) or object java::java_class ( string classname);.  <a href="#a66"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a67">__call</a> ()</td></tr>
d101 2
a102 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: mixed <a class="el" href="java_8c.html#a67">Java::__call</a> ( string procedure_name [, array arguments ]).  <a href="#a67"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a68">__tostring</a> ()</td></tr>
d104 2
a105 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::__toString (void).  <a href="#a68"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a69">__set</a> ()</td></tr>
d107 2
a108 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void Java::__set(object, object).  <a href="#a69"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a70">__destruct</a> ()</td></tr>
d110 2
a111 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void <a class="el" href="java_8c.html#a70">Java::__destruct()</a>.  <a href="#a70"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a71">__get</a> ()</td></tr>
d113 2
a114 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::__get(object).  <a href="#a71"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a72">__sleep</a> ()</td></tr>
d116 2
a117 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a72">Java::__sleep()</a>.  <a href="#a72"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a73">__wakeup</a> ()</td></tr>
d119 2
a120 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a73">Java::__wakeup()</a>.  <a href="#a73"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a74">offsetExists</a> ()</td></tr>
d122 2
a123 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: bool <a class="el" href="java_8c.html#a74">Java::offsetExists()</a>.  <a href="#a74"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a75">offsetGet</a> ()</td></tr>
d125 2
a126 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object <a class="el" href="java_8c.html#a75">Java::offsetGet()</a>.  <a href="#a75"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a76">offsetSet</a> ()</td></tr>
d128 2
a129 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void Java::offsetSet(object, object);.  <a href="#a76"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a77">offsetUnset</a> ()</td></tr>
d131 2
a132 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a77">Java::offsetUnset()</a>.  <a href="#a77"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a91">PHP_MINIT_FUNCTION</a> (EXT)</td></tr>
d134 3
a136 3
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module is initialized.  <a href="#a91"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a92" doxytag="java.c::PHP_MINFO_FUNCTION"></a>
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a92">PHP_MINFO_FUNCTION</a> (EXT)</td></tr>
d139 1
a139 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a93">PHP_MSHUTDOWN_FUNCTION</a> (EXT)</td></tr>
d141 1
a141 1
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module terminates.  <a href="#a93"></a><br></td></tr>
d143 1
a143 1
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="structcfg.html">cfg</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a1">cfg</a> = 0</td></tr>
d145 2
a146 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Holds the global configuration.  <a href="#a1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a4" doxytag="java.c::functions"></a>
d149 4
a152 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">zend_module_entry&nbsp;</td><td class="memItemRight" valign="bottom"><b>module_entry</b></td></tr>
d154 1
d194 35
d230 1
a230 1
<a class="anchor" name="a67" doxytag="java.c::__call"></a><p>
d254 1
a254 1
Proto: mixed <a class="el" href="java_8c.html#a67">Java::__call</a> ( string procedure_name [, array arguments ]). 
d274 1
a274 1
  function <a class="code" href="java_8c.html#a72">__sleep</a>() {
d282 1
a282 1
  function <a class="code" href="java_8c.html#a73">__wakeup</a>() {
d291 1
a291 1
  function <a class="code" href="java_8c.html#a70">__destruct</a>() { 
d297 1
a297 1
  function <a class="code" href="java_8c.html#a71">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__get($arg); }
d299 1
a299 1
  function <a class="code" href="java_8c.html#a67">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__call($m,$a); }
d305 1
a305 1
<a class="anchor" name="a70" doxytag="java.c::__destruct"></a><p>
d329 1
a329 1
Proto: void <a class="el" href="java_8c.html#a70">Java::__destruct()</a>. 
d348 1
a348 1
  function <a class="code" href="java_8c.html#a72">__sleep</a>() {
d353 1
a353 1
  function <a class="code" href="java_8c.html#a73">__wakeup</a>() {
d360 1
a360 1
  function <a class="code" href="java_8c.html#a70">__destruct</a>() { 
d366 1
a366 1
  function <a class="code" href="java_8c.html#a71">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__get($arg); }
d368 1
a368 1
  function <a class="code" href="java_8c.html#a67">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__call($m,$a); }
d374 1
a374 1
<a class="anchor" name="a71" doxytag="java.c::__get"></a><p>
d405 1
a405 1
<a class="anchor" name="a69" doxytag="java.c::__set"></a><p>
d437 1
a437 1
<a class="anchor" name="a72" doxytag="java.c::__sleep"></a><p>
d461 1
a461 1
Proto: string <a class="el" href="java_8c.html#a72">Java::__sleep()</a>. 
d475 1
a475 1
<a class="anchor" name="a68" doxytag="java.c::__tostring"></a><p>
d508 1
a508 1
<a class="anchor" name="a73" doxytag="java.c::__wakeup"></a><p>
d532 1
a532 1
Proto: string <a class="el" href="java_8c.html#a73">Java::__wakeup()</a>. 
d542 1
a542 1
<a class="anchor" name="a39" doxytag="java.c::begin_document"></a><p>
d568 1
a568 1
Enters stream mode (asynchronuous protocol). The statements are sent to the backend in one XML stream.     </td>
d571 1
a571 1
<a class="anchor" name="a65" doxytag="java.c::construct"></a><p>
d595 1
a595 1
Proto: object Java::Java (string classname [, string argument1, . . . ]) or object Java::java_exception (string classname [, string argument1, . . . ]) or object Java::JavaException (string classname [, string argument1, . . . ]);. 
d601 35
d639 1
a639 1
<a class="anchor" name="a66" doxytag="java.c::construct_class"></a><p>
d672 1
a672 1
<a class="anchor" name="a40" doxytag="java.c::end_document"></a><p>
d701 1
a701 1
<a class="anchor" name="a45" doxytag="java.c::get_closure"></a><p>
d745 1
a745 1
<a class="anchor" name="a36" doxytag="java.c::get_context"></a><p>
d775 1
a775 1
</pre></div> <dl compact><dt><b>See also:</b></dt><dd><a class="el" href="java_8c.html#a34">get_session()</a> </dd></dl>
d779 1
a779 1
<a class="anchor" name="a37" doxytag="java.c::get_server_name"></a><p>
d805 3
a807 3
Returns the name of the backend or null, if the backend is not running. Example: <div class="fragment"><pre class="fragment"> $backend = java_get_server_name();
 <span class="keywordflow">if</span>(!$backend) wakeup_administrator(<span class="stringliteral">"backend not running"</span>);
 echo <span class="stringliteral">"Connected to the backend: $backend\n"</span>;
d811 1
a811 1
<a class="anchor" name="a34" doxytag="java.c::get_session"></a><p>
d844 1
a844 1
</pre></div>. <dl compact><dt><b>See also:</b></dt><dd><a class="el" href="java_8c.html#a36">get_context()</a> </dd></dl>
d848 1
a848 1
<a class="anchor" name="a44" doxytag="java.c::get_values"></a><p>
d893 1
a893 1
<a class="anchor" name="a52" doxytag="java.c::inspect"></a><p>
d923 1
a923 1
<a class="anchor" name="a31" doxytag="java.c::instanceof"></a><p>
d949 1
a949 1
Tests if object is an instance of clazz. Example: <div class="fragment"><pre class="fragment"> <span class="keywordflow">return</span>($o <a class="code" href="java_8c.html#a31">instanceof</a> Java &amp;&amp; $c <a class="code" href="java_8c.html#a31">instanceof</a> Java &amp;&amp; java_instanceof($o, $c)); 
d953 1
a953 1
<a class="anchor" name="a27" doxytag="java.c::last_exception_clear"></a><p>
d983 1
a983 1
<a class="anchor" name="a25" doxytag="java.c::last_exception_get"></a><p>
d1013 1
a1013 1
<a class="anchor" name="a74" doxytag="java.c::offsetExists"></a><p>
d1037 1
a1037 1
Proto: bool <a class="el" href="java_8c.html#a74">Java::offsetExists()</a>. 
d1045 1
a1045 1
<a class="anchor" name="a75" doxytag="java.c::offsetGet"></a><p>
d1069 1
a1069 1
Proto: object <a class="el" href="java_8c.html#a75">Java::offsetGet()</a>. 
d1078 1
a1078 1
<a class="anchor" name="a76" doxytag="java.c::offsetSet"></a><p>
d1116 1
a1116 1
<a class="anchor" name="a77" doxytag="java.c::offsetUnset"></a><p>
d1140 1
a1140 1
Proto: string <a class="el" href="java_8c.html#a77">Java::offsetUnset()</a>. 
d1145 1
a1145 1
<a class="anchor" name="a91" doxytag="java.c::PHP_MINIT_FUNCTION"></a><p>
d1172 1
a1172 1
Creates the Java and JavaClass structures and tries to start the backend if java.socketname, java.servlet or java.hosts are not set. The backend is not started if the environment variable X_JAVABRIDGE_OVERRIDE_HOSTS exists and contains either "/" or "host:port//context/servlet". When running as a Apache/IIS module or Fast CGI, this procedure is called only once. When running as a CGI binary, it is called whenever the CGI binary is called.     </td>
d1175 1
a1175 1
<a class="anchor" name="a93" doxytag="java.c::PHP_MSHUTDOWN_FUNCTION"></a><p>
d1202 1
a1202 1
Stops the backend, if it is running. When running in Apache/IIS or as a FastCGI binary, this procedure is called only once. When running as a CGI binary this is called whenever the CGI binary terminates.     </td>
d1205 1
a1205 1
<a class="anchor" name="a22" doxytag="java.c::PHP_RINIT_FUNCTION"></a><p>
d1232 1
a1232 1
Opens a connection to the backend, creates an instance of the proxyenv structure and clones the servlet, hosts and ini_user flags.     </td>
d1235 1
a1235 1
<a class="anchor" name="a23" doxytag="java.c::PHP_RSHUTDOWN_FUNCTION"></a><p>
d1262 1
a1262 1
Closes the connection to the backend, destroys the proxyenv instance.     </td>
d1265 1
a1265 1
<a class="anchor" name="a30" doxytag="java.c::require"></a><p>
d1295 1
a1295 1
Note that the classloader isolates the loaded libraries: When you call java_require("foo.jar"); java_require("bar.jar"), the classes from foo cannot see the classes loaded from bar. If you get a NoClassDefFound error saying that one of your classes cannot access the library you have loaded, you must reset the backend to clear the loader cache and load your classes and the library in one java_require() call.     </td>
d1298 1
a1298 1
<a class="anchor" name="a38" doxytag="java.c::reset"></a><p>
d1324 2
a1325 2
Tries to reset the backent to its initial state. If the call succeeds, all caches are gone.<p>
Example: <div class="fragment"><pre class="fragment"> echo <span class="stringliteral">"Resetting backend to initial state\n"</span>;
d1328 1
a1328 1
This procedure does nothing when the backend runs in a servlet environment or an application server.     </td>
d1331 1
a1331 1
<a class="anchor" name="a28" doxytag="java.c::set_file_encoding"></a><p>
d1362 1
a1362 1
<a class="anchor" name="a1" doxytag="java.c::cfg"></a><p>
d1387 1
a1387 1
<a class="anchor" name="a18" doxytag="java.c::class_functions"></a><p>
d1408 1
a1408 1
  ZEND_FENTRY(__construct, EXT_FN( <a class="code" href="java_8c.html#a65">construct</a> ), NULL, 0)
d1422 27
a1448 1
<a class="anchor" name="a5" doxytag="java.c::module_entry"></a><p>
d1454 1
a1454 1
          <td class="md" nowrap valign="top">zend_module_entry module_entry          </td>
d1480 3
a1482 1
</pre></div>    </td>
d1485 1
a1485 1
<hr size="1"><address style="align: right;"><small>Generated on Sun Apr 9 16:51:55 2006 for php-java-bridge by&nbsp;
@


1.5
log
@Release-3.0.7
@
text
@d65 1
a65 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a42">get_values</a> ()</td></tr>
d67 2
a68 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: array java_values(object ob) or array java_get_values(object ob).  <a href="#a42"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a43">get_closure</a> ()</td></tr>
d70 9
a78 3
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_closure([object],[array|string],[object]) or object java_get_closure([object],[array|string],[object]).  <a href="#a43"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a44" doxytag="java.c::exception_handler"></a>
PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a44">exception_handler</a> ()</td></tr>
d81 2
a82 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a49" doxytag="java.c::call_with_exception_handler"></a>
PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a49">call_with_exception_handler</a> ()</td></tr>
d85 1
a85 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a50">inspect</a> ()</td></tr>
d87 2
a88 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_inspect(object);.  <a href="#a50"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a63">construct</a> ()</td></tr>
d90 2
a91 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::Java (string classname [, string argument1, . . . ]) or object Java::java_exception (string classname [, string argument1, . . . ]) or object Java::JavaException (string classname [, string argument1, . . . ]);.  <a href="#a63"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a64">construct_class</a> ()</td></tr>
d93 2
a94 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::JavaClass ( string classname) or object java::java_class ( string classname);.  <a href="#a64"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a65">__call</a> ()</td></tr>
d96 2
a97 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: mixed <a class="el" href="java_8c.html#a65">Java::__call</a> ( string procedure_name [, array arguments ]).  <a href="#a65"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a66">__tostring</a> ()</td></tr>
d99 2
a100 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::__toString (void).  <a href="#a66"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a67">__set</a> ()</td></tr>
d102 2
a103 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void Java::__set(object, object).  <a href="#a67"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a68">__destruct</a> ()</td></tr>
d105 2
a106 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void <a class="el" href="java_8c.html#a68">Java::__destruct()</a>.  <a href="#a68"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a69">__get</a> ()</td></tr>
d108 2
a109 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::__get(object).  <a href="#a69"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a70">__sleep</a> ()</td></tr>
d111 2
a112 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a70">Java::__sleep()</a>.  <a href="#a70"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a71">__wakeup</a> ()</td></tr>
d114 2
a115 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a71">Java::__wakeup()</a>.  <a href="#a71"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a72">offsetExists</a> ()</td></tr>
d117 2
a118 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: bool <a class="el" href="java_8c.html#a72">Java::offsetExists()</a>.  <a href="#a72"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a73">offsetGet</a> ()</td></tr>
d120 2
a121 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object <a class="el" href="java_8c.html#a73">Java::offsetGet()</a>.  <a href="#a73"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a74">offsetSet</a> ()</td></tr>
d123 2
a124 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void Java::offsetSet(object, object);.  <a href="#a74"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a75">offsetUnset</a> ()</td></tr>
d126 2
a127 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a75">Java::offsetUnset()</a>.  <a href="#a75"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a89">PHP_MINIT_FUNCTION</a> (EXT)</td></tr>
d129 3
a131 3
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module is initialized.  <a href="#a89"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a90" doxytag="java.c::PHP_MINFO_FUNCTION"></a>
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a90">PHP_MINFO_FUNCTION</a> (EXT)</td></tr>
d134 1
a134 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a91">PHP_MSHUTDOWN_FUNCTION</a> (EXT)</td></tr>
d136 1
a136 1
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module terminates.  <a href="#a91"></a><br></td></tr>
d186 1
a186 1
<a class="anchor" name="a65" doxytag="java.c::__call"></a><p>
d210 1
a210 1
Proto: mixed <a class="el" href="java_8c.html#a65">Java::__call</a> ( string procedure_name [, array arguments ]). 
d230 1
a230 1
  function <a class="code" href="java_8c.html#a70">__sleep</a>() {
d238 1
a238 1
  function <a class="code" href="java_8c.html#a71">__wakeup</a>() {
d247 1
a247 1
  function <a class="code" href="java_8c.html#a68">__destruct</a>() { 
d253 1
a253 1
  function <a class="code" href="java_8c.html#a69">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__get($arg); }
d255 1
a255 1
  function <a class="code" href="java_8c.html#a65">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__call($m,$a); }
d261 1
a261 1
<a class="anchor" name="a68" doxytag="java.c::__destruct"></a><p>
d285 1
a285 1
Proto: void <a class="el" href="java_8c.html#a68">Java::__destruct()</a>. 
d304 1
a304 1
  function <a class="code" href="java_8c.html#a70">__sleep</a>() {
d309 1
a309 1
  function <a class="code" href="java_8c.html#a71">__wakeup</a>() {
d316 1
a316 1
  function <a class="code" href="java_8c.html#a68">__destruct</a>() { 
d322 1
a322 1
  function <a class="code" href="java_8c.html#a69">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__get($arg); }
d324 1
a324 1
  function <a class="code" href="java_8c.html#a65">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__call($m,$a); }
d330 1
a330 1
<a class="anchor" name="a69" doxytag="java.c::__get"></a><p>
d361 1
a361 1
<a class="anchor" name="a67" doxytag="java.c::__set"></a><p>
d393 1
a393 1
<a class="anchor" name="a70" doxytag="java.c::__sleep"></a><p>
d417 1
a417 1
Proto: string <a class="el" href="java_8c.html#a70">Java::__sleep()</a>. 
d431 1
a431 1
<a class="anchor" name="a66" doxytag="java.c::__tostring"></a><p>
d459 1
a459 1
Use a string cast if you want to display the java string as a php string, e.g.: <div class="fragment"><pre class="fragment"> echo (string)$string; <span class="comment">// explicit cast</span>
d464 1
a464 1
<a class="anchor" name="a71" doxytag="java.c::__wakeup"></a><p>
d488 1
a488 1
Proto: string <a class="el" href="java_8c.html#a71">Java::__wakeup()</a>. 
d498 30
a527 1
<a class="anchor" name="a63" doxytag="java.c::construct"></a><p>
d560 1
a560 1
<a class="anchor" name="a64" doxytag="java.c::construct_class"></a><p>
d593 30
a622 1
<a class="anchor" name="a43" doxytag="java.c::get_closure"></a><p>
d693 1
a693 1
Example which closes over the current environment and pass it back to java: <div class="fragment"><pre class="fragment"> java_get_context()-&gt;call(java_closure()) || die <span class="stringliteral">"Script should be called from java"</span>;
d695 1
a695 1
It is possible to access implicit web objects (the session, the application store etc.) from the context. Please see the JSR223 documentation or for details. Example: <div class="fragment"><pre class="fragment"> java_get_context()-&gt;getHttpServletRequest();
d726 1
a726 1
Returns the name of the backend or null if the backend is not running. Example: <div class="fragment"><pre class="fragment"> $backend = java_get_server_name();
d762 1
a762 1
When java_get_session() is called with a session handle, the session is not shared with java and no cookies are set. Example: <div class="fragment"><pre class="fragment"> java_get_session(<span class="stringliteral">"myPrivateApplicationStore"</span>)-&gt;put(<span class="stringliteral">"key"</span>, <span class="stringliteral">"value"</span>);
d769 1
a769 1
<a class="anchor" name="a42" doxytag="java.c::get_values"></a><p>
d793 1
a793 1
Proto: array java_values(object ob) or array java_get_values(object ob). 
d795 16
a810 1
Fetches the object into a php array. ob must be a java array or it must implement java.util.Map or java.util.Collection. Please make sure that the java array, Map or Collection does not exceed php's memory limit. Example: <div class="fragment"><pre class="fragment"> print_r(java_get_values($sys-&gt;getProperties()));
d814 1
a814 1
<a class="anchor" name="a50" doxytag="java.c::inspect"></a><p>
d934 1
a934 1
<a class="anchor" name="a72" doxytag="java.c::offsetExists"></a><p>
d958 1
a958 1
Proto: bool <a class="el" href="java_8c.html#a72">Java::offsetExists()</a>. 
d966 1
a966 1
<a class="anchor" name="a73" doxytag="java.c::offsetGet"></a><p>
d990 1
a990 1
Proto: object <a class="el" href="java_8c.html#a73">Java::offsetGet()</a>. 
d999 1
a999 1
<a class="anchor" name="a74" doxytag="java.c::offsetSet"></a><p>
d1037 1
a1037 1
<a class="anchor" name="a75" doxytag="java.c::offsetUnset"></a><p>
d1061 1
a1061 1
Proto: string <a class="el" href="java_8c.html#a75">Java::offsetUnset()</a>. 
d1066 1
a1066 1
<a class="anchor" name="a89" doxytag="java.c::PHP_MINIT_FUNCTION"></a><p>
d1096 1
a1096 1
<a class="anchor" name="a91" doxytag="java.c::PHP_MSHUTDOWN_FUNCTION"></a><p>
d1245 1
a1245 1
Tries to reset the backent to its initial state. If the call succeeds, all session handles and caches are gone.<p>
d1329 1
a1329 1
  ZEND_FENTRY(__construct, EXT_FN( <a class="code" href="java_8c.html#a63">construct</a> ), NULL, 0)
d1378 1
a1378 1
<hr size="1"><address style="align: right;"><small>Generated on Sun Feb 5 13:18:20 2006 for php-java-bridge by&nbsp;
@


1.5.2.1
log
@Release-3-0-8-1
@
text
@d65 1
a65 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a39">begin_document</a> ()</td></tr>
d67 2
a68 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_begin_document(void).  <a href="#a39"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a40">end_document</a> ()</td></tr>
d70 3
a72 9
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_end_document(void).  <a href="#a40"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a44">get_values</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: mixed java_values(val) or mixed java_get_values(object ob) Evaluates the object and fetches its content, if possible.  <a href="#a44"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a45">get_closure</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_closure([object],[array|string],[object]) or object java_get_closure([object],[array|string],[object]).  <a href="#a45"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a46" doxytag="java.c::exception_handler"></a>
PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a46">exception_handler</a> ()</td></tr>
d75 2
a76 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a51" doxytag="java.c::call_with_exception_handler"></a>
PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a51">call_with_exception_handler</a> ()</td></tr>
d79 1
a79 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a52">inspect</a> ()</td></tr>
d81 2
a82 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_inspect(object);.  <a href="#a52"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a65">construct</a> ()</td></tr>
d84 2
a85 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::Java (string classname [, string argument1, . . . ]) or object Java::java_exception (string classname [, string argument1, . . . ]) or object Java::JavaException (string classname [, string argument1, . . . ]);.  <a href="#a65"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a66">construct_class</a> ()</td></tr>
d87 2
a88 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::JavaClass ( string classname) or object java::java_class ( string classname);.  <a href="#a66"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a67">__call</a> ()</td></tr>
d90 2
a91 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: mixed <a class="el" href="java_8c.html#a67">Java::__call</a> ( string procedure_name [, array arguments ]).  <a href="#a67"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a68">__tostring</a> ()</td></tr>
d93 2
a94 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::__toString (void).  <a href="#a68"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a69">__set</a> ()</td></tr>
d96 2
a97 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void Java::__set(object, object).  <a href="#a69"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a70">__destruct</a> ()</td></tr>
d99 2
a100 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void <a class="el" href="java_8c.html#a70">Java::__destruct()</a>.  <a href="#a70"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a71">__get</a> ()</td></tr>
d102 2
a103 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::__get(object).  <a href="#a71"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a72">__sleep</a> ()</td></tr>
d105 2
a106 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a72">Java::__sleep()</a>.  <a href="#a72"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a73">__wakeup</a> ()</td></tr>
d108 2
a109 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a73">Java::__wakeup()</a>.  <a href="#a73"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a74">offsetExists</a> ()</td></tr>
d111 2
a112 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: bool <a class="el" href="java_8c.html#a74">Java::offsetExists()</a>.  <a href="#a74"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a75">offsetGet</a> ()</td></tr>
d114 2
a115 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object <a class="el" href="java_8c.html#a75">Java::offsetGet()</a>.  <a href="#a75"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a76">offsetSet</a> ()</td></tr>
d117 2
a118 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void Java::offsetSet(object, object);.  <a href="#a76"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a77">offsetUnset</a> ()</td></tr>
d120 2
a121 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a77">Java::offsetUnset()</a>.  <a href="#a77"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a91">PHP_MINIT_FUNCTION</a> (EXT)</td></tr>
d123 3
a125 3
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module is initialized.  <a href="#a91"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a92" doxytag="java.c::PHP_MINFO_FUNCTION"></a>
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a92">PHP_MINFO_FUNCTION</a> (EXT)</td></tr>
d128 1
a128 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a93">PHP_MSHUTDOWN_FUNCTION</a> (EXT)</td></tr>
d130 1
a130 1
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module terminates.  <a href="#a93"></a><br></td></tr>
d180 1
a180 1
<a class="anchor" name="a67" doxytag="java.c::__call"></a><p>
d204 1
a204 1
Proto: mixed <a class="el" href="java_8c.html#a67">Java::__call</a> ( string procedure_name [, array arguments ]). 
d224 1
a224 1
  function <a class="code" href="java_8c.html#a72">__sleep</a>() {
d232 1
a232 1
  function <a class="code" href="java_8c.html#a73">__wakeup</a>() {
d241 1
a241 1
  function <a class="code" href="java_8c.html#a70">__destruct</a>() { 
d247 1
a247 1
  function <a class="code" href="java_8c.html#a71">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__get($arg); }
d249 1
a249 1
  function <a class="code" href="java_8c.html#a67">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__call($m,$a); }
d255 1
a255 1
<a class="anchor" name="a70" doxytag="java.c::__destruct"></a><p>
d279 1
a279 1
Proto: void <a class="el" href="java_8c.html#a70">Java::__destruct()</a>. 
d298 1
a298 1
  function <a class="code" href="java_8c.html#a72">__sleep</a>() {
d303 1
a303 1
  function <a class="code" href="java_8c.html#a73">__wakeup</a>() {
d310 1
a310 1
  function <a class="code" href="java_8c.html#a70">__destruct</a>() { 
d316 1
a316 1
  function <a class="code" href="java_8c.html#a71">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__get($arg); }
d318 1
a318 1
  function <a class="code" href="java_8c.html#a67">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;java) <span class="keywordflow">return</span> $this-&gt;java-&gt;__call($m,$a); }
d324 1
a324 1
<a class="anchor" name="a71" doxytag="java.c::__get"></a><p>
d355 1
a355 1
<a class="anchor" name="a69" doxytag="java.c::__set"></a><p>
d387 1
a387 1
<a class="anchor" name="a72" doxytag="java.c::__sleep"></a><p>
d411 1
a411 1
Proto: string <a class="el" href="java_8c.html#a72">Java::__sleep()</a>. 
d425 1
a425 1
<a class="anchor" name="a68" doxytag="java.c::__tostring"></a><p>
d453 1
a453 1
Use a string cast or java_values(), if you want to display the java string as a php string, e.g.: <div class="fragment"><pre class="fragment"> echo (string)$string; <span class="comment">// explicit cast</span>
d458 1
a458 1
<a class="anchor" name="a73" doxytag="java.c::__wakeup"></a><p>
d482 1
a482 1
Proto: string <a class="el" href="java_8c.html#a73">Java::__wakeup()</a>. 
d492 1
a492 30
<a class="anchor" name="a39" doxytag="java.c::begin_document"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION begin_document           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void java_begin_document(void). 
<p>
Enters stream mode (asynchronuous protocol). The statements are sent to the backend in one XML stream.     </td>
  </tr>
</table>
<a class="anchor" name="a65" doxytag="java.c::construct"></a><p>
d525 1
a525 1
<a class="anchor" name="a66" doxytag="java.c::construct_class"></a><p>
d558 1
a558 30
<a class="anchor" name="a40" doxytag="java.c::end_document"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION end_document           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void java_end_document(void). 
<p>
Ends stream mode.     </td>
  </tr>
</table>
<a class="anchor" name="a45" doxytag="java.c::get_closure"></a><p>
d629 1
a629 1
Example which closes over the current environment and passes it back to java: <div class="fragment"><pre class="fragment"> java_get_context()-&gt;call(java_closure()) || die <span class="stringliteral">"Script should be called from java"</span>;
d631 1
a631 1
It is possible to access implicit web objects (the session, the application store etc.) from the context. Please see the JSR223 documentation for details. Example: <div class="fragment"><pre class="fragment"> java_get_context()-&gt;getHttpServletRequest();
d662 1
a662 1
Returns the name of the backend or null, if the backend is not running. Example: <div class="fragment"><pre class="fragment"> $backend = java_get_server_name();
d698 1
a698 1
When java_get_session() is called with a session handle, the session is not shared with java and no cookies are set. Example: <div class="fragment"><pre class="fragment"> java_get_session(<span class="stringliteral">"myPublicApplicationStore"</span>)-&gt;put(<span class="stringliteral">"key"</span>, <span class="stringliteral">"value"</span>);
d705 1
a705 1
<a class="anchor" name="a44" doxytag="java.c::get_values"></a><p>
d729 1
a729 1
Proto: mixed java_values(val) or mixed java_get_values(object ob) Evaluates the object and fetches its content, if possible. 
d731 1
a731 16
A java array, Map or Collection object is returned as a php array. An array, Map or Collection proxy is returned as a java array, Map or Collection object, and a null proxy is returned as null. All values of java types for which a primitive php type exists are returned as php values. Everything else is returned unevaluated. Please make sure that the values do not not exceed php's memory limit. Example:<p>
<div class="fragment"><pre class="fragment"> $str = <span class="keyword">new</span> java(<span class="stringliteral">"java.lang.String"</span>, <span class="stringliteral">"hello"</span>);
 echo $str;
 =&gt; [o(String):<span class="stringliteral">"hello"</span>]
 echo java_values($str);
 =&gt; hello
 $chr = $str-&gt;toCharArray();
 echo $chr;
 =&gt; [o(array_of-C):<span class="stringliteral">"[C@@1b10d42"</span>]
 $ar = java_values($chr);
 print $ar;
 =&gt; Array
 print $ar[0];
 =&gt; [o(Character):<span class="stringliteral">"h"</span>]
 print java_values($ar[0]);
 =&gt; h
d735 1
a735 1
<a class="anchor" name="a52" doxytag="java.c::inspect"></a><p>
d855 1
a855 1
<a class="anchor" name="a74" doxytag="java.c::offsetExists"></a><p>
d879 1
a879 1
Proto: bool <a class="el" href="java_8c.html#a74">Java::offsetExists()</a>. 
d887 1
a887 1
<a class="anchor" name="a75" doxytag="java.c::offsetGet"></a><p>
d911 1
a911 1
Proto: object <a class="el" href="java_8c.html#a75">Java::offsetGet()</a>. 
d920 1
a920 1
<a class="anchor" name="a76" doxytag="java.c::offsetSet"></a><p>
d958 1
a958 1
<a class="anchor" name="a77" doxytag="java.c::offsetUnset"></a><p>
d982 1
a982 1
Proto: string <a class="el" href="java_8c.html#a77">Java::offsetUnset()</a>. 
d987 1
a987 1
<a class="anchor" name="a91" doxytag="java.c::PHP_MINIT_FUNCTION"></a><p>
d1017 1
a1017 1
<a class="anchor" name="a93" doxytag="java.c::PHP_MSHUTDOWN_FUNCTION"></a><p>
d1166 1
a1166 1
Tries to reset the backent to its initial state. If the call succeeds, all caches are gone.<p>
d1250 1
a1250 1
  ZEND_FENTRY(__construct, EXT_FN( <a class="code" href="java_8c.html#a65">construct</a> ), NULL, 0)
d1299 1
a1299 1
<hr size="1"><address style="align: right;"><small>Generated on Sun Apr 9 16:51:55 2006 for php-java-bridge by&nbsp;
@


1.4
log
@Release-3.0.6
@
text
@d1044 1
a1044 1
Stops the backend, if it is running. When running in Apache/IIS, or as a FastCGI binary, this procedure is called only once. When running as a CGI binary this is called whenever the CGI binary terminates.     </td>
d1299 1
a1299 1
<hr size="1"><address style="align: right;"><small>Generated on Sun Jan 15 20:26:37 2006 for php-java-bridge by&nbsp;
@


1.3
log
@Release-3.0.5
@
text
@d1299 1
a1299 1
<hr size="1"><address style="align: right;"><small>Generated on Sun Jan 8 19:28:25 2006 for php-java-bridge by&nbsp;
@


1.2
log
@Release-3-0-2
@
text
@d7 1
a7 1
<div class="qindex"><a class="qindex" href="index.html">Main&nbsp;Page</a> | <a class="qindex" href="annotated.html">Data&nbsp;Structures</a> | <a class="qindex" href="files.html">File&nbsp;List</a> | <a class="qindex" href="globals.html">Globals</a> | <a class="qindex" href="pages.html">Related&nbsp;Pages</a></div>
d27 4
d32 1
a32 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a19">PHP_RINIT_FUNCTION</a> (EXT)</td></tr>
d34 2
a35 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when a new request starts.  <a href="#a19"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a20">PHP_RSHUTDOWN_FUNCTION</a> (EXT)</td></tr>
d37 2
a38 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the request terminates.  <a href="#a20"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a22">last_exception_get</a> ()</td></tr>
d40 2
a41 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_last_exception_get(void).  <a href="#a22"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a24">last_exception_clear</a> ()</td></tr>
d43 2
a44 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_last_exception_clear(void).  <a href="#a24"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a25">set_file_encoding</a> ()</td></tr>
d46 2
a47 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_set_file_encoding(string).  <a href="#a25"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a27">require</a> ()</td></tr>
d49 2
a50 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_require(string path) or java_set_library_path(string path).  <a href="#a27"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a28">instanceof</a> ()</td></tr>
d52 2
a53 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: bool java_instanceof(object object, object clazz).  <a href="#a28"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a30">get_session</a> ()</td></tr>
d55 2
a56 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_session([string], [bool]) or object java_get_session([string], [bool]).  <a href="#a30"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a32">get_context</a> ()</td></tr>
d58 2
a59 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_context(void) or object java_get_context(void).  <a href="#a32"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a33">get_server_name</a> ()</td></tr>
d61 2
a62 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string java_server_name(void) or string java_get_server_name(void).  <a href="#a33"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a34">reset</a> ()</td></tr>
d64 2
a65 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_reset(void);.  <a href="#a34"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a38">get_values</a> ()</td></tr>
d67 2
a68 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: array java_values(object ob) or array java_get_values(object ob).  <a href="#a38"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a39">get_closure</a> ()</td></tr>
d70 3
a72 3
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_closure([object],[array|string],[object]) or object java_get_closure([object],[array|string],[object]).  <a href="#a39"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a40" doxytag="java.c::exception_handler"></a>
PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a40">exception_handler</a> ()</td></tr>
d75 2
a76 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a45" doxytag="java.c::call_with_exception_handler"></a>
PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a45">call_with_exception_handler</a> ()</td></tr>
d79 1
a79 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a46">inspect</a> ()</td></tr>
d81 2
a82 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_inspect(object);.  <a href="#a46"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a58">java</a> ()</td></tr>
d84 2
a85 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::Java (string classname [, string argument1, . . . ]) or object Java::java_exception (string classname [, string argument1, . . . ]) or object Java::JavaException (string classname [, string argument1, . . . ]);.  <a href="#a58"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a59">java_class</a> ()</td></tr>
d87 2
a88 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::JavaClass ( string classname) or object <a class="el" href="java_8c.html#a59">java::java_class</a> ( string classname);.  <a href="#a59"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a60">__call</a> ()</td></tr>
d90 2
a91 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: mixed <a class="el" href="java_8c.html#a60">Java::__call</a> ( string procedure_name [, array arguments ]).  <a href="#a60"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a61">__tostring</a> ()</td></tr>
d93 2
a94 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::__toString (void).  <a href="#a61"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a62">__set</a> ()</td></tr>
d96 2
a97 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void Java::__set(object, object).  <a href="#a62"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a63">__destruct</a> ()</td></tr>
d99 2
a100 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void <a class="el" href="java_8c.html#a63">Java::__destruct()</a>.  <a href="#a63"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a64">__get</a> ()</td></tr>
d102 2
a103 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::__get(object).  <a href="#a64"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a65">__sleep</a> ()</td></tr>
d105 2
a106 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a65">Java::__sleep()</a>.  <a href="#a65"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a66">__wakeup</a> ()</td></tr>
d108 2
a109 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a66">Java::__wakeup()</a>.  <a href="#a66"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a67">offsetExists</a> ()</td></tr>
d111 2
a112 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: bool <a class="el" href="java_8c.html#a67">Java::offsetExists()</a>.  <a href="#a67"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a68">offsetGet</a> ()</td></tr>
d114 2
a115 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object <a class="el" href="java_8c.html#a68">Java::offsetGet()</a>.  <a href="#a68"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a69">offsetSet</a> ()</td></tr>
d117 2
a118 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void Java::offsetSet(object, object);.  <a href="#a69"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a70">offsetUnset</a> ()</td></tr>
d120 2
a121 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a70">Java::offsetUnset()</a>.  <a href="#a70"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a83">PHP_MINIT_FUNCTION</a> (EXT)</td></tr>
d123 3
a125 3
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module is initialized.  <a href="#a83"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a84" doxytag="java.c::PHP_MINFO_FUNCTION"></a>
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a84">PHP_MINFO_FUNCTION</a> (EXT)</td></tr>
d128 1
a128 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a85">PHP_MSHUTDOWN_FUNCTION</a> (EXT)</td></tr>
d130 1
a130 1
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module terminates.  <a href="#a85"></a><br></td></tr>
d132 1
a132 1
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="structcfg.html">cfg</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a0">cfg</a> = 0</td></tr>
d134 2
a135 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Holds the global configuration.  <a href="#a0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a2" doxytag="java.c::functions"></a>
d140 2
a141 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a4" doxytag="java.c::ini_updated"></a>
int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a4">ini_updated</a></td></tr>
d144 2
a145 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a5" doxytag="java.c::ini_user"></a>
int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a5">ini_user</a></td></tr>
d148 2
a149 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a6" doxytag="java.c::ini_set"></a>
int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a6">ini_set</a></td></tr>
d152 2
a153 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a7" doxytag="java.c::class_entry"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a7">class_entry</a></td></tr>
d156 6
a161 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a8" doxytag="java.c::class_class_entry"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a8">class_class_entry</a></td></tr>
d164 2
a165 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a9" doxytag="java.c::class_class_entry_jsr"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a9">class_class_entry_jsr</a></td></tr>
d168 2
a169 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a10" doxytag="java.c::exception_class_entry"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a10">exception_class_entry</a></td></tr>
d172 2
a173 2
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a11" doxytag="java.c::handlers"></a>
zend_object_handlers&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a11">handlers</a></td></tr>
d180 1
a180 1
<a class="anchor" name="a60" doxytag="java.c::__call"></a><p>
d204 1
a204 1
Proto: mixed <a class="el" href="java_8c.html#a60">Java::__call</a> ( string procedure_name [, array arguments ]). 
d220 2
a221 2
  function __construct($<a class="code" href="java_8c.html#a58">java</a>){ 
    $this-&gt;<a class="code" href="java_8c.html#a58">java</a>=$java; 
d224 1
a224 1
  function <a class="code" href="java_8c.html#a65">__sleep</a>() {
d232 1
a232 1
  function <a class="code" href="java_8c.html#a66">__wakeup</a>() {
d235 1
a235 1
    $this-&gt;<a class="code" href="java_8c.html#a58">java</a> = $in-&gt;readObject();
d239 1
a239 1
    <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a58">java</a>;
d241 2
a242 2
  function <a class="code" href="java_8c.html#a63">__destruct</a>() { 
    <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a58">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a58">java</a>-&gt;__destruct(); 
d247 4
a250 4
  function <a class="code" href="java_8c.html#a64">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a58">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a58">java</a>-&gt;__get($arg); }
  function __put($key, $val) { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a58">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a58">java</a>-&gt;__put($key, $val); }
  function <a class="code" href="java_8c.html#a60">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a58">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a58">java</a>-&gt;__call($m,$a); }
  function __toString()      { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a58">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a58">java</a>-&gt;__toString(); }
d255 1
a255 1
<a class="anchor" name="a63" doxytag="java.c::__destruct"></a><p>
d279 1
a279 1
Proto: void <a class="el" href="java_8c.html#a63">Java::__destruct()</a>. 
d294 2
a295 2
  function __construct($<a class="code" href="java_8c.html#a58">java</a>){ 
    $this-&gt;<a class="code" href="java_8c.html#a58">java</a>=$java; 
d298 1
a298 1
  function <a class="code" href="java_8c.html#a65">__sleep</a>() {
d303 1
a303 1
  function <a class="code" href="java_8c.html#a66">__wakeup</a>() {
d305 1
a305 1
    $this-&gt;<a class="code" href="java_8c.html#a58">java</a> = $session-&gt;get($this-&gt;serialID);
d308 1
a308 1
    <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a58">java</a>;
d310 2
a311 2
  function <a class="code" href="java_8c.html#a63">__destruct</a>() { 
    <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a58">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a58">java</a>-&gt;__destruct(); 
d316 4
a319 4
  function <a class="code" href="java_8c.html#a64">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a58">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a58">java</a>-&gt;__get($arg); }
  function __put($key, $val) { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a58">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a58">java</a>-&gt;__put($key, $val); }
  function <a class="code" href="java_8c.html#a60">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a58">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a58">java</a>-&gt;__call($m,$a); }
  function __toString()      { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a58">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a58">java</a>-&gt;__toString(); }
d324 1
a324 1
<a class="anchor" name="a64" doxytag="java.c::__get"></a><p>
d355 1
a355 1
<a class="anchor" name="a62" doxytag="java.c::__set"></a><p>
d387 1
a387 1
<a class="anchor" name="a65" doxytag="java.c::__sleep"></a><p>
d411 1
a411 1
Proto: string <a class="el" href="java_8c.html#a65">Java::__sleep()</a>. 
d425 1
a425 1
<a class="anchor" name="a61" doxytag="java.c::__tostring"></a><p>
d451 1
a451 1
Displays the java object as a string. Note: it doesn't cast the object to a string, thus echo "$ob" displays a string representation of $ob, e.g.: <div class="fragment"><pre class="fragment"> [o(String)<span class="stringliteral">"hello"</span>]
d453 2
a454 3
Use a string cast if you want to display the java string as a php string, e.g.: <div class="fragment"><pre class="fragment"> echo (string)$string; 
 <span class="comment">// implicit cast to string:</span>
 echo "".$string;
d458 1
a458 1
<a class="anchor" name="a66" doxytag="java.c::__wakeup"></a><p>
d482 1
a482 1
Proto: string <a class="el" href="java_8c.html#a66">Java::__wakeup()</a>. 
d492 1
a492 1
<a class="anchor" name="a39" doxytag="java.c::get_closure"></a><p>
d498 1
a498 1
          <td class="md" nowrap valign="top">PHP_FUNCTION get_closure           </td>
d516 1
a516 1
Proto: object java_closure([object],[array|string],[object]) or object java_get_closure([object],[array|string],[object]). 
d518 1
a518 2
Closes over the php environment and packages it up as a java class. Example: <div class="fragment"><pre class="fragment"> function toString() {<span class="keywordflow">return</span> <span class="stringliteral">"helloWorld"</span>;};
 $object = java_get_closure();
d520 2
a521 12
</pre></div><p>
When a php instance is supplied as a argument, that environment will be used instead. When a string or key/value map is supplied as a second argument, the java procedure names are mapped to the php procedure names. Example: <div class="fragment"><pre class="fragment"> function hello() {<span class="keywordflow">return</span> <span class="stringliteral">"hello"</span>;};
 echo (string)java_get_closure(null, "hello");
</pre></div><p>
When an array of java interfaces is supplied as a third argument, the environment must implement these interfaces. Example: <div class="fragment"><pre class="fragment"> <span class="keyword">class </span>Listener {
   function actionPerformed($actionEvent) {
   ...
   }
 }
 function getListener() {
   <span class="keywordflow">return</span> java_get_closure(<span class="keyword">new</span> Listener(), null, array(<span class="keyword">new</span> Java(<span class="stringliteral">"java.awt.event.ActionListener"</span>)));
 }
d525 1
a525 1
<a class="anchor" name="a32" doxytag="java.c::get_context"></a><p>
d531 1
a531 1
          <td class="md" nowrap valign="top">PHP_FUNCTION get_context           </td>
d549 1
a549 1
Proto: object java_context(void) or object java_get_context(void). 
d551 5
a555 6
Returns the jsr223 script context handle.<p>
Example which closes over the current environment and pass it back to java: <div class="fragment"><pre class="fragment"> java_get_context()-&gt;call(java_closure()) || die <span class="stringliteral">"Script should be called from java"</span>;
</pre></div><p>
It is possible to access implicit web objects (the session, the application store etc.) from the context. Please see the JSR223 documentation or for details. Example: <div class="fragment"><pre class="fragment"> java_get_context()-&gt;getHttpServletRequest();
</pre></div> <dl compact><dt><b>See also:</b></dt><dd>java_get_session() </dd></dl>
    </td>
d558 1
a558 1
<a class="anchor" name="a33" doxytag="java.c::get_server_name"></a><p>
d564 1
a564 1
          <td class="md" nowrap valign="top">PHP_FUNCTION get_server_name           </td>
d582 1
a582 1
Proto: string java_server_name(void) or string java_get_server_name(void). 
d584 15
a598 3
Returns the name of the backend or null if the backend is not running. Example: <div class="fragment"><pre class="fragment"> $backend = java_get_server_name();
 <span class="keywordflow">if</span>(!$backend) wakeup_administrator(<span class="stringliteral">"backend not running"</span>);
 echo <span class="stringliteral">"Connected to the backend: $backend\n"</span>;
d602 1
a602 1
<a class="anchor" name="a30" doxytag="java.c::get_session"></a><p>
d608 1
a608 1
          <td class="md" nowrap valign="top">PHP_FUNCTION get_session           </td>
d626 1
a626 1
Proto: object java_session([string], [bool]) or object java_get_session([string], [bool]). 
d628 2
a629 3
Return a session handle. When java_session() is called without arguments, the session is shared with java. Example: <div class="fragment"><pre class="fragment"> java_get_session()-&gt;put(<span class="stringliteral">"key"</span>, <span class="keyword">new</span> Java(<span class="stringliteral">"java.lang.Object"</span>));
 [...]
</pre></div> The java components (jsp, servlets) can retrieve the value, for example with: <div class="fragment"><pre class="fragment"> getSession().getAttribute(<span class="stringliteral">"key"</span>); 
d631 2
a632 4
When java_get_session() is called with a session handle, the session is not shared with java and no cookies are set. Example: <div class="fragment"><pre class="fragment"> java_get_session(<span class="stringliteral">"myPrivateApplicationStore"</span>)-&gt;put(<span class="stringliteral">"key"</span>, <span class="stringliteral">"value"</span>);
</pre></div><p>
When java_get_session() is called with a second argument set to true, a new session is allocated, the old session is destroyed if necessary. Example: <div class="fragment"><pre class="fragment"> java_get_session(null, <span class="keyword">true</span>)-&gt;put(<span class="stringliteral">"key"</span>, <span class="stringliteral">"val"</span>);
</pre></div>. <dl compact><dt><b>See also:</b></dt><dd><a class="el" href="java_8c.html#a32">get_context()</a> </dd></dl>
d636 1
a636 1
<a class="anchor" name="a38" doxytag="java.c::get_values"></a><p>
d642 1
a642 1
          <td class="md" nowrap valign="top">PHP_FUNCTION get_values           </td>
d660 1
a660 1
Proto: array java_values(object ob) or array java_get_values(object ob). 
d662 3
a664 1
Fetches the object into a php array. ob must be a java array or it must implement java.util.Map or java.util.Collection. Please make sure that the java array, Map or Collection does not exceed php's memory limit. Example: <div class="fragment"><pre class="fragment"> print_r(java_get_values($sys-&gt;getProperties()));
d668 1
a668 1
<a class="anchor" name="a46" doxytag="java.c::inspect"></a><p>
d674 1
a674 1
          <td class="md" nowrap valign="top">PHP_FUNCTION inspect           </td>
d692 1
a692 1
Proto: void java_inspect(object);. 
d694 9
a702 2
Returns the contents (public fields, public methods, public classes) of object as a string. Example: <div class="fragment"><pre class="fragment"> echo java_inspect(java_get_context());
</pre></div>     </td>
d705 1
a705 1
<a class="anchor" name="a28" doxytag="java.c::instanceof"></a><p>
d711 1
a711 1
          <td class="md" nowrap valign="top">PHP_FUNCTION instanceof           </td>
d729 1
a729 1
Proto: bool java_instanceof(object object, object clazz). 
d731 1
a731 1
Tests if object is an instance of clazz. Example: <div class="fragment"><pre class="fragment"> <span class="keywordflow">return</span>($o <a class="code" href="java_8c.html#a28">instanceof</a> Java &amp;&amp; $c <a class="code" href="java_8c.html#a28">instanceof</a> Java &amp;&amp; java_instanceof($o, $c)); 
d735 1
a735 1
<a class="anchor" name="a58" doxytag="java.c::java"></a><p>
d741 1
a741 1
          <td class="md" nowrap valign="top">PHP_METHOD java           </td>
d759 1
a759 1
Proto: object Java::Java (string classname [, string argument1, . . . ]) or object Java::java_exception (string classname [, string argument1, . . . ]) or object Java::JavaException (string classname [, string argument1, . . . ]);. 
d761 1
a761 4
Java constructor. Example: <div class="fragment"><pre class="fragment"> $object = <span class="keyword">new</span> Java(<span class="stringliteral">"java.lang.String"</span>, <span class="stringliteral">"hello world"</span>); 
 echo (string)$object;
</pre></div> <div class="fragment"><pre class="fragment"> $ex = <span class="keyword">new</span> JavaException(<span class="stringliteral">"java.lang.NullPointerException"</span>);
 <span class="keywordflow">throw</span> $ex;
d765 1
a765 1
<a class="anchor" name="a59" doxytag="java.c::java_class"></a><p>
d771 1
a771 1
          <td class="md" nowrap valign="top">PHP_METHOD java_class           </td>
d789 1
a789 1
Proto: object Java::JavaClass ( string classname) or object <a class="el" href="java_8c.html#a59">java::java_class</a> ( string classname);. 
d791 1
a791 4
References a java class. Example: <div class="fragment"><pre class="fragment"> $Object = <span class="keyword">new</span> JavaClass(<span class="stringliteral">"java.lang.Object"</span>);
 $object = $Object-&gt;newInstance();
</pre></div> <div class="fragment"><pre class="fragment"> $Thread = <span class="keyword">new</span> JavaClass(<span class="stringliteral">"java.lang.Thread"</span>);
 $Thread-&gt;sleep(1000);
d795 1
a795 1
<a class="anchor" name="a24" doxytag="java.c::last_exception_clear"></a><p>
d825 1
a825 1
<a class="anchor" name="a22" doxytag="java.c::last_exception_get"></a><p>
d855 1
a855 1
<a class="anchor" name="a67" doxytag="java.c::offsetExists"></a><p>
d879 1
a879 1
Proto: bool <a class="el" href="java_8c.html#a67">Java::offsetExists()</a>. 
d887 1
a887 1
<a class="anchor" name="a68" doxytag="java.c::offsetGet"></a><p>
d911 1
a911 1
Proto: object <a class="el" href="java_8c.html#a68">Java::offsetGet()</a>. 
d920 1
a920 1
<a class="anchor" name="a69" doxytag="java.c::offsetSet"></a><p>
d958 1
a958 1
<a class="anchor" name="a70" doxytag="java.c::offsetUnset"></a><p>
d982 1
a982 1
Proto: string <a class="el" href="java_8c.html#a70">Java::offsetUnset()</a>. 
d987 1
a987 1
<a class="anchor" name="a83" doxytag="java.c::PHP_MINIT_FUNCTION"></a><p>
d1017 1
a1017 1
<a class="anchor" name="a85" doxytag="java.c::PHP_MSHUTDOWN_FUNCTION"></a><p>
d1047 1
a1047 1
<a class="anchor" name="a19" doxytag="java.c::PHP_RINIT_FUNCTION"></a><p>
d1077 1
a1077 1
<a class="anchor" name="a20" doxytag="java.c::PHP_RSHUTDOWN_FUNCTION"></a><p>
d1107 1
a1107 1
<a class="anchor" name="a27" doxytag="java.c::require"></a><p>
d1140 1
a1140 1
<a class="anchor" name="a34" doxytag="java.c::reset"></a><p>
d1173 1
a1173 1
<a class="anchor" name="a25" doxytag="java.c::set_file_encoding"></a><p>
d1204 1
a1204 1
<a class="anchor" name="a0" doxytag="java.c::cfg"></a><p>
d1229 1
a1229 1
<a class="anchor" name="a15" doxytag="java.c::class_functions"></a><p>
d1250 1
a1250 6

  EXT_MALIAS(EXT, EXT_GLOBAL_N(exception), EXT, NULL, 0)
  EXT_MALIAS(EXT,  exception , EXT, NULL, 0)
  EXT_ME(EXT,  class , NULL, 0)
  EXT_MALIAS(EXT, EXT_GLOBAL_N(class),  class , NULL, 0)
  
d1258 1
a1258 4



  EXT_ME(EXT, <a class="code" href="java_8c.html#a70">offsetUnset</a>,   arginfo_get, ZEND_ACC_PUBLIC)
d1264 1
a1264 1
<a class="anchor" name="a3" doxytag="java.c::module_entry"></a><p>
d1299 1
a1299 1
<hr size="1"><address style="align: right;"><small>Generated on Sun Dec 11 18:45:26 2005 for php-java-bridge by&nbsp;
@


1.1
log
@Version-3.0.2
@
text
@a24 1
<code>#include "zend_builtin_functions.h"</code><br>
d36 1
a36 1
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_last_exception_get(void);.  <a href="#a22"></a><br></td></tr>
d39 1
a39 1
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_last_exception_clear(void);.  <a href="#a24"></a><br></td></tr>
d42 1
a42 1
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_set_file_encoding(string);.  <a href="#a25"></a><br></td></tr>
d45 1
a45 1
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_require(string path);.  <a href="#a27"></a><br></td></tr>
d48 1
a48 1
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: bool java_instanceof(object object, object clazz);.  <a href="#a28"></a><br></td></tr>
d51 1
a51 1
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_session([string], [bool]);.  <a href="#a30"></a><br></td></tr>
d54 1
a54 1
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_context(void);.  <a href="#a32"></a><br></td></tr>
d57 1
a57 1
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string java_get_server_name(void);.  <a href="#a33"></a><br></td></tr>
d63 1
a63 1
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: array java_values(object ob);.  <a href="#a38"></a><br></td></tr>
d66 7
a72 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_closure([object],[array|string],[object]);.  <a href="#a39"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a40">exception_handler</a> ()</td></tr>
d74 1
a74 4
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Only for internal use.  <a href="#a40"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a45">call_with_exception_handler</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Only for internal use.  <a href="#a45"></a><br></td></tr>
d78 1
a78 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a57">java</a> ()</td></tr>
d80 2
a81 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::Java (string classname [, string argument1, . . . ]);.  <a href="#a57"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a58">java_class</a> ()</td></tr>
d83 2
a84 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::JavaClass ( string classname);.  <a href="#a58"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a59">__call</a> ()</td></tr>
d86 2
a87 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: mixed <a class="el" href="java_8c.html#a59">Java::__call</a> ( string procedure_name [, array arguments ]);.  <a href="#a59"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a60">__tostring</a> ()</td></tr>
d89 2
a90 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::__toString (void);.  <a href="#a60"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a61">__set</a> ()</td></tr>
d92 2
a93 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string Java::__set(object, object);.  <a href="#a61"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a62">__destruct</a> ()</td></tr>
d95 2
a96 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void <a class="el" href="java_8c.html#a62">Java::__destruct()</a>;.  <a href="#a62"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a63">__get</a> ()</td></tr>
d98 2
a99 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string Java::__get(object);.  <a href="#a63"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a64">__sleep</a> ()</td></tr>
d101 2
a102 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a64">Java::__sleep()</a>;.  <a href="#a64"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a65">__wakeup</a> ()</td></tr>
d104 2
a105 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a65">Java::__wakeup()</a>;.  <a href="#a65"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a66">offsetExists</a> ()</td></tr>
d107 2
a108 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a66">Java::offsetExists()</a>;.  <a href="#a66"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a67">offsetGet</a> ()</td></tr>
d110 2
a111 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a67">Java::offsetGet()</a>;.  <a href="#a67"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a68">offsetSet</a> ()</td></tr>
d113 2
a114 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a68">Java::offsetSet()</a>;.  <a href="#a68"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a69">offsetUnset</a> ()</td></tr>
d116 2
a117 2
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a69">Java::offsetUnset()</a>;.  <a href="#a69"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a84">PHP_MINIT_FUNCTION</a> (EXT)</td></tr>
d119 3
a121 3
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module is initialized.  <a href="#a84"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a85" doxytag="java.c::PHP_MINFO_FUNCTION"></a>
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a85">PHP_MINFO_FUNCTION</a> (EXT)</td></tr>
d124 1
a124 1
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a86">PHP_MSHUTDOWN_FUNCTION</a> (EXT)</td></tr>
d126 1
a126 1
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module terminates.  <a href="#a86"></a><br></td></tr>
d172 1
a172 1
<a class="anchor" name="a59" doxytag="java.c::__call"></a><p>
d196 1
a196 1
Proto: mixed <a class="el" href="java_8c.html#a59">Java::__call</a> ( string procedure_name [, array arguments ]);. 
d201 1
a201 1
<span class="preprocessor"></span><span class="preprocessor"> # $v=new JPersistenceAdapter(new java("java.lang.StringBuffer", "hello"));</span>
d212 2
a213 2
  function __construct($<a class="code" href="java_8c.html#a57">java</a>){ 
    $this-&gt;<a class="code" href="java_8c.html#a57">java</a>=$java; 
d216 3
a218 3
  function <a class="code" href="java_8c.html#a64">__sleep</a>() {
    $buf = <span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.io.ByteArrayOutputStream"</span>);
    $out = <span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.io.ObjectOutputStream"</span>, $buf);
d221 1
a221 1
    $this-&gt;serialID = (string)$buf-&gt;toByteArray();
d224 4
a227 4
  function <a class="code" href="java_8c.html#a65">__wakeup</a>() {
    $buf = <span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.io.ByteArrayInputStream"</span>, $this-&gt;serialID);
    $in = <span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.io.ObjectInputStream"</span>, $buf);
    $this-&gt;<a class="code" href="java_8c.html#a57">java</a> = $in-&gt;readObject();
d231 1
a231 1
    <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>;
d233 2
a234 2
  function <a class="code" href="java_8c.html#a62">__destruct</a>() { 
    <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__destruct(); 
d239 4
a242 4
  function <a class="code" href="java_8c.html#a63">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__get($arg); }
  function __put($key, $val) { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__put($key, $val); }
  function <a class="code" href="java_8c.html#a59">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__call($m,$a); }
  function __toString()      { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__toString(); }
d247 1
a247 1
<a class="anchor" name="a62" doxytag="java.c::__destruct"></a><p>
d271 1
a271 1
Proto: void <a class="el" href="java_8c.html#a62">Java::__destruct()</a>;. 
d286 2
a287 2
  function __construct($<a class="code" href="java_8c.html#a57">java</a>){ 
    $this-&gt;<a class="code" href="java_8c.html#a57">java</a>=$java; 
d290 1
a290 1
  function <a class="code" href="java_8c.html#a64">__sleep</a>() {
d295 1
a295 1
  function <a class="code" href="java_8c.html#a65">__wakeup</a>() {
d297 1
a297 1
    $this-&gt;<a class="code" href="java_8c.html#a57">java</a> = $session-&gt;get($this-&gt;serialID);
d300 1
a300 1
    <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>;
d302 2
a303 2
  function <a class="code" href="java_8c.html#a62">__destruct</a>() { 
    <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__destruct(); 
d308 4
a311 4
  function <a class="code" href="java_8c.html#a63">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__get($arg); }
  function __put($key, $val) { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__put($key, $val); }
  function <a class="code" href="java_8c.html#a59">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__call($m,$a); }
  function __toString()      { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__toString(); }
d316 1
a316 1
<a class="anchor" name="a63" doxytag="java.c::__get"></a><p>
d340 1
a340 1
Proto: string Java::__get(object);. 
d347 1
a347 1
<a class="anchor" name="a61" doxytag="java.c::__set"></a><p>
d371 1
a371 1
Proto: string Java::__set(object, object);. 
d379 1
a379 1
<a class="anchor" name="a64" doxytag="java.c::__sleep"></a><p>
d403 1
a403 1
Proto: string <a class="el" href="java_8c.html#a64">Java::__sleep()</a>;. 
d405 1
a405 1
Serializes the object. Example: <div class="fragment"><pre class="fragment">   $vector=<span class="keyword">new</span> JPersistenceAdapter(<span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.lang.StringBuffer"</span>, <span class="stringliteral">"hello"</span>));
d417 1
a417 1
<a class="anchor" name="a60" doxytag="java.c::__tostring"></a><p>
d441 1
a441 1
Proto: object Java::__toString (void);. 
d444 2
a445 1
</pre></div>. Use a string cast if you want to display the java string as a php string, e.g.: <div class="fragment"><pre class="fragment"> echo (string)$string; 
a447 3
</pre></div>.<p>
Example: <div class="fragment"><pre class="fragment"> $System = <span class="keyword">new</span> JavaClass(<span class="stringliteral">"java.lang.System"</span>);
 echo (string)$System-&gt;currentTimeMillies();
d451 1
a451 1
<a class="anchor" name="a65" doxytag="java.c::__wakeup"></a><p>
d475 1
a475 1
Proto: string <a class="el" href="java_8c.html#a65">Java::__wakeup()</a>;. 
a484 58
<a class="anchor" name="a45" doxytag="java.c::call_with_exception_handler"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION call_with_exception_handler           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Only for internal use. 
<p>
Proto: string java_call_with_exception_handler(void);     </td>
  </tr>
</table>
<a class="anchor" name="a40" doxytag="java.c::exception_handler"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION exception_handler           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Only for internal use. 
<p>
Exception handler for php5     </td>
  </tr>
</table>
d509 1
a509 1
Proto: object java_closure([object],[array|string],[object]);. 
d512 1
a512 1
 $object = java_closure();
d516 1
a516 1
 echo (string)java_closure(null, "hello");
d524 1
a524 1
   <span class="keywordflow">return</span> java_closure(<span class="keyword">new</span> Listener(), null, array(<span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.awt.event.ActionListener"</span>)));
d553 1
a553 1
Proto: object java_context(void);. 
d556 1
a556 2
Example: <div class="fragment"><pre class="fragment"><span class="preprocessor"> # close over the current environment and pass it back to java.</span>
<span class="preprocessor"> java_context()-&gt;call(java_closure()) || die "Script should be called from java";</span>
d558 2
a559 3
It is possible to access implicit web objects (the session, the application store etc.) from the context. Please see the JSR223 documentation or for details. Example: <div class="fragment"><pre class="fragment"> java_context()-&gt;getHttpServletRequest();
</pre></div> <dl compact><dt><b>See also:</b></dt><dd>java_get_session() <p>
java_inspect() </dd></dl>
d587 1
a587 1
Proto: string java_get_server_name(void);. 
d589 4
a592 1
Returns the name of the backend or null if the backend is not running.     </td>
d619 1
a619 1
Proto: void java_session([string], [bool]);. 
d621 1
a621 1
Return a session handle. When java_session() is called without arguments, the session is shared with java. Example: <div class="fragment"><pre class="fragment"> java_session()-&gt;put(<span class="stringliteral">"key"</span>, <span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.lang.Object"</span>));
d625 1
a625 1
When java_session() is called with a session handle, the session is not shared with java and no cookies are set. Example: <div class="fragment"><pre class="fragment"> java_session(<span class="stringliteral">"myPrivateApplicationStore"</span>)-&gt;put(<span class="stringliteral">"key"</span>, <span class="stringliteral">"value"</span>);
d627 1
a627 1
When java_session() is called with a second argument set to true, a new session is allocated, the old session is destroyed if necessary. Example: <div class="fragment"><pre class="fragment"> java_session(null, <span class="keyword">true</span>)-&gt;put(<span class="stringliteral">"key"</span>, <span class="stringliteral">"val"</span>);
d656 1
a656 1
Proto: array java_values(object ob);. 
d658 1
a658 1
Fetches the object into a php array. ob must be a java array or it must implement java.util.Map or java.util.Collection. Before calling this procedure, please make sure that the java array or Map or Collection does not exceed php's memory limit. Example: <div class="fragment"><pre class="fragment"> print_r(java_values($sys-&gt;getProperties()));
d688 1
a688 1
Returns the contents (public fields, public methods, public classes) of object as a string. Example: <div class="fragment"><pre class="fragment"> echo java_inspect(java_context());
d716 1
a716 1
Proto: bool java_instanceof(object object, object clazz);. 
d722 1
a722 1
<a class="anchor" name="a57" doxytag="java.c::java"></a><p>
d746 1
a746 1
Proto: object Java::Java (string classname [, string argument1, . . . ]);. 
d750 2
a751 3

 $ex = new JavaException("<a class="code" href="java_8c.html#a57">java</a>.lang.Exception");
 throw $ex;
d755 1
a755 1
<a class="anchor" name="a58" doxytag="java.c::java_class"></a><p>
d779 1
a779 1
Proto: object Java::JavaClass ( string classname);. 
d783 1
a783 2

 $Thread = <span class="keyword">new</span> JavaClass(<span class="stringliteral">"java.lang.Thread"</span>);
d812 1
a812 1
Proto: void java_last_exception_clear(void);. 
d842 1
a842 1
Proto: object java_last_exception_get(void);. 
d848 1
a848 1
<a class="anchor" name="a66" doxytag="java.c::offsetExists"></a><p>
d872 1
a872 1
Proto: string <a class="el" href="java_8c.html#a66">Java::offsetExists()</a>;. 
d874 2
a875 2
See <a class="el" href="java_8c.html#a66">array::offsetExists()</a>. Example: <div class="fragment"><pre class="fragment"> $System = <span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.lang.System"</span>);
 $props = $System.getProperties();
d880 1
a880 1
<a class="anchor" name="a67" doxytag="java.c::offsetGet"></a><p>
d904 1
a904 1
Proto: string <a class="el" href="java_8c.html#a67">Java::offsetGet()</a>;. 
d907 2
a908 2
Example: <div class="fragment"><pre class="fragment"> $System = <span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.lang.System"</span>);
 $props = $System.getProperties();
d913 1
a913 1
<a class="anchor" name="a68" doxytag="java.c::offsetSet"></a><p>
d937 1
a937 1
Proto: string <a class="el" href="java_8c.html#a68">Java::offsetSet()</a>;. 
d951 1
a951 1
<a class="anchor" name="a69" doxytag="java.c::offsetUnset"></a><p>
d975 1
a975 1
Proto: string <a class="el" href="java_8c.html#a69">Java::offsetUnset()</a>;. 
d980 1
a980 1
<a class="anchor" name="a84" doxytag="java.c::PHP_MINIT_FUNCTION"></a><p>
d1007 1
a1007 1
Creates the Java and JavaClass structures and tries to start the backend if java.socketname, java.servlet or java.hosts are not set. The backend is NOT started if the environment variable X_JAVABRIDGE_OVERRIDE_HOSTS exists and contains either "/" or "host:port//context/servlet". When running as a Apache/IIS module or Fast CGI, this procedure is called only once, when running as a CGI binary it is called whenever the CGI binary is called.     </td>
d1010 1
a1010 1
<a class="anchor" name="a86" doxytag="java.c::PHP_MSHUTDOWN_FUNCTION"></a><p>
d1124 1
a1124 1
Proto: void java_require(string path);. 
d1190 1
a1190 1
Proto: void java_set_file_encoding(string);. 
d1259 1
a1259 1
  EXT_ME(EXT, <a class="code" href="java_8c.html#a69">offsetUnset</a>,   arginfo_get, ZEND_ACC_PUBLIC)
d1300 1
a1300 1
<hr size="1"><address style="align: right;"><small>Generated on Sat Dec 3 13:17:27 2005 for php-java-bridge by&nbsp;
@

