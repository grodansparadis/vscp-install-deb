head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2006.01.16.22.56.19;	author jost2345;	state dead;
branches;
next	1.1;

1.1
date	2005.11.26.18.10.36;	author jost2345;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>php-java-bridge: java.c File Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.2 -->
<div class="qindex"><a class="qindex" href="index.html">Main&nbsp;Page</a> | <a class="qindex" href="annotated.html">Data&nbsp;Structures</a> | <a class="qindex" href="files.html">File&nbsp;List</a> | <a class="qindex" href="globals.html">Globals</a> | <a class="qindex" href="pages.html">Related&nbsp;Pages</a></div>
<h1>java.c File Reference</h1><hr><a name="_details"></a><h2>Detailed Description</h2>
This is the main entry point for the java extension. 
<p>
It contains the global structures and the callbacks required for zend engine 1 and 2. 
<p>
<code>#include &lt;sys/types.h&gt;</code><br>
<code>#include &lt;sys/wait.h&gt;</code><br>
<code>#include &lt;stdio.h&gt;</code><br>
<code>#include &lt;stdlib.h&gt;</code><br>
<code>#include &lt;assert.h&gt;</code><br>
<code>#include &lt;errno.h&gt;</code><br>
<code>#include "<a class="el" href="php__java_8h-source.html">php_java.h</a>"</code><br>
<code>#include "php_globals.h"</code><br>
<code>#include "ext/standard/info.h"</code><br>
<code>#include "<a class="el" href="java__bridge_8h-source.html">java_bridge.h</a>"</code><br>
<code>#include "zend_interfaces.h"</code><br>
<code>#include "zend_exceptions.h"</code><br>
<code>#include "zend_builtin_functions.h"</code><br>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a19">PHP_RINIT_FUNCTION</a> (EXT)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when a new request starts.  <a href="#a19"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a20">PHP_RSHUTDOWN_FUNCTION</a> (EXT)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the request terminates.  <a href="#a20"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a22">last_exception_get</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_last_exception_get(void);.  <a href="#a22"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a24">last_exception_clear</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_last_exception_clear(void);.  <a href="#a24"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a25">set_file_encoding</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_set_file_encoding(string);.  <a href="#a25"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a27">require</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_require(string path);.  <a href="#a27"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a28">instanceof</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: bool java_instanceof(object object, object clazz);.  <a href="#a28"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a30">get_session</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_session([string], [bool]);.  <a href="#a30"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a32">get_context</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_context(void);.  <a href="#a32"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a33">get_server_name</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string java_get_server_name(void);.  <a href="#a33"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a34">reset</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_reset(void);.  <a href="#a34"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a38">get_values</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: array java_values(object ob);.  <a href="#a38"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a39">get_closure</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object java_closure([object],[array|string],[object]);.  <a href="#a39"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a40">exception_handler</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Only for internal use.  <a href="#a40"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a45">call_with_exception_handler</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Only for internal use.  <a href="#a45"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_FUNCTION&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a46">inspect</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void java_inspect(object);.  <a href="#a46"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a57">java</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::Java (string classname [, string argument1, . . . ]);.  <a href="#a57"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a58">javaclass</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::JavaClass ( string classname);.  <a href="#a58"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a59">__call</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: mixed <a class="el" href="java_8c.html#a59">Java::__call</a> ( string procedure_name [, array arguments ]);.  <a href="#a59"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a60">__tostring</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: object Java::__toString (void);.  <a href="#a60"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a61">__set</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string Java::__set(object, object);.  <a href="#a61"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a62">__destruct</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: void <a class="el" href="java_8c.html#a62">Java::__destruct()</a>;.  <a href="#a62"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a63">__get</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string Java::__get(object);.  <a href="#a63"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a64">__sleep</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a64">Java::__sleep()</a>;.  <a href="#a64"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a65">__wakeup</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a65">Java::__wakeup()</a>;.  <a href="#a65"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a66">offsetExists</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a66">Java::offsetExists()</a>;.  <a href="#a66"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a67">offsetGet</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a67">Java::offsetGet()</a>;.  <a href="#a67"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a68">offsetSet</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a68">Java::offsetSet()</a>;.  <a href="#a68"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">PHP_METHOD&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a69">offsetUnset</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Proto: string <a class="el" href="java_8c.html#a69">Java::offsetUnset()</a>;.  <a href="#a69"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a84">PHP_MINIT_FUNCTION</a> (EXT)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module is initialized.  <a href="#a84"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a85" doxytag="java.c::PHP_MINFO_FUNCTION"></a>
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a85">PHP_MINFO_FUNCTION</a> (EXT)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Displays the module info. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a86">PHP_MSHUTDOWN_FUNCTION</a> (EXT)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called when the module terminates.  <a href="#a86"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Variables</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="structcfg.html">cfg</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a0">cfg</a> = 0</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Holds the global configuration.  <a href="#a0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a2" doxytag="java.c::functions"></a>
function_entry&nbsp;</td><td class="memItemRight" valign="bottom"><b>functions</b> []</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">zend_module_entry&nbsp;</td><td class="memItemRight" valign="bottom"><b>module_entry</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a4" doxytag="java.c::ini_updated"></a>
int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a4">ini_updated</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Holds the flags set/unset for all java ini entries. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a5" doxytag="java.c::ini_user"></a>
int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a5">ini_user</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">The options set by the user. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a6" doxytag="java.c::ini_set"></a>
int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a6">ini_set</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">The options which carry a value. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a7" doxytag="java.c::class_entry"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a7">class_entry</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents the java class struct. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a8" doxytag="java.c::class_class_entry"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a8">class_class_entry</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents the java_class class struct. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a9" doxytag="java.c::class_class_entry_jsr"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a9">class_class_entry_jsr</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents the javaclass class struct. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a10" doxytag="java.c::exception_class_entry"></a>
zend_class_entry *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a10">exception_class_entry</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents the javaexception class struct. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a11" doxytag="java.c::handlers"></a>
zend_object_handlers&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="java_8c.html#a11">handlers</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">The object handlers, see create_object. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">function_entry&nbsp;</td><td class="memItemRight" valign="bottom"><b>class_functions</b> []</td></tr>

</table>
<hr><h2>Function Documentation</h2>
<a class="anchor" name="a59" doxytag="java.c::__call"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD __call           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: mixed <a class="el" href="java_8c.html#a59">Java::__call</a> ( string procedure_name [, array arguments ]);. 
<p>
Calls a Java procedure Example: <div class="fragment"><pre class="fragment"><span class="preprocessor"> # The JPersistenceAdapter makes it possible to serialize java values.</span>
<span class="preprocessor"></span><span class="preprocessor"> #</span>
<span class="preprocessor"></span><span class="preprocessor"> # Example:</span>
<span class="preprocessor"></span><span class="preprocessor"> # $v=new JPersistenceAdapter(new java("java.lang.StringBuffer", "hello"));</span>
<span class="preprocessor"></span><span class="preprocessor"> # $id=serialize($v);</span>
<span class="preprocessor"></span><span class="preprocessor"> # $file=fopen("file.out","w");</span>
<span class="preprocessor"></span><span class="preprocessor"> # fwrite($file, $id);</span>
<span class="preprocessor"></span><span class="preprocessor"> # fclose($file);</span>
<span class="preprocessor"></span><span class="preprocessor"> #</span>
<span class="preprocessor"></span>
 <span class="keyword">class </span>JPersistenceProxy {
  var $java;
  var $serialID;

  function __construct($<a class="code" href="java_8c.html#a57">java</a>){ 
    $this-&gt;<a class="code" href="java_8c.html#a57">java</a>=$java; 
    $this-&gt;serialID; 
  }
  function <a class="code" href="java_8c.html#a64">__sleep</a>() {
    $buf = <span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.io.ByteArrayOutputStream"</span>);
    $out = <span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.io.ObjectOutputStream"</span>, $buf);
    $out-&gt;writeObject($this-&gt;java);
    $out-&gt;close();
    $this-&gt;serialID = $buf-&gt;toByteArray();
    <span class="keywordflow">return</span> array(<span class="stringliteral">"serialID"</span>);
  }
  function <a class="code" href="java_8c.html#a65">__wakeup</a>() {
    $buf = <span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.io.ByteArrayInputStream"</span>, $this-&gt;serialID);
    $in = <span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.io.ObjectInputStream"</span>, $buf);
    $this-&gt;<a class="code" href="java_8c.html#a57">java</a> = $in-&gt;readObject();
    $in-&gt;close();
  }
  function getJava() {
    <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>;
  }
  function <a class="code" href="java_8c.html#a62">__destruct</a>() { 
    <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__destruct(); 
  }
 }

 <span class="keyword">class </span>JPersistenceAdapter <span class="keyword">extends</span> JPersistenceProxy {
  function <a class="code" href="java_8c.html#a63">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__get($arg); }
  function __put($key, $val) { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__put($key, $val); }
  function <a class="code" href="java_8c.html#a59">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__call($m,$a); }
  function __toString()      { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__toString(); }
 }
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a62" doxytag="java.c::__destruct"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD __destruct           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void <a class="el" href="java_8c.html#a62">Java::__destruct()</a>;. 
<p>
Example: <div class="fragment"><pre class="fragment"><span class="preprocessor"> # The JSessionAdapter makes it possible to store java values into the</span>
<span class="preprocessor"></span><span class="preprocessor"> # $_SESSION variable. </span>
<span class="preprocessor"></span> 
<span class="preprocessor"> # Example:</span>
<span class="preprocessor"></span><span class="preprocessor"> # $vector = new JSessionAdapter(new Java("java.util.Vector"));</span>
<span class="preprocessor"></span><span class="preprocessor"> # $vector-&gt;addElement(...);</span>
<span class="preprocessor"></span><span class="preprocessor"> # $_SESSION["v"]=$vector;</span>
<span class="preprocessor"></span>

 <span class="keyword">class </span>JSessionProxy {
  var $java;
  var $serialID;

  function __construct($<a class="code" href="java_8c.html#a57">java</a>){ 
    $this-&gt;<a class="code" href="java_8c.html#a57">java</a>=$java; 
    $this-&gt;serialID = uniqid(<span class="stringliteral">""</span>); 
  }
  function <a class="code" href="java_8c.html#a64">__sleep</a>() {
    $session=java_get_session(<span class="stringliteral">"PHPSESSION"</span>.session_id());
    $session-&gt;put($this-&gt;serialID, $this-&gt;java);
    <span class="keywordflow">return</span> array(<span class="stringliteral">"serialID"</span>);
  }
  function <a class="code" href="java_8c.html#a65">__wakeup</a>() {
    $session=java_get_session(<span class="stringliteral">"PHPSESSION"</span>.session_id());
    $this-&gt;<a class="code" href="java_8c.html#a57">java</a> = $session-&gt;get($this-&gt;serialID);
  }
  function getJava() {
    <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>;
  }
  function <a class="code" href="java_8c.html#a62">__destruct</a>() { 
    <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__destruct(); 
  }
 }

 <span class="keyword">class </span>JSessionAdapter <span class="keyword">extends</span> JSessionProxy {
  function <a class="code" href="java_8c.html#a63">__get</a>($arg)       { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__get($arg); }
  function __put($key, $val) { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__put($key, $val); }
  function <a class="code" href="java_8c.html#a59">__call</a>($m, $a)    { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__call($m,$a); }
  function __toString()      { <span class="keywordflow">if</span>($this-&gt;<a class="code" href="java_8c.html#a57">java</a>) <span class="keywordflow">return</span> $this-&gt;<a class="code" href="java_8c.html#a57">java</a>-&gt;__toString(); }
 }
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a63" doxytag="java.c::__get"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD __get           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: string Java::__get(object);. 
<p>
The getter. Example: <div class="fragment"><pre class="fragment"> echo (string) $object-&gt;property;
</pre></div> If no property exists, the bean properties are examined and the getter is called, example: <div class="fragment"><pre class="fragment"> $object-&gt;getProperty()
</pre></div>.     </td>
  </tr>
</table>
<a class="anchor" name="a61" doxytag="java.c::__set"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD __set           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: string Java::__set(object, object);. 
<p>
The setter<p>
Example: <div class="fragment"><pre class="fragment"> $obj-&gt;property = <span class="stringliteral">"value"</span>; 
</pre></div> If no property exists, the bean properties are examined and a setter is called: <div class="fragment"><pre class="fragment"> $object-&gt;setProperty(value)
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a64" doxytag="java.c::__sleep"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD __sleep           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: string <a class="el" href="java_8c.html#a64">Java::__sleep()</a>;. 
<p>
Serializes the object. Example: <div class="fragment"><pre class="fragment">   $vector=<span class="keyword">new</span> JPersistenceAdapter(<span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.lang.StringBuffer"</span>, <span class="stringliteral">"hello"</span>));
  $v=array (
    <span class="stringliteral">"test"</span>,
    $vector,
    3.14);
  $id=serialize($v);
  $file=fopen(<span class="stringliteral">"test.ser"</span>,<span class="stringliteral">"w"</span>);
  fwrite($file, $<span class="keywordtype">id</span>);
  fclose($file);
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a60" doxytag="java.c::__tostring"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD __tostring           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object Java::__toString (void);. 
<p>
Displays the java object as a string. Note: it doesn't cast the object to a string, thus echo "$ob" displays a string representation of $ob, e.g.: <div class="fragment"><pre class="fragment"> [o(String)<span class="stringliteral">"hello"</span>]
</pre></div>. Use a string cast if you want to display the java string as a php string, e.g.: <div class="fragment"><pre class="fragment"> echo (string)$string; 
 <span class="comment">// implicit cast to string:</span>
 echo "".$string;
</pre></div>.<p>
Example: <div class="fragment"><pre class="fragment"> $System = <span class="keyword">new</span> JavaClass(<span class="stringliteral">"java.lang.System"</span>);
 echo (string)$System-&gt;currentTimeMillies();
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a65" doxytag="java.c::__wakeup"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD __wakeup           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: string <a class="el" href="java_8c.html#a65">Java::__wakeup()</a>;. 
<p>
Deserializes the object. Example: <div class="fragment"><pre class="fragment">  <span class="keywordflow">try</span> {
    $v=unserialize($<span class="keywordtype">id</span>);
  } <span class="keywordflow">catch</span> (JavaException $e) {
    echo <span class="stringliteral">"Warning: Could not deserialize: "</span>. $e-&gt;getCause() . <span class="stringliteral">"\n"</span>;
  }
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a45" doxytag="java.c::call_with_exception_handler"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION call_with_exception_handler           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Only for internal use. 
<p>
Proto: string java_call_with_exception_handler(void);     </td>
  </tr>
</table>
<a class="anchor" name="a40" doxytag="java.c::exception_handler"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION exception_handler           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Only for internal use. 
<p>
Exception handler for php5     </td>
  </tr>
</table>
<a class="anchor" name="a39" doxytag="java.c::get_closure"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION get_closure           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object java_closure([object],[array|string],[object]);. 
<p>
Closes over the php environment and packages it up as a java class. Example: <div class="fragment"><pre class="fragment"> function toString() {<span class="keywordflow">return</span> <span class="stringliteral">"helloWorld"</span>;};
 $object = java_closure();
 echo (string)$object;
</pre></div><p>
When a php instance is supplied as a argument, that environment will be used instead. When a string or key/value map is supplied as a second argument, the java procedure names are mapped to the php procedure names. Example: <div class="fragment"><pre class="fragment"> function hello() {<span class="keywordflow">return</span> <span class="stringliteral">"hello"</span>;};
 echo (string)java_closure(null, "hello");
</pre></div><p>
When an array of java interfaces is supplied as a third argument, the environment must implement these interfaces. Example: <div class="fragment"><pre class="fragment"> <span class="keyword">class </span>Listener {
   function actionPerformed($actionEvent) {
   ...
   }
 }
 function getListener() {
   <span class="keywordflow">return</span> java_closure(<span class="keyword">new</span> Listener(), null, array(<span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.awt.event.ActionListener"</span>)));
 }
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a32" doxytag="java.c::get_context"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION get_context           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object java_context(void);. 
<p>
Returns the jsr223 script context handle.<p>
Example: <div class="fragment"><pre class="fragment"><span class="preprocessor"> # close over the current environment and pass it back to java.</span>
<span class="preprocessor"> java_context()-&gt;call(java_closure()) || die "Script should be called from java";</span>
</pre></div><p>
It is possible to access implicit web objects (the session, the application store etc.) from the context. Please see the JSR223 documentation or for details. Example: <div class="fragment"><pre class="fragment"> java_context()-&gt;getHttpServletRequest();
</pre></div> <dl compact><dt><b>See also:</b></dt><dd>java_get_session() <p>
java_inspect() </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a33" doxytag="java.c::get_server_name"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION get_server_name           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: string java_get_server_name(void);. 
<p>
Returns the name of the backend or null if the backend is not running.     </td>
  </tr>
</table>
<a class="anchor" name="a30" doxytag="java.c::get_session"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION get_session           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void java_session([string], [bool]);. 
<p>
Return a session handle. When java_session() is called without arguments, the session is shared with java. Example: <div class="fragment"><pre class="fragment"> java_session()-&gt;put(<span class="stringliteral">"key"</span>, <span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.lang.Object"</span>));
 [...]
</pre></div> The java components (jsp, servlets) can retrieve the value, for example with: <div class="fragment"><pre class="fragment"> getSession().getAttribute(<span class="stringliteral">"key"</span>); 
</pre></div><p>
When java_session() is called with a session handle, the session is not shared with java and no cookies are set. Example: <div class="fragment"><pre class="fragment"> java_session(<span class="stringliteral">"myPrivateApplicationStore"</span>)-&gt;put(<span class="stringliteral">"key"</span>, <span class="stringliteral">"value"</span>);
</pre></div><p>
When java_session() is called with a second argument set to true, a new session is allocated, the old session is destroyed if necessary. Example: <div class="fragment"><pre class="fragment"> java_session(null, <span class="keyword">true</span>)-&gt;put(<span class="stringliteral">"key"</span>, <span class="stringliteral">"val"</span>);
</pre></div>. <dl compact><dt><b>See also:</b></dt><dd><a class="el" href="java_8c.html#a32">get_context()</a> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a38" doxytag="java.c::get_values"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION get_values           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: array java_values(object ob);. 
<p>
Fetches the object into a php array. ob must be a java array or it must implement java.util.Map or java.util.Collection. Before calling this procedure, please make sure that the java array or Map or Collection does not exceed php's memory limit. Example: <div class="fragment"><pre class="fragment"> print_r(java_values($sys-&gt;getProperties()));
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a46" doxytag="java.c::inspect"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION inspect           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void java_inspect(object);. 
<p>
Returns the contents (public fields, public methods, public classes) of object as a string. Example: <div class="fragment"><pre class="fragment"> echo java_inspect(java_context());
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a28" doxytag="java.c::instanceof"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION instanceof           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: bool java_instanceof(object object, object clazz);. 
<p>
Tests if object is an instance of clazz. Example: <div class="fragment"><pre class="fragment"> <span class="keywordflow">return</span>($o <a class="code" href="java_8c.html#a28">instanceof</a> Java &amp;&amp; $c <a class="code" href="java_8c.html#a28">instanceof</a> Java &amp;&amp; java_instanceof($o, $c)); 
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a57" doxytag="java.c::java"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD java           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object Java::Java (string classname [, string argument1, . . . ]);. 
<p>
Java constructor. Example: <div class="fragment"><pre class="fragment"> $object = <span class="keyword">new</span> Java(<span class="stringliteral">"java.lang.String"</span>, <span class="stringliteral">"hello world"</span>); 
 echo (string)$object;

 $ex = new JavaException("<a class="code" href="java_8c.html#a57">java</a>.lang.Exception");
 throw $ex;
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a58" doxytag="java.c::javaclass"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD javaclass           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object Java::JavaClass ( string classname);. 
<p>
References a java class. Example: <div class="fragment"><pre class="fragment"> $Object = <span class="keyword">new</span> JavaClass(<span class="stringliteral">"java.lang.Object"</span>);
 $object = $Object-&gt;newInstance();

 $Thread = <span class="keyword">new</span> JavaClass(<span class="stringliteral">"java.lang.Thread"</span>);
 $Thread-&gt;sleep(1000);
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a24" doxytag="java.c::last_exception_clear"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION last_exception_clear           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void java_last_exception_clear(void);. 
<p>
Clear last java extension. <dl compact><dt><b><a class="el" href="deprecated.html#_deprecated000002">Deprecated:</a></b></dt><dd>Use PHP5 try/catch instead.</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a22" doxytag="java.c::last_exception_get"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION last_exception_get           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: object java_last_exception_get(void);. 
<p>
Get last Java exception <dl compact><dt><b><a class="el" href="deprecated.html#_deprecated000001">Deprecated:</a></b></dt><dd>Use PHP5 try/catch instead.</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a66" doxytag="java.c::offsetExists"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD offsetExists           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: string <a class="el" href="java_8c.html#a66">Java::offsetExists()</a>;. 
<p>
See <a class="el" href="java_8c.html#a66">array::offsetExists()</a>. Example: <div class="fragment"><pre class="fragment"> $System = <span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.lang.System"</span>);
 $props = $System.getProperties();
 <span class="keywordflow">if</span>(!$props[<span class="stringliteral">"user.home"</span>]) die(<span class="stringliteral">"No home dir!?!"</span>);
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a67" doxytag="java.c::offsetGet"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD offsetGet           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: string <a class="el" href="java_8c.html#a67">Java::offsetGet()</a>;. 
<p>
Get the object at a given position.<p>
Example: <div class="fragment"><pre class="fragment"> $System = <span class="keyword">new</span> <a class="code" href="java_8c.html#a57">java</a>(<span class="stringliteral">"java.lang.System"</span>);
 $props = $System.getProperties();
 echo $props[<span class="stringliteral">"user.home"</span>]);
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a68" doxytag="java.c::offsetSet"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD offsetSet           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: string <a class="el" href="java_8c.html#a68">Java::offsetSet()</a>;. 
<p>
Set the object at a given position. Example: <div class="fragment"><pre class="fragment"> $Array = <span class="keyword">new</span> JavaClass(<span class="stringliteral">"java.lang.reflect.Array"</span>);
 $testobj=$Array-&gt;newInstance(<span class="keyword">new</span> JavaClass(<span class="stringliteral">"java.lang.String"</span>), array(2, 2, 2, 2, 2, 2));

 $testobj[0][0][0][0][0][1] = 1;
 $testobj[0][0][0][0][1][0] = 2;
 $testobj[0][0][0][1][0][0] = 3;
 $testobj[0][0][1][0][0][0] = 4;
 $testobj[0][1][0][0][0][0] = 5;
 $testobj[1][0][0][0][0][0] = 6;
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a69" doxytag="java.c::offsetUnset"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_METHOD offsetUnset           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: string <a class="el" href="java_8c.html#a69">Java::offsetUnset()</a>;. 
<p>
Remove the entry at a given position. Used internally.     </td>
  </tr>
</table>
<a class="anchor" name="a84" doxytag="java.c::PHP_MINIT_FUNCTION"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_MINIT_FUNCTION           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">EXT&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Called when the module is initialized. 
<p>
Creates the Java and JavaClass structures and tries to start the backend if java.socketname, java.servlet or java.hosts are not set. The backend is NOT started if the environment variable X_JAVABRIDGE_OVERRIDE_HOSTS exists and contains either "/" or "host:port//context/servlet". When running as a Apache/IIS module or Fast CGI, this procedure is called only once, when running as a CGI binary it is called whenever the CGI binary is called.     </td>
  </tr>
</table>
<a class="anchor" name="a86" doxytag="java.c::PHP_MSHUTDOWN_FUNCTION"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_MSHUTDOWN_FUNCTION           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">EXT&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Called when the module terminates. 
<p>
Stops the backend, if it is running. When running in Apache/IIS, or as a FastCGI binary, this procedure is called only once. When running as a CGI binary this is called whenever the CGI binary terminates.     </td>
  </tr>
</table>
<a class="anchor" name="a19" doxytag="java.c::PHP_RINIT_FUNCTION"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_RINIT_FUNCTION           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">EXT&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Called when a new request starts. 
<p>
Opens a connection to the backend, creates an instance of the proxyenv structure and clones the servlet, hosts and ini_user flags.     </td>
  </tr>
</table>
<a class="anchor" name="a20" doxytag="java.c::PHP_RSHUTDOWN_FUNCTION"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_RSHUTDOWN_FUNCTION           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">EXT&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Called when the request terminates. 
<p>
Closes the connection to the backend, destroys the proxyenv instance.     </td>
  </tr>
</table>
<a class="anchor" name="a27" doxytag="java.c::require"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION require           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void java_require(string path);. 
<p>
Set the library path. Example: <div class="fragment"><pre class="fragment"> java_require(<span class="stringliteral">"foo.jar;bar.jar"</span>); 
</pre></div><p>
The .jar files should be stored in /usr/share/java or extension_dir/lib one of its sub-directories. However, it is also possible to fetch .jar files from a remote server, for example: <div class="fragment"><pre class="fragment"> java_require(<span class="stringliteral">"http://php-java-bridge.sf.net/kawa.jar;..."</span>);
</pre></div><p>
Note that the classloader isolates the loaded libraries: When you call java_require("foo.jar"); java_require("bar.jar"), the classes from foo cannot see the classes loaded from bar. If you get a NoClassDefFound error saying that one of your classes cannot access the library you have loaded, you must reset the backend to clear the loader cache and load your classes and the library in one java_require() call.     </td>
  </tr>
</table>
<a class="anchor" name="a34" doxytag="java.c::reset"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION reset           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void java_reset(void);. 
<p>
Tries to reset the backent to its initial state. If the call succeeds, all session handles and caches are gone.<p>
Example: <div class="fragment"><pre class="fragment"> echo <span class="stringliteral">"Resetting backend to initial state\n"</span>;
 java_reset();
</pre></div><p>
This procedure does nothing when the backend runs in a servlet environment or an application server.     </td>
  </tr>
</table>
<a class="anchor" name="a25" doxytag="java.c::set_file_encoding"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PHP_FUNCTION set_file_encoding           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Proto: void java_set_file_encoding(string);. 
<p>
Set the java file encoding, for example UTF-8 or ASCII. Needed because php does not support unicode. All string to byte array conversions use this encoding. Example: <div class="fragment"><pre class="fragment"> java_set_file_encoding(<span class="stringliteral">"ISO-8859-1"</span>); 
</pre></div>     </td>
  </tr>
</table>
<hr><h2>Variable Documentation</h2>
<a class="anchor" name="a0" doxytag="java.c::cfg"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">struct <a class="el" href="structcfg.html">cfg</a>* <a class="el" href="structcfg.html">cfg</a> = 0          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Holds the global configuration. 
<p>
This structure is shared by all php instances     </td>
  </tr>
</table>
<a class="anchor" name="a15" doxytag="java.c::class_functions"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">function_entry class_functions[]          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {

  EXT_MALIAS(EXT, EXT_GLOBAL_N(exception), EXT, NULL, 0)
  EXT_MALIAS(EXT,  exception , EXT, NULL, 0)
  EXT_ME(EXT,  class , NULL, 0)
  EXT_MALIAS(EXT, EXT_GLOBAL_N(class),  class , NULL, 0)
  










  EXT_ME(EXT, <a class="code" href="java_8c.html#a69">offsetUnset</a>,   arginfo_get, ZEND_ACC_PUBLIC)
  {NULL, NULL, NULL}
}
</pre></div>    </td>
  </tr>
</table>
<a class="anchor" name="a3" doxytag="java.c::module_entry"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">zend_module_entry module_entry          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
  STANDARD_MODULE_HEADER,
  EXT_NAME(),
   functions ,
  EXT_MINIT(EXT),
  EXT_MSHUTDOWN(EXT),
  EXT_RINIT(EXT),
  EXT_RSHUTDOWN(EXT),
  EXT_MINFO(EXT),
  NO_VERSION_YET,
  STANDARD_MODULE_PROPERTIES
}
</pre></div>    </td>
  </tr>
</table>
<hr size="1"><address style="align: right;"><small>Generated on Sat Nov 26 18:01:39 2005 for php-java-bridge by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.2 </small></address>
</body>
</html>
@


1.1
log
@Version-3.0.0pre1
@
text
@@

