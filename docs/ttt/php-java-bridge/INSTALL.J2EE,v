head	1.33;
access;
symbols
	Release-7-1-1:1.33.0.18
	Root_Release-7-1-1:1.33
	Root_Release_7-0-1:1.33
	Release_7-0-1:1.33.0.16
	Release_7-0-0:1.33.0.14
	Root_Release_7-0-0:1.33
	Release-6-2-2:1.33.0.12
	Release-6-1-2-3:1.33
	Root_Release-6-1-2-3:1.33
	Release-6-1-2-2:1.33.0.10
	Root_Release-6-1-2-2:1.33
	debian_version_6_1_2_1-1:1.33
	upstream_version_6_1_2_1:1.33
	Release-6-1-2-1_new:1.33.0.8
	Root_Release-6-1-2-1_new:1.33
	Release-6-1-2-1:1.33.0.6
	Root_Release-6-1-2-1:1.33
	upstream_version_6_1_2:1.33
	debian_version_6_1_2-1:1.33
	Release-6-1-2:1.33.0.4
	Root_Release-6-1-2:1.33
	debian_version_6_1_1-2:1.33
	debian_version_6_1_1-1:1.33
	upstream_version_6_1_1:1.33
	Release-6-1-1:1.33.0.2
	Root_Release-6-1-1:1.33
	Release-6-0-4:1.32.0.2
	Root_Release-6-0-4:1.32
	Release-6-0-3_NEW:1.31.0.18
	Root_Release-6-0-3_NEW:1.31
	Release-6-0-3:1.31.0.20
	Root_Release-6-0-3:1.31
	Release-6-0-0:1.31.0.16
	Root_Release-6-0-0:1.31
	Release-5-5-4-1:1.31.0.14
	Root_Release-5-5-4-1:1.31
	Release-5-5-4:1.31.0.12
	Root_Release-5-5-4:1.31
	Release-5-5-3:1.31.0.10
	ROOT_Release-5-5-3:1.31
	Release-5-5-2:1.31.0.8
	Root_Release-5-5-2:1.31
	debian_version_5_5_1-1:1.31
	Release-5-5-1:1.31.0.4
	upstream_version_5_5_1:1.31
	ROOT_Release-5-5-1:1.31
	debian_version_5_5-1:1.31
	upstream_version_5_5:1.31
	ROOT_Release-5-5:1.31
	Release-5-5:1.31.0.6
	debian_version_5_4_4_2-3:1.31
	Release-5-4-4-2-1:1.31.0.2
	debian_version_5_4_4_2-2:1.31
	debian_version_5_4_4_2-1:1.31
	upstream_version_5_4_4_2:1.31
	debian_version_5_4_4_1-1:1.28
	upstream_version_5_4_4_1:1.28
	debian_version_5_4_4-1:1.28
	upstream_version_5_4_4:1.28
	Release-5-4-4:1.28.0.4
	Root_Release-5-4-4:1.28
	debian_version_5_4_3_2-1:1.27
	upstream_version_5_4_3_2:1.27
	Release_5-4-3-2:1.27.0.2
	Root_Release_5-4-3-2:1.27
	upstream_version_5_4_3_1:1.27
	debian_version_5_4_3_1-1:1.27
	Release-5-4-3:1.26.0.16
	Root_Release-5-4-3:1.26
	Root_Release-5-4-1:1.26
	Release-5-4-1:1.26.0.14
	Root_Release-5-4:1.26
	Release-5-4:1.26.0.12
	upstream_version_5_3_4:1.26
	debian_version_5_3_4-1:1.26
	ROOT_Release-5-3-4:1.26
	Release-5-3-4:1.26.0.10
	ROOT_Release-5-3-3:1.26
	Release-5-3-3:1.26.0.6
	debian_version_5_3_2_1_2-1:1.26
	upstream_version_5_3_2_1_2:1.26
	debian_version_5_3_2_1_1-1:1.26
	debian_version_5_3_2_1_1:1.26
	upstream_version_5_3_2_1_1:1.26
	Root_Release-5-3-2-1:1.26
	Release-5-3-2-1:1.26
	ROOT_RELEASE-5-3-2-1:1.26
	RELEASE-5-3-2-1:1.26.0.8
	Release-5-3-2:1.26.0.4
	Root_Release-5-3-2:1.26
	Root_Release-5-3-1:1.26
	Release-5-3-1:1.26.0.2
	Release-5-2-3-1:1.25.0.2
	Root_Release-5-2-3-1:1.25
	Release-5-2-2-4:1.24.0.6
	Root_Release-5-2-2-4:1.24
	Release-5-2-2-1:1.24.0.4
	Root_Release-5-2-2-1:1.24
	upstream_version_5_2_2:1.24
	debian_version_5_2_2-1:1.24
	Release-5-2-2:1.24.0.2
	ROOT_Release-5-2-2:1.24
	ROOT_Release-5-2-1:1.23
	Release-5-2-1:1.23.0.4
	Release-5-2-0:1.23.0.2
	ROOT_Release-5-2-0:1.23
	ROOT_Release-5-1-2:1.22
	Release-5-1-2:1.22.0.10
	Version-5-1-1:1.22.0.8
	ROOT_Version-5-1-1:1.22
	debian_version_5_1_0-1:1.22
	upstream_version_5_1_0:1.22
	ROOT_Release-5-1-0:1.22
	Release-5-1-0:1.22.0.6
	ROOT_Release-5-0-0:1.22
	Release-5-0-0:1.22.0.4
	Release-4-3-3:1.22.0.2
	ROOT_Release-4-3-3:1.22
	upstream_version_4_3_2:1.21
	debian_version_4_3_2-1:1.21
	ROOT_Release-4-3-2:1.21
	Release-4-3-2:1.21.0.6
	Release-4-3-1:1.21.0.4
	ROOT_Release-4-3-1:1.21
	debian_version_4_3_0-1:1.21
	upstream_version_4_3_0:1.21
	ROOT_Release-4-3-0:1.21
	Release-4-3-0:1.21.0.2
	debian_version_3_2_1b-2:1.16
	debian_version_4_2_2-1:1.21
	upstream_version_4_2_2:1.21
	debian_version_3_2_1b-1:1.16
	upstream_version_3_2_1b:1.16
	Release-4-1-2:1.20.0.2
	Release-4-0-8:1.19.0.6
	debian_version_4_0_8a-1:1.19
	upstream_version_4_0_8a:1.19
	jostb-debian-ubuntu-patch:1.19.0.4
	debian_version_4_0_8-1:1.19
	upstream_version_4_0_8:1.19
	debian_version_4_0_7-1:1.19
	upstream_version_4_0_7:1.19
	debian_version_4_0_6-1:1.19
	upstream_version_4_0_6:1.19
	debian_version_4_0_2-1:1.19
	upstream_version_4_0_2:1.19
	Release-4-0-2_Root:1.19
	Release-4-0-2:1.19.0.2
	upstream_version_4_0_1:1.18
	debian_version_4_0_1-2:1.18
	Release-3-2-1:1.16.0.2
	Release-3-1-8:1.13.0.2
	Release-3-0-8_root:1.4.2.1
	Release-3-0-8_Root:1.7
	Release-3-0-8:1.4.0.2;
locks; strict;
comment	@# @;


1.33
date	2010.03.24.18.03.15;	author jost_boekemeier;	state Exp;
branches;
next	1.32;

1.32
date	2010.03.06.11.12.45;	author jost_boekemeier;	state Exp;
branches;
next	1.31;

1.31
date	2009.04.25.12.25.22;	author jost_boekemeier;	state Exp;
branches;
next	1.30;

1.30
date	2009.04.18.14.57.04;	author jost_boekemeier;	state Exp;
branches;
next	1.29;

1.29
date	2009.04.12.12.10.23;	author jost_boekemeier;	state Exp;
branches;
next	1.28;

1.28
date	2009.03.08.14.34.47;	author jost_boekemeier;	state Exp;
branches;
next	1.27;

1.27
date	2009.01.10.16.50.04;	author jost_boekemeier;	state Exp;
branches;
next	1.26;

1.26
date	2008.10.03.15.48.13;	author jost_boekemeier;	state Exp;
branches;
next	1.25;

1.25
date	2008.09.29.16.32.20;	author jost_boekemeier;	state Exp;
branches;
next	1.24;

1.24
date	2008.03.30.17.01.33;	author jost_boekemeier;	state Exp;
branches;
next	1.23;

1.23
date	2008.02.10.15.38.20;	author jost_boekemeier;	state Exp;
branches;
next	1.22;

1.22
date	2007.12.28.13.56.41;	author jost_boekemeier;	state Exp;
branches;
next	1.21;

1.21
date	2007.07.19.16.19.15;	author jost_boekemeier;	state Exp;
branches;
next	1.20;

1.20
date	2007.06.13.19.51.47;	author jost_boekemeier;	state Exp;
branches;
next	1.19;

1.19
date	2007.03.19.13.03.16;	author jost_boekemeier;	state Exp;
branches;
next	1.18;

1.18
date	2007.03.09.20.28.06;	author andremachado;	state Exp;
branches;
next	1.17;

1.17
date	2006.12.22.16.02.39;	author jost2345;	state Exp;
branches;
next	1.16;

1.16
date	2006.12.16.16.21.53;	author jost2345;	state Exp;
branches;
next	1.15;

1.15
date	2006.12.15.10.31.25;	author jost2345;	state Exp;
branches;
next	1.14;

1.14
date	2006.12.05.04.43.08;	author jost2345;	state Exp;
branches;
next	1.13;

1.13
date	2006.09.05.20.40.32;	author jost2345;	state Exp;
branches;
next	1.12;

1.12
date	2006.08.27.14.40.11;	author jost2345;	state Exp;
branches;
next	1.11;

1.11
date	2006.08.19.12.34.00;	author jost2345;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.08.17.20.45;	author jost2345;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.23.20.32.47;	author jost2345;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.19.20.37.14;	author jost2345;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.30.17.01.55;	author jost2345;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.13.16.09.10;	author jost2345;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.12.17.46.45;	author jost2345;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.07.18.59.27;	author jost2345;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2006.02.13.18.34.16;	author jost2345;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.05.18.47.00;	author jost2345;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.03.17.41.36;	author jost2345;	state Exp;
branches;
next	;

1.4.2.1
date	2006.04.23.19.09.08;	author jost2345;	state Exp;
branches;
next	;


desc
@@


1.33
log
@Release-6-1-1
@
text
@Overview
--------

The JEE interface associates a PHP web context or the entire JEE
server with a managed and persistent PHP executable or an external
HTTP server running PHP.

This document describes how to call Java methods from PHP. And how to
embed PHP applications in a pure Java application server or servlet
engine. Please see the INSTALL.J2SE document for details how to call
PHP methods from a pure Java application.

Installation
------------

* Install a JEE application server or servlet engine, for example
  Apache Geronimo, Tomcat, Glassfish, ...

* Copy your Java libraries, PHP executables or PHP libraries in
  "JavaBridge.war" or JavaBridgeTemplate.war and rename it to
  "myPhpApp.war" or similar.

* Copy your web application myPhpApp.war to the autodeploy folder of
  your JEE server or servlet engine. If you don't have a myPhpApp.war
  yet, simply rename "JavaBridge.war" to "myPhpApp.war".

  Example for Tomcat on Unix:
  
    cp myPhpApp.war $CATALINA_HOME/webapps/

  Example for Apache Geronimo on Windows:

    copy myPhpApp.war "\Program Files\IBM\WebSphereCommunityEdition\deploy"

  Wait until the "myPhpApp" directory appears (restart your JEE
  server, if necessary).


* If you want to run PHP as a sub component of the JEE server or
  servlet engine, visit http://localhost:8080/myPhpApp and click on
  test.php. 

* If you want to run PHP as a sub component of Apache or IIS or from
  the command line, require() Java.inc directly from the back
  end. Example:

    <?php
      require_once("http://127.0.0.1:8080/JavaBridge/java/Java.inc");
      echo java("java.lang.System")->getProperties();
      ...
    ?>

  Or embed it in your PHP application and use the provided Java class
  as usual. Example:

    <?php
      define("JAVA_HOSTS", 127.0.0.1:8080);
      define("JAVA_SERVLET", "/JavaBridge/servlet.phpjavabridge");
      require_once("java/Java.inc");
      echo java("java.lang.System")->getProperties();
      ...
    ?>


* Firewall-out the JEE/Servlet port 8080, if necessary. Or modify the
  JEE/Servlet so that it listens only on the local interface. Note that
  in the default setup the PHP/Java Bridge rejects requests from non-local
  PHP clients. For a intranet server start the JEE/Servlet VM with the
  parameter -Dphp.java.bridge.promiscuous=true or set the "promiscuous"
  init-param in the JEE WEB-INF/web.xml and make sure that your
  computer cannot be accessed from the internet. At least firewall-out
  the ports 8080 and all ports in the range [9267,...,[9367 and read the
  "security" sections from README.


JSR 223 Script API
------------------

* It is possible to run PHP scripts in servlets. The examples below
  use JSP to demonstrate the features (in JSP "this" is the Servlet,
  "application" is the ServletContext and "request", "response" the
  HttpServletRequest and HttpServletResponse objects.

  The web application needs a context listener declared in 
  WEB-INF/web.xml:

   <listener>
       <listener-class>php.java.servlet.ContextLoaderListener</listener-class>
   </listener>

  And the JavaBridge.jar, php-servlet.jar, php-script.jar, script-api.jar
  must be available in the WEB-INF/lib directory.

  Servlets can then access PHP scripts as follows:

  <%! 
    private static final Reader HELLO_SCRIPT = 
      php.java.script.servlet.EngineFactory.createPhpScriptReader(
        "<?php echo 'Hello java world!'; ?>"); 
  %>
  <%
    javax.script.ScriptEngine e = 
      php.java.script.servlet.EngineFactory.getPhpScriptEngine (this, 
                                                        application, 
                                                        request, response);
    e.getContext().setWriter (out);
    Reader r = php.java.script.servlet.EngineFactory.createPhpScriptFileReader(
      getClass().getName()+"._cache_.php", HELLO_SCRIPT);
    e.eval (r);
    r.close ();
  %>
  
  The code above is equivalent to:  

   rd=application.getRequestDispatcher(request.getServletPath()+"._cache_.php");
   rd.include(request, response);


  The InvocablePhpScriptEngine can be accessed as follows:

  <%
    javax.script.ScriptEngine e = 
      php.java.script.servlet.EngineFactory.getInvocablePhpScriptEngine(this, 
        application, reqest, response, 
         new java.net.URI("http://PHP_SERVER:80/JavaProxy.php"));

    Object result = ((javax.script.Invocable)e).invokeFunction ("phpversion", 
      new Object[]{});

    out.println("result from remote invocation:" + result);
    ((java.io.Closeable)e).close();
  %>


Further information
-------------------

Our FAQ contains examples which show how to create a distributable PHP
web application, how to enable PHP for all Tomcat web applications and
and how to set up a load balancer for a Tomcat cluster.


* Please report bugs/problems to the mailing list:

    php-java-bridge-users@@lists.sourceforge.net


@


1.32
log
@Release-6-0-4
@
text
@d108 1
a108 1
      request.getServletPath()+"._cache_.php", HELLO_SCRIPT);
@


1.31
log
@Release-5.4.4.2
@
text
@d4 1
a4 1
The J2EE interface associates a PHP web context or the entire J2EE
d9 1
a9 1
embed PHP applications into a pure Java application server or servlet
d16 1
a16 1
* Install a J2EE application server or servlet engine, for example
d19 3
a21 2
* Copy your Java libraries, PHP executables or PHP libraries into
  JavaBridgeTemplate.war and rename it to "myPhpApp.war" or similar.
d24 1
a24 1
  your J2EE server or servlet engine. If you don't have a myPhpApp.war
d35 1
a35 1
  Wait until the "myPhpApp" directory appears (restart your J2EE
d39 1
a39 1
* If you want to run PHP as a sub component of the J2EE server or
d44 2
a45 3
  the command line, require() Java.inc directly from the back end.
  Or embed it into your PHP application and use the provided
  Java class as usual.
d47 20
a66 2
* Firewall-out the J2EE/Servlet port 8080, if necessary. Or modify the
  J2EE/Servlet so that it listens only on the local interface. Note that
d68 1
a68 1
  PHP clients. For a intranet server start the J2EE/Servlet VM with the
d70 1
a70 1
  init-param in the J2EE WEB-INF/web.xml and make sure that your
@


1.30
log
@Release-5-4-4-2
@
text
@d78 5
d89 4
a92 3
    e.eval ("<?php phpinfo(); ?>");
    e.eval (new java.io.FileReader("otherScript.php"));
    ...
d95 6
d105 9
a113 9
      php.java.script.servlet.EngineFactory.getInvocablePhpScriptEngine (this, 
                                                        application, 
                                                        request, response);
    e.getContext().setWriter (out);
    e.eval ("<?php function hello() {echo "hello";}; ?>");
    javax.script.Invocable i = (javax.script.Invocable) e;
    i.invokeFunction ("hello", new Object[]{});
    ...
    e.eval ((java.io.Reader)null);
@


1.29
log
@Release-5-4-4-2
@
text
@a71 3
   <listener>
       <listener-class>php.java.servlet.RequestListener</listener-class>
   </listener>
@


1.28
log
@Release-5-4-4
@
text
@a91 7
  The script engine reserves up to three continuations, one for the
  JSP, one for PHP (PhpCGIServlet) and a optional Java continuation
  (PhpJavaServlet).  If the servlet engine thread pool cannot allocate
  three threads, a PhpScriptTemporarilyOutOfResourcesException is
  thrown.
  

a106 5
  The script engine reserves three continuations, one for the JSP, one
  for PHP (PhpCGIServlet) and a Java continuation (PhpJavaServlet). If
  the servlet engine thread pool cannot allocate three threads, a
  PhpScriptTemporarilyOutOfResourcesException is thrown.

@


1.27
log
@*** empty log message ***
@
text
@d13 2
a14 51
The PHP/Java Bridge can be installed with one copy operation:

* the JavaBridge.war (renamed to "myPhpApp.war") should be copied into
  the autodeploy folder of the J2EE server.


Development
-----------

* Download and extract the php-java-bridge*_j2ee.zip file into a
  folder.

* Navigate to the created JAVA.STANDALONE folder.

* Right-click on log4j.jar and select "open with Java ..."

* Right-click on JavaBridge.jar and select "open with Java ...". In
  the "Starting ..." dialog select SERVLET_LOCAL:8080.

* Run your PHP scripts. For example browse to http://127.0.0.1:8080
  and click on test.php.

* Link Java.inc and your Java libraries into PHP at run-time. Example:
  
   <?php
    require_once("java/Java.inc");

    // call Java libraries using the provided Java class...
    java_require("myLibs/myLib.jar;dependentLib1.jar;...);

    $SystemClazz =     Java("java.lang.System"); 
    echo $SystemClazz->getProperties();

    $myInstance  = NEW Java("myPackage.MyClass", ...); 
    $myInstance->callSomething(...);
   ?>

* Create a PHP web archive for distribution, for example with the commands:

  mkdir JavaBridge
  cd JavaBridge
  jar xvf ../JavaBridge.war

  cd ../myPhpApp
  cp -r ../JavaBridge/WEB-INF JavaBridge/java .
  cp -r MYLIBS/*.jar WEB-INF/lib
  jar cvf ../myPhpApp.war *
  

Deployment
----------
d19 3
@


1.26
log
@Release-5-3-1
@
text
@d22 2
a23 3
* Extract the JavaBridge.jar from the JavaBridge.war zip file from the
  PHP/Java Bridge binary ("php-java-bridge*_j2ee.zip") download. For
  example with the command:
d25 1
a25 1
    java -classpath JavaBridge.war TestInstallation
d27 1
a27 1
  Double-click on JavaBridge.jar or type:
d29 2
a30 8
    java -jar JavaBridge.jar

  and click "OK" to start a servlet engine back end for all computers
  on the local network. Type:

    java -jar JavaBridge.jar --help 

  to see the list of available options.
d32 2
a49 1

a67 1

d89 3
a91 24
  the command line, copy the directory which contains the web
  application "myPhpApp" over to the Apache/IIS document root or to
  the some local directory accessible by the PHP command line
  executable. Example for Apache Tomcat on Unix:

    cp -r $CATALINA_HOME/webapps/myPhpApp/ /var/www/html/


* Edit the copied web application, if necessary. For example edit
  DOCUMENT_ROOT/myPhpApp/java/Java.inc so that it connects PHP with
  the Java VM "127.0.0.1:8080/myPhpApp". For example:

    define("JAVA_HOSTS", "127.0.0.1:8080"); 
    define("JAVA_SERVLET", "/myPhpApp/JavaBridge.phpjavabridge"); 

  Or set JAVA_PARSE_INI_FILE and use the following java.ini file:

    [java]
    java.servlet=/myPhpApp/JavaBridge.phpjavabridge
    
    <?php define ("JAVA_PARSE_INI_FILE", true);
          require_once("java/Java.inc");
      ...
    ?>
@


1.25
log
@Release-5-2-3-1
@
text
@d146 3
d165 7
a186 3
   
  Note the terminating e.eval (...) above. It flushes the output
  generated by the previous invokeXXX function calls.
d188 4
a192 2
Logging
-------
d194 6
a199 11
* Download and copy log4j.jar to java.ext.dirs. Example for JDK 1.6 on
  Linux:

  mkdir -p /usr/java/packages/lib/ext
  cp log4j.jar /usr/java/packages/lib/ext

* Start the log4j viewer. For example with the command:

  /usr/java/default/bin/java org.apache.log4j.chainsaw.Main

* Restart the J2EE server. The log appears in the log4j window.
@


1.24
log
@Release-5-2-2
@
text
@d23 2
a24 1
  PHP/Java Bridge binary download. For example with the command:
d28 4
a31 1
  Double-click on JavaBridge.jar or type "java -jar JavaBridge.jar"
d33 5
a37 2
  on the local network. Type java -jar JavaBridge.jar --help to see
  the list of available options.
d131 51
@


1.23
log
@Version-5-1-2
@
text
@d102 1
a102 1
    define("JAVA_SERVLET", "User"); 
d104 9
@


1.22
log
@Release-4-3-3
@
text
@d4 4
d15 2
a16 2
* the JavaBridge.war must be copied into the autodeploy folder of the
  J2EE server.
d23 9
a31 4
  PHP/Java Bridge binary download. Double-click on JavaBridge.jar or
  type "java -jar JavaBridge.jar" and click "OK" to start a servlet
  engine back end for all computers on the local network. Type java -jar
  JavaBridge.jar --help to see the list of available options.
d48 1
d67 1
d69 2
a70 3
  your J2EE server or servlet engine. The following examples assume that
  you don't have a myPhpApp.war yet, they use the "JavaBridge.war" example
  application. 
d74 1
a74 1
    cp JavaBridge.war $CATALINA_HOME/webapps/
d78 5
a82 1
    copy JavaBridge.war "\Program Files\IBM\WebSphereCommunityEdition\deploy"
d85 1
a85 1
  servlet engine, visit http://localhost:8080/JavaBridge and click on
d91 4
a94 1
  the some local directory accessible by the PHP command line executable.
d96 4
a99 2
* Edit DOCUMENT_ROOT/myPhpApp/java/Java.inc so that it
  connects PHP with the Java VM "127.0.0.1:8080/myPhpApp". For example:
d104 1
@


1.21
log
@Release-4-2-0
@
text
@d31 6
a36 2
    $my = new Java("myPackage.MyClass", ...);
    $my->callSomething(...);
d79 2
a80 11
* If you use PHP < 5.1.4, you must compile and install "java.so" or
  "php_java.dll" (see the README and INSTALL documents from the source
  download) and add the following to your php.ini file:

    extension=java.so ;; php_java.dll on windows
    [java]
    java.hosts=127.0.0.1:8080
    java.servlet=User ;; or On or /myPhpApp/JavaBridge.phpjavabridge
  
* If you use PHP >= 5.1.4, edit DOCUMENT_ROOT/myPhpApp/java/Java.inc
  so that it connects to 127.0.0.1:8080/myPhpApp. For example:
d95 16
@


1.20
log
@Release-4-1-0
@
text
@a104 6
* An optimized implementation, which is up to 10 times faster than the
  pure PHP implementation described above, is available as C
  source. Please see the README, INSTALL or INSTALL.LINUX document
  located in the source download archive how to compile an optimized
  "php_java.dll" or "java.so" for your operating system.

@


1.19
log
@Release-4-0-2
@
text
@d21 2
a22 1
  engine back end for all computers on the local network.
d27 1
a27 1
    require_once("http://localhost:8080/JavaBridge/java/Java.inc");
d35 11
d53 6
a58 2
* Extract the files from the php-java-bridge J2EE download and deploy
  JavaBridge.war into your J2EE server, example for Tomcat on Unix: 
d71 15
a85 12
  the command line, create a simple test.php file and call it as usual.
  For example:

  <?php
    require_once("http://localhost:8080/JavaBridge/java/Java.inc");
    $s = new Java("java.lang.System");
    echo $s->getProperties();
  ?>

  copy it to the web server document root and browse to
  http://yourHost.com/test.php or use the PHP command line
  interface. For example:
d87 2
a88 1
    php-cgi test.php >result.html
d106 4
a109 4
  pure PHP implementation described above, is available as C source. 
  Please see the README and INSTALL document located in the source
  download archive how to compile an optimized "php_java.dll" or
  "java.so" for your operating system.
@


1.18
log
@Files update 3.2.2 to 4.0.1. Extracted from the src.tar.gz downloaded from sf.net, uploaded by Jost Boekemeier. Update to repository by Andre Felipe Machado.
@
text
@d70 9
a78 10
* Firewall-out the J2EE/Servlet port 8080, if necessary. Or modify
  the J2EE/Servlet so that it listens only on the local
  interface. 

* Note that the PHP/Java Bridge rejects requests from non-local
  ("127.0.0.1") PHP clients. For a intranet server start the
  J2EE/Servlet VM with the parameter -Dphp.java.bridge.promiscuous=true
  and make sure that your computer cannot be accessed from the
  internet. At least firewall-out the ports 8080 and all ports in the
  range [9267,...,[9367 and read the "security" sections from README.
@


1.17
log
@Release-3-2-2
@
text
@d4 6
a9 1
The PHP/Java Bridge can be installed with two copy operations:
d12 15
a26 1
  J2EE server and
d28 5
a32 3
* the pure PHP PHP/Java Bridge classes or the C-based extension module
  must be copied into the web server document root or into the PHP
  extension directory, respectively.
d35 2
a36 2
Install PHP into a pure Java Application Server
-----------------------------------------------
d39 1
a39 1
  Apache Geronimo, Tomcat 5.5.9, Oracle 10g or WebSphere 6.
d50 30
a79 50
* Visit http://localhost:<port>/JavaBridge and click on test.php.
  The <port> is 8888 (Oracle), 9080 (WebSphere) or 8080 (Tomcat/Geronimo).

* Please see the README and http://php-java-bridge.sourceforge.net
  for further information.

* Please report bugs/problems to the mailing list:

    php-java-bridge-users@@lists.sourceforge.net


Known AS Issues :

- On Windows the php-cgi.exe doesn't support the -b flag. Therefore
either an IIS or Apache front-end or an external PHP "launcher.exe" is
required to run PHP efficiently. IBM Websphere or Apache Geronimo
users can find the "launcher.exe" in the "PHP Integration Kit for
Windows": PHPIntKitForWindows.zip, available from alphaworks.

- If you see a script exception when running
java-server-faces/index.php and the name is displayed as "null", check
if Java can call the PHP script on the external web server (PHP >= 5 must 
be installed on the web server). If not, stop the external web server or 
change the script location from "@@80:/java-server-faces/helloWorld.php" 
to "/java-server-faces/helloWorld.php" so that the internal web server
built into your servlet engine or application server is used.


OPTIONAL: Add Java support to Apache or IIS
-------------------------------------------

* Download and install PHP into Apache or IIS, if not already
  installed.

* Download and extract the PHP/Java Bridge into a folder.

* Double-click on test.bat or test.sh. Copy the created "java" folder
  and the test.php over to the document root of your web server.

* Copy the JavaBridge.war into the autodeploy folder of your
  J2EE application server or servlet engine, as described above. Or
  right-click on ext/JavaBridge.jar and select "Open with Java ...".  In
  the "Starting the PHP/Java Bridge" dialog box select
  "SERVLET_LOCAL:8080" and click OK.

* Copy your Java libraries (.jar files) into extension_dir/lib [1] or
  into the library path of the J2EE module (e.g. the WEB-INF/lib
  folder within JavaBridge.war).

* Visit http://yourHost.com/test.php.
d86 5
a90 1
Known Issues :
a91 18
- The pure PHP PHP/Java Bridge implementation described above is
currently 10 times slower than the "C" implementation described in the
README. Since PHP doesn't contain a JIT, a "Just In Time" compiler, it
is recommended to compile the bridge front end to native code, if
possible. See the INSTALL document from the source download for
details how to compile a PHP Java extension, "php_java.dll" or
"java.so", from the C source.

---
NOTES:

[1] The extension_dir is the PHP extension directory, usually
/usr/lib/php/modules or c:\php on windows. It can be set in the php
.ini file [2] with (example): extension_dir="d:/php".

[2] The php .ini file is the global PHP configuration file, usually
/usr/local/lib/php.ini or /etc/php.d/java.ini or c:\windows\php.ini or
c:\winnt\php.ini.
@


1.16
log
@Release-3-2-1
@
text
@a55 4
- The JavaBridge.war contains PHP binaries for Linux (x86), Solaris
(x86) and Windows. On other operating systems the PHP binaries are
searched in /usr/bin/php-cgi or c:\php\php-cgi.exe and a pure PHP
implementation of the PHP/Java Bridge is used.
d57 2
d60 4
a63 2
OPTIONAL: Copy the pure PHP classes into an existing PHP Web Server
-------------------------------------------------------------------
d68 9
a76 6
* Copy the JavaBridge.war into the autodeploy folder of your Application
  Server or servlet engine, as described above.

* Copy your Java libraries (.jar files) into the extension_dir/lib [1]
  directory and your native shared libraries (on windows: dll files)
  into extension_dir [1].
d87 7
a93 77
- The pure PHP PHP/Java Bridge implementation is currently 10 times
slower than the C implementation described below. Since PHP doesn't
contain a JIT, a "Just In Time" compiler, it is recommended to compile
the bridge to native code, if possible:


OPTIONAL: Install the native, C-based extension
-----------------------------------------------

NOTE: Linux RPMs contain Security Enhanced Linux contexts. If you want
to install software on a SEL system (RHEL, Fedora, ...), please use
the RPM build system instead, see INSTALL.LINUX.

* Install Apache or IIS, if not already installed.

* Install PHP, if not already installed. For example add these lines
  to the end of your Apache2 httpd.conf file:

    LoadModule php5_module "c:/php/php5apache2.dll"
    AddType application/x-httpd-php .php

* The native, C-based PHP extension needs a non-standard PHP "java.so"
  or "php_java.dll" installed on the web server. Check if your PHP
  extension_dir [1] contains this PHP extension. If not, copy the
  appropriate java-<architecture>-<os>.so or
  java-<architecture>-<os>.dll from the JavaBridge.war file to your PHP
  extension directory:

  for PHP >= 4.3.4: php-4-java-<arch>-<os>[.so|.dll]
  for PHP >= 5.0.0: php-5.0-java-<arch>-<os>[.so|.dll]
  for PHP >= 5.1.0: java-<arch>-<os>[.so|.dll]
  for PHP >= 5.2.0: a custom php_java.dll or java.so must be 
                    used (see INSTALL document how to compile 
                    it from the C source).
  
  Rename it to java.so (Unix) or php_java.dll (Windows). 

  Please see the INSTALL document located in the source download
  archive for information how to compile a php_java.dll or java.so from
  the source.

* Check if the java .ini [2] entry loads the java extension and
  connects php to the servlet or J2EE back-end, e.g.:
  
    extension = java.so
    ; extension = php_java.dll
    [java]
    java.hosts   = 127.0.0.1:8080 ;or 8888 for Oracle, 9080 for WebSphere
    java.servlet = User

* Check if the HTTP document root directory is shared with the AS
  "webapps" directory. If not, change the java.servlet option to "On":

    extension = java.so
    ; extension = php_java.dll
    [java]
    java.hosts   = 127.0.0.1:8080 ;or 8888 for Oracle, 9080 for WebSphere
    java.servlet = On

  Then re-start Apache or IIS and check "java status" and "java server":

    http://yourHost.com/<userContext>/test.php

  e.g.:

    http://yourHost.com/JavaBridge/test.php

* On production systems set the following flags in your php ini file [2]
  so that the back-end can generate standard error pages.

    log_errors     = On
    display_errors = Off
    html_errors    = Off

* Copy your Java libraries (.jar files) into the extension_dir/lib [1]
  directory and your native shared libraries (on windows: dll files)
  into extension_dir [1].
d95 2
a96 1
* Please report bugs/problems to the mailing list:
a97 3
    php-java-bridge-users@@lists.sourceforge.net

---
@


1.15
log
@Release-3-2-1
@
text
@d56 5
d68 2
a69 5
* Copy the JavaBridge.war into the autodeploy folder of your
  Application Server or servlet engine, as described above. Or use the
  included servlet engine: right-click on ext/JavaBridge.jar and select
  "Open with Java ...".  In the "Staring the PHP/Java Bridge" dialog box
  select "SERVLET_LOCAL:8080" and click OK.
d90 1
a90 1
OBSOLETE: Install the native, C-based extension
d105 19
a123 3
* Compile [3] a Windows "php_java.dll" or Unix "java.so" from the source,
  as described in the INSTALL document from the source download archive,
  and copy it to your PHP extension_dir [1].
a173 4

[3] For older PHP versions the JavaBridge.war contains a java-4-*.dll
(PHP4), java-5.0-*.dll (PHP5.0) and a java-x86-windows.dll (PHP5.1)
for Windows and a java.so for Solaris and Linux (PHP5.1).
@


1.14
log
@Release-3-2-1
@
text
@a55 5
- The JavaBridge.war contains PHP binaries for Linux (x86), Solaris
(x86) and Windows. On other operating systems the PHP binaries are
searched in /usr/bin/php-cgi or c:\php\php-cgi.exe and a pure PHP
implementation of the PHP/Java Bridge is used.

d63 5
a67 2
* Copy the JavaBridge.war into the autodeploy folder of your Application
  Server or servlet engine, as described above.
d88 1
a88 1
OPTIONAL: Install the native, C-based extension
d103 3
a105 19
* The native, C-based PHP extension needs a non-standard PHP "java.so"
  or "php_java.dll" installed on the web server. Check if your PHP
  extension_dir [1] contains this PHP extension. If not, copy the
  appropriate java-<architecture>-<os>.so or
  java-<architecture>-<os>.dll from the JavaBridge.war file to your PHP
  extension directory:

  for PHP >= 4.3.4: php-4-java-<arch>-<os>[.so|.dll]
  for PHP >= 5.0.0: php-5.0-java-<arch>-<os>[.so|.dll]
  for PHP >= 5.1.0: java-<arch>-<os>[.so|.dll]
  for PHP >= 5.2.0: a custom php_java.dll or java.so must be 
                    used (see INSTALL document how to compile 
                    it from the C source).
  
  Rename it to java.so (Unix) or php_java.dll (Windows). 

  Please see the INSTALL document located in the source download
  archive for information how to compile a php_java.dll or java.so from
  the source.
d156 4
@


1.13
log
@Release-3-1-8rc3
@
text
@d115 3
a117 1
  ...
@


1.12
log
@Release-3-1-8rc
@
text
@d1 15
a15 2
Installing PHP into a pure Java Application Server
--------------------------------------------------
d35 5
d50 5
a54 4
if Java can call the PHP script on the web server (PHP >= 5 must be
installed on the web server). If not, stop the web server or change
the script location from "@@80:/java-server-faces/helloWorld.php" to
"/java-server-faces/helloWorld.php".
d59 15
a73 7
implementation of the PHP/Java Bridge is used. This implementation is
currently 10 times slower than the native, C based implementation. The
INSTALL document located in the source download archive contains
information how to compile the C based implementation for your
operating system version and the java/README document located in the
JavaBridge.war zip file contains information how to install the pure
PHP implementation of the PHP/Java Bridge.
d75 1
d77 15
a91 2
OPTIONAL: Installing PHP into Apache or IIS
-------------------------------------------
a96 28
Pure Java application server or servlet implementations cannot
directly respond to requests on the HTTP port number 80; they cannot
listen on this port without having admin privileges and they cannot
drop their privileges due to posix related restrictions in the Java
architecture. Running the entire application server with admin
privileges causes security problems. Therefore it is recommended to
install a native HTTP server with PHP as a front end:

              :80---> Apache or IIS
            /                |
           / php req.        ---- php
          /                  ---- php  -->----------|
                               /  ...               |
  internet                    |                     |
  clients                     -------<--------|     |
          \                    P-J-B PROTOCOL |     |
           \jsp/servlet req.                  |     |
            \                                 |     |
             |--> :8080--> J2EE AS            |     |
              /                |              |     |
             /                 \--- servlet   |     |
             |                 \--- PhpJavaServlet  |
             |                 \--- jsp             |
             |                      ...             |
             -------------<-------------------------|
                    P-J-B PROTOCOL
  

d105 1
a105 8
* The PHP/Java Bridge front-end is available a) as a pure PHP component
  or b) as a C based PHP extension. 

* The pure PHP component is currently 10 times slower than the C based
  extension, but it is easier to install. See the java/README located in
  the JavaBridge.war zip archive for details.

* The native, C based PHP extension needs a non-standard PHP "java.so"
a122 5
  NOTE: The pure PHP implementation of the PHP/Java Bridge currently
  does not read the following php.ini entries. The java.hosts and
  java.servlet values are coded in java/Options.php, change them
  accordingly. See java/README for details.

d156 1
a156 1
* Copy your java libraries (.jar files) into the extension_dir/lib [1]
a171 15


FAQ
---

Q: In previous versions it was possible to just drop the
JavaBridge.jar and the PHP java dll into the PHP extension
directory. Why isn't this option availablable anmore? Starting a Java
application server just to call out to some Java libraries seems to be
overkill.

A: This is still possible. But since the J2EE component is available,
the standalone component is obsolete. The J2EE component works in a
full featured 1GB application server as well as in a 100K servlet
engine.
@


1.11
log
@Release-3-2-0devel
@
text
@d1 2
a2 16
Testing the included PHP 5 binaries
-----------------------------------

* The JavaBridge.war file contains PHP binaries for Solaris (x86),
Linux (x86), and Windows (x86). To test them double-click on test.bat
or test.sh. The test extracts the JavaBridge.jar, the php_java.dll or
java.so module and the PHP 5.1 php-cgi executable and runs a simple
test.

* Check the RESULT.html, it should contain the settings of the
PHP/Java Bridge module and the Java properties at the bottom of the
page.


Installing the PHP/Java Bridge J2EE Component
---------------------------------------------
d22 25
d48 3
a50 2
OPTIONAL: Installing and testing the front-end on Linux, Unix, Windows
----------------------------------------------------------------------
d56 28
d92 12
a103 3
* Check if your php extension_dir [1] contains the java extension. If not,
  copy the appropriate java-<architecture>-<os>.so or
  java-<architecture>-<os>.dll from the JavaBridge.war file to your php
d109 3
a111 1
  for PHP >= 6.0.0: php-6-java-<arch>-<os>[.so|.dll]
d113 8
a120 4
  Rename it to java.so (Unix) or php_java.dll (Windows). If the binary
  download doesn't contain a PHP executable for your operating system,
  compile a php_java.dll or java.so from the source, as described in the
  INSTALL document located in the source download archive.
d123 1
a123 1
  connects php to the servlet back-end, e.g.:
a172 17
Known AS Issues 
---------------

* On Windows the php-cgi.exe doesn't support the -b flag. Therefore
either a IIS or Apache front-end or an external PHP "launcher.exe" is
required to run PHP efficiently. IBM Websphere or Apache Geronimo
users can find the "launcher.exe" in the "PHP Integration Kit for
Windows": PHPIntKitForWindows.zip, available from alphaworks.

* If you see a script exception when running
java-server-faces/index.php and the name is displayed as "null", check
if Java can call the PHP script on the web server (PHP >= 5 must be
installed on the web server). If not, stop the web server or change
the script location from "@@80:/java-server-faces/helloWorld.php" to
"/java-server-faces/helloWorld.php".


@


1.10
log
@Release-3-1-7
@
text
@d37 2
a38 2
Installing and testing the front-end on Linux, Unix, Windows
------------------------------------------------------------
@


1.9
log
@Release-3-1-6
@
text
@d5 4
a8 4
  Linux (x86), and Windows (x86). To test them double-click on test.bat
  or test.sh. The test extracts the JavaBridge.jar, the php_java.dll or
  java.so module and the PHP 5.1 php-cgi executable and runs a simple
  test.
d11 2
a12 2
  PHP/Java Bridge module and the Java properties at the bottom of the
  page.
d19 1
a19 1
  Tomcat 5.5.9, Oracle 10g or WebSphere 6.
d22 1
a22 1
  JavaBridge.war into your J2EE server, example for tomcat:
d26 4
d31 1
a31 1
  The <port> is 8888 (Oracle), 9080 (WebSphere) or 8080 (Tomcat).
d44 4
a47 1
* Install Apache or IIS. Install PHP, for example PHP 5.1.x.
d49 4
a52 1
* Check if your php extension_dir contains the java extension. If not,
d67 2
a68 4
* Check if the java .ini entry (usually
  /usr/local/lib/php.ini or /etc/php.d/java.ini or c:\windows\php.ini
  or c:\winnt\php.ini) loads the java extension and connects php to
  the servlet back-end, e.g.:
d93 1
a93 1
* On production systems set the following flags in your php ini file
d100 4
d108 9
d121 27
a147 5
* If you see a script exception when running java-server-faces/index.php
  and the name is displayed as "null", check if apache is able to
  execute the script. If not, stop apache or change the script
  location from "@@80:/java-server-faces/helloWorld.php" to
  "/java-server-faces/helloWorld.php".
@


1.8
log
@Release-3-1-0
@
text
@a96 52
* It is possible to create distributable web applications, please see
the WEB-INF/cgi/README and the FAQ for details.

* When Apache or IIS is not available, the administrator may start a
PHP standalone FastCGI server for all users, for example:

  export X_JAVABRIDGE_OVERRIDE_HOSTS="/"
  export PHP_FCGI_CHILDREN="20"
  export PHP_FCGI_MAX_REQUESTS="5000"
  /usr/bin/php-cgi -b 127.0.0.1:9667

* When Apache or IIS is available, the administrator may set up the
mod_jk adapter to forward JSP/Servlet requests to the J2EE AS, for
example:

  internet
  clients  <->  :80---> Apache or IIS                        --->  J2EE AS
                             | |                            /  /    |   |
                             |  mod_jk <-- jsp/servlet req./  /     |   |
                             |                               /     jsp  |
                             --- php                        /           |
                             --- php  <-- P-J-B PROTOCOL --/         servlet
                                 ...                                   ...

    J2EE port not visible to internet clients. Apache/IIS document root
    not used.


or he/she may connect both, apache and the j2ee server to the
internet, example:

                :80---> Apache or IIS
            /                |
           / php req.        ---- php
          /                  ---- php  <--| 
                                  ...     |
  internet                                |
  clients                                 |
          \                               |P-J-B
           \jsp/servlet req.              |PROTOCOL
            \                             |
                                          |
           |--> :8080--> J2EE AS          |
           |                 |            |
           |                 ---- jsp     |
           |                 ---- servlet |
           |                      ...     |
           -------------------------------|

    Apache/IIS and J2EE ports are accessible from the
    internet. Apache/IIS and the J2EE AS share the same document root.

a104 115

* If you want to allow clients to access your back-end from a remote
  host, set java.servlet=On and set allow_http_tunnel to On in the
  web.xml.

* A standalone FastCGI server is currently only available on
  Unix/Linux. When Apache or IIS is not available, the bridge uses the
  CGI interface. This is more than 5 times slower than FastCGI.

------------------------------------
Oracle 10g AS
-------------

  The following description assumes that you have the Oracle
  Application Server Containers for J2EE 10g installed, for example in
  /opt/10gAS and that the $J2EE_HOME points to the /opt/10gAS/j2ee/home
  directory.

  If you want to download the Oracle 10g AS, please only download the
  pure java implementation called "oc4j_extended.zip". It has a download
  size of less than 30MB. The complete Oracle 10g AS has a download size
  of more than 1GB and includes Apache and other software you don't need
  during development.

  Install the PHP/Java Bridge and copy the JavaBridge.war to the
  $J2EE_HOME/applications directory.

  Edit $J2EE_HOME/config/application.xml so that it contains the
  following line:

    <web-module id="JavaBridge" path="../../home/applications/JavaBridge.war"/>

  Edit $J2EE_HOME/config/http-web-site.xml so that it contains the
  following line:

    <web-app application="default" name="JavaBridge" root="/JavaBridge"/>


  Start the Oracle 10g application server, for example with:

    cd $J2EE_HOME
    java -jar oc4j.jar

  Run the PHP/Java Bridge examples, for example:

    http://localhost:8888/JavaBridge/test.php

  or 

    http://localhost:8888/JavaBridge/sessionSharing.php

  If there are problems, please check if oracle has created the
  $J2EE_HOME/applications/JavaBridge directory and read
  $J2EE_HOME/applications/JavaBridge/WEB-INF/cgi/README.

  The log output appears in $J2EE_HOME/log/global-application.log.


  For production systems it is recommended to install the complete
  Oracle Application Server, which includes Apache, and to install
  PHP as a Apache module.

------------------------------------
IBM WebSphere AS
----------------

  The following description assumes that you have the IBM WebSphere
  6.x Application Server installed and that $WAS_HOME points to the
  /opt/IBM/WebSphere/AppServer directory.

  Install the PHP/Java Bridge. Start the application server, for
  example with the command:

    $WAS_HOME/bin/startServer.sh  server1

  Log into your application server, for example via: 

    http://localhost:9060/ibm/console/secure/logon.do

  Click on Applications -> Install New Application -> Browse
  and select JavaBridge.war. 

  Enter /JavaBridge as "Context root" and click Next.
  Click Next
  Click Continue
  Click Next
  Select JavaBridge.war and click Next
  Select JavaBridge.war and click Next
  Click Finish
  Click on "Save to Master Configuration"
  Click Save

  Click on Applications -> Enterprise Applications and select JavaBridge.war
  Click Start
  
  Run the PHP/Java Bridge examples, for example:

    http://localhost:9080/JavaBridge/test.php

  or 

    http://localhost:9080/JavaBridge/sessionSharing.php

  If there are problems, please check if websphere has created the
  $WAS_HOME/profiles/default/installedApps/[...]/JavaBridge_war.ear/
  directory and read
  $WAS_HOME/[...]/JavaBridge_war.ear/JavaBridge.war/WEB-INF/cgi/README.

  The log output appears in the
  $WAS_HOME/profiles/default/logs/server1/ directory.


  For production systems it is recommended to install the IBM
  HttpServer (a Apache variant) and to install PHP as a Apache
  module.
@


1.7
log
@Release-3-1-0
@
text
@d1 14
d45 13
a57 2
  extension directory and rename it to java.so (Unix) or
  php_java.dll (Windows). Check if the java .ini entry (usually
d105 1
a105 1
  export PHP_FCGI_MAX_REQUESTS="500"
@


1.6
log
@*** empty log message ***
@
text
@d15 3
d20 1
a20 1
-----------------------------------------------------------
@


1.5
log
@Release-3.0.8
@
text
@d16 1
a16 1
Installing and testing the frontend on Linux, Unix, Windows
d32 1
a32 1
  the servlet backend, e.g.:
d58 1
a58 1
  so that the backend can generate standard error pages.
d69 2
a70 2
Individual users can create .war files which use their own php
version. Please see the WEB-INF/cgi/README for details.
d72 2
a73 2
When Apache or IIS is not available, the administrator may start a PHP
standalone server for all users, for example:
d80 1
a80 2

When Apache or IIS is available, the administrator may set up the
d130 1
a130 1
* If you want to allow clients to access your backend from a remote
d134 4
@


1.4
log
@Release-3.0.8pre2
@
text
@d38 1
a38 1
    java.servlet = MultiUser
@


1.4.2.1
log
@Release-3-0-8-1
@
text
@d16 1
a16 1
Installing and testing the front-end on Linux, Unix, Windows
d32 1
a32 1
  the servlet back-end, e.g.:
d38 1
a38 1
    java.servlet = User
d58 1
a58 1
  so that the back-end can generate standard error pages.
d69 2
a70 2
* It is possible to create distributable web applications, please see
the WEB-INF/cgi/README and the FAQ for details.
d72 2
a73 2
* When Apache or IIS is not available, the administrator may start a
PHP standalone FastCGI server for all users, for example:
d80 2
a81 1
* When Apache or IIS is available, the administrator may set up the
d131 1
a131 1
* If you want to allow clients to access your back-end from a remote
a134 4
* A standalone FastCGI server is currently only available on
  Unix/Linux. When Apache or IIS is not available, the bridge uses the
  CGI interface. This is more than 5 times slower than FastCGI.

@


1.3
log
@Release-3.0.7
@
text
@d8 5
a12 2
  JavaBridge.war into your J2EE server, visit
  http://localhost:<port>/JavaBridge and click on test.php.
d30 3
a32 2
  /usr/local/lib/php.ini or c:\windows\php.ini) loads the java extension
  and connects php to the servlet backend, e.g.:
@


1.2
log
@Release-3.0.7
@
text
@d47 4
a236 1

@


1.1
log
@Release-3.0.7
@
text
@d126 108
@

