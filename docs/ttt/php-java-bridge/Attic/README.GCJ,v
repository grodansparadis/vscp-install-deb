head	1.4;
access;
symbols
	Release-5-5-4-1:1.3.0.14
	Root_Release-5-5-4-1:1.3
	Release-5-5-4:1.3.0.12
	Root_Release-5-5-4:1.3
	Release-5-5-3:1.3.0.10
	ROOT_Release-5-5-3:1.3
	Release-5-5-2:1.3.0.8
	Root_Release-5-5-2:1.3
	debian_version_5_5_1-1:1.3
	Release-5-5-1:1.3.0.4
	upstream_version_5_5_1:1.3
	ROOT_Release-5-5-1:1.3
	debian_version_5_5-1:1.3
	upstream_version_5_5:1.3
	ROOT_Release-5-5:1.3
	Release-5-5:1.3.0.6
	debian_version_5_4_4_2-3:1.3
	Release-5-4-4-2-1:1.3.0.2
	debian_version_5_4_4_2-2:1.3
	debian_version_5_4_4_2-1:1.3
	upstream_version_5_4_4_2:1.3
	debian_version_5_4_4_1-1:1.2
	upstream_version_5_4_4_1:1.2
	debian_version_5_4_4-1:1.2
	upstream_version_5_4_4:1.2
	Release-5-4-4:1.2.0.6
	Root_Release-5-4-4:1.2
	debian_version_5_4_3_2-1:1.2
	upstream_version_5_4_3_2:1.2
	Release_5-4-3-2:1.2.0.2
	Root_Release_5-4-3-2:1.2
	upstream_version_5_4_3_1:1.2
	debian_version_5_4_3_1-1:1.2
	Release-5-4-3:1.1.0.4
	Root_Release-5-4-3:1.1
	Root_Release-5-4-1:1.1
	Release-5-4-1:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2010.02.18.17.25.32;	author jost_boekemeier;	state dead;
branches;
next	1.3;

1.3
date	2009.04.25.12.25.22;	author jost_boekemeier;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.10.16.50.04;	author jost_boekemeier;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.21.16.24.34;	author jost_boekemeier;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Release-6-0-0
@
text
@  Using GNU Java
  --------------

  In case you don't want to ship a JVM or JRE with your product,
  you can use GNU gcc to compile the java part and your classes
  into native code. 
  In the directory php-java-bridge_p.x.y type:

   gcj --version  # must be gcj >= 4.1.2.

   phpize && ./configure && make && su -c "make install"

  This creates a native, dynamic linked back-end in the PHP
  extension directory.  

  You can distribute the contents of the php-java-bridge-x.y.z/modules
  directory. It should contain the files "java", "libnatcJavaBridge.so",
  "java.so" (autoconf/libtool creates other files, you can delete
  them). 

  The back end can be started as usual. Example for RedHat/Fedora
  Linux:

   export EXT_DIR="`php-config --extension-dir`"
   export LD_LIBRARY_PATH=$EXT_DIR
   $EXT_DIR/java LOCAL:/dev/shm/vmbridge.socket 3 ""

  The php.ini should contain the java.socketname option. Example:

   extension = java.so
   [java]
   java.socketname="/dev/shm/vmbridge.socket"
                
  Additional shared libraries can be copied into the PHP extension
  directory ($EXT_DIR), additional java libraries (.jar files) can be
  installed in the sub-directory lib/ of the PHP extension directory.

------------------------------------
  Mailing List
  ------------

  Please report bugs/problems to the mailing list:

    php-java-bridge-users@@lists.sourceforge.net

@


1.3
log
@Release-5.4.4.2
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d9 1
a9 1
   gcj --version  # must be gcj >= 4.2.
@


1.1
log
@Release-5-4-1
@
text
@d9 1
a9 1
   gcj --version  # must be gcj 3.3.3 or above (gcj 4.1 recommended).
@

