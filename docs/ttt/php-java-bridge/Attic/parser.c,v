head	1.21;
access;
symbols
	upstream_version_5_3_4:1.20
	debian_version_5_3_4-1:1.20
	ROOT_Release-5-3-4:1.20
	Release-5-3-4:1.20.0.46
	ROOT_Release-5-3-3:1.20
	Release-5-3-3:1.20.0.42
	debian_version_5_3_2_1_2-1:1.20
	upstream_version_5_3_2_1_2:1.20
	debian_version_5_3_2_1_1-1:1.20
	debian_version_5_3_2_1_1:1.20
	upstream_version_5_3_2_1_1:1.20
	Root_Release-5-3-2-1:1.20
	Release-5-3-2-1:1.20
	ROOT_RELEASE-5-3-2-1:1.20
	RELEASE-5-3-2-1:1.20.0.44
	Release-5-3-2:1.20.0.40
	Root_Release-5-3-2:1.20
	Root_Release-5-3-1:1.20
	Release-5-3-1:1.20.0.38
	Release-5-2-3-1:1.20.0.36
	Root_Release-5-2-3-1:1.20
	Release-5-2-2-4:1.20.0.34
	Root_Release-5-2-2-4:1.20
	Release-5-2-2-1:1.20.0.32
	Root_Release-5-2-2-1:1.20
	upstream_version_5_2_2:1.20
	debian_version_5_2_2-1:1.20
	Release-5-2-2:1.20.0.30
	ROOT_Release-5-2-2:1.20
	ROOT_Release-5-2-1:1.20
	Release-5-2-1:1.20.0.28
	Release-5-2-0:1.20.0.26
	ROOT_Release-5-2-0:1.20
	ROOT_Release-5-1-2:1.20
	Release-5-1-2:1.20.0.24
	Version-5-1-1:1.20.0.22
	ROOT_Version-5-1-1:1.20
	debian_version_5_1_0-1:1.20
	upstream_version_5_1_0:1.20
	ROOT_Release-5-1-0:1.20
	Release-5-1-0:1.20.0.20
	ROOT_Release-5-0-0:1.20
	Release-5-0-0:1.20.0.18
	Release-4-3-3:1.20.0.16
	ROOT_Release-4-3-3:1.20
	upstream_version_4_3_2:1.20
	debian_version_4_3_2-1:1.20
	ROOT_Release-4-3-2:1.20
	Release-4-3-2:1.20.0.14
	Release-4-3-1:1.20.0.12
	ROOT_Release-4-3-1:1.20
	debian_version_4_3_0-1:1.20
	upstream_version_4_3_0:1.20
	ROOT_Release-4-3-0:1.20
	Release-4-3-0:1.20.0.10
	debian_version_3_2_1b-2:1.19
	debian_version_4_2_2-1:1.20
	upstream_version_4_2_2:1.20
	debian_version_3_2_1b-1:1.19
	upstream_version_3_2_1b:1.19
	Release-4-1-2:1.20.0.8
	Release-4-0-8:1.20.0.6
	debian_version_4_0_8a-1:1.20
	upstream_version_4_0_8a:1.20
	jostb-debian-ubuntu-patch:1.20.0.4
	debian_version_4_0_8-1:1.20
	upstream_version_4_0_8:1.20
	debian_version_4_0_7-1:1.20
	upstream_version_4_0_7:1.20
	debian_version_4_0_6-1:1.20
	upstream_version_4_0_6:1.20
	debian_version_4_0_2-1:1.20
	upstream_version_4_0_2:1.20
	Release-4-0-2_Root:1.20
	Release-4-0-2:1.20.0.2
	upstream_version_4_0_1:1.20
	debian_version_4_0_1-2:1.20
	Release-3-2-1:1.19.0.4
	Release-3-1-8:1.19.0.2
	Release-3-0-8_root:1.15
	Release-3-0-8_Root:1.15
	Release-3-0-8:1.15.0.2
	Release-2-0-8:1.14.0.4
	Release-2-0-7_Root:1.12
	Release-2-0-7:1.12.0.2
	Release-2-0-6-branch:1.7.0.2;
locks; strict;
comment	@ * @;


1.21
date	2008.12.11.21.07.10;	author jost_boekemeier;	state dead;
branches;
next	1.20;

1.20
date	2007.03.09.20.28.07;	author andremachado;	state Exp;
branches;
next	1.19;

1.19
date	2006.08.21.17.41.52;	author jost2345;	state Exp;
branches;
next	1.18;

1.18
date	2006.08.08.17.20.45;	author jost2345;	state Exp;
branches;
next	1.17;

1.17
date	2006.06.26.18.43.54;	author jost2345;	state Exp;
branches;
next	1.16;

1.16
date	2006.06.19.20.37.14;	author jost2345;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.18.18.17.48;	author jost2345;	state Exp;
branches;
next	1.14;

1.14
date	2005.09.15.19.17.38;	author jost2345;	state Exp;
branches;
next	1.13;

1.13
date	2005.08.23.18.20.56;	author jost2345;	state Exp;
branches;
next	1.12;

1.12
date	2005.07.08.17.57.23;	author jost2345;	state Exp;
branches;
next	1.11;

1.11
date	2005.06.21.20.17.30;	author jost2345;	state Exp;
branches;
next	1.10;

1.10
date	2005.06.19.20.45.40;	author jost2345;	state Exp;
branches;
next	1.9;

1.9
date	2005.06.16.16.10.41;	author jost2345;	state Exp;
branches;
next	1.8;

1.8
date	2005.06.15.15.18.02;	author jost2345;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.27.15.45.45;	author jost2345;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.09.17.24.26;	author jost2345;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.05.14.55.38;	author jost2345;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.19.13.29.25;	author jost2345;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.17.21.57.22;	author jost2345;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.15.19.10.29;	author jost2345;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.13.21.43.28;	author jost2345;	state Exp;
branches;
next	;


desc
@@


1.21
log
@java autostart removed
@
text
@/*-*- mode: C; tab-width:4 -*-*/

/* parser.c -- a fast parser for the PHP/Java Bridge XML protocol.

  Copyright (C) 2003-2007 Jost Boekemeier

  This file is part of the PHP/Java Bridge.

  The PHP/Java Bridge ("the library") is free software; you can
  redistribute it and/or modify it under the terms of the GNU General
  Public License as published by the Free Software Foundation; either
  version 2, or (at your option) any later version.

  The library is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with the PHP/Java Bridge; see the file COPYING.  If not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
  02111-1307 USA.

  Linking this file statically or dynamically with other modules is
  making a combined work based on this library.  Thus, the terms and
  conditions of the GNU General Public License cover the whole
  combination.

  As a special exception, the copyright holders of this library give you
  permission to link this library with independent modules to produce an
  executable, regardless of the license terms of these independent
  modules, and to copy and distribute the resulting executable under
  terms of your choice, provided that you also meet, for each linked
  independent module, the terms and conditions of the license of that
  module.  An independent module is a module which is not derived from
  or based on this library.  If you modify this library, you may extend
  this exception to your version of the library, but you are not
  obligated to do so.  If you do not wish to do so, delete this
  exception statement from your version. */

#include "php_java.h"

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>

#include "parser.h"

#define APPEND(c) { \
  if(i>=(*env)->len-1) { \
    unsigned char* s1=realloc(s, (*env)->len*=2); \
    if(!s1) exit(9); else s=(*env)->s=s1; \
  } \
  s[i++]=c; \
}
#define PUSH(t) { \
  parser_string_t *str = tag[t].strings; \
  short n = tag[t].n; \
  assert((t!=0) || (t==0 && !tag[0].n)); \
  s[i]=0; \
  str[n].string=&((*env)->s); \
  str[n].off=i0; \
  str[n].length=i-i0; \
  ++tag[t].n; \
  APPEND(0); \
  i0=i; \
}
#define RESET() { \
  type=VOJD;\
  level=0; \
  eor=0; \
  blen=0; \
  in_dquote=0; \
  i=0; \
  i0=0; \
  (*env)->c=0; (*env)->pos=0; \
}
#define CALL_BEGIN() { \
  if(cb->begin) (*cb->begin)(tag, cb); \
}
#define CALL_END() { \
  if(cb->end) (*cb->end)(tag[0].strings, cb); \
}

short EXT_GLOBAL (parse) (proxyenv *env, parser_cb_t *cb) {
  short rc;
  parser_string_t v1[1], v2[MAX_ARGS], v3[MAX_ARGS];
  parser_tag_t tag[] = {{0, v1}, {0, v2}, {0, v3}};
  unsigned char ch;
  // VOJD is VOID for f... windows (VOID is in winsock2.h)
  enum {BEGIN, KEY, VAL, ENTITY, BLOB, VOJD, END} type = VOJD;
  short level=0, in_dquote=0, eor=0, blen=0;
  register ssize_t pos=(*env)->pos, c=(*env)->c; size_t i=0, i0=0, e;
  register unsigned char *s=(*env)->s;
  assert(s); if(!s) exit(9);

  while(!eor) {
    if(c>=pos) { 
    res: 
      errno=0;
      pos=(*env)->f_recv(env, (*env)->recv_buf, sizeof (*env)->recv_buf);
      if(!pos && errno==EINTR) goto res; // Solaris, see INN FAQ
      if(pos<=0) break;
      c=0;
    }
    switch(ch=(*env)->recv_buf[c]) 
      {/* --- This block must be compilable with an ansi C compiler or javac  --- */
      case '<': if(in_dquote) {APPEND(ch); break;}
	level++;
	type=BEGIN;
	break;
      case '\t': case '\f': case '\n': case '\r': case ' ': if(in_dquote) {APPEND(ch); break;}
	if(type==BEGIN) {
	  PUSH(type); 
	  type = KEY; 
	}
	break;
      case '=': if(in_dquote) {APPEND(ch); break;}
	PUSH(type);
	type=VAL;
	break;
      case '/': if(in_dquote) {APPEND(ch); break;}
	if(type==BEGIN) { type=END; level--; }
	level--;
	break;
      case '>': if(in_dquote) {APPEND(ch); break;}
	if(type==END){
	  PUSH(BEGIN);
	  CALL_END();
	} else {
	  if(type==VAL||type==BEGIN) PUSH(type);
	  CALL_BEGIN();
	}
	tag[0].n=tag[1].n=tag[2].n=0; i0=i=0;      		/* RESET */
	type=VOJD;
	if(level==0) eor=1; 
	break;
      case ';':
	if(type==ENTITY) {
	  switch (s[e+1]) {
	  case 'l': s[e]='<'; i=e+1; break; /* lt */
	  case 'g': s[e]='>'; i=e+1; break; /* gt */
	  case 'a': s[e]= (s[e+2]=='m'?'&':'\''); i=e+1; break; /* amp, apos */
	  case 'q': s[e]='"'; i=e+1; break; /* quot */
	  default: APPEND(ch);
	  }
	  type=VAL; //& escapes may only appear in values
	} else {
	  APPEND(ch);
	}
	break;
      case '&': 
	type = ENTITY;
	e=i;
	APPEND(ch);
	break;
      case '"':
	in_dquote = !in_dquote;
	if(!in_dquote && type==VAL) {
	  PUSH(type);
	  type = KEY;
	}
	break;
      default:
	APPEND(ch);
      }
    c++;
  }
  rc = eor;
  RESET();
  return rc;
}

short EXT_GLOBAL (parse_header) (proxyenv *env, parser_cb_t *cb) {
  short rc;
  parser_string_t v1[1], v2[1], v3[1];
  parser_tag_t tag[] = {{0, v1}, {0, v2}, {0, v3}};
  unsigned char ch;
  // VOJD is VOID for f... windows (VOID is in winsock2.h)
  enum {BEGIN, KEY, VAL, VOJD, END} type = VOJD;
  short level=0, in_dquote=0, eor=0, blen=0;
  register ssize_t pos=0, c=0; size_t i=0, i0=0;
  register unsigned char *s=(*env)->s;
  assert(s); if(!s) exit(9);

  while(!eor) {
    if(c>=pos) { 
    res: 
      errno=0;
      pos=(*env)->f_recv(env, (*env)->recv_buf, sizeof (*env)->recv_buf);
      if(!pos && errno==EINTR) goto res; // Solaris, see INN FAQ

      c=0; 
      if(pos<=0) break;
    }
    switch(ch=(*env)->recv_buf[c]) 
      {
      case '\r': case '\f': case ' ': case '\t': break; /* skip */
      case '\n':
	if(type==BEGIN) eor=1;
	else if(type==KEY || type==VAL) {
	  PUSH(type); 
	  CALL_BEGIN();
	}
	tag[0].n=tag[1].n=tag[2].n=0; i0=i=0;      		/* RESET */
	in_dquote=0;
	type = BEGIN; 
	break;
      case ':': if(in_dquote) {APPEND(ch); break;}
	in_dquote=1;
	PUSH(type);
	type=KEY;
	break;
      case '=':
	if(type==KEY) { 
	  PUSH(type);
	  type=VAL;
	} else {
	  APPEND(ch);
	}
	break;
      default:
	APPEND(ch);
      }
    c++;
  }
  rc = eor;
  RESET();
  (*env)->c=c; (*env)->pos=pos;
  return rc;
}

#if 0
void begin(parser_tag_t tag[3], struct parser_cb *cb){
  int i;
  for(i=0; i<tag[2].n; i++)
    printf("<begin: %s, %s (%d, %d)\n", tag[1].strings[i].string, tag[2].strings[i].string, tag[1].strings[i].length, tag[2].strings[i].length);
}
void end(parser_string_t str[1], struct parser_cb *cb){
  printf("<end> %s (%d)\n", str[0].string, str[0].length);
}

main() {
  parser_cb_t cb={begin, end, 0};
  FILE *f=fopen("xmltest.xml", "r");
  parse(f, &cb);
  fclose(f);
}

#endif
@


1.20
log
@Files update 3.2.2 to 4.0.1. Extracted from the src.tar.gz downloaded from sf.net, uploaded by Jost Boekemeier. Update to repository by Andre Felipe Machado.
@
text
@@


1.19
log
@Release-3-1-8devel1
@
text
@d5 1
a5 1
  Copyright (C) 2006 Jost Boekemeier
@


1.18
log
@Release-3-1-7
@
text
@d3 38
@


1.17
log
@Release-3-1-2
@
text
@d1 4
a9 1
#include "php_java.h"
@


1.16
log
@Release-3-1-0
@
text
@d46 1
d55 1
a55 1
  assert(s); if(!s) return 1;
d64 1
a64 1
      c=0; 
d129 1
d131 1
a131 1
  return 0;
d135 1
d144 1
a144 1
  assert(s); if(!s) return 1;
d187 1
d190 1
a190 1
  return 0;
@


1.15
log
@Release-3.0.3
@
text
@d57 1
a57 1
    if(c==pos) { 
d144 1
a144 1
    if(c==pos) { 
d150 1
a150 1

a151 1
      c=0; 
@


1.14
log
@Version 2.0.8RC4 fixes PR1291191, PR 1291175 and PR1286643
@
text
@d60 1
a60 1
      pos=recv((*env)->peer, (*env)->recv_buf, sizeof (*env)->recv_buf, 0);
d147 1
a147 1
      pos=recv((*env)->peer, (*env)->recv_buf, sizeof (*env)->recv_buf, 0);
@


1.13
log
@Release-2.0.8(pre4)
@
text
@d90 1
a90 1
	  if(type==VAL) PUSH(type);
@


1.12
log
@Release-2.0.7
@
text
@a61 1

d150 1
@


1.11
log
@Release-2.0.7pre
@
text
@a2 1
#include <assert.h>
@


1.10
log
@Release-2.0.7-pre
@
text
@d141 1
a141 1
  register ssize_t pos=0, c=0; size_t i=0, i0=0, e;
@


1.9
log
@Tomcat 5
@
text
@d46 1
a46 1
short parse(proxyenv *env, parser_cb_t *cb) {
d134 1
a134 1
short parse_header(proxyenv *env, parser_cb_t *cb) {
d160 1
a160 1
	else if(type==VAL) {
@


1.8
log
@Tomcat 5 support / multicasts removed
@
text
@d40 1
a40 1
  (*cb->begin)(tag, cb); \
d177 2
@


1.7
log
@mono
@
text
@a9 3
#define RECV_SIZE 8192 // initial size of the receive buffer
#define MAX_ARGS 100   // max # of method arguments

d13 1
a13 1
    if(!s1) return 1; else s=(*env)->s=s1; \
a30 1
  mask=~(unsigned char)0; \
d37 1
d49 1
a49 2
  unsigned char buf[RECV_SIZE];
  unsigned char ch, mask=~(unsigned char)0;
d53 2
a54 2
  ssize_t pos=0, c=0; size_t i=0, i0=0, e;
  unsigned char *s=(*env)->s;
d61 1
a61 1
      pos=recv((*env)->peer, buf, RECV_SIZE, 0);
d67 1
a67 1
    switch((ch=buf[c])&mask) 
d134 55
@


1.6
log
@Release-2.0.2
@
text
@d55 1
a55 1
  enum {BEGIN, KEY, VAL, ENTITY, BLOB, VOJD} type = VOJD;
d88 1
a88 1
	if(type==BEGIN) level--;
d92 2
a93 2
	if(type==BEGIN){
	  PUSH(type);
@


1.5
log
@Release 2.0
@
text
@a102 15
      case '\0':
	if(mask!=0) {type=BLOB; mask=0; break;}
				
	if(0!=blen) {
	  APPEND(ch);
	  --blen;
	} else {
	  if(type==VOJD) {
	    mask=~0;
	  } else {
	    type=VOJD;
	    blen=ch;
	  }
	}
	break;
@


1.4
log
@Protocol update
@
text
@d5 1
d7 1
d33 1
a33 1
  type=VOID;\
d54 2
a55 1
  enum {BEGIN, KEY, VAL, ENTITY, BLOB, VOID} type = VOID;
d57 1
a57 1
  size_t pos=0, c=0, i=0, i0=0, e;
d63 6
a68 2
      pos=read((*env)->peer, buf, RECV_SIZE);
      if(!pos) break;
d100 1
a100 1
	type=VOID;
d104 1
a104 2
	if(mask==0) {type=BLOB; mask=0; break;}
	if(type==VOID) mask=~(unsigned char)0;
d108 8
a115 4
	  if(0==--blen) type=VOID;
	}
	else {
	  blen=ch;
@


1.3
log
@Protocol update
@
text
@d21 1
d66 1
a66 1
      case '<':
d115 1
d118 2
@


1.2
log
@Replaced JNI with XML protocol
@
text
@d8 2
a9 2
#define BUF_SIZE 5//FIXME: use 8K
#define MAX_ARGS 10
d49 1
a49 1
  unsigned char buf[BUF_SIZE];
d59 1
a59 1
      pos=read((*env)->peer, buf, BUF_SIZE);
d64 34
a97 34
{/* --- This block must be compilable with an ansi C compiler  --- */
		case '<':
		    level++;
		    type=BEGIN;
		    break;
		case '\t': case '\f': case '\n': case '\r': case ' ': if(in_dquote) {APPEND(ch); break;}
		    if(type==BEGIN) {
			PUSH(type); 
			type = KEY; 
		    }
		    break;
		case '=': if(in_dquote) {APPEND(ch); break;}
		    PUSH(type);
		    type=VAL;
		    break;
		case '/': if(in_dquote) {APPEND(ch); break;}
		    if(type==BEGIN) level--;
		    level--;
		    break;
		case '>': if(in_dquote) {APPEND(ch); break;}
		    if(type==BEGIN){
			PUSH(type);
			CALL_END();
		    } else {
			if(type==VAL) PUSH(type);
			CALL_BEGIN();
		    }
		    tag[0].n=tag[1].n=tag[2].n=0; i0=i=0;      		/* RESET */
		    type=VOID;
		    if(level==0) eor=1; 
		    break;
		case '\0':
		    if(mask==0) {type=BLOB; mask=0; break;}
		    if(type==VOID) mask=~(unsigned char)0;
d99 34
a132 34
		    if(0!=blen) {
			APPEND(ch);
			if(0==--blen) type=VOID;
		    }
		    else {
			blen=ch;
		    }
		    break;
		case ';':
		    if(type==ENTITY) {
			switch (s[e+1]) {
			case 'l': s[e]='<'; i=e+1; break; /* lt */
			case 'g': s[e]='>'; i=e+1; break; /* gt */
			case 'a': s[e]= (s[e+2]=='m'?'&':'\''); i=e+1; break; /* amp, apos */
			case 'q': s[e]='"'; i=e+1; break; /* quot */
			}
			type=VAL; //& escapes may only appear in values
		    }
		    break;
		case '&': 
		    type = ENTITY;
		    e=i;
		    APPEND(ch);
		    break;
		case '"':
		    in_dquote = !in_dquote;
		    if(!in_dquote && type==VAL) {
			PUSH(type);
			type = KEY;
		    }
		    break;
		default:
		    APPEND(ch);
		}
@


1.1
log
@Replaced JNI with XML protocol
@
text
@d3 2
a7 2
#define SFILE FILE
#define sread fread
d10 1
d12 3
a14 3
  if(i>=len-1) { \
    unsigned char* s1=realloc(s, len*=2); \
    if(!s1) {free(s); return 1;} else s=s1; \
d20 1
a20 1
  short *n = &tag[t].n; \
d22 4
a25 3
  str[*n].string=s+i0; \
  str[*n].length=i-i0; \
  ++*n; \
d29 18
a46 1
static short parse(SFILE*peer, parser_cb_t *cb) {
d50 1
a50 2
  size_t len=2;//FIXME: use 255
  unsigned char *s=malloc(len), ch, mask=0;
d52 1
a52 1
  short level=0, in_dquote=0, eof=0, blen=0;
d54 2
a55 1
  if(!s) return 1;
d57 1
a57 1
  while(!eof) {
d59 2
a60 3
      if(feof(peer)) break;

      pos=sread(buf, 1, BUF_SIZE, peer); 
a61 72

      if(ferror(peer)) 
	return 2;
    }
    switch((ch=buf[c])&mask) {
    case '<':
      level++;
      type=BEGIN;
      break;
    case '\t': case '\f': case '\n': case '\r': case ' ': if(in_dquote) {APPEND(ch); break;}
      if(type==BEGIN) {
	PUSH(type); 
	type = KEY; 
      }
      break;
    case '=': if(in_dquote) {APPEND(ch); break;}
      PUSH(type);
      type=VAL;
      break;
    case '/': if(in_dquote) {APPEND(ch); break;}
      if(type==BEGIN) level--;
      level--;
      break;
    case '>': if(in_dquote) {APPEND(ch); break;}
      if(type==BEGIN){
	PUSH(type);
	(*cb->end)(tag[0].strings, cb);
      } else {
	if(type==VAL) PUSH(type);
	(*cb->begin)(tag, cb);
      }
      tag[0].n=tag[1].n=tag[2].n=i0=i=0;      		/* RESET */
      type=VOID;
      if(level==0) eof=1;
      break;
    case '\0':
      if(mask) {type=BLOB; mask=0; break;}
      if(type==VOID) mask=~(unsigned char)0;

      if(blen) {
	APPEND(ch);
	if(!--blen) type=VOID;
      }
      else {
	blen=ch;
      }
      break;
    case ';':
      if(type==ENTITY) {
	switch (s[e]) {
	case 'l': s[e]='<'; break; /* lt */
	case 'g': s[e]='>'; break; /* gt */
	case 'a': s[e]=s[e+1]=='m'?'&':'\''; break; /* amp, apos */
	case 'q': s[e]='"'; break; /* quot */
	}
	i=e+1;
      }
      break;
    case '&': 
      type = ENTITY;
      e=i;
      APPEND(ch);
      break;
    case '"':
      in_dquote = !in_dquote;
      if(!in_dquote && type==VAL) {
	PUSH(type);
	type = KEY;
      }
      break;
    default:
      APPEND(ch);
d63 70
d135 1
a135 1
  free(s);
d138 1
@

