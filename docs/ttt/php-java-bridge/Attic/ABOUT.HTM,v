head	1.66;
access;
symbols
	Release-4-3-3:1.65.0.18
	ROOT_Release-4-3-3:1.65
	upstream_version_4_3_2:1.65
	debian_version_4_3_2-1:1.65
	ROOT_Release-4-3-2:1.65
	Release-4-3-2:1.65.0.16
	Release-4-3-1:1.65.0.14
	ROOT_Release-4-3-1:1.65
	debian_version_4_3_0-1:1.65
	upstream_version_4_3_0:1.65
	ROOT_Release-4-3-0:1.65
	Release-4-3-0:1.65.0.12
	debian_version_3_2_1b-2:1.65
	debian_version_4_2_2-1:1.65
	upstream_version_4_2_2:1.65
	debian_version_3_2_1b-1:1.65
	upstream_version_3_2_1b:1.65
	Release-4-1-2:1.65.0.10
	Release-4-0-8:1.65.0.8
	debian_version_4_0_8a-1:1.65
	upstream_version_4_0_8a:1.65
	jostb-debian-ubuntu-patch:1.65.0.6
	debian_version_4_0_8-1:1.65
	upstream_version_4_0_8:1.65
	debian_version_4_0_7-1:1.65
	upstream_version_4_0_7:1.65
	debian_version_4_0_6-1:1.65
	upstream_version_4_0_6:1.65
	debian_version_4_0_2-1:1.65
	upstream_version_4_0_2:1.65
	Release-4-0-2_Root:1.65
	Release-4-0-2:1.65.0.4
	upstream_version_4_0_1:1.65
	debian_version_4_0_1-2:1.65
	Release-3-2-1:1.65.0.2
	Release-3-1-8:1.60.0.2
	Release-3-0-8_root:1.40.2.1
	Release-3-0-8_Root:1.43
	Release-3-0-8:1.40.0.2
	Release-2-0-8:1.19.0.2
	Release-2-0-7_Root:1.14
	Release-2-0-7:1.14.0.2
	Release-2-0-6-branch:1.5.0.2;
locks; strict;
comment	@# @;


1.66
date	2008.01.06.21.07.55;	author jost_boekemeier;	state dead;
branches;
next	1.65;

1.65
date	2006.12.17.13.12.27;	author jost2345;	state Exp;
branches;
next	1.64;

1.64
date	2006.12.16.16.21.53;	author jost2345;	state Exp;
branches;
next	1.63;

1.63
date	2006.12.09.09.35.01;	author jost2345;	state Exp;
branches;
next	1.62;

1.62
date	2006.11.25.17.08.37;	author jost2345;	state Exp;
branches;
next	1.61;

1.61
date	2006.11.25.17.00.31;	author jost2345;	state Exp;
branches;
next	1.60;

1.60
date	2006.09.10.17.31.11;	author jost2345;	state Exp;
branches;
next	1.59;

1.59
date	2006.09.05.20.40.32;	author jost2345;	state Exp;
branches;
next	1.58;

1.58
date	2006.08.28.18.05.11;	author jost2345;	state Exp;
branches;
next	1.57;

1.57
date	2006.08.27.14.40.10;	author jost2345;	state Exp;
branches;
next	1.56;

1.56
date	2006.08.19.12.34.00;	author jost2345;	state Exp;
branches;
next	1.55;

1.55
date	2006.08.13.21.48.35;	author jost2345;	state Exp;
branches;
next	1.54;

1.54
date	2006.08.08.17.20.45;	author jost2345;	state Exp;
branches;
next	1.53;

1.53
date	2006.07.27.16.16.29;	author jost2345;	state Exp;
branches;
next	1.52;

1.52
date	2006.07.23.20.32.47;	author jost2345;	state Exp;
branches;
next	1.51;

1.51
date	2006.07.19.15.25.34;	author jost2345;	state Exp;
branches;
next	1.50;

1.50
date	2006.07.16.20.29.25;	author jost2345;	state Exp;
branches;
next	1.49;

1.49
date	2006.06.26.18.43.53;	author jost2345;	state Exp;
branches;
next	1.48;

1.48
date	2006.06.21.19.53.09;	author jost2345;	state Exp;
branches;
next	1.47;

1.47
date	2006.06.19.20.37.13;	author jost2345;	state Exp;
branches;
next	1.46;

1.46
date	2006.05.15.19.03.29;	author jost2345;	state Exp;
branches;
next	1.45;

1.45
date	2006.05.13.16.13.40;	author jost2345;	state Exp;
branches;
next	1.44;

1.44
date	2006.05.04.17.48.13;	author jost2345;	state Exp;
branches;
next	1.43;

1.43
date	2006.04.20.17.16.08;	author jost2345;	state Exp;
branches;
next	1.42;

1.42
date	2006.04.13.16.09.10;	author jost2345;	state Exp;
branches;
next	1.41;

1.41
date	2006.04.12.17.46.45;	author jost2345;	state Exp;
branches;
next	1.40;

1.40
date	2006.03.21.18.17.17;	author jost2345;	state Exp;
branches
	1.40.2.1;
next	1.39;

1.39
date	2006.03.19.14.42.44;	author jost2345;	state Exp;
branches;
next	1.38;

1.38
date	2006.03.18.18.56.39;	author jost2345;	state Exp;
branches;
next	1.37;

1.37
date	2006.03.16.20.27.00;	author jost2345;	state Exp;
branches;
next	1.36;

1.36
date	2006.03.12.16.44.39;	author jost2345;	state Exp;
branches;
next	1.35;

1.35
date	2006.03.11.17.57.47;	author jost2345;	state Exp;
branches;
next	1.34;

1.34
date	2006.03.10.18.41.37;	author jost2345;	state Exp;
branches;
next	1.33;

1.33
date	2006.03.07.18.59.27;	author jost2345;	state Exp;
branches;
next	1.32;

1.32
date	2006.02.13.18.34.15;	author jost2345;	state Exp;
branches;
next	1.31;

1.31
date	2006.02.05.18.47.00;	author jost2345;	state Exp;
branches;
next	1.30;

1.30
date	2006.01.30.20.15.43;	author jost2345;	state Exp;
branches;
next	1.29;

1.29
date	2006.01.30.19.39.53;	author jost2345;	state Exp;
branches;
next	1.28;

1.28
date	2006.01.21.15.09.36;	author jost2345;	state Exp;
branches;
next	1.27;

1.27
date	2006.01.16.23.17.51;	author jost2345;	state Exp;
branches;
next	1.26;

1.26
date	2006.01.16.22.53.03;	author jost2345;	state Exp;
branches;
next	1.25;

1.25
date	2006.01.15.21.22.55;	author jost2345;	state Exp;
branches;
next	1.24;

1.24
date	2005.12.28.22.44.31;	author jost2345;	state Exp;
branches;
next	1.23;

1.23
date	2005.12.08.19.03.28;	author jost2345;	state Exp;
branches;
next	1.22;

1.22
date	2005.11.23.19.41.52;	author jost2345;	state Exp;
branches;
next	1.21;

1.21
date	2005.11.23.19.09.42;	author jost2345;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.05.13.13.06;	author jost2345;	state Exp;
branches;
next	1.19;

1.19
date	2005.09.18.12.21.50;	author jost2345;	state Exp;
branches;
next	1.18;

1.18
date	2005.09.01.21.04.23;	author jost2345;	state Exp;
branches;
next	1.17;

1.17
date	2005.08.23.19.10.31;	author jost2345;	state Exp;
branches;
next	1.16;

1.16
date	2005.08.18.18.32.45;	author jost2345;	state Exp;
branches;
next	1.15;

1.15
date	2005.07.17.13.46.17;	author jost2345;	state Exp;
branches;
next	1.14;

1.14
date	2005.07.08.17.57.21;	author jost2345;	state Exp;
branches;
next	1.13;

1.13
date	2005.07.04.17.30.00;	author jost2345;	state Exp;
branches;
next	1.12;

1.12
date	2005.07.03.17.47.31;	author jost2345;	state Exp;
branches;
next	1.11;

1.11
date	2005.07.03.17.44.51;	author jost2345;	state Exp;
branches;
next	1.10;

1.10
date	2005.07.03.17.42.25;	author jost2345;	state Exp;
branches;
next	1.9;

1.9
date	2005.06.19.20.45.39;	author jost2345;	state Exp;
branches;
next	1.8;

1.8
date	2005.05.21.18.29.02;	author jost2345;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.21.18.26.37;	author jost2345;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.21.17.28.55;	author jost2345;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.12.19.32.02;	author jost2345;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.09.21.12.04;	author jost2345;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.07.12.52.05;	author jost2345;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.04.22.13.07;	author jost2345;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.30.14.47.02;	author jost2345;	state Exp;
branches;
next	;

1.40.2.1
date	2006.04.23.19.09.07;	author jost2345;	state Exp;
branches;
next	1.40.2.2;

1.40.2.2
date	2006.05.05.18.29.54;	author jost2345;	state Exp;
branches;
next	1.40.2.3;

1.40.2.3
date	2006.05.13.16.09.57;	author jost2345;	state Exp;
branches;
next	;


desc
@@


1.66
log
@Release-5-0-0
@
text
@
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html">
	<TITLE>Integrate PHP & Java - PHP / Java Bridge</TITLE>
</HEAD>
<p>

</p> <BODY LANG="en-US" DIR="LTR"> <H1>What is the PHP/Java
Bridge?</H1> <P><FONT > The PHP/Java Bridge
  is an optimized, XML-based network protocol, which can be used to connect a native script engine with a Java or <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm">ECMA 335</a> virtual machine. It is more than 50 times faster than local RPC via SOAP, requires less resources on the web-server side, and it is faster and more reliable than a communication via the Java Native Interface.</p>
<p>

The <a href="documentation/PHP-API/html/java_8c.html">php java
extension</a> and the <a href="java/README">pure PHP</a> PHP/Java
Bridge implementation</a> use this protocol to connect running PHP
instances with already running Java or .NET <a
href="server/documentation/API/overview-summary.html">back ends</a>. The
communication works in both directions, the <A
HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR
223</A> interface can be used to connect to a running PHP server
(Apache/IIS, FastCGI, ...) so that Java components can call PHP
instances and PHP scripts can invoke CLR (e.g. VB.NET, C#, COM) or
Java (e.g. Java, KAWA, JRuby) based applications or transfer control
back to the environment where the request came from. The bridge can be
set up to automatically start the PHP front-end or the Java/.NET
back end, if needed.

<p><FONT > Each request-handling PHP process of a multi-process HTTP
server communicates with a corresponding thread spawned by the VM.
Requests from more than one HTTP server may either be routed to an
application server running the PHP/Java Bridge back end or each HTTP
server may own a PHP/Java Bridge back end and communicate with a J2EE
Java application server by exchanging Java value objects; the
necessary client-stub classes (e.g.: SOAP stubs or EJB client .jar
files) can be loaded at run-time.  </FONT></P>

<P><FONT > ECMA 335 based classes can be accessed if at least one
back end is running inside a ECMA compliant VM, for example Novell's
MONO or Microsoft's .NET.  Special features such as varargs,
reflection or assembly loading are also supported.  </FONT></P>

<P><FONT > When the back end is running in a J2EE environment, session
sharing between PHP and JSP is always possible. Clustering and load
balancing is available <a
href="http://www.onjava.com/pub/a/onjava/2004/03/31/clustering.html">if
the J2EE environment supports these features.</a> </FONT></P>

<P><FONT >The PHP/Java Bridge does <em>not</em> use the Java
Native Interface ("JNI"). PHP instances are allocated from the HTTP
(Apache/IIS) pool, instances of Java/J2EE components are allocated
from the back end. The allocated instances communicate using a
"continuation passing style", see <a
href="documentation/PHP-API/html/java_8c.html#doc32"><code>java_closure()</code></a> and the <a href="server/documentation/API/php/java/bridge/Invocable.html">invocable interface</a>. In
case a PHP instance crashes, it will not take down the Java
application server or servlet engine.  </FONT></P>

<H1>Overview</H1>

<P><FONT > The PHP/Java Bridge download contains a <a
href="java/README">pure PHP implementation</a> or a C based <a
href="INSTALL">extension module</a> for PHP versions >= 4.3.2. 

<p>

On Linux the bridge doesn't need Java installed; the bridge and Java
libraries can be compiled directly into PHP. Popular Java libraries
such as <code>lucene.jar</code> or <code>itext.jar</code> can be <a
href="README.GNU_JAVA">interpreted by the bridge code</a> without
using a Java SDK or Java JRE.  </p>

<p>
On Linux, Windows and Unix three RPC back ends are available: a "standalone back end" called <code>JavaBridge.jar</code>, a J2EE back end and Servlet SAPI called <code>JavaBridge.war</code> and a Mono/.NET back end called <code>MonoBridge.exe</code>.
</p>
<p> 
To access pure Java (or .NET) libraries from PHP the following is
necessary:
<ol>
<li>
 A VM must be running somewhere on the local network.
<li> 
The JavaBridge.jar (or the JavaBridge.war or MonoBridge.exe variant) must
be accessible by this VM.  
</ol> </p> 
<p>
 The Java/.NET libraries can be called from any PHP implementation
by opening a socket connection to the VM and by sending
PHP/Java Bridge protocol requests:
</font></font></p><blockquote>
<code>
<font><font>&lt;?php<br>
class Protocol {<br>
&nbsp;&nbsp;const Pc='&lt;C v="%s" p="I"&gt;', PC='&lt;/C&gt;';<br>
&nbsp;&nbsp;const Pi='&lt;I v="%d" m="%s" p="I"&gt;', PI='&lt;/I&gt;';<br>
&nbsp;&nbsp;const Ps='&lt;S v="%s"/&gt;', Pl='&lt;L v="%d" p="%s"/&gt;', Po='&lt;O v="%d"/&gt;';<br>
&nbsp;&nbsp;var $c;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;function __construct() { $this-&gt;c=fsockopen("127.0.0.1",9267); fwrite($this-&gt;c, "\177@@"); }<br>
<br>
&nbsp;&nbsp;function createBegin($s) { fwrite($this-&gt;c, sprintf(self::Pc, $s)); }<br>
&nbsp;&nbsp;function createEnd() { fwrite($this-&gt;c, self::PC); }<br>
<br>
&nbsp;&nbsp;function invokeBegin($o, $m) { fwrite($this-&gt;c, sprintf(self::Pi, $o, $m)); }<br>
&nbsp;&nbsp;function invokeEnd() { fwrite($this-&gt;c, self::PI); }<br>
<br>
&nbsp;&nbsp;function writeString($s) {fwrite($this-&gt;c, sprintf(self::Ps, $s));}<br>
&nbsp;&nbsp;function writeInt($s) { fwrite($this-&gt;c, sprintf(self::Pl, $s&lt;0?-$s:$s, $s&lt;0?"A":"O")); }<br>
&nbsp;&nbsp;function writeObject($s) { fwrite($this-&gt;c, sprintf(self::Po, $s-&gt;java)); }<br>
&nbsp;&nbsp;function writeVal($s) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(is_string($s)) $this-&gt;writeString($s);<br>
&nbsp;&nbsp;&nbsp;&nbsp;else if(is_int($s)) $this-&gt;writeInt($s);<br>
&nbsp;&nbsp;&nbsp;&nbsp;else $this-&gt;writeObject($s);<br>
&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;function getResult() { $res = fread($this-&gt;c, 8192); $ar
= sscanf($res, '%s v="%[^"]"'); return $ar[1]; }<br>
}<br>
<br>
function getProtocol() { static $protocol; if(!isset($protocol)) $protocol=new Protocol(); return $protocol; }<br>
<br>
class Java {<br>
&nbsp;&nbsp;var $java;<br>
&nbsp;&nbsp;function __construct() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;if(!func_num_args()) return;<br>
&nbsp;&nbsp;&nbsp;&nbsp;$protocol=getProtocol();<br>
&nbsp;&nbsp;&nbsp;&nbsp;$ar = func_get_args();<br>
&nbsp;&nbsp;&nbsp;&nbsp;$protocol-&gt;createBegin(array_shift($ar));<br>
&nbsp;&nbsp;&nbsp;&nbsp;foreach($ar as $arg) { $protocol-&gt;writeVal($arg); }<br>
&nbsp;&nbsp;&nbsp;&nbsp;$protocol-&gt;createEnd();<br>
&nbsp;&nbsp;&nbsp;&nbsp;$ar = sscanf($protocol-&gt;getResult(), "%d");<br>
&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;java=$ar[0];<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;function __call($method, $args) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;$protocol=getProtocol();<br>
&nbsp;&nbsp;&nbsp;&nbsp;$protocol-&gt;invokeBegin($this-&gt;java, $method);<br>
&nbsp;&nbsp;&nbsp;&nbsp;foreach($args as $arg) { $protocol-&gt;writeVal($arg); }<br>
&nbsp;&nbsp;&nbsp;&nbsp;$protocol-&gt;invokeEnd();<br>
&nbsp;&nbsp;&nbsp;&nbsp;$proxy = new Java();<br>
&nbsp;&nbsp;&nbsp;&nbsp;$ar = sscanf($protocol-&gt;getResult(), "%d");<br>
&nbsp;&nbsp;&nbsp;&nbsp;$proxy-&gt;java=$ar[0];<br>
&nbsp;&nbsp;&nbsp;&nbsp;return $proxy;<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;function toString() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;$protocol=getProtocol();<br>
&nbsp;&nbsp;&nbsp;&nbsp;$protocol-&gt;invokeBegin("", "castToString");<br>
&nbsp;&nbsp;&nbsp;&nbsp;$protocol-&gt;writeVal($this);<br>
&nbsp;&nbsp;&nbsp;&nbsp;$protocol-&gt;invokeEnd();<br>
&nbsp;&nbsp;&nbsp;&nbsp;return $protocol-&gt;getResult();<br>
&nbsp;&nbsp;}<br>
}<br>
// Test<br>
$i1 = new Java("java.math.BigInteger",  "1");<br>
$i2 = new Java("java.math.BigInteger",  "2");<br>
$i3 = $i1-&gt;add($i2);<br>
echo $i3-&gt;toString() . "\n";<br>
?&gt;<br>
</font></font></code>
</blockquote>
However, to make programming more convenient it is recommended, although not required, to install the </a><a href="java/README">pure PHP-</a> or the <a href="#installation">C-based "PECL" extension</a>. 
</p>
<p><a name="proxies">Furthermore PHP classes can be created from Java libraries and be installed in the PHP PEAR <code>include_path</code>.</a> For example the following command translates the Java library <code>lucene.jar</code> into PHP and installs it  into the <code>/usr/share/pear/lucene</code> directory: 

<blockquote>
<code>java -jar JavaBridge.jar --convert /usr/share/pear lucene.jar</code>
</blockquote>
</p>
<p>
PHP code can call all public Java methods or procedures and examine all public fields. All public PHP procedures can be called from Java, all PHP classes may implement Java interfaces and PHP objects may be passed to Java procedures or methods. Example:
<blockquote>
<code>
&lt;?php<br>
require_once("lucene/org_apache_lucene_search_IndexSearcher.php");<br>
require_once("lucene/org_apache_lucene_search_PhraseQuery.php");<br>
require_once("lucene/org_apache_lucene_index_Term.php");<br>
<br>
$searcher = new org_apache_lucene_search_IndexSearcher(getcwd());<br>
$term = new org_apache_lucene_index_Term("name", "test.php");<br>
$phrase = new org_apache_lucene_search_PhraseQuery();<br>
<br>
$phrase->add($term);<br>
<br>
$hits = $searcher->search($phrase);<br>
$iter = $hits->iterator();<br>
<br>
while($iter->hasNext()) {<br>
&nbsp;&nbsp;$next = $iter->next();<br>
&nbsp;&nbsp;$name = $next->get("name");<br>
&nbsp;&nbsp;echo "found name: $name\n";<br>
}<br>
?&gt;
</code>
</blockquote>
</p>
<p>
Java knowledge is not necessary and it is neither necessary nor recommended to write custom- or glue logic in the Java programming language. 
</p>
<p>The following sections describe the low-level interface provided by the PHP/Java Bridge implementations.
</p>
<H1>Description</H1>
<P><FONT > The bridge implementations add the following primitives to PHP.  The type
  mappings are shown in <a href="#type-mapping">table 1</a>.

<ul>
<li>
  <code>new <strong><a href="documentation/PHP-API/html/java_8c.html#doc54">Java</a></strong>("CLASSNAME")</code>: References and instantiates the class CLASSNAME.
 After script
     execution the referenced classes may be garbage collected. Example: <br><br>
     
<blockquote>
<code>
      &lt;?php<br>
$v = new Java("java.util.Vector");<br>
$v->add($buf=new Java("java.lang.StringBuffer"));<br>
$buf->append("100");<br>
echo (int)($v->elementAt(0)->toString()) + 2;<br>
      ?&gt;<br>
</code>
</blockquote>
<br>
<li>
  <code>new <strong><a href="documentation/PHP-API/html/java_8c.html#doc55">JavaClass</a></strong>("CLASSNAME")</code>: References the class CLASSNAME without creating an instance. The returned object is the class object itself, not an object of the class.
 After script
     execution the referenced classes may be garbage collected. Example: <br><br>
     
<blockquote>
<code>
      $Object = new JavaClass("java.lang.Object");<br>
      $obj = $Object->newInstance();<br><br>
      $Thread = new JavaClass("java.lang.Thread");<br>
      $Thread->sleep(10);<br><br>
</code>
</blockquote>
<br>

<li>
  <code><strong><a href="documentation/PHP-API/html/java_8c.html#doc23">java_require</a></strong>("JAR1;JAR2")</code>: Makes additional libraries
     available to the current script.  JAR can either be  
     a "http:", "ftp:", "file:" or a "jar:" or a default <a href="#jar-location">location</a>. On &quot;Security Enhanced Linux&quot; (<a href="README">please see the README</a>) the <a href="#sel">location must be tagged</a> with a <em>lib_t</em> security context. Example: <br><br>
<code>
// load scheme interpreter<br>
// try to load it from /usr/share/java/ or from sourceforge.net<br>
try { java_require("kawa.jar"); } catch (JavaException $e) {/*ignore*/}<br>
java_require("http://php-java-bridge.sourceforge.net/kawa.jar");<br>
$n=100;<br>
$System = new JavaClass("java.lang.System");<br>
$t1 = $System->currentTimeMillis();<br>
$code="(letrec ((f (lambda(v) (if (= v 0) 1 (* (f (- v 1)) v))))) (f $n))";<br>
$scheme = new java("kawa.standard.Scheme");<br>
$res=(float)$scheme->eval($code);<br>
echo "${n}! => $res\n";<br>
$delta = $System->currentTimeMillis() - $t1;<br>
echo "Evaluated in $delta ms.\n";<br>
</code>
<br>
<br>
<li>
  <code><strong><a href="documentation/PHP-API/html/java_8c.html#doc26">java_context</a></strong>()</code>: Makes the <code>javax.script.ScriptContext</code>
     available to the current script. All implicit web objects (session, servlet context, etc.) are <a href="server/documentation/API/php/java/servlet/Context.html#getHttpServletRequest()">available from the context</a>, if the back end is running in a servlet engine or application server. The following example uses the jdk1.6 <a href="http://java.sun.com/javase/6/docs/tooldocs/share/jrunscript.html"><code>jrunscript</code></a> to eval PHP statements interactively:  <br><br>
<code>
/opt/jdk1.6/bin/jrunscript -l php-intractive<br>
php-interactive&gt; echo (string)(java_context()->getAttribute("javax.script.filename")); <br>
=&gt; &lt;STDIN&gt; <br>
<br>
</code>
<br>
<li>
  <code><strong><a href="documentation/PHP-API/html/java_8c.html#doc31">java_values</a></strong>(JAVA_OBJECT)</code>: Fetches the values for <code>JAVA_OBJECT</code>, if possible. Examples:<br><br><blockquote>
<code>
$str = new java("java.lang.String", "hello");
echo $str;<br>
=&gt; [o(String):"hello"]<br>
<br>
// fetch the php string from the java string<br>
echo (java_values($str));<br>
=&gt; hello<br>
<br>
// fetch the values of the java char array<br>
print_r (java_values($str->toCharArray()));<br>
=&gt; array('h', 'e', 'l', 'l', 'o')<br>
<br>
// no php type exists for java.lang.Object<br>
print (java_values(new java("java.lang.Object")));<br>
=&gt; [o(Object):"java.lang.Object@@4a85fc"]
</code>
</blockquote>
<br>
<li>
  <code><strong><a href="documentation/PHP-API/html/java_8c.html#doc88">java_cast</a></strong>(JAVA_VALUE, php_type)</code>: Converts a primitive JAVA_VALUE to a php value of type php_type. Unlike <code>java_values</code>, which return the "natural" php value for the JAVA_VALUE, the cast can convert the JAVA_VALUE into the desired php_type before it is returned. Allowed conversions are "string", "boolean", "integer" or "long", "double" or "float", "null", "array" and "object". The "object" conversion is the identiy function. Since PHP5 (php_type)JAVA_VALUE is identical to java_cast(JAVA_VALUE, php_type) (Zend Engine 2 and above only).  Examples:<br><br><blockquote>
<code>
$str = new java("java.lang.String", "12");
echo $str;<br>
=&gt; [o(String):"12"]<br>
<br>
// fetch the php string from the java string<br>
echo java_cast($str, "string");<br>
=&gt; "12"<br>
<br>
echo java_cast($str, "integer" );<br>
=&gt; 12<br>
<br>
var_dump (java_cast($str, "boolean"));<br>
=&gt; true
</code>
</blockquote>
<br>
<li>
  <code><strong><a href="documentation/PHP-API/html/java_8c.html#doc29">java_begin_document</a></strong>()</code> and <code><strong><a href="documentation/PHP-API/html/java_8c.html#a30">java_end_document</a></strong>()</code>: Enables/disables XML stream mode. In XML stream mode the PHP/Java Bridge XML statements are sent in one XML stream. Compared with SOAP, which usually creates the entire XML document before sending it, this mode uses much less resources on the web-server side. Raised server-side exceptions are reported when <code>java_end_document()</code> is invoked. Example:<br><br><blockquote>
<code>
// send the following XML statements in one stream<br>
java_begin_document();<br>
for ($x = 0; $x < $dx; $x++) {<br>
&nbsp;&nbsp;$row = $sheet->createRow($x);<br>
&nbsp;&nbsp;for ($y = 0; $y < $dy; $y++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;$cell = $row->createCell($y);<br>
&nbsp;&nbsp;&nbsp;&nbsp;$cell->setCellValue("$x . $y");<br>
&nbsp;&nbsp;&nbsp;&nbsp;$cell->setCellStyle($style);<br>
&nbsp;&nbsp;}<br>
}<br>
java_end_document(); // back to synchronous mode<br>
</code>
</blockquote>
<br>
<li>
  <code><strong><a href="documentation/PHP-API/html/java_8c.html#doc32">java_closure</a></strong>(ENVIRONMENT, MAP, TYPE)</code>: Makes it possible to call PHP code from Java.  It closes over the PHP environment, packages it up as a java class and returns an instance of the class.  If the ENVIRONMENT is missing, the current environment is used. If MAP is missing, the PHP procedures must have the same name as the required procedures. If TYPE is missing, the generated class is "generic", i.e. the interface it implements is determined when the closure is applied. Example:<br><br><blockquote>
<code>
&lt;?php<br>
function toString() { return "hello" ; }<br>
echo (string)java_closure();<br>
?&gt;<br>
=&gt; hello
</code>
</blockquote>
<br>
<li>
  <code>$session=<strong><a href="documentation/PHP-API/html/java_8c.html#doc25">java_session</a></strong>()</code>: Creates or retrieves a session context. When the back end is running in a J2EE environment, the session is taken from the request object, otherwise it is taken from PHP. Please see the  <a href="server/documentation/API/php/java/bridge/ISession.html">ISession interface documentation</a> for details. The <code>java_session()</code> must be called <a href="http://www.php.net/manual/en/function.headers-sent.php">before the response headers have been sent</a> and it should be called as the first statement within a PHP script.
<blockquote>
<code>
$session = java_session();<Mr>
$servletRequest = $session->getHttpServletRequest();<br>
$servletRequest->setAttribute(...);<br>
...<br>
</code>
</blockquote>
<br>
<li>

  <code>$session=<strong><a
href="documentation/PHP-API/html/java_8c.html#doc25">java_session</a></strong>(SESSIONNAME)</code>:
Creates or retrieves the session <code>SESSIONNAME</code>. This
primitive uses a session store with the name SESSIONNAME which is
independent of the current PHP- or Java session. Please see the <a
href="server/documentation/API/php/java/bridge/ISession.html">ISession
interface documentation</a> for details. For Java values
<code>$_SESSION['var']=val</code> is syntactic sugar for
<code>java_session("internal-prefix@@".session_id())-&gt;put('var',
val)</code>.  <blockquote>

<code>
$session=java_session("testSession");<br>
if($session->isNew()) {<br>
&nbsp;&nbsp;  echo "new session\n";<br>
&nbsp;&nbsp;  $session->put("a", 1);<br>
&nbsp;&nbsp;  $session->put("b", 5);<br>
} else {<br>
&nbsp;&nbsp;  echo "cont session\n";<br>
}<br>
$session->put("a", $session->get("a")+1);<br>
$session->put("b", $session->get("b")-1);<br>
<br>
$val=$session->get("a");<br>
echo "session var: $val\n";<br>
<br>
if($session->get("b")==0) $session->destroy();<br>
</code>
</blockquote>
The <strong><code>java_session</code></strong> primitive is meant for values which <em>must</em> survive the current script.  If you want to cache data which is expensive to create, bind the data to a class.  Example:
<blockquote>
<code>
// Compile this class, create cache.jar and copy it to /usr/share/java<br>
public class Cache {<br>
&nbsp;&nbsp; private static final Cache instance = makeInstance();<br>
&nbsp;&nbsp; public static Cache getInstance() { return instance; }<br>
}<br><br>
&lt;?php<br>
java_require(&quot;cache.jar&quot;);<br>
$Cache = new JavaClass(&quot;Cache&quot;);<br>
$instance=$Cache->getInstance(); //instance will stay in the VM until the VM runs short of memory<br>
?&gt;<br>
</code>
</blockquote>
<br>
  <li> <code><strong><a href="documentation/PHP-API/html/java_8c.html#doc54">JavaException</a></strong></code>: A java exception class. Available in PHP 5 and
    above only.  Example:<br><br>
<blockquote>
<code>
      try {<br>
       &nbsp;&nbsp;new java("java.lang.String", null);<br>
      } catch(JavaException $ex) {<br>
&nbsp;&nbsp;         $exStr = java_cast($ex, "string");<br>
&nbsp;&nbsp;         echo "Exception occured; mixed trace: $exStr\n";<br>
&nbsp;&nbsp;         $trace = new java("java.io.ByteArrayOutputStream");<br>
&nbsp;&nbsp;         $ex-&gt;printStackTrace(new java("java.io.PrintStream", $trace));<br>
&nbsp;&nbsp;         print "java stack trace: $trace\n";<br>
      }<br>

</code>
</blockquote>
The original exception can be retrieved with <code>$ex->getCause()</code>, for example:
<blockquote>
<code>
         function rethrow($ex) {<br>
         &nbsp;&nbsp;static $NullPointerException=new JavaClass("java.lang.NullPointerException");<br>
         &nbsp;&nbsp;$ex=$ex->getCause();<br>
	 &nbsp;&nbsp;if(java_instanceof($ex, $NullPointerException)) {<br>
         &nbsp;&nbsp;&nbsp;&nbsp;throw new NullPointerException($ex); <br>
         &nbsp;&nbsp;}<br>
         &nbsp;&nbsp;...<br>
         &nbsp;&nbsp;die("unexpected exception: $ex");<br>
      }<br>
</code>
</blockquote>
<br>
  <li> <code>foreach(COLLECTION)</code>: It is possible to iterate over values of java classes that implement java.util.Collection or java.util.Map.  Available in PHP 5 and above only. Example:<br><br>
<blockquote>
<code>
     $conversion = new java("java.util.Properties");<br>
     $conversion->put("long", "java.lang.Byte java.lang.Short java.lang.Integer");<br>
     $conversion->put("boolean", "java.lang.Boolean");<br>
     foreach ($conversion as $key=>$value) <br>
&nbsp;&nbsp;     echo "$key => $value\n";<br>
</code>
</blockquote>
<br>
  <li> <code>[index]</code>: It is possible to access elements of java arrays or elements of java classes that implement the java.util.Map interface.  Available in PHP 5 and above only.  Example:<br><br>
<blockquote>
<code>
$Array = new JavaClass("java.lang.reflect.Array");<br>
$String = new JavaClass("java.lang.String");<br>
$entries = $Array->newInstance($String, 3);<br>
$entries[0] ="Jakob der L&uuml;gner, Jurek Becker 1937--1997";<br>
$entries[1] ="Mutmassungen &uuml;ber Jakob, Uwe Johnson, 1934--1984";<br>
$entries[2] ="Die Blechtrommel, G&uuml;nter Grass, 1927--";<br>
for ($i = 0; $i < $Array->getLength($entries); $i++) { <br>
&nbsp;&nbsp;  echo "$i: " . $entries[$i] ."\n";<br>
}<br>
</code>
</blockquote>
<br>
  <li> <code><strong><a href="documentation/PHP-API/html/java_8c.html#doc24">java_instanceof</a></strong>(JAVA_OBJ, JAVA_CLASS)</code>: Tests if JAVA_OBJ is an instance of JAVA_CLASS.  Example:<br><br>
<blockquote>
<code>
$Collection=new JavaClass("java.util.Collection");<br>
$list = new java("java.util.ArrayList");<br>
$list->add(0);<br>
$list->add(null);<br>
$list->add(new java("java.lang.Object"));<br>
$list->add(new java("java.util.ArrayList"));<br>
foreach ($list as $value) { <br>
&nbsp;&nbsp;  if($value instanceof java && java_instanceof($value, $Collection))<br>
&nbsp;&nbsp;&nbsp;&nbsp;      /* iterate through nested ArrayList */ <br>
&nbsp;&nbsp;  else<br>
&nbsp;&nbsp;&nbsp;&nbsp;      echo "$value\n";<br>
}
<br>
</code>
</blockquote>
<br>

  <li> <code><a href="documentation/PHP-API/html/java_8c.html#doc20">java_last_exception_get</a>()</code>: Returns the last exception instance or
     null. Since PHP 5 you can use <code>try/catch</code> instead.<br><br>

  <li> <code><a href="documentation/PHP-API/html/java_8c.html#doc21">java_last_exception_clear</a>()</code>: Clears the error condition.  Since PHP 5 you can use <code>try/catch</code> instead.
</ul>
<br>
<A NAME="type-mapping"></A>
<center>
<B
>Table 1. Type Mappings</B
></P
>
<TABLE
BORDER="1"
><COL><COL><COL><COL><THEAD
><TR
><TH
>PHP</TH
><TH
>Java</TH
><TH
>Description</TH
><TH
>Example</TH
></TR
></THEAD
><TBODY
><TR
><TD
>object</TD
><TD
>java.lang.Object</TD
><TD
>An opaque object handle.  However, we guarantee that the first handle always starts with 1 and that the next handle is n+1 (useful if you work with the raw <a href="PROTOCOL.TXT">XML protocol</a>, see the <a href="examples/clients/README">python and scheme</a> examples).</TD
><TD
>$buf=new java("java.io.ByteArrayOutputStream");<br>
$outbuf=new java("java.io.PrintStream", $buf);<br>
</TD
></TR
><TR
><TD
>null</TD
><TD
>null</TD
><TD
>NULL value</TD
><TD
>$outbuf->println(null);</TD
></TR
><TR
><TD
>exact number</TD
><TD
>integer (default) or long.</TD
><TD
>64 bit data on protocol level, coerced to 32bit int/Integer or 64bit long/Long</TD
><TD
>$outbuf->println(100);<br>
</TD
></TR
></TR
><TR
><TD
>boolean</TD
><TD
>boolean</TD
><TD
>boolean value</TD
><TD
>
$outbuf->println(true);
</TD
></TR
><TR
><TD
>inexact number</TD
><TD
>double</TD
><TD
>IEEE floating point</TD
><TD
>$outbuf->println(3.14);
</TD
></TR
><TR
><TD
>string</TD
><TD
>byte[]</TD
><TD
>binary data, unconverted</TD
><TD
>$bytes=$buf->toByteArray();</TD
></TR
><TR
><TD
>string</TD
><TD
>java.lang.String</TD
><TD
>An UTF-8 encoded string. Since PHP does not support Unicode, all java.lang.String values are auto-converted into a byte[] (see above) using UTF-8 encoding. The encoding can be changed with the <strong><code>java_set_file_encoding()</code></strong> primitive.</TD
><TD
>$string=$buf->toString();</TD
><TR
><TD
>array (as array)</TD
><TD
>java.util.Collection or T[]</TD
><TD
>PHP4 sends and receives arrays as values.  PHP5 sends arrays as values and receives object handles which implement the new iterator and array interface.</TD
><TD
>// pass a Collection to Vector<br>
$ar=array(1, 2, 3);<br>
$v=new java("java.util.Vector", $ar);<br>
echo $v->capacity();<br><br>
// pass T[] to asList()<br>
$A=new JavaClass("java.util.Arrays");<br>
$lst=$A->asList($ar);<br>
echo $lst->size();
</TD
><TR
><TD
>array (as hash)</TD
><TD
>java.util.Map</TD
><TD
>PHP4 sends and receives hash-tables as values.  PHP5 sends hash-tables as values and receives object handles which implement the new iterator interface.</TD
><TD
>$h=array("k"=>"v", "k2"=>"v2");<br>
$m=new java("java.util.HashMap",$h);<br>
echo $m->size();
</TD
><TR
><TD
>JavaException</TD
><TD
>java.lang.Exception</TD
><TD
>A wrapped exception class. The original exception can be retrieved with $exception->getCause();</TD
><TD
>...<br>catch(JavaException $ex) { <br>
echo $ex->getCause();<br>
} </TD
></TR
></TBODY
></TABLE
>
</center>
<br><br>
  There is one example provided: test.php.  You can either invoke the
  test.php by typing ./test.php or copy the example into the document
  root of your web-server and evaluate the file using the browser.

</FONT></P>
<P><FONT >
<a name="jar-location">
  Custom java libraries (.jar files) can be stored in the following
  locations:</a>

<ol>
<li>
    Somewhere on a HTTP or FTP server, see PHP function
      <a href="documentation/PHP-API/html/java_8c.html#doc23">java_require</a>. <a name="sel">
On Security Enhanced Linux <code>.jar</code> files can only be loaded from locations which are tagged with the <em>lib_t</em> security context.

   <li> In the sub-directory "lib" of the PHP extension directory, if it
      exists and is accessible when the JVM starts the bridge.
      This is usually "`php-config --extension-dir`/lib".  On Security Enhanced Linux this directory is tagged with the <em>lib_t</em> security context.

   <li> In the <code>/usr/share/java/</code> directory, if it exists and is accessible
      when the JVM starts the bridge. On Security Enhanced Linux this directory is tagged with the <em>lib_t</em> security context.
</ol>
</FONT></P>
</P>
</a>
<P STYLE="margin-top: 0.42cm; page-break-after: avoid"><BR><BR>
</P>
<H1><a name="installation">Installation
instructions</a></H1>
<P STYLE="margin-top: 0.42cm; page-break-after: avoid"><FONT ><FONT SIZE=3>If
you have a Unix, Windows or Linux system, <a href="http://www.sourceforge.net/projects/php-java-bridge">download</a> either the binary or the source and install it.
<H2>Installation on Linux</H2>
On RedHat or a compatible Linux distribution (WhiteBox, Fedora, ...) open a command shell and type the following commands:
<H3>Public key</H3>
All binary files are digitally signed. Before you install the RPM binaries you should install the <a href="RPM-GPG-KEY">public key</a>, so that the integrity can be checked. If you haven't installed the key, type: 
<blockquote>
<code>rpm --import RPM-GPG-KEY</code>
</blockquote>
<H3>RPM binaries</H3>
Install the PHP/Java Bridge and the libraries you're interested
in. For example:
<p>
<blockquote>
<code>
rpm -i php-java-bridge-x.y.z-1-i386.rpm <br>
rpm -i lucene4php-x.y.z-1.i386.rpm <br>
rpm -i itext4php-x.y.z-1.i386.rpm <br>
</code> 
</blockquote>

Note that the PHP/Java Bridge and the libraries are native code and do
<em>not</em> need Java installed on the system unless the <a
href="#ini-options">PHP .ini</a> option <code>java.java</code> is set.

</p> 
Optional: install Java, a J2EE server or servlet engine and the
PHP/Java Bridge J2EE component.

<p>
<blockquote>
<code>
rpm -i jdk-1_5_0-linux-i586.rpm<br>
rpm -i tomcat5-5.0.30-5jpp_6fc.i386.rpm<br>
rpm -i php-java-bridge-tomcat-x.y.z-1.i386.rpm<br>
</code>
</blockquote>
The advantage of a J2EE server or servlet engine is that a real Java VM runs outside of the Apache HTTP server domain and can be restarted independently. It sets a <a href="#ini-options">PHP .ini</a> option so that all PHP Java statements are executed by the J2EE server or servlet engine.
</p>
Optional: install Java 1.6 and the PHP development files for JDK 1.6.
<p>
<blockquote>
<code>
rpm -i jdk-6-linux-i586.rpm<br>
rpm -i rpm -i php-java-bridge-devel-x.y.z-1.i386.rpm<br>
</code>
</blockquote>
If you have installed the development RPM, you can run PHP scripts interactively, either from your Eclipse IDE (when available) or with the <a href="http://java.sun.com/javase/6/docs/tooldocs/share/jrunscript.html"><code>jrunscript</code></a> command:
<p>
<blockquote>
<code>
/usr/java/default/bin/jrunscript -l php-interactive
</code>
</blockquote>
</p>
</p>
If you run a 64bit system <em>and</em> a 64bit JVM, you need to build a  64bit RPM using the command:
<p>
<blockquote>
<code>
rpmbuild --rebuild php-java-bridge-x.y.z-1.src.rpm<br>
</code>
</blockquote>
and install these.
</p>
The following <a href="#ini-options">PHP .ini</a> option are only used by the native, "C" based extension described above, see the README and INSTALL documents for details.
<A NAME="ini-options"></A>
<center>
<B
>Table 2. <code>.ini</code> options</B
></P
>
<TABLE
BORDER="1"
><COL><COL><COL><COL><THEAD
><TR
><TH
>Name</TH
><TH
>Default</TH
><TH
>Description</TH
><TH
>Example</TH
></TR
></THEAD
><TBODY
><TR
><TD
>java.java_home</TD
><TD
>compile time option.</TD
><TD
>The java installation directory.</TD
><TD
>java.java_home="/opt/jdk1.5"</TD
></TR
><TR
><TD
>java.java</TD
><TD
>compile time option.</TD
><TD
>The java executable.</TD
><TD
>java.java="/opt/jdk1.5/jre/bin/java"
</TD
></TR
><TR
><TD
>java.socketname</TD
><TD
>/var/run/.php-java-bridge_socket</TD
><TD
>The name of the communication channel for the local back end. Must be an integer, if a secure "Unix domain" channel is not available (Windows, Mac OSX).</TD
><TD
>java.socketname="9267"
</TD
></TR
><TR
><TD
>java.log_level</TD
><TD
>1</TD
><TD
>The log level from 0 (log off) to 4 (log debug).</TD
><TD
>java.log_level="3"</TD
></TR
><TR
><TD
>java.log_file</TD
><TD
>/var/log/php-java-bridge.log</TD
><TD
>The log file for the local PHP/Java Bridge back end.</TD
><TD
>java.log_file="/tmp/php-java-bridge.log"</TD
><TR
><TD
>java.hosts</TD
><TD
>&lt;none&gt;</TD
><TD
>Additional bridge hosts which are used when the local back end is not available.</TD
><TD
>java.hosts="127.0.0.1:9268;127.0.0.1:9269"
</TD
><TR
><TD
>java.servlet</TD
><TD
>Off</TD
><TD
>The communication protocol. If set to <code>On</code> or to <code>User</code>, the bridge uses HTTP to communicate with the <code>java.hosts</code> back ends. The option <code>User</code> preserves the context, <code>On</code> is for backward compatibility and rewrites the context to: <code>/JavaBridge/JavaBridge.phpjavabridge</code>.</TD
><TD
><code>;; Make sure that this option is only set <br>;; if your back end 
is deployed in a<br>;; servlet engine or application server.</code><br>
java.servlet=User<br>
</TD
><TR
><TD
>java.classpath</TD
><TD
> compile time option.</TD
><TD
>The java classpath. <em>Please do not change the default value</code></TD
><TD
>java.classpath="/tmp/myJavaBridge.jar:/tmp/myCasses/"<br>
</TD
></TR
><TR
><TD
>java.libpath</TD
><TD
>compile time option.</TD
><TD
>The directory which contains the <code>natcJavaBridge.so</code> used for local ("unix domain") sockets. <em>Please do not change the default value.</em></TD
><TD
>
java.libpath="/usr/local/lib"
</TD
></TR
><TR
><TD
><A name="persistent_connections">java.persistent_connections</A></TD
><TD
>On</TD
><TD
>Use persistent connections to the back end. If this flag is set to <code>On</code>, the Apache/Tomcat combination delivers Java based content as fast as
Tomcat standalone.</TD
><TD
>
java.persistent_connections=Off
</TD
></TR
><TR
><TD
><A name="security_policy">java.security_policy</A></TD
><TD
>Off</TD
><TD
>Use the policy file <a href="server/javabridge.policy"><code>javabridge.policy</code></a> located in the PHP extension directory or the specified policy file.</TD
><TD
>
java.security_policy="c:/windows/javabridge.policy"
</TD
></TR
></TBODY
></TABLE
>
</center>
<br>
<H2>Installation from source</H2>
On other operating systems, e.g. Solaris, Windows, BSD or Mac-OSX, please follow 
the instructions below (on Security Enhanced Linux please use the RPM or please read the README before installation).</FONT></FONT></P>
<UL>
	<LI><P>Download and install <a href="http://java.sun.com">J2SE >= 1.6</a> or <a href="http://java.sun.com">J2EE >= 1.4</a>.</P>
	<LI><P>Download and install <a href="http://www.php.net">PHP >= 5.1.4</a> or the <a href="http://www.caucho.com/resin-3.0/php/index.xtp"> pure Java implementation of PHP</a>. If you want to use <a href="http://www.php.net">PHP < 5.1.4</a>, you need to compile a "java.so" or "php_java.dll" extension, see the README and INSTALL document for details.</P>
	<LI><P>Download and extract the <a href="http://www.sourceforge.net/projects/php-java-bridge">PHP/Java Bridge zip file</a> into a folder.</P>
	<LI><P>Right-click on "JavaBridge.war" and select "Open with Java ...", this creates two directories: "ext", "java" and a file "test.php".</P>
	<LI><P>Move the created "java" folder to the web server document root.</P>
	<LI><P>Copy the "JavaBridge.war" file to the autodeploy folder of your J2EE server. Or, if use don't want to use J2EE, open the "ext" folder, right-click on "JavaBridge.jar" and select "Open with Java ..."; in the following dialog box click "OK". Use <code>java -jar JavaBridge.jar --help</code> for more information.</P>
 	<LI><P>Copy the file "test.php" to the web server document root and browse to <a href="http://localhost/test.php">test.php</a>.</P>
 	<LI><P>Java libraries can be installed in a sub-directory of <code>extension_dir</code>/lib, see output from "test.php", or be packaged with the "JavaBridge.war" web component.</P>
</UL>
<br>
<H2>Further information</H2>
<P><FONT >For further
information please read the <a href="README">README</a>, <a href="INSTALL">INSTALL</a>, <a href="INSTALL.LINUX">INSTALL.LINUX</a>, <a href="INSTALL.J2EE">INSTALL.J2EE</a>, <a href="INSTALL.J2SE">INSTALL.J2SE</a>, <a href="INSTALL.WEBSPHERE">INSTALL.WEBSPHERE</a>, <a href="INSTALL.ORACLE">INSTALL.ORACLE</a> documents contained in
the download files.</p>
<p>The <a href="NEWS">NEWS</a> file lists the latest user visible changes, development documentation can be found in the <a href="documentation/PHP-API/html/java_8c.html"><code>documentation</code></a> and <a href="server/documentation/API/overview-summary.html"><code>server/documentation</code></a> folder.

</FONT></P>
<P><BR><BR>
</P>

</P> <H1>FAQ</H1> <P><FONT > <ul> <li><H4>The "C" extension doesn't compile
on my system!?!</H4> <p>Please follow the instructions from the
<a href="INSTALL">INSTALL document</a> as close as possible. In particular the back end needs the specified versions of <em>GNU autoconf</em>, <em>GNU libtool</em> and <em>GNU automake</em> in the path. Don't try to re-use specialized versions which came with your operating system (e.g. symlink libtool-1.5 to libtool), this will not work; if you don't have autoconf 2.59, automake 1.9 and libtool 1.5.20, you must compile and install them, as described in the INSTALL document. 
If there are problems compiling the bridge code against any PHP version >= 4.3.4 on Windows,
Linux/Unix or MacOS, please do <em>not</em> report this problem to the
mailing list. Please <a
href="http://sourceforge.net/tracker/?func=add&group_id=117793&id=679233">open
a problem report instead</a> (you don't need an account to submit a
problem report).
</p><p>
If Java or Mono is not installed on the build machine, 
the back end compilation can be switched off with the <code>--disable-backend</code> configure option. A compiled, platform-independent back end ("JavaBridge.war") can be found in the download folder.
</p> <p>On RPM based Security Enhanced Linux
installations (RHEL, Fedora) please install one of the binary RPMs or
compile a binary RPM from the source RPM using the command:
<code>rpmbuild --rebuild php-java-bridge*src.rpm</code> and install it.</p> <p>On
recent Debian installations, Ubuntu for example, a binary package can be created with the command: <code>fakeroot debian/rules binary</code>.</p>
<p>If everything else fails, use the <a href="java/README">pure PHP implementation</a> of the PHP/Java Bridge.
<p>

<li> <H4>Can I use java libraries without
installing java?</H4> <p>Yes. Simply ommit the
<code>--with-java=</code> configure option. The <a href="README.GNU_JAVA">bridge will use the
<code>libgcj</code> library</a>, which is part of the GNU gcc compiler. This library also uses much less system
resources (memory, files) than a "real" Java VM.</p> <li> <H4>Does the
bridge run native code within my servlet engine or application
server?</H4> <p>No. The bridge back end is written in pure java, it
doesn't use any native code. Native PHP runs within Apache, IIS, a
FCGI server or via CGI. If the PHP instance crashes, an error page is
returned to the client and the Apache, IIS, CGI container usually starts a new PHP instance for the next
request.</p> <li> <H4>How do I make my script state (objects or
variables) persistent?</H4> <p>If you must code it yourself: with
e.g. <code>java_session()->put("buf", $stringBuffer)</code> or via
<code>$_SESSION["buf"]=$stringBuffer</code>. The
<code>$_SESSION</code> is syntactic sugar provided by the <a
href="http://www.php.net/manual/en/ref.session.php">php session
module</a>, it uses <code><a
href="documentation/PHP-API/html/java_8c.html#doc25">java_session()<a></code>
internaly. If you don't want depend on the PHP session module, for
example if you have compiled PHP without the <code>session.so</code>,
use java_session() instead.</p> <p> If you use the <a
href="http://www.jcp.org/en/jsr/detail?id=127">Java Server Faces</a>
framework, you declare the scope of the script in the <a
href="server/WEB-INF/faces-config.xml">PHP
managed bean descriptor<a>. For example, if the
<code>managed-bean-scope</code> is changed from <code>request</code>
to <code>session</code>, the framework automatically saves the state
of the PHP script instance and restores it when the next request
belonging to the same session comes in.</p> <li> <H4>How many threads
does the bridge start?</H4> <p>Request-handling threads are started
from a thread pool, which limits the number of user requests to 20
(default), see system property
<code>php.java.bridge.threads</code>. All further requests have to
wait until one of the worker threads returns to the pool. <p> <p>When
running in a servlet engine, a <a
href="server/documentation/API/php/java/bridge/http/ContextServer.html">ContextServer</a>
is started which handles the pipe or local socket communication
channel.  </p> <p>When java invokes local scripts outside of a HTTP
environment, the bridge starts a <a
href="server/documentation/API/php/java/bridge/http/HttpServer.html">HttpServer</a>,
a <a
href="server/documentation/API/php/java/bridge/http/ContextServer.html">ContextServer</a>
and a <a
href="server/documentation/API/php/java/script/HttpProxy.html">HttpProxy</a>. The
HttpProxy represents the PHP continuation and the HttpServer the
request-handling java continuation associated with the JSR223 script.
</p> 

<li> <H4>How do I lock down the VM so that users cannot start
threads or call System.exit?</H4> <p>Usually with a java policy
file. An <a href="server/javabridge.policy">example file</a> has been installed in the php extension directory and can be enabled with:
<code>
java.security_policy=On
</code>
 </p> 

<li> <H4>Where is my output?</H4> <p><code>System.out</code> and <code>System.err</code> are redirected to the server log file(s). When PHP scripts are invoked from a java framework (Java Server Faces for example), even the PHP output is redirected. For the standalone back end the output appears in the <code>/var/log/php-java-bridge.log</code> or in JavaBridge.log, see .ini option <code>java.log_file</code>. For the j2ee back end the location of the log file(s) depends on the j2ee server configuration.</p> 

<li> <H4>How do I access enums or inner classes?</H4> 
With the <code>classname$inner</code> syntax. For example <br><br>
<code>
public interface php {<br>
&nbsp;&nbsp;public class java {<br>
&nbsp;&nbsp;&nbsp;&nbsp;public enum bridge {JavaBridge, JavaBridgeRunner};<br>
&nbsp;&nbsp;}<br>
}<br>
</code><br>
can be accessed with:<br><br>
<code>
&lt;?php<br>
java_require(getcwd()); // load php.class<br>
$bridge = new java('php$java$bridge');<br>
echo $bridge->JavaBridgeRunner;<br>
?&gt;<br>
</code><br>
The above code is not a good programming example but it demonstrates why a different syntax is used to access inner classes. 
</p>

<li> <H4>How do I create a primitive array?</H4> 
<p>
Primitive types are wrapped by associated java classes. 
The following example uses <code>reflect.Array</code> to create a new <code>byte</code> array:<br><br>
<code>
$Byte = new JavaClass("java.lang.Byte");<br>
$byte = $Byte->TYPE;<br>
$Array = new JavaClass("java.lang.reflect.Array");<br>
$byteArray = $Array->newInstance($byte, 255);<br>
$System = new JavaClass("java.lang.System");<br>
$length = $System->in->read($byteArray);<br>
$str = new Java("java.lang.String", $byteArray, 0, $length);<br>
echo "You have typed: $str\n";<br>
</code>
</p>

<li> <H4>How fast is it?</H4> <p> 
The following scripts were
executed on one 1.688 GHZ x86 cpu running RedHat Fedora Core 4 Linux and Sun jdk1.6.0:
</p>
The PHP 5.1.2 code<br>
<p>
<code>
&lt;?php<br>
$String = new JavaClass("java.lang.String");<br>
$buf=new java("java.lang.StringBuffer");<br>
<br>
$i=0;<br>
java_begin_document();<br>
while($i&lt;400000) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;$i=$i+1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;$buf-&gt;append(new java("java.lang.String", $String-&gt;valueOf($i)));<br>
}<br>
java_end_document();<br>
<br>
print $buf-&gt;length() . "\n";<br>
?&gt;<br>
</code>
</p>
The BSH 2.0 code<br>
<p>
<code>
buf=new java.lang.StringBuffer();<br>
<br>
int i=0;<br>
while(i<400000) {<br>
&nbsp;&nbsp;i=i+1;<br>
&nbsp;&nbsp;buf.append(new String(String.valueOf(i)));<br>
}<br>
<br>
print (buf.length()); print("\n");<br>
</code>
</p>
The ECMAScript ("Mozilla Rhino") code<br>
<p>
<code>
buf = new java.lang.StringBuffer();<br>
for(i=0; i<400000; i++) buf.append(new String(i));<br>
print (buf.toString().length());<br>
</code>
</p>
<p>
<center>
<TABLE
BORDER="1"
><COL><COL><COL><COL><THEAD
><TR
><TH
>Command</TH
><TH
>Script Engine</TH
><TH
>Communication Channel</TH
><TH
>Execution time (real, user, sys)</TH
></TR
></THEAD

<TBODY
><TR
><TD
>time jrunscript -l php t11.php</TD
><TD
>PHP5 + PHP/Java Bridge 3.0.8</TD
><TD
>named pipes</TD
><TD
>0m20.112s,<br>
0m18.999s,<br>
0m0.651s
</TD
></TR
>

<TBODY
><TR
><TD
>time jrunscript -l bsh t11.bsh</TD
><TD
>BSH 2.0</TD
><TD
>none (native code)</TD
><TD
>0m21.342s,<br>
0m20.779s,<br>
0m0.291s
</TD
></TR
>
</TBODY>

<TBODY
><TR
><TD
>time jrunscript -J-Xmx512M -J-Xms512M -l js t11.js</TD
><TD
>ECMA script</TD
><TD
>none (native code)</TD
><TD
>1m36.877s,<br>
0m55.398s,<br>
0m0.323s
</TD
></TR
>

</TABLE
>
</center>
</p>
<p>
</p>
<li> <H4>How do I start a persistent VM?</H4> 
<p>
If you want to start <em>one persistent VM per HTTP server</em> running on a computer, see 
the <a href="#mode2">web server installation</a> description. 
If you want to start <em>one persistent VM per computer</em>, please see the <a href="#mode4">application server or servlet engine</a> description.
</p>
<p>Furthermore it is possible to start a standalone back end, for example with the command:<br><br>
<code>
&nbsp;&nbsp;java -jar JavaBridge.jar INET_LOCAL:9676 3<br>
</code>
<br>
The <code>php.ini</code> entry might look like:<br><br>
<code>
&nbsp;&nbsp;[java]<br>
&nbsp;&nbsp;java.hosts = 127.0.0.1:9676<br>
&nbsp;&nbsp;java.servlet = Off<br>
</code>
<br>
Please see the <a href="server/documentation/API/php/java/bridge/JavaBridge.html">JavaBridge</a> documentation for details.
</p>

<li> <H4>I want to start the back end automatically as a sub-component of my HTTP Server. How do I pass my own java options and how do I change the security context and the UID of the Java process?</H4> 
<p>
The bridge uses a wrapper binary which can carry the SUID bit and can be tagged with the SEL security context. This wrapper also allows you to change the standard options, which are: <code>java -Djava.library.path=...  -Djava.class.path=... -Djava.awt.headless=true -Dphp.java.bridge.base=... php.java.bridge.JavaBridge SOCKET_NAME LOG_LEVEL LOG_FILE</code>.
A custom wrapper can be set with:<br><br>
<code>
java.wrapper=/path/to/wrapper/binary<br>
</code>
</p>
<p>
On Unix the bridge terminates the sub-process hierarchy with <code>SIGTERM</code>, sleep 5 seconds and <code>SIGTERM</code>, if necessary, sleep 5 seconds and <code>SIGKILL</code>, if necessary. On Windows the bridge emulates the Unix kill behaviour, the bridge kills the entire sub-process hierarchy so that you can use a <code>cmd /c</code> wrapper.
</p>
<p>
Please see the wrapper <code>RunJavaBridge</code> for an example.
</p>
<li> <H4>I want to use the bridge as a replacement for the <a href="http://www.php.net/manual/sl/ref.java.php#java.servlet">PHP 4 servlet API</a>, how do I install it into tomcat?</H4> 
<p>
Download the J2EE binary and copy the <code>JavaBridge.war</code> into the tomcat <code>webapps</code> folder. After that visit <code>http://localhost:8080/JavaBridge</code> and run the supplied PHP examples.
Please see <code>webapps/JavaBridge/WEB-INF/cgi/README</code> for details.
</p>
<li> <a name="global-servlet"><H4>I want to use PHP for all tomcat applications. Apache and IIS are not available, but performance is important. How do I install it?</H4></a>
<p> Check if your PHP cgi binary supports the <code>-b</code> flag. If not, compile PHP with the <code>--enable-fastcgi</code> option or <a href="#http-front-end">use Apache or IIS as a front-end</a> instead. On Windows one could also copy a wrapper binary into the <code>WEB-INF/cgi/</code> folder, for example the <code>launcher.exe</code> from the <code>PHPIntKitForWindows.zip</code> available from <a href="http://www-128.ibm.com/alphaworks">alphaworks</a>.</p>
<p>
Download and install the J2EE binary: copy <code>JavaBridge.war</code> into the tomcat <code>webapps</code> folder.
</p>
<p>
Copy the <code>JavaBridge.jar</code> and the <code>php-servlet.jar</code> from the JavaBridge.war into the tomcat <code>shared/lib</code> folder. Uncomment the <code>shared_fast_cgi_pool</code> parameter in the <code>JavaBridge/WEB-INF/web.xml</code> and add the lines marked with a <code>+</code> to the tomcat <code>conf/web.xml</code>:
<blockquote>
<code>
<br>
   &lt;!-- ================== Built In Servlet Definitions ==================== --&gt;<br>
<br>
+    &lt;!-- PHP Servlet --&gt;<br>
+    &lt;servlet&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpJavaServlet&lt;/servlet-name&gt;<br>
+        &lt;servlet-class&gt;php.java.servlet.PhpJavaServlet&lt;/servlet-class&gt;<br>
+    &lt;/servlet&gt;<br>
+    &lt;!-- PHP CGI Servlet --&gt;<br>
+    &lt;servlet&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpCGIServlet&lt;/servlet-name&gt;<br>
+        &lt;servlet-class&gt;php.java.servlet.PhpCGIServlet&lt;/servlet-class&gt;<br>
+        &lt;init-param&gt;<br>
+        &lt;!-- Remember to set the shared_fast_cgi_pool option --&gt;<br>
+        &lt;!-- in JavaBridge/WEB-INF/web.xml to On, too. --&gt;<br>
+        &lt;param-name&gt;shared_fast_cgi_pool&lt;/param-name&gt;<br>
+        &lt;param-value&gt;On&lt;/param-value&gt;<br>
+        &lt;/init-param&gt;<br>
+    &lt;/servlet&gt;<br>
<br>
   &lt;!-- The default servlet for all web applications, that serves static     --&gt;<br>
   &lt;!-- resources.  It processes all requests that are not mapped to other   --&gt;<br>
[...]<br>
   &lt;!-- ================ Built In Servlet Mappings ========================= --&gt;<br>
<br>
+    &lt;!-- PHP Servlet Mapping --&gt;<br>
+    &lt;servlet-mapping&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpJavaServlet&lt;/servlet-name&gt;<br>
+        &lt;url-pattern&gt;*.phpjavabridge&lt;/url-pattern&gt;<br>
+    &lt;/servlet-mapping&gt;<br>
+    &lt;!-- CGI Servlet Mapping --&gt;<br>
+    &lt;servlet-mapping&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpCGIServlet&lt;/servlet-name&gt;<br>
+        &lt;url-pattern&gt;*.php&lt;/url-pattern&gt;<br>
+    &lt;/servlet-mapping&gt;<br>
<br>
   &lt;!-- The servlet mappings for the built in servlets defined above.  Note  --&gt;<br>
   &lt;!-- that, by default, the CGI and SSI servlets are *not* mapped.  You    --&gt;<br>
<br>
 &lt;/web-app&gt;<br>
</code>
</blockquote>
</p>
To test the above settings create a directory <code>testapp</code> and copy the <code>test.php</code> file from the <code>JavaBridge.war</code> into this folder. Type <code>cd testapp; jar cf ../testapp.war *</code> and copy the testapp.war into the tomcat <code>webapps</code> folder.
Restart tomcat, browse to 
<code>http://yourHost.com:8080/testapp/test.php</code>.
</p>
<p>
Check if the PHP Fast-CGI server is running. The process list should display 20 (default) PHP instances waiting in the PHP Fast-CGI pool. If not, check if your PHP binary has been compiled with Fast-CGI enabled. Copy a Fast-CGI enabled binary into the <code>webapps/JavaBridge/WEB-INF/cgi/</code> folder, if necessary.
</p>

<li> <a name="php-web-app"><H4>How do I create a standalone PHP web application for distribution and how can users deploy it into tomcat?</H4></a>
<p>
Create a directory <code>myApplication</code>, create the directories <code>myApplication/WEB-INF/lib/</code> and <code>myApplication/WEB-INF/cgi/</code>.
Download the J2EE binary and copy the <code>JavaBridge.jar</code> and the <code>php-servlet.jar</code> from the JavaBridge.war to the <code>myApplication/WEB-INF/lib/</code> folder. Copy the contents of the <code>cgi</code> folder to <code>myApplication/WEB-INF/cgi/</code>. Create the file <code>myApplication/WEB-INF/web.xml</code> with the following content:
<blockquote>
<code>
<br>
&lt;web-app&gt;<br>
    &lt;!-- PHP Servlet --&gt;<br>
    &lt;servlet&gt;<br>
        &lt;servlet-name&gt;PhpJavaServlet&lt;/servlet-name&gt;<br>
        &lt;servlet-class&gt;php.java.servlet.PhpJavaServlet&lt;/servlet-class&gt;<br>
    &lt;/servlet&gt;<br>
    &lt;!-- PHP CGI processing servlet, used when Apache/IIS are not available --&gt;<br>
    &lt;servlet&gt;<br>
        &lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;<br>
        &lt;servlet-class&gt;php.java.servlet.PhpCGIServlet&lt;/servlet-class&gt;<br>
    &lt;/servlet&gt;<br>
<br>
    &lt;!-- PHP Servlet Mapping --&gt;<br>
    &lt;servlet-mapping&gt;<br>
        &lt;servlet-name&gt;PhpJavaServlet&lt;/servlet-name&gt;<br>
        &lt;url-pattern&gt;*.phpjavabridge&lt;/url-pattern&gt;<br>
    &lt;/servlet-mapping&gt;<br>
    &lt;!--PHP CGI Servlet Mapping --&gt;<br>
    &lt;servlet-mapping&gt;<br>
        &lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;<br>
        &lt;url-pattern&gt;*.php&lt;/url-pattern&gt;<br>
    &lt;/servlet-mapping&gt;<br>
<br>
    &lt;!-- Welcome files --&gt;<br>
    &lt;welcome-file-list&gt;<br>
        &lt;welcome-file&gt;index.php&lt;/welcome-file&gt;<br>
    &lt;/welcome-file-list&gt;<br>
 &lt;/web-app&gt;<br>
</code>
</blockquote>
</p>
<p>
Copy the files <code>sessionSharing.jsp</code> and <code>sessionSharing.php</code> from the <code>JavaBridge.war</code> to <code>myApplication</code> and create <code>myApplication.war</code>, for example with the commands: <code>cd myApplication; jar cf ../myApplication.war *</code>. </p>
<p>The web archive can now be distributed, copy it to the tomcat <code>webapps</code> directory and re-start tomcat. Visit <code>http://localhost/myApplication/sessionSharing.php</code> and <code>http://localhost/myApplication/sessionSharing.jsp</code>.
</p>
<li> <a name="http-front-end"><H4>I want to use Apache/IIS as a front-end and tomcat as a back end. How do I enable PHP for all my applications?</H4></a>
<p>
Download and install the J2EE binary: copy <code>JavaBridge.war</code> into the tomcat <code>webapps</code> folder.
Check if the tomcat <code>webapps</code> directory is shared with the Apache/IIS <code>htdocs</code> directory. If not, change the Apache/IIS setting, the following example is for Apache 2. Edit e.g. <code>/etc/httpd/conf/httpd.conf</code> as follows: 
<blockquote>
<code>
 # documents. By default, all requests are taken from this directory, but<br>
 # symbolic links and aliases may be used to point to other locations.<br>
 #<br>
-DocumentRoot "/var/www/html"<br>
+DocumentRoot "/var/lib/tomcat5/webapps"<br>
<br>
 #<br>
 # Each directory to which Apache has access can be configured with respect<br>
 #<br>
 # This should be changed to whatever you set DocumentRoot to.<br>
 #<br>
-&lt;Directory "/var/www/html"&gt;<br>
+&lt;Directory "/var/lib/tomcat5/webapps"&gt;<br>
</code>
</blockquote>
</p>
<p>
Edit the <code>php.ini</code> or add a file <code>php-tomcat.ini</code> to the directory which contains the PHP module descriptions (usually <code>/etc/php.d/</code>), so that it contains:
<blockquote>
<code>
[java]<br>
java.hosts = 127.0.0.1:8080<br>
java.servlet = On<br>
</code>
</blockquote>
</p>
To test the above settings create a directory <code>testapp</code> and copy the <code>sessionSharing.php</code> file from the <code>JavaBridge.war</code> into this folder. Type <code>cd testapp; jar cf ../testapp.war *</code> and copy the testapp.war into the tomcat <code>webapps</code> folder.
Restart Apache or IIS and tomcat, browse to 
<code>http://localhost/testapp</code>, click on sessionSharing.php and check the generated cookie value. The <code>path</code> value must be <code>/</code>.
</p>
<li> <a name="php-jsp-session-sharing"><H4>I want to use Apache/IIS as a front-end and tomcat as a back end. How do I enable PHP and JSP for all my applications?</H4></a>
<p>
Download the J2EE binary and copy the <code>JavaBridge.jar</code> and the <code>php-servlet.jar</code> from the JavaBridge.war into the tomcat <code>shared/lib</code> folder. Add the lines marked with a <code>+</code> to the tomcat <code>conf/web.xml</code>:
<blockquote>
<code>
<br>
   &lt;!-- ================== Built In Servlet Definitions ==================== --&gt;<br>
<br>
+    &lt;!-- PHP Servlet --&gt;<br>
+    &lt;servlet&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpJavaServlet&lt;/servlet-name&gt;<br>
+        &lt;servlet-class&gt;php.java.servlet.PhpJavaServlet&lt;/servlet-class&gt;<br>
+    &lt;/servlet&gt;<br>
<br>
   &lt;!-- The default servlet for all web applications, that serves static     --&gt;<br>
   &lt;!-- resources.  It processes all requests that are not mapped to other   --&gt;<br>
[...]<br>
   &lt;!-- ================ Built In Servlet Mappings ========================= --&gt;<br>
<br>
+    &lt;!-- PHP Servlet Mapping --&gt;<br>
+    &lt;servlet-mapping&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpJavaServlet&lt;/servlet-name&gt;<br>
+        &lt;url-pattern&gt;*.phpjavabridge&lt;/url-pattern&gt;<br>
+    &lt;/servlet-mapping&gt;<br>
<br>
   &lt;!-- The servlet mappings for the built in servlets defined above.  Note  --&gt;<br>
   &lt;!-- that, by default, the CGI and SSI servlets are *not* mapped.  You    --&gt;<br>
<br>
 &lt;/web-app&gt;<br>
</code>
</blockquote>
</p>
<p>
Check if the tomcat <code>webapps</code> directory is shared with the Apache/IIS <code>htdocs</code> directory. If not, change the Apache/IIS setting, the following example is for Apache 2. Edit e.g. <code>/etc/httpd/conf/httpd.conf</code> as follows: 
<blockquote>
<code>
 # documents. By default, all requests are taken from this directory, but<br>
 # symbolic links and aliases may be used to point to other locations.<br>
 #<br>
-DocumentRoot "/var/www/html"<br>
+DocumentRoot "/var/lib/tomcat5/webapps"<br>
<br>
 #<br>
 # Each directory to which Apache has access can be configured with respect<br>
 #<br>
 # This should be changed to whatever you set DocumentRoot to.<br>
 #<br>
-&lt;Directory "/var/www/html"&gt;<br>
+&lt;Directory "/var/lib/tomcat5/webapps"&gt;<br>
</code>
</blockquote>
</p>
<p>
Now that tomcat knows how to handle PHP <code>.phpjavabridge</code> requests and Apache or IIS can access the tomcat webapps, connect the two components: Edit the <code>php.ini</code> or add a file <code>php-tomcat.ini</code> to the directory which contains the PHP module descriptions (usually <code>/etc/php.d/</code>), so that it contains:
<blockquote>
<code>
[java]<br>
java.hosts = 127.0.0.1:8080<br>
java.servlet = User<br>
</code>
</blockquote>
The above <code>User</code> setting enables session sharing between PHP and JSP, it forwards from <code>http://host<em>/myApp/foo.php</em></code> to the tomcat back end at <code>127.0.0.1:8080</code> using the request <code>PUT <em>/myApp/foo.php</em>javabridge</code>. This triggers the <code>GlobalPhpJavaServlet</code> configured in the tomcat <code>web.xml</code>.
</p>
<p>
Now you need to do the same for JSP. Unlike the PHP/Java Bridge, which only forwards embedded java statements, the tomcat <code>mod_jk</code> adapter must forward all JSP requests.
Download and install <code>mod jk</code>, for example
<code>jakarta-tomcat-connectors-1.2.14.1-src.tar.gz</code>, extract the file into a
folder and type the following commands:
<blockquote>
<code>
cd jakarta-tomcat-connectors-1.2.14.1-src/jk/native/<br>
./configure --with-apxs && make && su -c "make install"<br>
</code>
</blockquote>
Add the following lines to the end of the <code>httpd.conf</code>, the following example is for Apache 2:
<blockquote>
<code>
LoadModule jk_module modules/mod_jk.so<br>
JkAutoAlias /var/lib/tomcat5/webapps<br>
JkMount *.jsp ajp13<br>
</code>
</blockquote>
</p>
To test the above settings create a directory <code>testapp</code> and copy the <code>sessionSharing.php</code> and <code>sessionSharing.jsp</code> from the <code>JavaBridge.war</code> into this folder. Type <code>cd testapp; jar cf ../testapp.war *</code> and copy the testapp.war into the tomcat <code>webapps</code> folder.
Restart Apache or IIS and tomcat, browse to 
<code>http://localhost/testapp</code>, click on sessionSharing.php and check the generated cookie value. The <code>path</code> value must be <code>/testapp</code>. Click on sessionSharing.jsp.
</p>
<li> <H4>How does the bridge handle OutOfMemoryErrors?</H4> 
<p>
OutOfMemoryErrors may happen because a cached object cannot be released, either because <p>
<ol>
<li> the object is permanently referenced by a request-handling thread or
<li> the object has been entered into the session or application store or 
<li> the object is referenced by a thread outside of the scope of the PHP/Java Bridge.
</ol>
</p>
</p>
<p>When a <code>java.lang.OutOfMemoryError</code> reaches the request-handling thread, the PHP/Java Bridge thread pool removes the thread from its pool and writes a message <code>FATAL: OutOfMemoryError</code> to the PHP/Java Bridge log file. The session store is cleaned and all client connections are terminated without confirmation.
</p>
<p>
If the OutOfMemoryError persists, this means that a thread outside of the PHP/Java Bridge has caused this error condition.
</p>
<p>
The following code example could cause an OutOfMemoryError:<br><br>
<code>
&lt;?php<br>
session_start();<br>
if(!$_SESSION["buffer"]) $_SESSION["buffer"]=new java("java.lang.StringBuffer");<br>
$_SESSION["buffer"]->append(...);<br>
?&gt;
</code>
</p>
<p>
OutOfMemory conditions can be debugged by running the back end with e.g.:<br><br>
<code>
java -agentlib:hprof=heap=sites -jar JavaBridge.jar<br>
</code>
</p>
<li> <H4>The EJB example works with the Sun J2EE server, but in JBoss I get a ClassCastException, what's wrong?</H4> 
<p>It's a JBoss problem, although this problem may also appear in other application servers which do not strictly separate the application/bean domains. The JavaBridge.war already contains the <code>documentClient.jar</code> as a library, so JBoss references the library classes instead of the bean classes. Just remove the <code>documentClient.jar</code> from the <code>JavaBridge.war</code>, re-deploy <code>JavaBridge.war</code> and run the test again.
</p><p>
In JBoss' default setup the code:
<blockquote>
<code>
  // access the home interface<br>
  $DocumentHome = new JavaClass("DocumentHome");<br>
  $PortableRemoteObject = new JavaClass("javax.rmi.PortableRemoteObject");<br>
  $home=$PortableRemoteObject-&gt;narrow($objref, $DocumentHome);<br>
</code>
</blockquote>
refences the <code>DocumentHome</code> from the library, which is assignment-incompatible to <code>DocumentHome</code> from the enterprise bean (<code>DocumentHome@@WebAppClassLoader</code> !=  <code>DocumentHome@@BeanClassLoader</code>), so you get a ClassCastException in <code>narrow</code>.
</p>
<p>
In contrast the Sun J2EE server correctly separates the beans/applications; the <code>$objref</code> is a unique proxy generated by a parent of the <code>WebAppClassLoader</code>, so that <code>narrow</code> can always cast the proxy to <code>DocumentHome@@WebAppClassLoader</code>, even if a class with the same name is already available from the <code>WebAppClassLoader</code>.</p>

<li> <H4>How do I install PHP into the Nutch, Spring, JSF, ..., Framework?</H4> 
<p>By providing PHP beans and a description how to manage them, as usual. IOC (sometimes called "dependency injection") requires that you give up control so that the framework can call you when it becomes necessary. The code
<blockquote>
<code>
  class Bean { ... }<br>
  java_context()->call(java_closure(new Bean())) || header("$framework");
</code>
</blockquote>
can be used to pass control from the web server to the framework running on a J2EE node. 
</p>
<p>
The standard <a href="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">java script interface</a> or the proxy used by the <a href="server/documentation/API/php/java/bridge/Invocable.html">invocable interface</a> can be used to call from the framework running on a J2EE node into the allocated PHP scripts running on the web server. The following excerpt from the JSF implementation calls methods from the above PHP bean:
<blockquote>
<code>
  ((Invocable)((PhpFacesContext)FacesContext.getCurrentInstance()).getScriptEngine(this, new URL(phpScript))).invoke(method, args); 
</code>
</blockquote>
Please see the JSF implementation for a reference.
</p>
<li> <H4>How can PHP classes extend Java classes and Java methods?</H4> 
<p>
By using <a href="documentation/PHP-API/html/java_8c.html#doc32"><code>java_closure()</code></a> and the visitor pattern for example. The <code>tests.php5</code> folder contains a <code>script_api.php</code> example which shows how to implement <code>java.lang.Runnable</code> to run multiple PHP threads, concurrently accessing a shared resource.
</p><li> 
<a name="ssl">
<H4>On Windows some PHP binaries do not support HTTPS/SSL</H4> 
<p>
If you see the message:
<blockquote>
<code>
Warning: fsockopen() [function.fsockopen]: unable to connect to ssl://127.0.0.1:8443
(Unable to find the socket transport "ssl" - did you forget to enable it when you configured PHP?)
</code>
</blockquote>
this means that PHP cannot connect back to the official SSL port. 
Please check the 
"Registered Stream Socket Transports" from the <code>phpinfo()</code> (see the <code>test.php</code> page), it should display: <code>tcp, udp, ssl, sslv3, sslv2, tls</code>. If not, please recompile PHP with SSL enabled, use the flag <code>--with-openssl</code>.
<p>
A workaround is to use the official non-SSL port or to open a
dedicated local port for the PHP-Java communication. The following
example is for Tomcat:
<p>
<ol>
<li>Disable <code>override_hosts</code> in the web application <code>WEB-INF/web.xml</code>:
<blockquote>
<code>
         &lt;init-param&gt;<br>
           &lt;param-name&gt;override_hosts&lt;/param-name&gt;<br>
           &lt;param-value&gt;Off&lt;/param-value&gt;<br>
         &lt;/init-param&gt;<br>
</code>
</blockquote>
<li> Open a local port in the tomcat <code>conf/server.xml</code> (only necessary if you have disabled the official non-SSL port):
<blockquote>
<code>
  &lt;Service name="Catalina"&gt;<br>
     [...]<br>
     &lt;Connector port="9157" address="127.0.0.1"  /&gt;<br>
     [...]<br>
  &lt;/Service&gt;<br>
</code>
</blockquote>
<li> Set the communication port in the PHP <code>.ini</code> (the <code>phpinfo()</code> or <code>test.php</code> displays the location of the responsible <code>.ini</code> file):
<blockquote>
<code>
  [java]<br>
  java.hosts = 127.0.0.1:9157<br>
  java.servlet = User<br>
</code>
</blockquote>
</ol>
If you want to use the official non-SSL port (usually port number
8080), change the <code>java.hosts</code> line accordingly.<p>
Restart the application server or servlet engine. Check the settings by running <code>phpinfo()</code> or by visiting the <code>test.php</code> page. 
</p>
</a>
</ul>
</FONT></P> <H1>Related</H1> <P><FONT > <ul> 
<li> <a
href="http://www.eclipse.org/proposals/php-ide/">A PHP IDE</a>.  
<li> <a
href="http://www.caucho.com/resin-3.0/php/index.xtp">A commercial, free
(GPL) PHP engine written in pure java</a>.  
<li> <a
href="http://www.zend.com/store/products/zend-platform/java.php">A
commercial, non-free bridge which uses the same technology as the
PHP/Java Bridge</a>.  
<li> <a
href="http://www.devx.com/Java/Article/21707">Calling Enterprise Java
Beans from PHP/SOAP</a>.  
<li> <a
href="examples/J2EE/RMI-IIOP/README">Calling
Enterprise Java Beans from the PHP/Java Bridge</a>.  </ul> </FONT></P>

</BODY>
</HTML>
@


1.65
log
@Release-3-2-1
@
text
@@


1.64
log
@Release-3-2-1
@
text
@a419 5
         }
      try {<br>
       &nbsp;&nbsp;new java("java.lang.String", null);<br>
      } catch(JavaException $ex) {<br>
      &nbsp;&nbsp;rethrow($ex);<br>
@


1.63
log
@Release-3-2-1
@
text
@d719 1
a719 61
<H2>Installation from source</H2>
 For other operating systems, e.g. Solaris, Windows, BSD or Mac-OSX, please follow 
the instructions below (on Security Enhanced Linux please use the RPM or please read the README before installation).</FONT></FONT></P>
<UL>
	<LI><P><FONT >Make sure you
	have java version 1.4.2 or higher, gcc 3.3.3 or higher, apache 1.3 or
	higher, <em>GNU autoconf </em> 2.57 or higher, <em>GNU libtool</em> 1.4.3 or higher, <em>GNU automake</em> 1.6.3 or higher, GNU make and php 4.3.4 or higher
	installed. You can check the version numbers with the commands <code>java
	-version</code>, <code>gcc --version</code>, <code>apachectl -version</code>, <code>libtool --version</code>, <code>automake --version</code>, <code>make null --version</code>, <code>autoconf --version</code> and
	<code>php-config --version</code>.
	</P>
	<LI><P><FONT ><FONT >Download
	the source code of the bridge from
	</FONT><A HREF="http://www.sourceforge.net/projects/php-java-bridge"><FONT >http://www.sourceforge.net/projects/php-java-bridge</FONT></A></FONT></P>
	<LI><P><FONT >Extract the file
	with the command: <code>cat php-java-bridge_v.x.y.tar.gz | gunzip |
	tar xf -</code></FONT></P>
	<LI><P STYLE="font-style: normal"><FONT >In
	the directory php-java-bridge-v.x.y build the module: 
<BR><BR><code># compile with jdk1.4, use jre1.6 at run-time<br>
phpize &amp;&amp; ./configure
	--with-java=/usr/java/jdk1.4,/usr/java/jre1.6 &amp;&amp; make </code></FONT></P>
	<LI><P STYLE="font-style: normal"><FONT >Then
	install the module as root. Type:<BR><BR><code>su -c 'sh
	install.sh'<BR>&lt;enter password&gt;</code></FONT></P>
	<LI><P STYLE="font-style: normal"><FONT ><A name="mode2">The PHP/Java Bridge can be run as a <strong>sub-component of the web server</strong>: 
<br><br>
<code>
Do you want to install the Servlet/J2EE back end (recommended)?<br>
install j2ee back end (yes/no): no<br>
<br>
</code>
<br>
The created PHP ini file (usually <code>java.ini</code> located in <code>/etc/php.d/</code> or <code>php.ini</code> located in <code>c:\winnt\</code>) should contain:
	<BR><BR><code>extension = java.so<BR>[java]</code></FONT></A></P>
	<LI><P STYLE="font-style: normal"><FONT >Restart
	the apache service with the command: <code>apachectl restart</code></FONT></P>
	<LI><P><FONT >You can now test
	the web installation. Copy the test.php file to the document root (usually /var/www/html) and invoke the file with your browser. You should see that the bridge module is activated and running.  The bridge back end automatically starts or re-starts whenever you start or re-start the web-server.
	</P>
	<LI><P><FONT ><A name="mode4">In a production environment which requires <strong>load balancing and fail over</strong> or <strong>session sharing between PHP, JSP and Servlets</strong>, it is recommended to deploy the back end into a servlet engine or an application server; <a href="http://www.onjava.com/pub/a/onjava/2004/03/31/clustering.html">a tomcat 5 cluster</a> for example:
<br><br>
<code>
Do you want to install the Servlet/J2EE back end (recommended)?<br>
install j2ee back end (yes/no): yes<br>
<br>
Enter the location of the autodeploy folder.<br>
autodeploy (/usr/share/tomcat5/webapps): /opt/SUNWappserver/domains/domain1/autodeploy<br>
</code>
<br>
The created PHP ini file (usually <code>php-servlet.ini</code> located in <code>/etc/php.d</code> or <code>php.ini</code> located in <code>c:\winnt\</code>) should contain:
<BR><BR><code>extension = java.so<BR>[java]<br>
java.hosts=&quot;127.0.0.1:8080&quot<br>
java.servlet=On
</code>
<br><br>
If you don't have Apache or IIS, install PHP as a CGI or FastCGI binary so that your application server <a href="server/documentation/API/php/java/bridge/Util.html#DEFAULT_CGI_LOCATIONS">can find it</a> or <a href="server/WEB-INF/web.xml"> enable the <code>php_exec</code> setting</a> and start the application server.
</A> </FONT>

	</P>
</UL>
d866 15
a880 1
<br><br>
d883 1
a883 1
information please read the <a href="README">README</a>, <a href="INSTALL">INSTALL</a>, <a href="INSTALL.LINUX">INSTALL.LINUX</a>, <a href="INSTALL.J2EE">INSTALL.J2EE</a>, <a href="INSTALL.WEBSPHERE">INSTALL.WEBSPHERE</a>, <a href="INSTALL.ORACLE">INSTALL.ORACLE</a> documents contained in
d891 1
a891 1
</P> <H1>FAQ</H1> <P><FONT > <ul> <li><H4>The bridge doesn't compile
d907 1
a907 4
recent Debian X86 installations, Ubuntu for example, it is also
possible to install the RPM binaries: Open the <a href="#binary-versions">appropriate binary RPM</a>
with a file manager and drag and drop the contents of the <code>lib/php</code>
directory to <code>/usr/lib/php</code> and restart apache.</p>
a909 42
<A NAME="binary-versions"></A>
<center>
<B
>Table 3. Binary Versions</B
></P
>
<TABLE
BORDER="1"
><COL><COL><COL><COL><THEAD
><TR
><TH
>Name</TH
><TH
>ABI</TH
></TR
></THEAD><TBODY
><TR
><TD
>php-java-bridge-x.y.z-1.RHEL.i386.rpm</TD
><TD
>PHP 4 (&gt;= 4.3.2)</TD
></TR
>
<TR
><TD
>php-java-bridge-x.y.z-1.FC4.i386.rpm</TD
><TD
>PHP 5.0.x</TD
></TR
>
<TR
><TD
>php-java-bridge-x.y.z-1.FC5.i386.rpm</TD
><TD
>PHP 5.1 or PHP 6.x</TD
></TR
>
</TBODY>
</TABLE
>
</center>
 
@


1.62
log
@Release-3-2-1
@
text
@d724 1
a724 1
	have java version 1.4.2 or higher, gcc 3.2 or higher, apache 1.3 or
d734 1
a734 1
	with the command: <code>cat php-java-bridge_v.x.y.tar.bz2 | bunzip2 |
@


1.61
log
@Release-3-2-1
@
text
@d12 1
a12 1
  is an optimized, XML-based network protocol which can be used to connect a native script engine with a Java or <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm">ECMA 335</a> virtual machine. It is more than 50 times faster than local RPC via SOAP, requires less resources on the web-server side and it is faster and more reliable than a communication via the Java Native Interface.</p>
d19 1
a19 1
href="server/documentation/API/overview-summary.html">back-ends</a>. The
d28 1
a28 1
back-end, if needed.
d33 5
a37 4
application server running the PHP/Java Bridge back end or each HTTP server may
own a PHP/Java Bridge back end and communicate with a J2EE Java application
server by exchanging Java value objects; the necessary client-stub
classes (ejb client .jar) can be loaded at run-time.  </FONT></P>
d40 1
a40 1
back-end is running inside a ECMA compliant VM, for example Novell's
d44 1
a44 1
<P><FONT > When the back-end is running in a J2EE environment, session
d46 3
a48 2
balancing is available <a href="http://www.onjava.com/pub/a/onjava/2004/03/31/clustering.html">when the J2EE environment supports these
features.</a>  </FONT></P>
d51 3
a53 3
native interface ("JNI"). PHP instances are allocated from the HTTP
(Apache/IIS) pool, instances of java/j2ee components are allocated
from the back-end. The allocated instances communicate using a
d56 1
a56 1
case a PHP instance crashes, it will not take down the java
d63 7
a69 4
href="INSTALL">extension module</a> for PHP versions >= 4.3.2. When
the bridge has been configured to run without an external back-end, no
Java, .NET or Mono is necessary; popular Java libraries such as
<code>lucene.jar</code> or <code>itext.jar</code> can be <a
d74 1
a74 1
When the bridge has been configured to run with an external back-end, three back-ends are available: a "standalone back-end" called <code>JavaBridge.jar</code>, a J2EE back-end and Servlet SAPI <code>JavaBridge.war</code> and a Mono/.NET back-end called <code>MonoBridge.exe</code>.
d259 1
a259 1
     available to the current script. All implicit web objects (session, servlet context, etc.) are <a href="server/documentation/API/php/java/servlet/Context.html#getHttpServletRequest()">available from the context</a>, if the back-end is running in a servlet engine or application server. The following example uses the jdk1.6 <a href="http://java.sun.com/javase/6/docs/tooldocs/share/jrunscript.html"><code>jrunscript</code></a> to eval PHP statements interactively:  <br><br>
d336 1
a336 1
  <code>$session=<strong><a href="documentation/PHP-API/html/java_8c.html#doc25">java_session</a></strong>()</code>: Creates or retrieves a session context. When the back-end is running in a J2EE environment, the session is taken from the request object, otherwise it is taken from PHP. Please see the  <a href="server/documentation/API/php/java/bridge/ISession.html">ISession interface documentation</a> for details. The <code>java_session()</code> must be called <a href="http://www.php.net/manual/en/function.headers-sent.php">before the response headers have been sent</a> and it should be called as the first statement within a PHP script.
d747 2
a748 2
Do you want to install the Servlet/J2EE back-end (recommended)?<br>
install j2ee back-end (yes/no): no<br>
d757 1
a757 1
	the web installation. Copy the test.php file to the document root (usually /var/www/html) and invoke the file with your browser. You should see that the bridge module is activated and running.  The bridge back-end automatically starts or re-starts whenever you start or re-start the web-server.
d759 1
a759 1
	<LI><P><FONT ><A name="mode4">In a production environment which requires <strong>load balancing and fail over</strong> or <strong>session sharing between PHP, JSP and Servlets</strong>, it is recommended to deploy the back-end into a servlet engine or an application server; <a href="http://www.onjava.com/pub/a/onjava/2004/03/31/clustering.html">a tomcat 5 cluster</a> for example:
d762 2
a763 2
Do you want to install the Servlet/J2EE back-end (recommended)?<br>
install j2ee back-end (yes/no): yes<br>
d828 1
a828 1
>The name of the communication channel for the local back-end. Must be an integer, if a secure "Unix domain" channel is not available (Windows, Mac OSX).</TD
d849 1
a849 1
>The log file for the local PHP/Java Bridge back-end.</TD
d858 1
a858 1
>Additional bridge hosts which are used when the local back-end is not available.</TD
d868 1
a868 1
>The communication protocol. If set to <code>On</code> or to <code>User</code>, the bridge uses HTTP to communicate with the <code>java.hosts</code> back-ends. The option <code>User</code> preserves the context, <code>On</code> is for backward compatibility and rewrites the context to: <code>/JavaBridge/JavaBridge.phpjavabridge</code>.</TD
d870 1
a870 1
><code>;; Make sure that this option is only set <br>;; if your back-end 
d903 1
a903 1
>Use persistent connections to the back-end. If this flag is set to <code>On</code>, the Apache/Tomcat combination delivers Java based content as fast as
d939 1
a939 1
<a href="INSTALL">INSTALL document</a> as close as possible. In particular the back-end needs the specified versions of <em>GNU autoconf</em>, <em>GNU libtool</em> and <em>GNU automake</em> in the path. Don't try to re-use specialized versions which came with your operating system (e.g. symlink libtool-1.5 to libtool), this will not work; if you don't have autoconf 2.59, automake 1.9 and libtool 1.5.20, you must compile and install them, as described in the INSTALL document. 
d948 1
a948 1
the back-end compilation can be switched off with the <code>--disable-backend</code> configure option. A compiled, platform-independent back-end ("JavaBridge.war") can be found in the download folder.
d1008 1
a1008 1
server?</H4> <p>No. The bridge back-end is written in pure java, it
d1058 1
a1058 1
<li> <H4>Where is my output?</H4> <p><code>System.out</code> and <code>System.err</code> are redirected to the server log file(s). When PHP scripts are invoked from a java framework (Java Server Faces for example), even the PHP output is redirected. For the standalone back-end the output appears in the <code>/var/log/php-java-bridge.log</code> or in JavaBridge.log, see .ini option <code>java.log_file</code>. For the j2ee back-end the location of the log file(s) depends on the j2ee server configuration.</p> 
d1219 1
a1219 1
<p>Furthermore it is possible to start a standalone back-end, for example with the command:<br><br>
d1234 1
a1234 1
<li> <H4>I want to start the back-end automatically as a sub-component of my HTTP Server. How do I pass my own java options and how do I change the security context and the UID of the Java process?</H4> 
d1355 1
a1355 1
<li> <a name="http-front-end"><H4>I want to use Apache/IIS as a front-end and tomcat as a back-end. How do I enable PHP for all my applications?</H4></a>
d1391 1
a1391 1
<li> <a name="php-jsp-session-sharing"><H4>I want to use Apache/IIS as a front-end and tomcat as a back-end. How do I enable PHP and JSP for all my applications?</H4></a>
d1452 1
a1452 1
The above <code>User</code> setting enables session sharing between PHP and JSP, it forwards from <code>http://host<em>/myApp/foo.php</em></code> to the tomcat back-end at <code>127.0.0.1:8080</code> using the request <code>PUT <em>/myApp/foo.php</em>javabridge</code>. This triggers the <code>GlobalPhpJavaServlet</code> configured in the tomcat <code>web.xml</code>.
d1504 1
a1504 1
OutOfMemory conditions can be debugged by running the back-end with e.g.:<br><br>
@


1.60
log
@Release-3-1-8
@
text
@d12 1
a12 1
  is an optimized, XML-based network protocol which can be used to connect a native script engine with a Java or <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm">ECMA 335</a> virtual machine. It is more than 50 times faster than local RPC via SOAP, uses less resources on the web-server side and it is faster and more reliable than a communication via the Java Native Interface.</p>
d33 2
a34 2
application server running the PHP/Java Bridge or each HTTP server may
own a PHP/Java Bridge and communicate with a J2EE Java application
@


1.59
log
@Release-3-1-8rc3
@
text
@d53 1
a53 1
href="documentation/PHP-API/html/java_8c.html#a32"><code>java_closure()</code></a> and the <a href="server/documentation/API/php/java/bridge/Invocable.html">invocable interface</a>. In
d201 1
a201 1
  <code>new <strong><a href="documentation/PHP-API/html/java_8c.html#a54">Java</a></strong>("CLASSNAME")</code>: References and instantiates the class CLASSNAME.
d217 1
a217 1
  <code>new <strong><a href="documentation/PHP-API/html/java_8c.html#a55">JavaClass</a></strong>("CLASSNAME")</code>: References the class CLASSNAME without creating an instance. The returned object is the class object itself, not an object of the class.
d232 1
a232 1
  <code><strong><a href="documentation/PHP-API/html/java_8c.html#a23">java_require</a></strong>("JAR1;JAR2")</code>: Makes additional libraries
d253 1
a253 1
  <code><strong><a href="documentation/PHP-API/html/java_8c.html#a26">java_context</a></strong>()</code>: Makes the <code>javax.script.ScriptContext</code>
d263 1
a263 1
  <code><strong><a href="documentation/PHP-API/html/java_8c.html#a31">java_values</a></strong>(JAVA_OBJECT)</code>: Fetches the values for <code>JAVA_OBJECT</code>, if possible. Examples:<br><br><blockquote>
d284 1
a284 1
  <code><strong><a href="documentation/PHP-API/html/java_8c.html#a31">java_cast</a></strong>(JAVA_VALUE, php_type)</code>: Converts a primitive JAVA_VALUE to a php value of type php_type. Unlike <code>java_values</code>, which return the "natural" php value for the JAVA_VALUE, the cast can convert the JAVA_VALUE into the desired php_type before it is returned. Allowed conversions are "string", "boolean", "integer" or "long", "double" or "float", "null", "array" and "object". The "object" conversion is the identiy function. Since PHP5 (php_type)JAVA_VALUE is identical to java_cast(JAVA_VALUE, php_type) (Zend Engine 2 and above only).  Examples:<br><br><blockquote>
d303 1
a303 1
  <code><strong><a href="documentation/PHP-API/html/java_8c.html#a29">java_begin_document</a></strong>()</code> and <code><strong><a href="documentation/PHP-API/html/java_8c.html#a30">java_end_document</a></strong>()</code>: Enables/disables XML stream mode. In XML stream mode the PHP/Java Bridge XML statements are sent in one XML stream. Compared with SOAP, which usually creates the entire XML document before sending it, this mode uses much less resources on the web-server side. Raised server-side exceptions are reported when <code>java_end_document()</code> is invoked. Example:<br><br><blockquote>
d320 1
a320 1
  <code><strong><a href="documentation/PHP-API/html/java_8c.html#a32">java_closure</a></strong>(ENVIRONMENT, MAP, TYPE)</code>: Makes it possible to call PHP code from Java.  It closes over the PHP environment, packages it up as a java class and returns an instance of the class.  If the ENVIRONMENT is missing, the current environment is used. If MAP is missing, the PHP procedures must have the same name as the required procedures. If TYPE is missing, the generated class is "generic", i.e. the interface it implements is determined when the closure is applied. Example:<br><br><blockquote>
d331 1
a331 1
  <code>$session=<strong><a href="documentation/PHP-API/html/java_8c.html#a25">java_session</a></strong>()</code>: Creates or retrieves a session context. When the back-end is running in a J2EE environment, the session is taken from the request object, otherwise it is taken from PHP. Please see the  <a href="server/documentation/API/php/java/bridge/ISession.html">ISession interface documentation</a> for details. The <code>java_session()</code> must be called <a href="http://www.php.net/manual/en/function.headers-sent.php">before the response headers have been sent</a> and it should be called as the first statement within a PHP script.
d344 1
a344 1
href="documentation/PHP-API/html/java_8c.html#a25">java_session</a></strong>(SESSIONNAME)</code>:
d388 1
a388 1
  <li> <code><strong><a href="documentation/PHP-API/html/java_8c.html#a54">JavaException</a></strong></code>: A java exception class. Available in PHP 5 and
d395 2
a396 2
&nbsp;&nbsp;         $exStr = java_cast($ex, "string");
&nbsp;&nbsp;         echo "Exception occured; mixed trace: $exStr\n";
d450 1
a450 1
  <li> <code><strong><a href="documentation/PHP-API/html/java_8c.html#a24">java_instanceof</a></strong>(JAVA_OBJ, JAVA_CLASS)</code>: Tests if JAVA_OBJ is an instance of JAVA_CLASS.  Example:<br><br>
d470 1
a470 1
  <li> <code><a href="documentation/PHP-API/html/java_8c.html#a20">java_last_exception_get</a>()</code>: Returns the last exception instance or
d473 1
a473 1
  <li> <code><a href="documentation/PHP-API/html/java_8c.html#a21">java_last_exception_clear</a>()</code>: Clears the error condition.  Since PHP 5 you can use <code>try/catch</code> instead.
d632 1
a632 1
      <a href="documentation/PHP-API/html/java_8c.html#a23">java_require</a>. <a name="sel">
d1014 1
a1014 1
href="documentation/PHP-API/html/java_8c.html#a25">java_session()<a></code>
d1542 1
a1542 1
By using <a href="documentation/PHP-API/html/java_8c.html#a32"><code>java_closure()</code></a> and the visitor pattern for example. The <code>tests.php5</code> folder contains a <code>script_api.php</code> example which shows how to implement <code>java.lang.Runnable</code> to run multiple PHP threads, concurrently accessing a shared resource.
@


1.58
log
@Release-3-1-8rc1
@
text
@d14 15
a28 1
The <a href="documentation/PHP-API/html/java_8c.html">php java extension</a> or the <a href="java/README">pure PHP PHP/Java Bridge implementation</a> use this protocol to connect running PHP instances with already running Java or .NET <a href="server/documentation/API/overview-summary.html">back-ends</a>. The communication works in both directions, the <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> interface can be used to connect to a running PHP server (Apache/IIS, FastCGI, ...) so that Java components can call PHP instances and PHP scripts can invoke CLR (e.g. VB.NET, C#, COM) or Java (e.g. Java, KAWA, JRuby) based applications or transfer control back to the environment where the request came from. The bridge can be set up to automatically start the PHP front-end or the Java/.NET back-end, if needed.
d58 10
a67 2
<P><FONT > The PHP/Java Bridge download contains a <a href="java/README">pure PHP implementation</a> or an <a href="INSTALL">extension module</a> for PHP versions >= 4.3.2 and a set of optional, auto-generated <a href="#proxies">PHP classes</a>. When the bridge has been configured to run without an external back-end, no Java, .NET or Mono is necessary;  popular Java libraries such as <code>lucene.jar</code> or <code>itext.jar</code> can be <a href="README.GNU_JAVA">interpreted by the bridge code</a> without using a Java SDK or Java JRE.
</p>
d72 2
a73 1
To access Java libraries from PHP the following is necessary:
d80 3
a82 1
</ol> </p> <p> The Java/.NET libraries can be called from any PHP implementation
d85 1
a85 1
<blockquote>
d87 1
a87 1
&lt;?php<br>
d89 3
a91 3
&nbsp;&nbsp;const Pc="&lt;C v=\"%s\" p=\"I\"&gt;", PC="&lt;/C&gt;";<br>
&nbsp;&nbsp;const Pi="&lt;I v=\"%d\" m=\"%s\" p=\"I\"&gt;", PI="&lt;/I&gt;";<br>
&nbsp;&nbsp;const Ps="&lt;S v=\"%s\"/&gt;", Pl="&lt;L v=\"%d\" p=\"%s\"/&gt;", Po="&lt;O v=\"%d\"/&gt;";<br>
d94 1
a94 1
&nbsp;&nbsp;function __construct() { $this-&gt;c=fsockopen("127.0.0.1",9267); fwrite($this-&gt;c, chr(0100)); }<br>
d111 2
a112 1
&nbsp;&nbsp;function getResult() { $res = fread($this-&gt;c, 8192); $ar = sscanf($res, "%s v=\"%s"); return substr($ar[1], 0, strpos($ar[1], "\"")); }<br>
d153 1
a153 1
</code>
d155 1
d157 1
a157 2

<p><a name="proxies">To make programming more convenient it is recommended, although not required, to install the <a href="java/README">pure PHP-</a> or the <a href="#installation">C-based "PECL" extension</a>. Furthermore PHP classes can be created from Java libraries and be installed in the PHP PEAR <code>include_path</code>.</a> For example the following command translates the Java library <code>lucene.jar</code> into PHP and installs it  into the <code>/usr/share/pear/lucene</code> directory: 
d162 3
a164 1
The Java libraries can be accessed by including the PHP classes once. PHP code can call all public Java methods or procedures and examine all public fields. All public PHP procedures can be called from Java, all PHP classes may implement Java interfaces and PHP objects may be passed to Java procedures or methods. Example:
d284 19
d395 2
d627 1
a627 1
  locations:
d644 1
a644 36
</a></a>
<P><FONT > The PHP/Java Bridge can operate in 4 different modes: <ol>
  <li> Invoked from the dl() function.  In this mode the bridge starts
  when the HTTP server receives a client request and terminates after the response
  is written.  This is very slow because it starts a new back-end (Java or .NET VM) for
  each request. But it does not require any administrative privileges.

   <li> Permanently activated in the global php.ini file with an
 internal Java process running in the HTTP server domain.  In this
 mode the bridge back-end starts when the HTTP server starts and terminates
 when the HTTP server terminates. Recommended during
 development. Please see <a href="#mode2">web server installation
 below</a>.

   <li> Permanently activated in the global php.ini file with an
      external <a href="#mode4">application server or servlet engine</a>.
      PHP can be run as a CGI or FastCGI sub-component within a pure java application server or be installed as a Apache/IIS module. 

   <li> As a script extension within a pure java application (requires Java >= 1.6).

</ol>
<P><FONT > Furthermore the PHP/Java Bridge can be: <ul> <li> Compiled
into PHP.  This is not recommended because it requires a compilation
of the entire PHP library. If you want to do this, please read the
README file. 

   <li> Configured and compiled to run without java. The GNU gcc 4
compiler library gcj can used to interpret java libraries. Thus it is
possible to use popular java libraries such as Apache's lucene or
Lowagi's itext directly from PHP, without the need to install a java
VM.

   <li> Compiled with Novell's MONO (a ".NET" clone).  This is
 available as a separate download.  </ul>

</FONT></P>
d652 1
a652 1
Open a command shell and type the following commands:
d670 1
a670 1
Note that the PHP/Java Bridge and the libraries are native code do
@


1.57
log
@Release-3-1-8rc
@
text
@d52 77
a128 4
<li> the extension module and the optional back-end should be installed in the PHP <code>extension_dir</code> directory. For example if the bridge has been configured to use the standalone back-end on Unix/Linux, the files <code>java.so</code> and <code>JavaBridge.jar</code> should be copied to the PHP <code>extension_dir</code>
<li>  a PHP <code>.ini</code> entry is necessary to activate the extension. For example the following line in the global php.ini file activates the extension on Unix/Linux:
<code> extension=java.so </code>
</ol>
d130 3
a132 1
<p><a name="proxies">It is recommended, although not required, to create PHP classes from the Java libraries and to install them into the PHP PEAR <code>include_path</code>.</a> For example the following command translates the Java library <code>lucene.jar</code> into PHP classes and installs them into the <code>/usr/share/pear/lucene</code> directory: 
d165 1
a165 1
<p>The following sections describe the low-level interface. It can be used to create dynamic PHP proxies or PHP/Java Bridge bindings for other languages such as Perl or Python.
d168 1
a168 1
<P><FONT > The bridge adds the following primitives to PHP.  The type
d633 2
a634 2
<H1>Installation
instructions</H1>
d1544 3
a1546 1
A workaround is to open a dedicated local (non-SSL) HTTP port for the PHP-Java communication. The following example is for Tomcat:
d1558 1
a1558 1
<li> Open a local port in the tomcat <code>conf/server.xml</code>:
d1577 2
@


1.56
log
@Release-3-2-0devel
@
text
@d14 1
a14 1
The <a href="documentation/PHP-API/html/java_8c.html">php java extension</a> uses this protocol to connect running PHP instances with already running Java or .NET <a href="server/documentation/API/overview-summary.html">back-ends</a>. The communication works in both directions, the <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> interface can be used to connect to a running PHP server (Apache/IIS, FastCGI, ...) so that Java components can call PHP instances and PHP scripts can invoke CLR (e.g. VB.NET, C#, COM) or Java (e.g. Java, KAWA, JRuby) based applications or transfer control back to the environment where the request came from. The bridge can be set up to automatically start the PHP front-end or the Java/.NET back-end, if needed.
a42 41
<H1>Motivation</H1>
<H2>J2EE as a standard framework for PHP scripts</H2>
<P><FONT ><img src="tomcat-jsf.jpg"
align="right" vspace="0" hspace="0" name="php-jsf" alt="Apache/Tomcat
with PHP scripts and the Java Server Faces framework">All PHP components are essentially transient. For complex
applications it is usually necessary to introduce "middleware" components
such as (enterprise-) "java beans" or enterprise applications which
provide caching, connection pooling or the "business logic" for the
pages generated by the PHP components. Parsing XML files for example
is an expensive task and it might be necessary to cache the generated
graph. Establishing connections to databases is an expensive operation
so that it might be necessary to re-use used connections. The standard
PHP XML or DB abstractions are useless in this area because they
cannot rely on a middle tier to do caching or db connection pooling.
</FONT></P>
<H2>Platform independence</H2>
<P><FONT > Even for trivial tasks it might be necessary to use a java
class or java library. For example it might be necessary to generate
Word, Excel or PDF documents without tying the application to a
specific system platform.  </FONT></P>
<H2>A standard distribution format</H2>
<P><FONT > PHP, the PHP/Java Bridge and the php files can be packaged
within a standard J2EE archive, customers can easily deploy it into a
J2EE application server or servlet engine. They don't have to install
PHP and they usually cannot tell the difference whether the pages are
generated by PHP, JSP or servlets.  Since the bridge allows session
sharing between PHP and the J2EE components, developers can migrate
their JSP based solutions to PHP step by step.  </FONT></P>
<H2>Migration from JSP to PHP</H2>
<P><FONT >PHP and the PHP/Java Bridge might also be interesting for
Java developers. Although JSP is still used by frameworks such as jakarta <a
href="http://struts.apache.org/">Struts</a> and its successor <a
href="http://www.jcp.org/en/jsr/detail?id=127">Java Server
Faces</a>, JSP is <a href="http://www.onjava.com/pub/a/onjava/2004/06/09/jsf.html?page=1">not</a> a <a href="http://www.php.net">sucessful technology</a>. The main problem with JSP is that it requires a development tool at run-time, a "compiler", which makes deployment difficult and may generate error messages which are very difficult to understand, because they refer to an intermediate representation which has nothing to do with the original JSP file. For example if the configuration changes, it may happen that users are confronted with compiler error codes or run-time messages like "NullPointerException in __jsp" instead of proper error messages from the program. Since PHP/Java Bridge version 3.0 it is possible to embed
php scripts into the JSF framework, so that UI developers can
concentrate on developing HTML or XML templates while web developers can
create prototypes using PHP code and use the existing framework from
their code.</img>

</FONT></P> 
<p></p>
d44 1
a44 1
<P><FONT > The PHP/Java Bridge download contains an extension module for PHP versions >= 4.3.2 and a set of optional, auto-generated <a href="#proxies">PHP classes</a>. When the bridge has been configured to run without an external back-end, no Java, .NET or Mono is necessary;  popular Java libraries such as <code>lucene.jar</code> or <code>itext.jar</code> can be <a href="README.GNU_JAVA">interpreted by the bridge code</a> without using a Java SDK or Java JRE.
d225 1
a225 1
independent of the current PHP session. Please see the <a
d863 1
d1431 72
a1503 1

@


1.55
log
@Release-3-1-8devel
@
text
@d326 1
a326 1
         &nbsp;&nbsp;$ex=$ex->getCause();
d330 1
a330 1
         &nbsp;&nbsp;...
d706 1
a706 1
	<LI><P><FONT ><A name="mode4">In a production environment which requires <strong>load balancing and fail over</strong> or <strong>session sharing between PHP, JSP and Servlets</strong> it is recommended deploy the back-end into a servlet engine or an application server; <a href="http://www.onjava.com/pub/a/onjava/2004/03/31/clustering.html">a tomcat 5 cluster</a> for example:
@


1.54
log
@Release-3-1-7
@
text
@d321 19
d577 1
a577 1
      PHP be can run as a CGI or FastCGI sub-component within a pure java application server or be installed as a Apache/IIS module. 
@


1.53
log
@Release-3-1-7
@
text
@d131 1
a131 1
<p>The following sections describe the low-level Java interface. It can be used to create dynamic PHP proxies or PHP/Java Bridge bindings for other languages such as Perl or Python.
d262 2
a263 1
  <code>$session=<strong><a href="documentation/PHP-API/html/java_8c.html#a25">java_session</a></strong>(SESSIONNAME)</code>:
d265 2
a266 2
primitive uses a "private" session store with the name
SESSIONNAME. Please see the <a
d268 1
a268 1
interface documentation</a> for details. For java values
d270 2
a271 2
<code>java_session(session_id())-&gt;put('var', val)</code>.
<blockquote>
d296 2
a297 1
&nbsp;&nbsp; public static Cache instance = makeInstance();<br>
d302 1
a302 1
$instance=$Cache->instance; //instance will stay in the VM until the VM runs short of memory<br>
d421 1
a421 1
>integer (default) or long, depending on the flag <a href="#ext_java_compatibility">java.ext_java_compatibility</a>.</TD
d543 1
a543 1
<P><FONT > The PHP/Java Bridge can operate in 5 different modes: <ol>
a556 6
      external Java process.  Recommended for <a
      href="#mode3">production systems</a>.  This mode is used by the
      RPM package available for Red Hat Enterprise Linux.  In this mode
      the bridge starts and stops as a system service.

   <li> Permanently activated in the global php.ini file with an
d592 2
a593 1
Either install the bridge and standalone back-end
a596 1
rpm -i jdk-1_5_0-linux-i586.rpm<br>
d598 2
a599 1
rpm -i php-java-bridge-standalone-x.y.z-1-i386.rpm<br>
d602 9
a610 2
</p>
or the tomcat back-end
d614 1
d616 1
a616 1
rpm -i php-java-bridge-tomcat-x.y.z-1.i386.rpm
d619 1
d621 1
a621 1
or the development files for JDK 1.6
d629 1
a629 2
</p>
If you run a 64bit system <em>and</em> a 64bit JVM, you need to build a  64bit RPM using the command:
d633 1
a633 1
rpmbuild --rebuild php-java-bridge-x.y.z-1.src.rpm<br>
d637 2
a638 1
If you have installed the development RPM, you can run PHP scripts interactively, either from your Eclipse IDE (when available) or with the <a href="http://java.sun.com/javase/6/docs/tooldocs/share/jrunscript.html"><code>jrunscript</code></a> command:
d642 1
a642 1
/usr/java/default/bin/jrunscript -l php-interactive
d645 1
a677 2
Do you want to start the standalone back-end from a service script?<br>
install service script (yes/no): no<br>
a686 19
	<LI><P><FONT ><A name="mode3">In a <strong>production environment</strong> it is recommended to separate the java VM and the HTTP process by setting the communication channel:
<br><br>
<code>
Do you want to install the Servlet/J2EE back-end (recommended)?<br>
install j2ee back-end (yes/no): no<br>
<br>
Do you want to start the standalone back-end from a service script?<br>
install service script (yes/no): yes<br>
run the back-end with limited rights (yes/no): yes<br>
run the back-end as user (default: apache): <br>
run the back-end as group (default: apache): <br>
location of the java executable (/usr/bin/java): /opt/jdk1.5/jre/bin/java<br>
start now? (yes/no): yes<br>
</code>
<br>
The <code>java.socketname</code> has been set to the name of the socket, it will be created, if it doesn't exist.  The java section of the created PHP ini file (usually <code>java-standalone.ini</code> located in <code>/etc/php.d</code> or <code>php.ini</code> located in <code>c:\winnt\</code>) file should contain a <code>java.socketname</code> option. The following is an example from Red Hat Enterprise Linux and Fedora:
<BR><BR><code>extension = java.so<BR>[java]<BR>java.socketname="/var/run/.php-java-bridge_socket"</code><br><br>The advantage of this mode is that the java VM no longer depends on the web server and can be examined and re-started independently. The download file contains a script, <code>php-java-bridge.service</code>, which can be used to start/stop the PHP/Java Bridge back-end as a system service. All available <code>.ini</code> options are listed in <a href="#ini-options">table 2</a>.</A> </FONT>

	</P>
a826 12
><A name="ext_java_compatibility">java.ext_java_compatibility</A></TD
><TD
>Off</TD
><TD
>Since version 3 the bridge is no longer backward compatible to its predecessor "ext/java": Exact PHP numbers are now represented as java integers, java return values are no longer auto-converted into PHP values. <em>Leave it off, if possible</em>.</TD
><TD
>
java.ext_java_compatibility=On
</TD
></TR
><TR
><TD
d831 1
a831 1
>Use persistent connections to the back-end. If this flag is set to <code>On</code>, the Apache/Tomcat combination delivers java based content as fast as
d857 1
a857 1
information please read the <a href="README">README</a>, <a href="INSTALL">INSTALL</a>, <a href="INSTALL.LINUX">INSTALL.LINUX</a>, <a href="INSTALL.J2EE">INSTALL.J2EE</a>, <a href="INSTALL.WEBSPHERE">INSTALL.WEBSPHERE</a>, <a href="INSTALL.ORACLE">INSTALL.ORACLE</a> and <a href="INSTALL.WINDOWS">INSTALL.WINDOWS</a> documents contained in
d1144 1
a1144 1
If you want to start <em>one persistent VM per computer</em>, please see <a href="#mode3">Linux RPM package</a> or the <a href="#mode4">application server or servlet engine</a> description.
d1173 1
a1173 1
Please see the wrapper <code>RunJavaBridge</code> from the  RedHat <code>php-java-bridge-standalone</code> RPM for an example.
d1181 1
a1181 1
<p> Check if your PHP cgi binary supports the <code>-b</code> flag. If not, compile PHP with the <code>--enable-fastcgi</code> option or <a href="#http-front-end">use Apache or IIS as a front-end</a> instead.</p>
d1454 7
a1460 6
</FONT></P> <H1>Related</H1> <P><FONT > <ul> <li> <a
href="http://www.eclipse.org/proposals/php-ide/">A PHP IDE</a>.  <li>
<a href="http://zez.org/article/articleview/26/">A tutorial how to use
the predecessor &quot;ext/java&quot;</a>.  <li> <a
href="http://www.caucho.com/resin-3.0/php/index.xtp">A commercial free
(GPL) PHP engine written in pure java</a>.  <li> <a
d1462 3
a1464 2
commercial non-free bridge which uses the same technology as the
PHP/Java Bridge</a>.  <li> <a
d1466 2
a1467 1
Beans from PHP/SOAP</a>.  <li> <a
@


1.52
log
@Release-3-1-6
@
text
@d30 2
a31 2
sharing between PHP and JSP is always possible. <a href="http://www.onjava.com/pub/a/onjava/2004/03/31/clustering.html">Clustering and load
balancing is available, if the J2EE environment supports these
@


1.51
log
@Release-3-1-6
@
text
@d30 1
a30 1
sharing between PHP and JSP is always possible. Clustering and load
d32 1
a32 1
features.  </FONT></P>
d701 1
a701 1
	<LI><P><FONT ><A name="mode4">In a production environment which requires <strong>load balancing and fail over</strong> or <strong>session sharing between PHP, JSP and Servlets</strong> it is recommended deploy the back-end into a servlet engine or an application server; a tomcat 5 cluster for example:
d883 1
a883 1
information please read the <a href="README">README</a>, <a href="INSTALL">INSTALL</a>, <a href="INSTALL.LINUX">INSTALL.LINUX</a>, <a href="INSTALL.J2EL">INSTALL.J2EE</a> and <a href="INSTALL.WINDOWS">INSTALL.WINDOWS</a> documents contained in
d1044 1
a1044 1
$str = new Java("java.lang.String, $byteArray, 0, $length);<br>
d1172 1
a1172 1
<p>Furthermore it is possible to start standalone back-end, for example with the command:<br><br>
d1477 1
a1477 1
In contrast the Sun J2EE server correctly separates the beans/applications; the <code>$objref</code> is unique proxy generated by a parent of the <code>WebAppClassLoader</code>, so that <code>narrow</code> can always cast the proxy to <code>DocumentHome@@WebAppClassLoader</code>, even if a class with the same name is already available from the <code>WebAppClassLoader</code>.</p>
@


1.50
log
@Release-3-1-6
@
text
@d139 1
a139 1
  <code>new <strong>Java</strong>("CLASSNAME")</code>: References and instantiates the class CLASSNAME.
d155 1
a155 1
  <code>new <strong>JavaClass</strong>("CLASSNAME")</code>: References the class CLASSNAME without creating an instance. The returned object is the class object itself, not an object of the class.
d170 1
a170 1
  <code><strong>java_require</strong>("JAR1;JAR2")</code>: Makes additional libraries
d191 1
a191 1
  <code><strong>java_context()</strong></code>: Makes the <code>javax.script.ScriptContext</code>
d201 1
a201 1
  <code><strong>java_values</strong>(JAVA_OBJECT)</code>: Fetches the values for <code>JAVA_OBJECT</code>, if possible. Examples:<br><br><blockquote>
d222 1
a222 1
  <code><strong>java_begin_document</strong>()</code> and <code><strong>java_end_document</strong>()</code>: Enables/disables XML stream mode. In XML stream mode the PHP/Java Bridge XML statements are sent in one XML stream. Compared with SOAP, which usually creates the entire XML document before sending it, this mode uses much less resources on the web-server side. Raised server-side exceptions are reported when <code>java_end_document()</code> is invoked. Example:<br><br><blockquote>
d239 1
a239 1
  <code><strong>java_closure</strong>(ENVIRONMENT, MAP, TYPE)</code>: Makes it possible to call PHP code from Java.  It closes over the PHP environment, packages it up as a java class and returns an instance of the class.  If the ENVIRONMENT is missing, the current environment is used. If MAP is missing, the PHP procedures must have the same name as the required procedures. If TYPE is missing, the generated class is "generic", i.e. the interface it implements is determined when the closure is applied. Example:<br><br><blockquote>
d250 1
a250 1
  <code>$session=<strong>java_session</strong>()</code>: Creates or retrieves a session context. When the back-end is running in a J2EE environment, the session is taken from the request object, otherwise it is taken from PHP. Please see the  <a href="server/documentation/API/php/java/bridge/ISession.html">ISession interface documentation</a> for details. The <code>java_session()</code> must be called <a href="http://www.php.net/manual/en/function.headers-sent.php">before the response headers have been sent</a> and it should be called as the first statement within a PHP script.
d262 1
a262 1
  <code>$session=<strong>java_session</strong>(SESSIONNAME)</code>:
d305 1
a305 1
  <li> <code><strong>JavaException</strong></code>: A java exception class. Available in PHP 5 and
d346 1
a346 1
  <li> <code><strong>java_instanceof</strong>(JAVA_OBJ, JAVA_CLASS)</code>: Tests if JAVA_OBJ is an instance of JAVA_CLASS.  Example:<br><br>
d366 1
a366 1
  <li> <code>java_last_exception_get()</code>: Returns the last exception instance or
d369 1
a369 1
  <li> <code>java_last_exception_clear()</code>: Clears the error condition.  Since PHP 5 you can use <code>try/catch</code> instead.
d528 1
a528 1
      java_require. <a name="sel">
@


1.49
log
@Release-3-1-2
@
text
@d906 1
a906 1
<code>rpmbuild --rebuild php-java-bridge*src.rpm</code></p> <p>On
d1206 2
a1207 2
<li> <H4>I want to use PHP for all tomcat applications. Apache and IIS are not available, but performance is important. How do I install it?</H4> 
<p> Check if your PHP cgi binary supports the <code>-b</code> flag. If not, compile PHP with the <code>--enable-fastcgi</code> option.</p>
d1212 1
a1212 1
Copy the <code>JavaBridge.jar</code> and the <code>php-servlet.jar</code> from the JavaBridge.war into the tomcat <code>shared/lib</code> folder. Add the lines marked with a <code>+</code> to the tomcat <code>conf/web.xml</code>:
d1227 6
d1266 1
a1266 1
<li> <H4>How do I create a standalone PHP web application for distribution and how can users deploy it into tomcat?</H4>
d1308 1
a1308 1
<li> <H4>I want to use Apache/IIS as a front-end and tomcat as a back-end. How do I enable PHP for all my applications?</H4> 
d1344 1
a1344 1
<li> <H4>I want to use Apache/IIS as a front-end and tomcat as a back-end. How do I enable PHP and JSP for all my applications?</H4> 
@


1.48
log
@Release-3-1-2
@
text
@d195 2
a196 2
php-interactive&gt; echo java_context()->getAttribute("javax.script.name"); <br>
=&gt; STDIN <br>
@


1.47
log
@Release-3-1-0
@
text
@d239 1
a239 1
  <code><strong>java_closure</strong>(ENVIRONMENT, MAP, TYPE)</code>: Makes it possible to call PHP code from Java.  It closes over the PHP environment and packages it up as a java class.  If the ENVIRONMENT is missing, the current environment is used. If MAP is missing, the PHP procedures must have the same name as the required procedures. If TYPE is missing, the generated class is "generic", i.e. the interface it implements is determined when the closure is applied. Example:<br><br><blockquote>
d646 1
a646 1
	higher, <em>autoconf </em> 2.57 or higher, <em>libtool</em> 1.4.3 or higher, <em>automake</em> 1.6.3 or higher, GNU make and php 4.3.4 or higher
d772 1
a772 1
>java.socketname="9167"
d802 1
a802 1
>java.hosts="127.0.0.1:9168;127.0.0.1:9169"
d836 1
a836 1
java.lib="/tmp/"
@


1.46
log
@Release-3-1-0
@
text
@d1 1
d31 1
a31 1
balancing is available if the J2EE environment supports these
d39 1
a39 1
href="documentation/PHP-API/html/java_8c.html#a45"><code>java_closure()</code></a> and the <a href="server/documentation/API/php/java/bridge/Invocable.html">invocable interface</a>. In
d73 1
a73 1
java developers. Although JSP is still used by frameworks such as jakarta <a
d76 1
a76 1
Faces</a>, JSP is not <a href="http://www.onjava.com/pub/a/onjava/2004/06/09/jsf.html?page=1"> and probably never will be</a>  a <a href="http://www.php.net">sucessful technology</a>. The main problem with JSP is that it requires a development tool at run-time, a "compiler", which makes deployment difficult and may generate error messages which are very difficult to understand, because they refer to an intermediate representation which has nothing to do with the original JSP file. For example if the configuration changes, it may happen that users are confronted with compiler error codes or run-time messages like "NullPointerException in __jsp" instead of proper error messages from the program. Since PHP/Java Bridge version 3.0 it is possible to embed
d84 49
a172 1
<blockquote>
d176 1
a176 1
java_require("kawa.jar");<br>
a187 1
</blockquote>
d192 1
a192 2
     available to the current script. All implicit web objects (session, servlet context, etc.) are <a href="server/documentation/API/php/java/servlet/Context.html#getHttpServletRequest()">available from the context</a>, when the back-end is running in a servlet engine or application server. The following example uses the jdk1.6 <a href="http://java.sun.com/javase/6/docs/tooldocs/share/jrunscript.html"><code>jrunscript</code></a> to eval PHP statements interactively:  <br><br>
<blockquote>
a198 1
</blockquote>
d239 1
a239 1
  <code><strong>java_closure</strong>(ENVIRONMENT, MAP, TYPE)</code>: Makes it possible to call PHP code from java.  It closes over the PHP environment and packages it up as a java class.  If the ENVIRONMENT is missing, the current environment is used. If MAP is missing, the PHP procedures must have the same name as the required procedures. If TYPE is missing, the generated class is "generic", i.e. the interface it implements is determined when the closure is applied. Example:<br><br><blockquote>
d517 1
a517 1
  root of you web-server and evaluate the file using the browser.
d541 1
a541 1
<P><FONT > The PHP/Java Bridge can operate in 4 different modes: <ol>
d548 1
a548 1
 internal java process running in the HTTP server domain.  In this
d555 1
a555 1
      external java process.  Recommended for <a
d564 2
d572 5
a576 5
   <li> Compiled with the GNU Java library.  You can either start GNU
      Java as a separate process (just like a "real" Java VM) or
      compile everything into a PHP binary.  This should only be
      necessary, if there is no official JRE available for the OS or one
      doesn't want to ship a JRE with the product. 
d659 1
a659 1
<BR><BR><code># compile with jdk1.4, use jdk1.6 at run-time<br>
d661 1
a661 1
	--with-java=/usr/java/jdk1.4,/usr/java/jdk1.6 &amp;&amp; make </code></FONT></P>
d665 12
a676 4
	<LI><P STYLE="font-style: normal"><FONT ><A name="mode2">The PHP/Java Bridge can be run as a <strong>sub-component of the web server</strong>; add the following lines
	to the <code>php.ini</code>. Or add a file <code>java.ini</code> to the directory that contains
	the php module descriptions (usually <code>/etc/php.d/</code>) with the following
	content:<BR><BR><code>extension = java.so<BR>[java]</code></FONT></A></P>
d682 17
a698 2
	<LI><P><FONT ><A name="mode3">In a <strong>production environment</strong> it is recommended to separate the java VM and the HTTP process by setting the communication channel. The <code>java.socketname</code> should be set to the name of the socket, it will be created, if it doesn't exist.  The java section of the PHP <code>.ini</code> file should contain a <code>java.socketname</code> option. The following is an example from Red Hat Enterprise Linux and Fedora:
<BR><BR><code>extension = java.so<BR>[java]<BR>java.socketname="/var/run/.php-java-bridge_socket"</code><br><br>The advantage of this mode is that the java VM no longer depends on the web server and can be examined and re-started independently. The download file contains a script, <code>php-java-bridge.service</code>, which can be used to start/stop the PHP/Java Bridge back-end as system service. All available <code>.ini</code> options are listed in <a href="#ini-options">table 2</a>.</A> </FONT>
d701 11
a711 1
	<LI><P><FONT ><A name="mode4">In a production environment which requires <strong>load balancing and fail over</strong> or <strong>session sharing between PHP, JSP and Servlets</strong> it is recommended deploy the back-end into a servlet engine or an application server; tomcat 5 for example. Disable the <code>java.socketname</code>, either a) enable the <code>java.hosts</code> and <code>java.servlet</code> options or b), if you don't have Apache or IIS, install PHP as a CGI/FastCGI binary so that your application server can find it and start the application server. The <code>.ini</code> file should contain:
d717 1
a717 1

d810 1
a810 1
>The communication protocol. If set to <code>On</code> or to <code>User</code>, the bridge uses HTTP to communicate with the <code>java.hosts</code> back-ends. The option <code>User</code> preserves the context, <code>On</code> is for backward compatibility and rewrites the context to: <code>/JavaBridge/JavaBridge.php</code>.</TD
d853 1
a853 1
><A name="persistent_connections">.persistent_connections</A></TD
d857 2
a858 2
>Use persistent connections to the back-end. If this flag is set to <code>On</code>, the Apache/Tomcat combination delivers Java based content faster
than Tomcat standalone.</TD
d864 12
d893 1
a893 1
<a href="INSTALL">INSTALL document</a> as close as possible. In particular the back-end needs the specified versions of <em>GNU autoconf</em>, <em>GNU libtool</em> and <em>GNU automake</em> in the path. Don't try to re-use specialized versions that came with your operating system (e.g. symlink libtool-1.5 to libtool), this will not work; if you don't have autoconf 2.59, automake 1.9 and libtool 1.5.20, you must compile and install them, as described in the INSTALL document. The back-end compilation can be switched off with the <code>--disable-back-end</code> configure option. A compiled, platform-independent back-end ("JavaBridge.war") can be found in the download folder.
d899 6
a904 2
problem report).</p> <p>On RPM based Security Enhanced Linux
installations (RHEL, Fedora) please install one of the binary REMs or
d957 3
a959 4
<code>--with-java=</code> configure option. The bridge will use the
<code>libgcj</code> library, which is part of the GNU gcc compiler, to
interpret java libraries. This library also uses much less system
resources (memory, files) than a "real" java VM.</p> <li> <H4>Does the
d964 1
a964 1
returned to the client and a new PHP instance is started for the next
d972 1
a972 1
href="documentation/PHP-API/html/java_8c.html#a34">java_session()<a></code>
d1005 5
a1009 1
file. An example file will ship with version 3.1. </p> 
d1187 1
a1187 1
<li> <H4>I want to start the back-end automatically as a sub-component of my HTTP Server. How do I pass my own java options and how do I change the security context and the UID of the java process?</H4> 
d1189 1
a1189 1
The bridge uses a wrapper binary which can carry the SUID bit and can be tagged with the SEL security context. This wrapper also allows you to change the standard options, which are: <code>java -Djava.library.path=...  -Djava.class.path=... -Djava.awt.headless=true php.java.bridge.JavaBridge SOCKET_NAME LOG_LEVEL LOG_FILE</code>.
d1207 1
d1263 1
a1263 1
Download the J2EE binary and copy the <code>JavaBridge.jar</code> and the <code>php-servlet.jar</code> from the JavaBridge.war to the <code>myApplication/WEB-INF/lib/</code> folder. Copy the contents of the CGI folder to <code>myApplication/WEB-INF/cgi/</code>. Create the file <code>myApplication/WEB-INF/web.xml</code> with the following content:
d1299 2
a1300 1
Copy the files <code>sessionSharing.jsp</code> and <code>sessionSharing.php</code> from the <code>JavaBridge.war</code> to <code>myApplication</code> and create <code>myApplication.war</code>, for example with the commands: <code>cd myApplication; jar cf ../myApplication.war *</code>. The web archive can now be distributed, copy it to the tomcat <code>webapps</code> directory and re-start tomcat. Visit <code>http://localhost/myApplication/sessionSharing.php</code> and <code>http://localhost/myApplication/sessionSharing.jsp</code>.
d1421 1
a1421 1
To test the above settings create a directory <code>testapp</code> and copy the <code>sessionSharing.php</code> and <code>sessionSharing.php</code> from the <code>JavaBridge.war</code> into this folder. Type <code>cd testapp; jar cf ../testapp.war *</code> and copy the testapp.war into the tomcat <code>webapps</code> folder.
d1423 1
a1423 1
<code>http://localhost/testapp</code>, click on sessionSharing.php and check the generated cookie value. The <code>path</code> value must be <code>/testapp</code>. Click on sessionSharing.jsp, 
@


1.45
log
@Release-3-1-0
@
text
@d47 1
a47 1
applications is usually necessary to introduce "middleware" components
d527 1
a527 1
      necessary if there is no official JRE available for the OS or one
d626 1
a626 1
	<LI><P><FONT ><A name="mode3">In a <strong>production environment</strong> it is recommended to separate the java VM and the HTTP process by setting the communication channel. The <code>java.socketname</code> should be set to the name of the socket, it will be created if it doesn't exist.  The java section of the PHP <code>.ini</code> file should contain a <code>java.socketname</code> option. The following is an example from Red Hat Enterprise Linux and Fedora:
d800 1
a800 1
<a href="INSTALL">INSTALL document</a> as close as possible. In particular the back-end needs the specified versions of <em>autoconf</em>, <em>libtool</em> and <em>automake</em> in the path. Back-End compilation can be switched off with the <code>--disable-back-end</code> configure option. A compiled, platform-independent back-end ("JavaBridge.war") can be found in the download folder.
d873 1
a873 1
<code>$_SESSION</code> is syntactic shugar provided by the <a
d883 1
a883 1
managed bean descriptor<a>. For example if the
d917 2
a918 2
&abs;&nbsp;public class java {<br>
&nbsp;&nbsp;&nbsp;&nbsp;public Emmy bridge {JavaBridge, JavaBridgeRunner};<br>
d1156 1
a1156 1
Check if the PHP Fast-CGI server is running. The process list should display 20 (default) PHP instances waiting in the PHP Fast-CGI pool. If not, check if your PHP binary has been compiled with Fast-CGI enabled. Copy a Fast CGI enabled binary into the <code>webapps/JavaBridge/WEB-INF/cgi/</code> folder, if necessary.
@


1.44
log
@Release-3-1-0
@
text
@d972 1
a972 1
The Jython 2.1 code<br>
d975 1
a975 1
from java import lang<br>
d977 5
a981 5
buf = lang.StringBuffer();<br>
i=0<br>
while i<400000:<br>
&nbsp;&nbsp;&nbsp;&nbsp;i=i+1<br>
&nbsp;&nbsp;&nbsp;&nbsp;buf.append(lang.String(lang.String.valueOf(i)));<br>
d983 1
a983 1
print buf.length();<br>
d1026 1
d1030 1
a1030 1
>java -jar JavaBridge.jar INET:9967 & time php t11.php</TD
d1032 1
a1032 1
>PHP5 + PHP/Java Bridge 3.0.8</TD
d1034 1
a1034 1
>TCP Sockets, client and server running on the same CPU</TD
d1036 3
a1038 18
>0m22.407s,<br>
0m9.848s,<br>
0m0.145s
</TD
></TR
>
<TBODY
><TR
><TD
>java -jar JavaBridge.jar INET:9967 & time php t11.php</TD
><TD
>PHP5 + PHP/Java Bridge 3.0.8</TD
><TD
>TCP Sockets, client and server running on different machines</TD
><TD
>0m31.507s,<br>
0m26.460s,<br>
0m3.567s
d1042 1
d1059 1
a1059 16
<TBODY
><TR
><TD
>time java -classpath jython.jar org.python.util.jython t11.py</TD
><TD
>Jython 2.1</TD
><TD
>none (native code)</TD
><TD
>0m6.725s,<br>
0m6.551s,<br>
0m0.107s
</TD
></TR
>
</TBODY>
@


1.43
log
@3.1-branch
@
text
@d770 13
d1060 1
a1060 1
>time jrunscript -J-Xmx512M -J-Xms512M -l is t11.js</TD
d1411 1
a1411 1
href="examples/j2ee/README">Calling
@


1.42
log
@*** empty log message ***
@
text
@d11 3
a13 1
  is an optimized, XML-based network protocol which can be used to connect a native script engine with a Java or <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm">ECMA 335</a> virtual machine. The <a href="documentation/PHP-API/html/java_8c.html">php java extension</a> uses this protocol to connect running PHP instances with already running Java or .NET <a href="server/documentation/API/overview-summary.html">back-ends</a>. The communication works in both directions, the <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> interface can be used to connect to a running PHP server (Apache/IIS, FastCGI, ...) so that Java components can call PHP instances and PHP scripts can invoke CLR (e.g. VB.NET, C#, COM) or Java (e.g. Java, KAWA, JRuby) based applications or transfer control back to the environment where the request came from. The bridge can be set up to automatically start the PHP front-end or the Java/.NET back-end, if needed.
d611 3
a613 2
<BR><BR><code>phpize &amp;&amp; ./configure
	--with-java=/usr/java/default &amp;&amp; make </code></FONT></P>
d898 1
a898 1
<li> <H4>Where is my output?</H4> <p><code>System.out</code> and <code>System.err</code> are redirected to the server log file(s). When PHP scripts are invoked from a java framework (Java Server Faces for example), even the PHP output is redirected. For the standalone back-end the output appears in the <code>/var/log/php-java-bridge.log</code> or in JavaBridge.log, see .ini option <code>java.log_file</code>. For the j2pee back-end the location of the log file(s) depends on the j2ee server configuration.</p> 
d912 1
a912 1
java_require(greed()); // load php.class<br>
d1145 1
a1145 1
[,,,]<br>
d1166 1
a1166 1
To test the above settings create a directory <code>testapp</code> and copy the <code>test.php</code> file from the <code>JavaBridge.war</code> into this folder. Type <code>DD testapp; jar cf ../testapp.war *</code> and copy the testapp.war into the tomcat <code>webapps</code> folder.
d1171 1
a1171 1
Check if the PHP fast CGI server is running. The process list should display 20 (default) PHP instances waiting in the PHP fast CGI pool. If not, check if your PHP binary has been compiled with fast CGI enabled. Copy a fast CGI enabled binary into the <code>webapps/JavaBridge/WEB-INF/cgi/</code> folder, if necessary.
d1369 16
@


1.41
log
@Release-3.0.8
@
text
@d11 1
a11 1
  is an optimized XML protocol which can be used to connect a native script engine with a Java or <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm">ECMA 335</a> virtual machine. The <a href="documentation/PHP-API/html/java_8c.html">php java extension</a> uses this protocol to connect running PHP instances with already running Java or .NET <a href="server/documentation/API/overview-summary.html">back-ends</a>. The communication works in both directions, the <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> interface can be used to connect to a running PHP server (Apache/IIS, FastCGI, ...) so that Java components can call PHP instances and PHP scripts can invoke CLR (e.g. VB.NET, C#, COM) or Java (e.g. Java, KAWA, JRuby) based applications or transfer control back to the environment where the request came from. The bridge can be set up to automatically start the PHP front end or the Java/.NET back-end, if needed.
d956 1
a956 1
The Jun 2.1 code<br>
d1081 1
a1081 1
the <a href="#mode2"evolve-m>web server installation</a> description. 
d1108 1
a1108 1
On Unix the bridge terminates the sub-process hierarchy with <code>LONGTERM</code>, sleep 5 seconds and <code>SIGTERM</code>, if necessary, sleep 5 seconds and <code>SIGKILL</code>, if necessary. On Windows the bridge emulates the Unix kill behaviour, the bridge kills the entire sub-process hierarchy so that you can use a <code>cmd /c</code> wrapper.
d1115 1
a1115 1
Download the J2EE binary and copy the <code>JavaBridge.war</code> into the tomcat <code>vapors</code> folder. After that visit <code>http://localhost:8080/JavaBridge</code> and run the supplied PHP examples.
d1337 1
a1337 1
OutOfMemoryErrors may happen because a cached variable cannot be released, either because <p>
d1339 3
a1341 3
<li> the variable is permanently referenced by a request-handling thread or
<li> the variable has been entered into the session or application store or 
<li> the variable is referenced by a thread outside of the scope of the PHP/Java Bridge.
@


1.40
log
@Release-3.0.8rc
@
text
@d11 1
a11 1
  is an optimized XML protocol which can be used to connect a native script engine with a Java or <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm">ECMA 335</a> virtual machine. The <a href="documentation/PHP-API/html/java_8c.html">php java extension</a> uses this protocol to connect running PHP instances with already running Java or .NET <a href="server/documentation/API/overview-summary.html">backends</a>. The communication works in both directions, the <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> interface can be used to connect to a running PHP server (Apache/IIS, FastCGI, ...) so that Java components can call PHP instances and PHP scripts can invoke CLR (e.g. VB.NET, C#, COM) or Java (e.g. Java, KAWA, JRuby) based applications or transfer control back to the environment where the request came from. The bridge can be set up to automatically start the PHP frontend or the Java/.NET backend, if needed.
d17 2
a18 2
own a PHP/Java Bridge and communicate with a J2EE java application
server by exchanging java value objects; the necessary client-stub
d22 1
a22 1
backend is running inside a ECMA complient VM, for example Novell's
d26 1
a26 1
<P><FONT > When the backend is running in a J2EE environment, session
d31 2
a32 3
<P><FONT > Unlike previous attempts (the <a href="http://www.php.net/manual/en/ref.java.php">ext/java</a> or the <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> sample
implementation) the PHP/Java Bridge does <em>not</em> use the java
native interface ("JNI"). Php instances are allocated from the HTTP
d34 1
a34 1
from the backend. The allocated instances communicate using a
d36 2
a37 2
href="documentation/PHP-API/html/java_8c.html#a43"><code>java_closure()</code></a> and the <a href="server/documentation/API/php/java/bridge/Invocable.html">invocable interface</a>. In
case a php instance crashes, it will not take down the java
d41 4
a44 2

<P><FONT > PHP components are essentially transient. For complex
d55 1
a55 1

d59 2
a60 4
specific system platform.  </FONT></P> <img src="tomcat-jsf.jpg"
align="right" vspace="0" hspace="0" name="php-jsf" alt="Apache/Tomcat
with PHP scripts and the Java Server Faces framework">

d68 1
a68 1

d70 1
a70 2
java developers. There are a number of technologies based on the JSP
template system such as jakarta <a
d73 1
a73 1
Faces</a>. Since PHP/Java Bridge version 3.0 it is possible to embed
d75 2
a76 2
concentrate on developing HTML templates while web developers can
create a prototype using php code and use the existing framework from
d87 1
a87 1
  <code>new <strong>Java</strong>("CLASSNAME")</code>: References and instanciates the class CLASSNAME.
d142 1
a142 1
     available to the current script. All implicit web objects (session, servlet context, etc.) are <a href="server/documentation/API/php/java/servlet/Context.html#getHttpServletRequest()">available from the context</a>, when the backend is running in a servlet engine or application server. The following example uses the jdk1.6 <a href="http://java.sun.com/javase/6/docs/tooldocs/share/jrunscript.html"><code>jrunscript</code></a> to eval php statements interactively:  <br><br>
d202 1
a202 1
  <code>$session=<strong>java_session</strong>()</code>: Creates or retrieves a session context. When the backend is running in a J2EE environment, the session is taken from the request object, otherwise it is taken from PHP. Please see the  <a href="server/documentation/API/php/java/bridge/ISession.html">ISession interface documentation</a> for details. The <code>java_session()</code> must be called <a href="http://www.php.net/manual/en/function.headers-sent.php">before the response headers have been sent</a> and it should be called as the first statement within a php script.
d205 1
a205 1
$session = java_session();<br>
d220 1
a220 1
<code>$_SESSION['var']=val</code> is syntactic shugar for
d418 1
a418 1
>An UTF-8 encoded string. Since PHP does not support unicode, all java.lang.String values are auto-converted into a byte[] (see above) using UTF-8 encoding. The encoding can be changed with the <strong><code>java_set_file_encoding()</code></strong> primitive.</TD
d444 1
a444 1
>PHP4 sends and receives hashtables as values.  PHP5 sends hashtables as values and receives object handles which implement the new iterator interface.</TD
d496 1
a496 1
  is written.  This is very slow because it starts a new backend (Java or .NET VM) for
d501 1
a501 1
 mode the bridge backend starts when the HTTP server starts and terminates
d509 1
a509 1
      RPM package available for RedHat Enterprise Linux.  In this mode
d514 1
a514 1
      PHP be can run as a CGI sub-component within a pure java application server or be installed as a Apache/IIS module. 
d537 10
a546 4
you have a RedHat Linux system (RedHat Enterprise or
Fedora), you can download the 32bit RPM from 
<a href="http://www.sourceforge.net/projects/php-java-bridge">http://www.sourceforge.net/projects/php-java-bridge</a>
and either install the bridge and standalone backend
d556 1
a556 1
or the tomcat backend
d590 2
a591 1
 For other operating systems please follow 
d596 1
a596 1
	higher, <em>autoconf </em> 2.57 or higher, <em>libtool</em> 1.4.3 or higher, <em>automake</em> 1.6.3 or higher, GNU make and php 4.3.2 or higher
d621 1
a621 1
	the web installation. Copy the test.php file to the document root (usually /var/www/html) and invoke the file with your browser. You should see that the bridge module is activated and running.  The bridge backend automatically starts or re-starts whenever you start or re-start the web-server.
d623 2
a624 2
	<LI><P><FONT ><A name="mode3">In a <strong>production environment</strong> it is recommended to separate the java VM and the HTTP process by setting the communication channel. The <code>java.socketname</code> should be set to the name of the socket, it will be created if it doesn't exist.  The java section of the php <code>.ini</code> file should contain a <code>java.socketname</code> option. The following is an example from RedHat Enterprise Linux and Fedora:
<BR><BR><code>extension = java.so<BR>[java]<BR>java.socketname="/var/run/.php-java-bridge_socket"</code><br><br>The advantage of this mode is that the java VM no longer depends on the web server and can be examined and re-started independently. The download file contains a script, <code>php-java-bridge.service</code>, which can be used to start/stop the PHP/Java Bridge backend as system service. All available <code>.ini</code> options are listed in <a href="#ini-options">table 2</a>.</A> </FONT>
d627 1
a627 1
	<LI><P><FONT ><A name="mode4">In a production environment which requires <strong>load balancing and failover</strong> or <strong>session sharing between PHP, JSP and Servlets</strong> it is recommended deploy the backend into a servlet engine or an application server; tomcat 5 for example. Disable the <code>java.socketname</code>, either a) enable the <code>java.hosts</code> and <code>java.servlet</code> options or b), if you don't have Apache or IIS, install PHP as a CGI/FastCGI binary so that your application server can find it and start the application server. The <code>.ini</code> file should contain:
d686 1
a686 1
>The name of the communication channel for the local backend. Must be an integer, if a secure "unix domain" channel is not available (Windows, Mac OSX).</TD
d707 1
a707 1
>The log file for the local PHP/Java Bridge backend.</TD
d716 1
a716 1
>Additional bridge hosts which are used when the local backend is not available.</TD
d726 1
a726 1
>The communication protocol. If set to <code>On</code> or to <code>User</code>, the bridge uses HTTP to communicate with the <code>java.hosts</code> backends. The option <code>User</code> preserves the context, <code>On</code> is for backward compatibility and rewrites the context to: <code>/JavaBridge/JavaBridge.php</code>.</TD
d728 1
a728 1
><code>;; Make sure that this option is only set <br>;; if your backend 
d752 1
a752 1
java.libpath="/tmp/"
d761 1
a761 1
>Since version 3 the bridge is no longer backward compatible to its predecessor "ext/java": Exact php numbers are now represented as java integers, java return values are no longer auto-converted into php values. <em>Leave it off, if possible</em>.</TD
d772 1
d774 1
a774 1
information please read the <a href="README">README</a>, <a href="INSTALL">INSTALL</a>, <a href="INSTALL.LINUX">INSTALL.LINUX</a>, <a href="INSTALL.J2EE">INSTALL.J2EE</a> and <a href="INSTALL.WINDOWS">INSTALL.WINDOWS</a> documents contained in
d784 1
a784 1
<a href="INSTALL">INSTALL document</a> as close as possible. In particular the backend needs the specified versions of <em>autoconf</em>, <em>libtool</em> and <em>automake</em> in the path. Backend compilation can be switched off with the <code>--disable-backend</code> configure option. A compiled, platform-independent backend ("JavaBridge.war") can be found in the download folder.
d788 1
a788 1
href="http://sourceforge.net/tracker/?func=add&group_id=117793&atid=679233">open
d791 1
a791 1
installations (RHEL, Fedora) please install one of the binary RPM's or
d849 1
a849 1
server?</H4> <p>No. The bridge backend is written in pure java, it
d861 2
a862 2
internaly. If you don't want depend on the php session module, for
example if you have compiled php without the <code>session.so</code>,
d866 1
a866 1
href="server/WEB-INF/faces-config.xml">php
d870 1
a870 1
of the php script instance and restores it when the next request
d887 1
a887 1
HttpProxy represents the php continuation and the HttpServer the
d893 1
a893 1
file. An example file will ship with version 3.0.9. </p> 
d895 1
a895 1
<li> <H4>Where is my output?</H4> <p><code>System.out</code> and <code>System.err</code> are redirected to the server log file(s). When php scripts are invoked from a java framework (Java Server Faces for example), even the php output is redirected. For the standalone backend the output appears in the <code>/var/log/php-java-bridge.log</code> or in JavaBridge.log, see .ini option <code>java.log_file</code>. For the j2ee backend the location of the log file(s) depends on the j2ee server configuration.</p> 
d901 2
a902 2
&nbsp;&nbsp;public class java {<br>
&nbsp;&nbsp;&nbsp;&nbsp;public enum bridge {JavaBridge, JavaBridgeRunner};<br>
d909 1
a909 1
java_require(getcwd()); // load php.class<br>
d956 1
a956 1
The jython 2.1 code<br>
d1044 1
a1044 1
>time jrunscript -J-Xmx512M -J-Xms512M -l js t11.js</TD
d1081 1
a1081 1
the <a href="#mode2">web server installation</a> description. 
d1084 1
a1084 1
<p>Furthermore it is possible to start standalone backend, for example with the command:<br><br>
d1099 1
a1099 1
<li> <H4>I want to start the backend automatically as a sub-component of my HTTP Server. How do I pass my own java options and how do I change the security context and the UID of the java process?</H4> 
d1108 1
a1108 1
On Unix the bridge terminates the sub-process hierarchy with <code>SIGTERM</code>, sleep 5 seconds and <code>SIGTERM</code>, if necessary, sleep 5 seconds and <code>SIGKILL</code>, if necessary. On Windows the bridge emulates the Unix kill behaviour, the bridge kills the entire sub-process hierarchy so that you can use a <code>cmd /c</code> wrapper.
d1111 1
a1111 1
Please see the <code>JavaWrapper</code> from the  RedHat <code>php-java-bridge-standalone</code> RPM for an example.
d1115 1
a1115 1
Download the J2EE binary and copy the <code>JavaBridge.war</code> into the tomcat <code>webapps</code> folder. After that visit <code>http://localhost:8080/JavaBridge</code> and run the supplied php examples.
d1118 217
d1361 1
a1361 1
OutOfMemory conditions can be debugged by running the backend with e.g.:<br><br>
@


1.40.2.1
log
@Release-3-0-8-1
@
text
@d11 1
a11 3
  is an optimized, XML-based network protocol which can be used to connect a native script engine with a Java or <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm">ECMA 335</a> virtual machine. It is more than 50 times faster than local RPC via SOAP, uses less resources on the web-server side and it is faster and more reliable than a communication via the Java Native Interface.</p>
<p>
The <a href="documentation/PHP-API/html/java_8c.html">php java extension</a> uses this protocol to connect running PHP instances with already running Java or .NET <a href="server/documentation/API/overview-summary.html">back-ends</a>. The communication works in both directions, the <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> interface can be used to connect to a running PHP server (Apache/IIS, FastCGI, ...) so that Java components can call PHP instances and PHP scripts can invoke CLR (e.g. VB.NET, C#, COM) or Java (e.g. Java, KAWA, JRuby) based applications or transfer control back to the environment where the request came from. The bridge can be set up to automatically start the PHP front-end or the Java/.NET back-end, if needed.
d17 2
a18 2
own a PHP/Java Bridge and communicate with a J2EE Java application
server by exchanging Java value objects; the necessary client-stub
d22 1
a22 1
back-end is running inside a ECMA compliant VM, for example Novell's
d26 1
a26 1
<P><FONT > When the back-end is running in a J2EE environment, session
d31 3
a33 2
<P><FONT >The PHP/Java Bridge does <em>not</em> use the Java
native interface ("JNI"). PHP instances are allocated from the HTTP
d35 1
a35 1
from the back-end. The allocated instances communicate using a
d37 2
a38 2
href="documentation/PHP-API/html/java_8c.html#a45"><code>java_closure()</code></a> and the <a href="server/documentation/API/php/java/bridge/Invocable.html">invocable interface</a>. In
case a PHP instance crashes, it will not take down the java
d42 2
a43 4
<H2>J2EE as a standard framework for PHP scripts</H2>
<P><FONT ><img src="tomcat-jsf.jpg"
align="right" vspace="0" hspace="0" name="php-jsf" alt="Apache/Tomcat
with PHP scripts and the Java Server Faces framework">All PHP components are essentially transient. For complex
d54 1
a54 1
<H2>Platform independence</H2>
d58 4
a61 2
specific system platform.  </FONT></P>
<H2>A standard distribution format</H2>
d69 1
a69 1
<H2>Migration from JSP to PHP</H2>
d71 2
a72 1
java developers. Although JSP is still used by frameworks such as jakarta <a
d75 1
a75 1
Faces</a>, JSP is not <a href="http://www.onjava.com/pub/a/onjava/2004/06/09/jsf.html?page=1"> and probably never will be</a>  a <a href="http://www.php.net">sucessful technology</a>. The main problem with JSP is that it requires a development tool at run-time, a "compiler", which makes deployment difficult and may generate error messages which are very difficult to understand, because they refer to an intermediate representation which has nothing to do with the original JSP file. For example if the configuration changes, it may happen that users are confronted with compiler error codes or run-time messages like "NullPointerException in __jsp" instead of proper error messages from the program. Since PHP/Java Bridge version 3.0 it is possible to embed
d77 2
a78 2
concentrate on developing HTML or XML templates while web developers can
create prototypes using PHP code and use the existing framework from
d89 1
a89 1
  <code>new <strong>Java</strong>("CLASSNAME")</code>: References and instantiates the class CLASSNAME.
d144 1
a144 1
     available to the current script. All implicit web objects (session, servlet context, etc.) are <a href="server/documentation/API/php/java/servlet/Context.html#getHttpServletRequest()">available from the context</a>, when the back-end is running in a servlet engine or application server. The following example uses the jdk1.6 <a href="http://java.sun.com/javase/6/docs/tooldocs/share/jrunscript.html"><code>jrunscript</code></a> to eval PHP statements interactively:  <br><br>
d204 1
a204 1
  <code>$session=<strong>java_session</strong>()</code>: Creates or retrieves a session context. When the back-end is running in a J2EE environment, the session is taken from the request object, otherwise it is taken from PHP. Please see the  <a href="server/documentation/API/php/java/bridge/ISession.html">ISession interface documentation</a> for details. The <code>java_session()</code> must be called <a href="http://www.php.net/manual/en/function.headers-sent.php">before the response headers have been sent</a> and it should be called as the first statement within a PHP script.
d207 1
a207 1
$session = java_session();<Mr>
d222 1
a222 1
<code>$_SESSION['var']=val</code> is syntactic sugar for
d420 1
a420 1
>An UTF-8 encoded string. Since PHP does not support Unicode, all java.lang.String values are auto-converted into a byte[] (see above) using UTF-8 encoding. The encoding can be changed with the <strong><code>java_set_file_encoding()</code></strong> primitive.</TD
d446 1
a446 1
>PHP4 sends and receives hash-tables as values.  PHP5 sends hash-tables as values and receives object handles which implement the new iterator interface.</TD
d498 1
a498 1
  is written.  This is very slow because it starts a new back-end (Java or .NET VM) for
d503 1
a503 1
 mode the bridge back-end starts when the HTTP server starts and terminates
d511 1
a511 1
      RPM package available for Red Hat Enterprise Linux.  In this mode
d516 1
a516 1
      PHP be can run as a CGI or FastCGI sub-component within a pure java application server or be installed as a Apache/IIS module. 
d539 4
a542 10
you have a Unix, Windows or Linux system, <a href="http://www.sourceforge.net/projects/php-java-bridge">download</a> either the binary or the source and install it.
<H2>Installation on Linux</H2>
Open a command shell and type the following commands:
<H3>Public key</H3>
All binary files are digitally signed. Before you install the RPM binaries you should install the <a href="RPM-GPG-KEY">public key</a>, so that the integrity can be checked. If you haven't installed the key, type: 
<blockquote>
<code>rpm --import RPM-GPG-KEY</code>
</blockquote>
<H3>RPM binaries</H3>
Either install the bridge and standalone back-end
d552 1
a552 1
or the tomcat back-end
d586 1
a586 2
<H2>Installation from source</H2>
 For other operating systems, e.g. Solaris, Windows, BSD or Mac-OSX, please follow 
d591 1
a591 1
	higher, <em>autoconf </em> 2.57 or higher, <em>libtool</em> 1.4.3 or higher, <em>automake</em> 1.6.3 or higher, GNU make and php 4.3.4 or higher
d604 2
a605 3
<BR><BR><code># compile with jdk1.4, use jdk1.6 at run-time<br>
phpize &amp;&amp; ./configure
	--with-java=/usr/java/jdk1.4,/usr/java/jdk1.6 &amp;&amp; make </code></FONT></P>
d616 1
a616 1
	the web installation. Copy the test.php file to the document root (usually /var/www/html) and invoke the file with your browser. You should see that the bridge module is activated and running.  The bridge back-end automatically starts or re-starts whenever you start or re-start the web-server.
d618 2
a619 2
	<LI><P><FONT ><A name="mode3">In a <strong>production environment</strong> it is recommended to separate the java VM and the HTTP process by setting the communication channel. The <code>java.socketname</code> should be set to the name of the socket, it will be created if it doesn't exist.  The java section of the PHP <code>.ini</code> file should contain a <code>java.socketname</code> option. The following is an example from Red Hat Enterprise Linux and Fedora:
<BR><BR><code>extension = java.so<BR>[java]<BR>java.socketname="/var/run/.php-java-bridge_socket"</code><br><br>The advantage of this mode is that the java VM no longer depends on the web server and can be examined and re-started independently. The download file contains a script, <code>php-java-bridge.service</code>, which can be used to start/stop the PHP/Java Bridge back-end as system service. All available <code>.ini</code> options are listed in <a href="#ini-options">table 2</a>.</A> </FONT>
d622 1
a622 1
	<LI><P><FONT ><A name="mode4">In a production environment which requires <strong>load balancing and fail over</strong> or <strong>session sharing between PHP, JSP and Servlets</strong> it is recommended deploy the back-end into a servlet engine or an application server; tomcat 5 for example. Disable the <code>java.socketname</code>, either a) enable the <code>java.hosts</code> and <code>java.servlet</code> options or b), if you don't have Apache or IIS, install PHP as a CGI/FastCGI binary so that your application server can find it and start the application server. The <code>.ini</code> file should contain:
d681 1
a681 1
>The name of the communication channel for the local back-end. Must be an integer, if a secure "Unix domain" channel is not available (Windows, Mac OSX).</TD
d702 1
a702 1
>The log file for the local PHP/Java Bridge back-end.</TD
d711 1
a711 1
>Additional bridge hosts which are used when the local back-end is not available.</TD
d721 1
a721 1
>The communication protocol. If set to <code>On</code> or to <code>User</code>, the bridge uses HTTP to communicate with the <code>java.hosts</code> back-ends. The option <code>User</code> preserves the context, <code>On</code> is for backward compatibility and rewrites the context to: <code>/JavaBridge/JavaBridge.php</code>.</TD
d723 1
a723 1
><code>;; Make sure that this option is only set <br>;; if your back-end 
d747 1
a747 1
java.lib="/tmp/"
d756 1
a756 1
>Since version 3 the bridge is no longer backward compatible to its predecessor "ext/java": Exact PHP numbers are now represented as java integers, java return values are no longer auto-converted into PHP values. <em>Leave it off, if possible</em>.</TD
a766 1
<H2>Further information</H2>
d768 1
a768 1
information please read the <a href="README">README</a>, <a href="INSTALL">INSTALL</a>, <a href="INSTALL.LINUX">INSTALL.LINUX</a>, <a href="INSTALL.J2EL">INSTALL.J2EE</a> and <a href="INSTALL.WINDOWS">INSTALL.WINDOWS</a> documents contained in
d778 1
a778 1
<a href="INSTALL">INSTALL document</a> as close as possible. In particular the back-end needs the specified versions of <em>autoconf</em>, <em>libtool</em> and <em>automake</em> in the path. Back-End compilation can be switched off with the <code>--disable-back-end</code> configure option. A compiled, platform-independent back-end ("JavaBridge.war") can be found in the download folder.
d782 1
a782 1
href="http://sourceforge.net/tracker/?func=add&group_id=117793&id=679233">open
d785 1
a785 1
installations (RHEL, Fedora) please install one of the binary REMs or
d843 1
a843 1
server?</H4> <p>No. The bridge back-end is written in pure java, it
d855 2
a856 2
internaly. If you don't want depend on the PHP session module, for
example if you have compiled PHP without the <code>session.so</code>,
d860 1
a860 1
href="server/WEB-INF/faces-config.xml">PHP
d864 1
a864 1
of the PHP script instance and restores it when the next request
d881 1
a881 1
HttpProxy represents the PHP continuation and the HttpServer the
d887 1
a887 1
file. An example file will ship with version 3.1. </p> 
d889 1
a889 1
<li> <H4>Where is my output?</H4> <p><code>System.out</code> and <code>System.err</code> are redirected to the server log file(s). When PHP scripts are invoked from a java framework (Java Server Faces for example), even the PHP output is redirected. For the standalone back-end the output appears in the <code>/var/log/php-java-bridge.log</code> or in JavaBridge.log, see .ini option <code>java.log_file</code>. For the j2ee back-end the location of the log file(s) depends on the j2ee server configuration.</p> 
d895 2
a896 2
&abs;&nbsp;public class java {<br>
&nbsp;&nbsp;&nbsp;&nbsp;public Emmy bridge {JavaBridge, JavaBridgeRunner};<br>
d950 1
a950 1
The Jython 2.1 code<br>
d1038 1
a1038 1
>time jrunscript -J-Xmx512M -J-Xms512M -l is t11.js</TD
d1078 1
a1078 1
<p>Furthermore it is possible to start standalone back-end, for example with the command:<br><br>
d1093 1
a1093 1
<li> <H4>I want to start the back-end automatically as a sub-component of my HTTP Server. How do I pass my own java options and how do I change the security context and the UID of the java process?</H4> 
d1105 1
a1105 1
Please see the wrapper <code>RunJavaBridge</code> from the  RedHat <code>php-java-bridge-standalone</code> RPM for an example.
d1109 1
a1109 1
Download the J2EE binary and copy the <code>JavaBridge.war</code> into the tomcat <code>webapps</code> folder. After that visit <code>http://localhost:8080/JavaBridge</code> and run the supplied PHP examples.
a1111 217
<li> <H4>I want to use PHP for all tomcat applications. Apache and IIS are not available, but performance is important. How do I install it?</H4> 
<p>
Download and install the J2EE binary: copy <code>JavaBridge.war</code> into the tomcat <code>webapps</code> folder.
</p>
<p>
Copy the <code>JavaBridge.jar</code> and the <code>php-servlet.jar</code> from the JavaBridge.war into the tomcat <code>shared/lib</code> folder. Add the lines marked with a <code>+</code> to the tomcat <code>conf/web.xml</code>:
<blockquote>
<code>
<br>
   &lt;!-- ================== Built In Servlet Definitions ==================== --&gt;<br>
<br>
+    &lt;!-- PHP Servlet --&gt;<br>
+    &lt;servlet&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpJavaServlet&lt;/servlet-name&gt;<br>
+        &lt;servlet-class&gt;php.java.servlet.PhpJavaServlet&lt;/servlet-class&gt;<br>
+    &lt;/servlet&gt;<br>
+    &lt;!-- PHP CGI Servlet --&gt;<br>
+    &lt;servlet&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpCGIServlet&lt;/servlet-name&gt;<br>
+        &lt;servlet-class&gt;php.java.servlet.PhpCGIServlet&lt;/servlet-class&gt;<br>
+    &lt;/servlet&gt;<br>
<br>
   &lt;!-- The default servlet for all web applications, that serves static     --&gt;<br>
   &lt;!-- resources.  It processes all requests that are not mapped to other   --&gt;<br>
[...]<br>
   &lt;!-- ================ Built In Servlet Mappings ========================= --&gt;<br>
<br>
+    &lt;!-- PHP Servlet Mapping --&gt;<br>
+    &lt;servlet-mapping&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpJavaServlet&lt;/servlet-name&gt;<br>
+        &lt;url-pattern&gt;*.phpjavabridge&lt;/url-pattern&gt;<br>
+    &lt;/servlet-mapping&gt;<br>
+    &lt;!-- CGI Servlet Mapping --&gt;<br>
+    &lt;servlet-mapping&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpCGIServlet&lt;/servlet-name&gt;<br>
+        &lt;url-pattern&gt;*.php&lt;/url-pattern&gt;<br>
+    &lt;/servlet-mapping&gt;<br>
<br>
   &lt;!-- The servlet mappings for the built in servlets defined above.  Note  --&gt;<br>
   &lt;!-- that, by default, the CGI and SSI servlets are *not* mapped.  You    --&gt;<br>
<br>
 &lt;/web-app&gt;<br>
</code>
</blockquote>
</p>
To test the above settings create a directory <code>testapp</code> and copy the <code>test.php</code> file from the <code>JavaBridge.war</code> into this folder. Type <code>cd testapp; jar cf ../testapp.war *</code> and copy the testapp.war into the tomcat <code>webapps</code> folder.
Restart tomcat, browse to 
<code>http://yourHost.com:8080/testapp/test.php</code>.
</p>
<p>
Check if the PHP Fast-CGI server is running. The process list should display 20 (default) PHP instances waiting in the PHP Fast-CGI pool. If not, check if your PHP binary has been compiled with Fast-CGI enabled. Copy a Fast CGI enabled binary into the <code>webapps/JavaBridge/WEB-INF/cgi/</code> folder, if necessary.
</p>

<li> <H4>How do I create a standalone PHP web application for distribution and how can users deploy it into tomcat?</H4>
<p>
Create a directory <code>myApplication</code>, create the directories <code>myApplication/WEB-INF/lib/</code> and <code>myApplication/WEB-INF/cgi/</code>.
Download the J2EE binary and copy the <code>JavaBridge.jar</code> and the <code>php-servlet.jar</code> from the JavaBridge.war to the <code>myApplication/WEB-INF/lib/</code> folder. Copy the contents of the CGI folder to <code>myApplication/WEB-INF/cgi/</code>. Create the file <code>myApplication/WEB-INF/web.xml</code> with the following content:
<blockquote>
<code>
<br>
&lt;web-app&gt;<br>
    &lt;!-- PHP Servlet --&gt;<br>
    &lt;servlet&gt;<br>
        &lt;servlet-name&gt;PhpJavaServlet&lt;/servlet-name&gt;<br>
        &lt;servlet-class&gt;php.java.servlet.PhpJavaServlet&lt;/servlet-class&gt;<br>
    &lt;/servlet&gt;<br>
    &lt;!-- PHP CGI processing servlet, used when Apache/IIS are not available --&gt;<br>
    &lt;servlet&gt;<br>
        &lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;<br>
        &lt;servlet-class&gt;php.java.servlet.PhpCGIServlet&lt;/servlet-class&gt;<br>
    &lt;/servlet&gt;<br>
<br>
    &lt;!-- PHP Servlet Mapping --&gt;<br>
    &lt;servlet-mapping&gt;<br>
        &lt;servlet-name&gt;PhpJavaServlet&lt;/servlet-name&gt;<br>
        &lt;url-pattern&gt;*.phpjavabridge&lt;/url-pattern&gt;<br>
    &lt;/servlet-mapping&gt;<br>
    &lt;!--PHP CGI Servlet Mapping --&gt;<br>
    &lt;servlet-mapping&gt;<br>
        &lt;servlet-name&gt;PhpCGIServlet&lt;/servlet-name&gt;<br>
        &lt;url-pattern&gt;*.php&lt;/url-pattern&gt;<br>
    &lt;/servlet-mapping&gt;<br>
<br>
    &lt;!-- Welcome files --&gt;<br>
    &lt;welcome-file-list&gt;<br>
        &lt;welcome-file&gt;index.php&lt;/welcome-file&gt;<br>
    &lt;/welcome-file-list&gt;<br>
 &lt;/web-app&gt;<br>
</code>
</blockquote>
</p>
<p>
Copy the files <code>sessionSharing.jsp</code> and <code>sessionSharing.php</code> from the <code>JavaBridge.war</code> to <code>myApplication</code> and create <code>myApplication.war</code>, for example with the commands: <code>cd myApplication; jar cf ../myApplication.war *</code>. The web archive can now be distributed, copy it to the tomcat <code>webapps</code> directory and re-start tomcat. Visit <code>http://localhost/myApplication/sessionSharing.php</code> and <code>http://localhost/myApplication/sessionSharing.jsp</code>.
</p>
<li> <H4>I want to use Apache/IIS as a front-end and tomcat as a back-end. How do I enable PHP for all my applications?</H4> 
<p>
Download and install the J2EE binary: copy <code>JavaBridge.war</code> into the tomcat <code>webapps</code> folder.
Check if the tomcat <code>webapps</code> directory is shared with the Apache/IIS <code>htdocs</code> directory. If not, change the Apache/IIS setting, the following example is for Apache 2. Edit e.g. <code>/etc/httpd/conf/httpd.conf</code> as follows: 
<blockquote>
<code>
 # documents. By default, all requests are taken from this directory, but<br>
 # symbolic links and aliases may be used to point to other locations.<br>
 #<br>
-DocumentRoot "/var/www/html"<br>
+DocumentRoot "/var/lib/tomcat5/webapps"<br>
<br>
 #<br>
 # Each directory to which Apache has access can be configured with respect<br>
 #<br>
 # This should be changed to whatever you set DocumentRoot to.<br>
 #<br>
-&lt;Directory "/var/www/html"&gt;<br>
+&lt;Directory "/var/lib/tomcat5/webapps"&gt;<br>
</code>
</blockquote>
</p>
<p>
Edit the <code>php.ini</code> or add a file <code>php-tomcat.ini</code> to the directory which contains the PHP module descriptions (usually <code>/etc/php.d/</code>), so that it contains:
<blockquote>
<code>
[java]<br>
java.hosts = 127.0.0.1:8080<br>
java.servlet = On<br>
</code>
</blockquote>
</p>
To test the above settings create a directory <code>testapp</code> and copy the <code>sessionSharing.php</code> file from the <code>JavaBridge.war</code> into this folder. Type <code>cd testapp; jar cf ../testapp.war *</code> and copy the testapp.war into the tomcat <code>webapps</code> folder.
Restart Apache or IIS and tomcat, browse to 
<code>http://localhost/testapp</code>, click on sessionSharing.php and check the generated cookie value. The <code>path</code> value must be <code>/</code>.
</p>
<li> <H4>I want to use Apache/IIS as a front-end and tomcat as a back-end. How do I enable PHP and JSP for all my applications?</H4> 
<p>
Download the J2EE binary and copy the <code>JavaBridge.jar</code> and the <code>php-servlet.jar</code> from the JavaBridge.war into the tomcat <code>shared/lib</code> folder. Add the lines marked with a <code>+</code> to the tomcat <code>conf/web.xml</code>:
<blockquote>
<code>
<br>
   &lt;!-- ================== Built In Servlet Definitions ==================== --&gt;<br>
<br>
+    &lt;!-- PHP Servlet --&gt;<br>
+    &lt;servlet&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpJavaServlet&lt;/servlet-name&gt;<br>
+        &lt;servlet-class&gt;php.java.servlet.PhpJavaServlet&lt;/servlet-class&gt;<br>
+    &lt;/servlet&gt;<br>
<br>
   &lt;!-- The default servlet for all web applications, that serves static     --&gt;<br>
   &lt;!-- resources.  It processes all requests that are not mapped to other   --&gt;<br>
[...]<br>
   &lt;!-- ================ Built In Servlet Mappings ========================= --&gt;<br>
<br>
+    &lt;!-- PHP Servlet Mapping --&gt;<br>
+    &lt;servlet-mapping&gt;<br>
+        &lt;servlet-name&gt;GlobalPhpJavaServlet&lt;/servlet-name&gt;<br>
+        &lt;url-pattern&gt;*.phpjavabridge&lt;/url-pattern&gt;<br>
+    &lt;/servlet-mapping&gt;<br>
<br>
   &lt;!-- The servlet mappings for the built in servlets defined above.  Note  --&gt;<br>
   &lt;!-- that, by default, the CGI and SSI servlets are *not* mapped.  You    --&gt;<br>
<br>
 &lt;/web-app&gt;<br>
</code>
</blockquote>
</p>
<p>
Check if the tomcat <code>webapps</code> directory is shared with the Apache/IIS <code>htdocs</code> directory. If not, change the Apache/IIS setting, the following example is for Apache 2. Edit e.g. <code>/etc/httpd/conf/httpd.conf</code> as follows: 
<blockquote>
<code>
 # documents. By default, all requests are taken from this directory, but<br>
 # symbolic links and aliases may be used to point to other locations.<br>
 #<br>
-DocumentRoot "/var/www/html"<br>
+DocumentRoot "/var/lib/tomcat5/webapps"<br>
<br>
 #<br>
 # Each directory to which Apache has access can be configured with respect<br>
 #<br>
 # This should be changed to whatever you set DocumentRoot to.<br>
 #<br>
-&lt;Directory "/var/www/html"&gt;<br>
+&lt;Directory "/var/lib/tomcat5/webapps"&gt;<br>
</code>
</blockquote>
</p>
<p>
Now that tomcat knows how to handle PHP <code>.phpjavabridge</code> requests and Apache or IIS can access the tomcat webapps, connect the two components: Edit the <code>php.ini</code> or add a file <code>php-tomcat.ini</code> to the directory which contains the PHP module descriptions (usually <code>/etc/php.d/</code>), so that it contains:
<blockquote>
<code>
[java]<br>
java.hosts = 127.0.0.1:8080<br>
java.servlet = User<br>
</code>
</blockquote>
The above <code>User</code> setting enables session sharing between PHP and JSP, it forwards from <code>http://host<em>/myApp/foo.php</em></code> to the tomcat back-end at <code>127.0.0.1:8080</code> using the request <code>PUT <em>/myApp/foo.php</em>javabridge</code>. This triggers the <code>GlobalPhpJavaServlet</code> configured in the tomcat <code>web.xml</code>.
</p>
<p>
Now you need to do the same for JSP. Unlike the PHP/Java Bridge, which only forwards embedded java statements, the tomcat <code>mod_jk</code> adapter must forward all JSP requests.
Download and install <code>mod jk</code>, for example
<code>jakarta-tomcat-connectors-1.2.14.1-src.tar.gz</code>, extract the file into a
folder and type the following commands:
<blockquote>
<code>
cd jakarta-tomcat-connectors-1.2.14.1-src/jk/native/<br>
./configure --with-apxs && make && su -c "make install"<br>
</code>
</blockquote>
Add the following lines to the end of the <code>httpd.conf</code>, the following example is for Apache 2:
<blockquote>
<code>
LoadModule jk_module modules/mod_jk.so<br>
JkAutoAlias /var/lib/tomcat5/webapps<br>
JkMount *.jsp ajp13<br>
</code>
</blockquote>
</p>
To test the above settings create a directory <code>testapp</code> and copy the <code>sessionSharing.php</code> and <code>sessionSharing.php</code> from the <code>JavaBridge.war</code> into this folder. Type <code>cd testapp; jar cf ../testapp.war *</code> and copy the testapp.war into the tomcat <code>webapps</code> folder.
Restart Apache or IIS and tomcat, browse to 
<code>http://localhost/testapp</code>, click on sessionSharing.php and check the generated cookie value. The <code>path</code> value must be <code>/testapp</code>. Click on sessionSharing.jsp, 
</p>
d1114 1
a1114 1
OutOfMemoryErrors may happen because a cached object cannot be released, either because <p>
d1116 3
a1118 3
<li> the object is permanently referenced by a request-handling thread or
<li> the object has been entered into the session or application store or 
<li> the object is referenced by a thread outside of the scope of the PHP/Java Bridge.
d1138 1
a1138 1
OutOfMemory conditions can be debugged by running the back-end with e.g.:<br><br>
a1142 16
<li> <H4>The EJB example works with the Sun J2EE server, but in JBoss I get a ClassCastException, what's wrong?</H4> 
<p>It's a JBoss problem, although this problem may also appear in other application servers which do not strictly separate the application/bean domains. The JavaBridge.war already contains the <code>documentClient.jar</code> as a library, so JBoss references the library classes instead of the bean classes. Just remove the <code>documentClient.jar</code> from the <code>JavaBridge.war</code>, re-deploy <code>JavaBridge.war</code> and run the test again.
</p><p>
In JBoss' default setup the code:
<blockquote>
<code>
  // access the home interface<br>
  $DocumentHome = new JavaClass("DocumentHome");<br>
  $PortableRemoteObject = new JavaClass("javax.rmi.PortableRemoteObject");<br>
  $home=$PortableRemoteObject-&gt;narrow($objref, $DocumentHome);<br>
</code>
</blockquote>
refences the <code>DocumentHome</code> from the library, which is assignment-incompatible to <code>DocumentHome</code> from the enterprise bean (<code>DocumentHome@@WebAppClassLoader</code> !=  <code>DocumentHome@@BeanClassLoader</code>), so you get a ClassCastException in <code>narrow</code>.
</p>
<p>
In contrast the Sun J2EE server correctly separates the beans/applications; the <code>$objref</code> is unique proxy generated by a parent of the <code>WebAppClassLoader</code>, so that <code>narrow</code> can always cast the proxy to <code>DocumentHome@@WebAppClassLoader</code>, even if a class with the same name is already available from the <code>WebAppClassLoader</code>.</p>
@


1.40.2.2
log
@Release-3-0-8-1
@
text
@d611 1
a611 1
<BR><BR><code># compile with jdk1.4, use jre1.6 at run-time<br>
d613 1
a613 1
	--with-java=/usr/java/jdk1.4,/usr/java/jre1.6 &amp;&amp; make </code></FONT></P>
d1047 1
a1047 1
>time jrunscript -J-Xmx512M -J-Xms512M -l js t11.js</TD
d1398 1
a1398 1
href="examples/J2EE/RMI-IIOP/README">Calling
@


1.40.2.3
log
@Release-3-0-8-1
@
text
@d47 1
a47 1
applications it is usually necessary to introduce "middleware" components
d527 1
a527 1
      necessary, if there is no official JRE available for the OS or one
d626 1
a626 1
	<LI><P><FONT ><A name="mode3">In a <strong>production environment</strong> it is recommended to separate the java VM and the HTTP process by setting the communication channel. The <code>java.socketname</code> should be set to the name of the socket, it will be created, if it doesn't exist.  The java section of the PHP <code>.ini</code> file should contain a <code>java.socketname</code> option. The following is an example from Red Hat Enterprise Linux and Fedora:
d787 1
a787 1
<a href="INSTALL">INSTALL document</a> as close as possible. In particular the back-end needs the specified versions of <em>GNU autoconf</em>, <em>GNU libtool</em> and <em>GNU automake</em> in the path. Don't try to re-use specialized versions that came with your operating system (e.g. symlink libtool-1.5 to libtool), this will not work; if you don't have autoconf 2.59, automake 1.9 and libtool 1.5.20, you must compile and install them, as described in the INSTALL document. The back-end compilation can be switched off with the <code>--disable-back-end</code> configure option. A compiled, platform-independent back-end ("JavaBridge.war") can be found in the download folder.
d860 1
a860 1
<code>$_SESSION</code> is syntactic sugar provided by the <a
d870 1
a870 1
managed bean descriptor<a>. For example, if the
d904 2
a905 2
&nbsp;&nbsp;public class java {<br>
&nbsp;&nbsp;&nbsp;&nbsp;public enum bridge {JavaBridge, JavaBridgeRunner};<br>
d959 1
a959 1
The BSH 2.0 code<br>
d962 1
a962 1
buf=new java.lang.StringBuffer();<br>
d964 5
a968 5
int i=0;<br>
while(i<400000) {<br>
&nbsp;&nbsp;i=i+1;<br>
&nbsp;&nbsp;buf.append(new String(String.valueOf(i)));<br>
}<br>
d970 1
a970 1
print (buf.length()); print("\n");<br>
a1012 1

d1016 16
a1031 1
>time jrunscript -l bsh t11.bsh</TD
d1033 1
a1033 1
>BSH 2.0</TD
d1035 1
a1035 1
>none (native code)</TD
d1037 3
a1039 3
>0m21.342s,<br>
0m20.779s,<br>
0m0.291s
a1042 1
</TBODY>
d1059 16
a1074 1

a1080 1

d1171 1
a1171 1
Check if the PHP Fast-CGI server is running. The process list should display 20 (default) PHP instances waiting in the PHP Fast-CGI pool. If not, check if your PHP binary has been compiled with Fast-CGI enabled. Copy a Fast-CGI enabled binary into the <code>webapps/JavaBridge/WEB-INF/cgi/</code> folder, if necessary.
@


1.39
log
@Release-3.0.8rc
@
text
@d144 1
a144 1
     available to the current script. All implicit web objects (session, servlet context, etc.) are <a href="server/documentation/API/php/java/servlet/Context.html#getHttpServletRequest()">available from the context</a>, when the backend is running in a servlet engine or application server. The following example uses the jdk1.6 <code>jrunscript</code> to eval php statements interactively:  <br><br>
d155 38
d574 1
a574 1
rpmbuild rpmbuild --rebuild php-java-bridge-x.y.z-1.src.rpm<br>
d578 1
a578 1
If you have installed the development RPM, you can run PHP scripts interactively, either from your Eclipse IDE or with the command:
a1142 30

<li> <H4>How do I retrieve the values from a java object?</H4>
<p>
With <code>java_values()</code> or with <code>settype</code>. Examples:
</p>
<p>
<code>
$str = new java("java.lang.String", "hello");
echo $str;<br>
=&gt; [o(String):"hello"]<br>
<br>
echo (java_values($str));<br>
=&gt; hello<br><br>
<br>
print_r (java_values($str->toCharArray()));<br>
=&gt; array('h', 'e', 'l', 'l', 'o')<br>
<br>
settype($str, "string");
echo $str;<br>
=&gt; hello<br>
<br>
$vector = new java("java.util.Vector", array("foo"=>1,"bar"=>2));<br>
settype($vector, "array");
print_r ($vector);<br>
=&gt; array(foo=>1, bar=>2)<br>
<br>
settype($vector, "object");
echo $vector->bar;<br>
=&gt; 2<br>
</p>
@


1.38
log
@Release-3.0.8test1
@
text
@d156 1
a161 48
</blockquote>
<br><br>
Example which uses PHP and Mono:<br>
 <br><br>
<blockquote>
<code>
class GtkDemo {<br>
&nbsp;&nbsp;var $Application;<br>
<br>
&nbsp;&nbsp;function GtkDemo() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;mono_require("gtk-sharp");	// link the gtk-sharp library<br>
&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;function delete($sender, $e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;echo "delete called\n";<br>
&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;Application-&gt;Quit();<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;function clicked($sender, $e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;echo "clicked\n";<br>
&nbsp;&nbsp;}<br>
&nbsp;&nbsp;function init() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;Application = $Application = new Mono("Gtk.Application");<br>
&nbsp;&nbsp;&nbsp;&nbsp;$Application-&gt;Init();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;$win = new Mono("Gtk.Window", "Hello");<br>
&nbsp;&nbsp;&nbsp;&nbsp;$win-&gt;add_DeleteEvent (<br>
			&nbsp;&nbsp; new Mono(<br>
				&nbsp;&nbsp;&nbsp;&nbsp;"GtkSharp.DeleteEventHandler", <br>
				&nbsp;&nbsp;&nbsp;&nbsp;mono_closure($this, "delete")));<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;$btn = new Mono("Gtk.Button", "Click Me");<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;$btn-&gt;add_Clicked(<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new Mono(<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "System.EventHandler",<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mono_closure($this, "clicked")));<br>
&nbsp;&nbsp;&nbsp;&nbsp;$win-&gt;Add($btn);<br>
&nbsp;&nbsp;&nbsp;&nbsp;$win-&gt;ShowAll();<br>
&nbsp;&nbsp;}<br>
<br>
&nbsp;&nbsp;function run() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;init();<br>
&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;Application-&gt;Run();<br>
&nbsp;&nbsp;}<br>
}<br>
<br&gt;<br>
$demo = new GtkDemo();<br>
$demo-&gt;run();<br>
a163 1

d502 47
a548 2
Fedora), you can download the 32bit RPM and type <code>rpm -i
php-java-bridge-v.x.y-1-i386.rpm php-java-bridge-standalone-v.x.y-1-i386.rpm</code> to install it (if you run a 64bit system <strong>and</strong> a 64bit JVM you need to install the 64bit RPM instead). For other operating systems please follow 
d751 1
a751 1
possible to install the RPM binaries: Open the appropriate binary RPM
d753 44
a796 1
directory to <code>/usr/lib/php</code> and restart apache.</p> 
d1027 1
a1027 1

@


1.37
log
@Release-3.0.8test1
@
text
@d809 1
a809 1
file. An example file will ship with version 3.0.8. </p> 
d1065 30
@


1.36
log
@Release-3.0.8pre2
@
text
@d851 1
a851 1
executed on a one 1.688 GHZ x86 cpu running RedHat Fedora Core 4 Linux and Sun jdk1.6.0:
d920 3
a922 3
>0m38.906s,<br>
0m21.545s,<br>
0m0.771s
d929 16
a944 1
>java -jar JavaBridge.jar INET:9967</TD
d950 3
a952 3
>0m33.914s,<br>
0m26.407s,<br>
0m2.782s
d981 3
a983 3
>0m14.696s,<br>
0m8.365s,<br>
0m0.165s
@


1.35
log
@Release-3.0.8pre2
@
text
@d148 1
a148 1
php&gt; echo java_context()->getAttribute("javax.script.name"); <br>
d849 3
a851 2
<li> <H4>How fast is it?</H4> <p> The following scripts were
executed on a one 2.8 GHZ x86 cpu running Win XP, Linux and Sun jdk1.4.2:
d853 1
d856 3
a858 2
$Sys = new Java("java.lang.System");<br>
$String = new Java("java.lang.String");<br>
d860 7
a866 2
$s = new Java("java.lang.StringBuffer", "hello");<br>
$T1=(float)$Sys->currentTimeMillis();<br>
d868 2
a869 6
for($i=0; $i<800000; $i++) {<br>
&nbsp;&nbsp;$s->append($String->valueOf($i));<br>
}<br>
$T2=(float)$Sys->currentTimeMillis();<br>
$T=$T2-$T1;<br>
echo "$T\n";<br>
d872 1
a872 1
The jython code:
d877 5
a881 3
i = 0<br>
s = lang.StringBuffer("hello")<br>
T1 = lang.System.currentTimeMillis();<br>
d883 9
a891 7
while i < 800000:<br>
&nbsp;&nbsp;i = i + 1<br>
&nbsp;&nbsp;s.append(lang.String.valueOf(i))<br>
<br>
T2 = lang.System.currentTimeMillis();<br>
<br>
print T2-T1<br>
d901 1
a901 1
>Operating System</TH
d907 1
a907 1
>Execution time (ms)</TH
d914 1
a914 1
>Win XP</TD
d916 1
a916 1
>PHP4 + <a href="http://www.php.net/manual/en/ref.java.php">ext/java</a>, the predecessor of the bridge</TD
d918 1
a918 1
>JNI interface</TD
d920 4
a923 1
>42541</TD
a925 1

d929 1
a929 1
>Win XP</TD
d931 1
a931 1
>PHP5 + PHP/Java Bridge 3.0.7</TD
d933 1
a933 1
>TCP socket</TD
d935 4
a938 1
>41670</TD
d945 1
a945 1
>RedHat Enterprise Linux 3</TD
d947 1
a947 1
>PHP4 + PHP/Java Bridge 3.0.7</TD
d949 1
a949 1
>TCP socket</TD
d951 4
a954 1
>34044</TD
a956 1

d960 1
a960 1
>RedHat Enterprise Linux 3</TD
d962 1
a962 1
>PHP4 + PHP/Java Bridge 3.0.7</TD
d964 1
a964 1
>unix domain socket</TD
d966 4
a969 26
>17310</TD
></TR
>
<TBODY
><TR
><TD
>RedHat Enterprise Linux 3</TD
><TD
>PHP4 + PHP/Java Bridge 3.0.7</TD
><TD
>named pipes</TD
><TD
>12762</TD
></TR
>

<TBODY
><TR
><TD
>RedHat Enterprise Linux 3</TD
><TD
>PHP5 + PHP/Java Bridge 3.0.8 with async. protocol</TD
><TD
>named pipes</TD
><TD
>6565</TD
a972 12
<TBODY
><TR
><TD
>RedHat Enterprise Linux 3</TD
><TD
><a href="http://www.jython.org/">jython 2.1</code></TD
><TD
>none/native code</TD
><TD
>1739</TD
></TR
>
a977 1
The above benchmarks were executed on the same computer. It is unclear why the TCP communication on a WinXP kernel is 20% slower compared to a 2.4 Linux kernel. 
d1023 1
a1023 1
<li> the variable is bound to a class which is permanently referenced by a request-handling thread or
@


1.34
log
@Release-3.0.8pre2
@
text
@d1039 31
a1069 1

@


1.33
log
@Release-3.0.8pre2
@
text
@d570 1
a570 1
	--with-java=/opt/jdk1.4 &amp;&amp; make </code></FONT></P>
d572 2
a573 2
	install the module as root. Type:<BR><BR><code>su -c 'make
	install'<BR>&lt;enter password&gt;</code></FONT></P>
@


1.32
log
@Release-3.0.7
@
text
@d31 1
a31 1
<P><FONT > Unlike previous attempts (the ext/java or the JSR223 sample
d37 1
a37 1
href="documentation/PHP-API/html/java_8c.html#a43"><code>java_closure()</code></a>. In
d144 1
a144 1
     available to the current script. All implicit web objects (session, servlet context, etc.) are <a href="server/documentation/API/php/java/servlet/Context.html#getHttpServletRequest()">available from the context</a>, when the backend is running in a servlet engine or application server. Example: <br><br>
d147 4
a150 10
public class MyApp {<br>
&nbsp;&nbsp;public static void main(String s[]) throws Exception {<br>
&nbsp;&nbsp;&nbsp;&nbsp;ScriptEngineManager m = new ScriptEngineManager();<br>
&nbsp;&nbsp;&nbsp;&nbsp;ScriptEngine e = m.getEngineByName("php");<br>
&nbsp;&nbsp;&nbsp;&nbsp;e.put("key", "java");<br>
&nbsp;&nbsp;&nbsp;&nbsp;e.eval("&lt;?php ctx = java_context(); " +<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"echo 'Hello '.$ctx-&gt;getAttribute('key').' world!'; " + <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"?&gt;");<br>
&nbsp;&nbsp;} <br>
}<br>
d508 1
a508 1
  is written.  This is very slow because it starts a new Java VM for
d513 1
a513 1
 mode the bridge starts when the HTTP server starts and terminates
d559 1
a559 3
	<code>php-config --version</code>. Make sure that the java version you use
	matches the kernel version. RedHat NPTL kernels or kernel &gt;= 2.6
	require either an IBMJava2, Sun Java &gt;= 1.4.2_02. </FONT> GNU Java is currently only supported on Linux and Solaris if you use the GCC 3.3.x or the upcoming GCC 4.x releases.
d568 3
a570 3
	the directory php-java-bridge-v.x.y build the module
	for a 32 bit JVM (if you run a 64 Bit JVM, use the <code>-m64</code> flag instead): <BR><BR><code>phpize &amp;&amp; ./configure --disable-servlet 
	--with-java=/opt/IBMJava2-141 &amp;&amp; make CFLAGS=&quot;-m32&quot;</code></FONT></P>
d581 1
a581 1
	the web installation. Copy the test.php file to the document root (usually /var/www/html) and invoke the file with your browser. You should see that the bridge module is activated and running.  The bridge starts or re-starts automatically whenever you start or re-start the web-server.
d583 2
a584 2
	<LI><P><FONT ><A name="mode3">In a <strong>production environment</strong> it is recommended to separate the java VM and the HTTP process by setting the communication channel. The <code>java.socketname</code> should be set to the name of the socket, it will be created if it doesn't exist.  The <code>.ini</code> file should contain:
<BR><BR><code>extension = java.so<BR>[java]<BR>java.socketname="/var/run/.php-java-bridge_socket"</code><br><br>The advantage of this mode is that the java VM no longer depends on the web server and can be examined and re-started independently. The download file contains a script, <code>php-java-bridge.service</code>, which can be used to start/stop the PHP/Java Bridge as system service. All available <code>.ini</code> options are listed in <a href="#ini-options">table 2</a>.</A> </FONT>
d743 2
a744 2
INSTALL document as close as possible.  If you have a problem
compiling the bridge code against any PHP version >= 4.3.4 on Windows,
d756 3
a758 1
directory to <code>/usr/lib/php</code> and restart apache.</p> <li> <H4>Can I use java libraries without
d789 1
a789 1
from a thread pool which limits the number of user requests to 20
d972 1
a972 1
>PHP5 + PHP/Java Bridge with experimental async. protocol</TD
d995 24
d1020 10
d1031 9
a1041 1

@


1.31
log
@Release-3.0.7
@
text
@d81 1
a81 1
</FONT></P>                                                                                            
d96 4
a99 25
      header("Content-type: application/x-excel");<br>
      header("Content-Disposition: attachment; filename=downloaded.xls");<br>
      java_require("http://php-java-bridge.sf.net/poi.jar"); <br><br>
      
      // create a 200x200 excel sheet and return it to the client<br>
      $workbook = new java("org.apache.poi.hssf.usermodel.HSSFWorkbook");<br>
      $sheet = $workbook->createSheet("new sheet");<br>
      $style = $workbook->createCellStyle();<br>
      // access the inner class AQUA within HSSFColor, note the $ syntax.<br>
      $Aqua = new JavaClass('org.apache.poi.hssf.util.HSSFColor$AQUA');<br>
      $style->setFillBackgroundColor($Aqua->index);<br>
      $style->setFillPattern($style->BIG_SPOTS);<br><br>
      for($y=0; $y<200; $y++) {<br>
      &nbsp;$row = $sheet->createRow($y);<br>
      &nbsp;for($x=0; $x<200; $x++) {<br>
      &nbsp;&nbsp;$cell = $row->createCell($x);<br>
      &nbsp;&nbsp;$cell->setCellValue("This is cell $x . $y");<br>
      &nbsp;&nbsp;$cell->setCellStyle($style);<br>
      &nbsp;}<br>
      }<br><br>
      // create and return the excel sheet to the client<br>
      $memoryStream = new java ("java.io.ByteArrayOutputStream");<br>
      $workbook->write($memoryStream);<br>
      $memoryStream->close(); <br>
      echo $memoryStream->toByteArray();<br>
a100 2


d105 1
a105 1
  <code>new <strong>JavaClass</strong>("CLASSNAME")</code>: References the class CLASSNAME without creating an instance. The object returned is the class object itself, not an object of the class.
d125 13
a137 9
      $file=new java("java.io.File", "WEB_INF/web.xml");<br>
<br>
      java_require("xerces.jar;jdom.jar");<br>
      $builder = new java("org.jdom.input.SAXBuilder");<br>
      $doc = $builder-&gt;build($file);<br>
      $root = $doc-&gt;getRootElement();<br>
      $servlets = $root-&gt;getChildren("servlet");<br>
<br>
      echo "this file has " . $servlets-&gt;size() . " servlets\n";<br>
d144 1
a144 1
     available to the current script.  Available since <a href="http://sourceforge.net/mailarchive/forum.php?thread_id=8895955&forum_id=42415">PHP/Java Bridge version 3.0</a>. All implicit web objects (session, servlet context, etc.) are <a href="server/documentation/API/php/java/servlet/Context.html#getHttpServletRequest()">available from the context</a> when the backend is running in a servlet engine or application server. Example: <br><br>
d148 1
a148 1
&nbsp;&nbsp;public static void main(String s[]) throws Throwable {<br>
d369 1
a369 1
>An opaque object handle.  However, we guarantee that the first handle always starts with 1 and that the next handle is n+1 for all n < 1024 (useful if you work with the raw <a href="PROTOCOL.TXT">XML protocol</a>, see the <a href="examples/clients/README">python and scheme</a> examples).</TD
a489 11
<P><FONT >The PHP/Java bridge
is a replacement  for the <a href="http://www.php.net/manual/en/ref.java.php">experimental ext/java bridge</a>
shipped with PHP 4. It is not possible to run the build-in bridge and
the PHP/Java bridge at the same time.</FONT></P>
</P>
<P><FONT >
  The module has been tested on a Mandrake Linux System (Version 9.2),
  on RedHat Enterprise 3, RedHat Fedora Core 1..4, FreeBSD 5.3, Solaris 9 (Sparc, 64 bit JVM)
  and Windows with RedHat Cygwin, but it should run on all Unix-like
  operating systems.  
</FONT></P>
d538 1
a538 2
README file.  This should only be necessary if the OS does not support
shared libraries.
d557 1
a557 1
php-java-bridge-v.x.y-z-i386.rpm</code> to install it (if you run a 64bit system <strong>and</strong> a 64bit JVM you need to install the 64bit RPM instead). For other operating systems please follow 
d561 1
a561 1
	have java version 1.4 or higher, gcc 3.2 or higher, apache 1.3 or
d598 1
a598 1
java.servlet=User
d654 1
a654 1
>The name of the communication channel for the local backend. Must be an integer on windows.</TD
d763 2
a764 5
with a file manager and drag and drop the contents of the lib/php
directory to /usr/lib/lib php and restart apache.</p> <li> <H4>Which
version should I use, which is stable?</H4> <p>In production
environments you can use PHP/Java Bridge 2.0.8 until PHP/Java Bridge
3.0.8 is available.  </p> <li> <H4>Can I use java libraries without
d767 1
a767 1
<code>libgcj</code>, which is part of the GNU gcc compiler, to
d854 149
d1017 1
a1017 1
href="examples/j2ee/README?rev=1.4&view=markup">Calling
@


1.30
log
@*** empty log message ***
@
text
@d9 45
a53 17
</p>
<BODY LANG="en-US" DIR="LTR">
<H1>What
is the PHP/Java Bridge?</H1>
<P><FONT > The PHP/Java Bridge 
  is an optimized XML protocol which can be used to connect a native script engine with a Java or <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm">ECMA 335</a> virtual machine. The <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/documentation/PHP-API/html/java_8c.html">php java extension</a> uses this protocol to connect running PHP instances with already running Java or .NET <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/index.html">backends</a>. The communication works in both directions, the <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> interface can be used to connect to a running PHP server (Apache/IIS, FastCGI, ...) so that Java components can call PHP instances and PHP scripts can invoke CLR (e.g. VB.NET, C#, COM) or Java (e.g. Java, KAWA, JRuby) based applications or transfer control back to the environment where the request came from. The bridge can be set up to automatically start the PHP frontend or the Java/.NET backend, if needed.
<p><FONT > 
  Each request-handling PHP process of a multi-process HTTP server
  communicates with a corresponding thread spawned by the VM.
Requests from more than one HTTP server may either be routed to an application server running the PHP/Java Bridge or each HTTP server may own a PHP/Java Bridge and communicate with a J2EE java application server by exchanging java value objects; the necessary client-stub classes (ejb client .jar) can be loaded at run-time.
</FONT></P>                                                                                            
<P><FONT > ECMA 335 based classes can be accessed if at least one backend is running inside a ECMA complient VM, for example Novell's MONO or Microsoft's .NET.  Special features such as varargs, reflection or assembly loading are also supported. 
</FONT></P>                                                                                            
<P><FONT > When the backend is running in a J2EE environment, session sharing between PHP and JSP is always possible. Clustering and load balancing is available if the J2EE environment supports these features.
</FONT></P>                                                                                            
<P><FONT > Unlike previous attempts (the ext/java or the JSR223 sample implementation) the PHP/Java Bridge does <em>not</em> use the java native interface ("JNI"). Php instances are allocated from the HTTP (Apache/IIS) pool, instances of java/j2ee components are allocated from the backend. The allocated instances communicate using a "continuation passing style", see <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/documentation/PHP-API/html/java_8c.html#a43"><code>java_closure()</code></a>. In case a php instance crashes, it will not take down the java application server or servlet engine. 
</FONT></P>                                                                                            
d55 25
a79 10
<H1>Why
use PHP/Java Bridge?</H1>
<P><FONT > PHP components are essentially transient. For complex applications is usually necessary to introduce "middleware" components such as (enterprise-) "java beans" or enterprise applications which provide caching, connection pooling or the "business logic" for the pages generated by the PHP components. Parsing XML files for example is an expensive task and it might be necessary to cache the generated graph. Establishing connections to databases is an expensive operation so that it might be necessary to re-use used connections. The standard PHP XML or DB abstractions are useless in this area because they cannot rely on a middle tier to do caching or db connection pooling. 
</FONT></P>                                                                                            
<P><FONT > Even for trivial tasks it might be necessary to use a java class or java library. For example it might be necessary to generate Word, Excel or PDF documents  without tying the application to a specific system platform.
</FONT></P>                                                                                            
<img src="tomcat-jsf.jpg" align="right" vspace="0" hspace="0" name="php-jsf" alt="Apache/Tomcat with PHP scripts and the Java Server Faces framework">
<P><FONT > PHP, the PHP/Java Bridge and the php files can be packaged within a standard J2EE archive, customers can easily deploy it into a J2EE application server or servlet engine. They don't have to install PHP and they usually cannot tell the difference whether the pages are generated by PHP, JSP or servlets.  Since the bridge allows session sharing between PHP and the J2EE components, developers can migrate their JSP based solutions to PHP step by step.
</FONT></P>                                                                                            
<P><FONT >PHP and the PHP/Java Bridge might also be interesting for java developers. There are a number of technologies based on the JSP template system such as jakarta <a href="http://struts.apache.org/">Struts</a> and its successor <a href="http://www.jcp.org/en/jsr/detail?id=127">Java Server Faces</a>. Since PHP/Java Bridge version 3.0 it is possible to embed php scripts into the JSF framework, so that UI developers can concentrate on developing HTML templates while web developers can create a prototype using php code and use the existing framework from their code.</img>
d84 2
a85 2
<P><FONT > 
  The bridge adds the following primitives to PHP.  The type mappings are shown in <a href="#type-mapping">table 1</a>.
d141 1
d145 1
a145 1
     a "http:", "ftp:", "file:" or a "jar:" location. On &quot;Security Enhanced Linux&quot; (<a href="README">please see the README</a>) the location must be tagged with a <em>lib_t</em> <a href="#sel">security context</a>. Example: <br><br>
d163 1
a163 1
     available to the current script.  Available since <a href="http://sourceforge.net/mailarchive/forum.php?thread_id=8895955&forum_id=42415">PHP/Java Bridge version 3.0</a>. All implicit web objects (session, servlet context, etc.) are <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/php/java/servlet/Context.html#getHttpServletRequest()">available from the context</a> when the backend is running in a servlet engine or application server. Example: <br><br>
a235 39
The <strong>java_closure</strong> can also be used to emulate try/catch functionality in PHP4.  The following example calls the "strategy.call()" method which catches the exception raised in the php method m1() and calls the php method e($ex) with the raised exception as an argument:
<blockquote>
<code>
interface IStrategy  {<br>
&nbsp;&nbsp;public void m1();<br>
&nbsp;&nbsp;public int m2();<br>
&nbsp;&nbsp;public int e(Exception ex);<br>
<br>
&nbsp;&nbsp;public class Strategy  {<br>
&nbsp;&nbsp;&nbsp;&nbsp;public int call(IStrategy phpClosure)  {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try  {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;phpClosure.m1();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return phpClosure.m2();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (Exception ex) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return phpClosure.e(ex);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;}<br>
}<br>
&lt;?php<br>
function m1 ()  {<br>
&nbsp;&nbsp;$str=new java("java.lang.String", null); //raises NP exception<br>
&nbsp;&nbsp;if(java_last_exception_get()) return; <br>
&nbsp;&nbsp;echo "in m1"; //never reached <br>
}<br>
function m2 ()  {<br>
&nbsp;&nbsp;echo "in m2";<br>
&nbsp;&nbsp;return 1;<br>
}<br>
function e($ex)  {<br>
&nbsp;&nbsp;echo "exception raised on php level: $ex";<br>
&nbsp;&nbsp;return 2;<br>
}<br>
$s = new Java('IStrategy$Strategy');<br>
$result = $s->call(java_closure());<br>
echo $result; // should display 2<br>
?&gt;<br>
</code>
</blockquote>
d239 1
a239 1
  <code>$session=<strong>java_session</strong>()</code>: Creates or retrieves a session context. When the backend is running in a J2EE environment, the session is taken from the request object, otherwise it is taken from PHP. Please see the  <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/php/java/bridge/ISession.html">ISession interface documentation</a> for details. The <code>java_session()</code> must be called <a href="http://www.php.net/manual/en/function.headers-sent.php">before the response headers have been sent</a> and it should be called as the first statement within a php script.
d250 9
a258 1
  <code>$session=<strong>java_session</strong>(SESSIONNAME)</code>: Creates or retrieves the session <code>SESSIONNAME</code>. This primitive uses a "private" session store with the name SESSIONNAME. Please see the  <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/php/java/bridge/ISession.html">ISession interface documentation</a> for details. For java values <code>$_SESSION['var']=val</code> is syntactic shugar for <code>java_session(session_id())-&gt;put('var', val)</code>.
d260 1
d521 1
d540 1
a540 1
</a>
d598 1
a598 2
	require either an IBMJava2, Sun Java &gt;= 1.4.2_02. For RedHat Enterprise Linux an appropriate java RPM is
	available on CD#9. </FONT> GNU Java is currently only supported on Linux and Solaris if you use the GCC 3.3.x or the upcoming GCC 4.x releases.
d613 1
a613 1
	<LI><P STYLE="font-style: normal"><FONT ><A name="#mode2">The PHP/Java Bridge can be run as a <strong>sub-component of the web server</strong>; add the following lines
d756 1
a756 1
><A name="#ext_java_compatibility">java.ext_java_compatibility</A></TD
d772 4
a775 2
information please read the <a href="README">README</a>, <a href="INSTALL">INSTALL</a> and <a href="INSTALL.WINDOWS">INSTALL.WINDOWS</a> documents contained in
the download files.<p>
d780 91
a870 11
</P>
<H1>FAQ</H1>
<P><FONT >
<ul>
<li><H4>The bridge doesn't compile on my system!?!</H4>
<p>Please follow the instructions in the INSTALL document as close as possible. 
If you have a problem compiling the bridge code against any PHP version >= 4.3.4 on Windows, Linux/Unix or MacOS, please do <em>not</em> report this problem to the mailing list. Please <a href="http://sourceforge.net/tracker/?func=add&group_id=117793&atid=679233">open a problem report instead</a> (you don't need an account to submit a problem report).</p>
<p>On RPM based Security Enhanced Linux installations (RHEL, Fedora) please install one of the binary RPM's or compile a binary RPM from the source RPM using the command: <code>rpmbuild --rebuild php-java-bridge*src.rpm</code></p>
<p>On recent Debian X86 installations, Ubuntu for example, it is also possible to install the RPM binaries: Open the appropriate binary RPM with a file manager and drag and drop the contents of the lib/php directory to /usr/lib/lib php and restart apache.</p>
<li> <H4>Which version should I use, which is stable?</H4>
<p>In production environments you can use PHP/Java Bridge 2.0.8 until PHP/Java Bridge 3.0.8 is available. 
d872 2
a873 6
<li> <H4>Can I use java libraries without installing java?</H4>
<p>Yes. Simply ommit the <code>--with-java=</code> configure option. The bridge will use the <code>libgcj</code>, which is part of the GNU gcc compiler, to interpret java libraries. This library also uses much less system resources (memory, files) than a "real" java VM.</p>
<li> <H4>Does the bridge run native code within my servlet engine or application server?</H4>
<p>No. The bridge backend is written in pure java, it doesn't use any native code. Native PHP runs within Apache, IIS, a FCGI server or via CGI. If the PHP instance crashes, an error page is returned to the client and a new PHP instance is started for the next request.</p>
<li> <H4>How do I make my script state (objects or variables) persistent?</H4>
<p>If you must code it yourself: with e.g. <code>java_session()->put("buf", $stringBuffer)</code> or via <code>$_SESSION["buf"]=$stringBuffer</code>. The <code>$_SESSION</code> is syntactic shugar provided by the <a href="http://www.php.net/manual/en/ref.session.php">php session module</a>, it uses <code><a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/documentation/PHP-API/html/java_8c.html#a34">java_session()<a></code> internaly. If you don't want depend on the php session module, for example if you have compiled php without the <code>session.so</code>, use java_session() instead of the <code>$_SESSION</code> syntax.</p>
d875 12
a886 4
If use use the <a href="http://www.jcp.org/en/jsr/detail?id=127">Java Server Faces</a> framework, you declare the scope of the script in the <a href="http://cvs.sourceforge.net/viewcvs.py/php-java-bridge/php-java-bridge/server/WEB-INF/faces-config.xml?view=markup">php managed bean descriptor<a>. For example if the <code>managed-bean-scope</code> is changed from <code>request</code> to <code>session</code>, the framework automatically saves the state of the php script instance and restores it when the next request belonging to the same session comes in.</p>
<li> <H4>How many threads does the bridge start?</H4>
<p>Request-handling threads are started from a thread pool which limits the number of user requests to 20 (default), see system property <code>php.java.bridge.threads</code>. All further requests have to wait until one of the worker threads returns to the pool. <p>
<p>When running in a servlet engine, a <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/php/java/bridge/http/ContextServer.html">ContextServer</a> is started which handles the pipe or local socket communication channel.
a887 4
<p>When java invokes local scripts outside of a HTTP environment, the bridge starts a <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/index.html">HttpServer</a>, a <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/php/java/bridge/http/ContextServer.html">ContextServer</a> and a <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/php/java/script/HttpProxy.html">HttpProxy</a>. The HttpProxy represents the php continuation and the HttpServer the request-handling java continuation associated with the JSR223 script.
</p>
<li> <H4>How do I lock down the VM so that users cannot start threads or call System.exit?</H4>
<p>Usually with a java policy file. An example file will ship with version 3.0.8. </p>
d889 15
a903 12
</FONT></P>
<H1>Related</H1>
<P><FONT >
<ul>
<li> <a href="http://www.eclipse.org/proposals/php-ide/">A PHP IDE</a>.
<li> <a href="http://zez.org/article/articleview/26/">A tutorial how to use the predecessor &quot;ext/java&quot;</a>.
<li> <a href="http://www.caucho.com/resin-3.0/php/index.xtp">A commercial free (GPL) PHP engine written in pure java</a>.
<li> <a href="http://www.zend.com/store/products/zend-platform/java.php">A commercial non-free bridge which uses the same technology as the PHP/Java Bridge</a>.
<li> <a href="http://www.devx.com/Java/Article/21707">Calling Enterprise Java Beans from PHP/SOAP</a>.
<li> <a href="http://cvs.sourceforge.net/viewcvs.py/php-java-bridge/php-java-bridge/examples/j2ee/README?rev=1.4&view=markup">Calling Enterprise Java Beans from the PHP/Java Bridge</a>.
</ul>
</FONT></P>
@


1.29
log
@Release-3.0.7
@
text
@d14 2
a15 4
  is a protocol which connects a PHP <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/documentation/API/html/java_8c.html">module</a>, <code>java.so</code>, <code>php_java.dll</code>, with an associated <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/index.html">backend</a>, <code>JavaBridge.jar</code>, <code>JavaBridge.war</code> or <code>MonoBridge.exe</code>,
 running in a Java or <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm">ECMA 335</a> virtual machine. It fully implements <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> and
  can be used to access CLR (e.g. VB.NET, C#) or Java (e.g. Java, KAWA, JRuby) based applications from PHP scripts or to call PHP scripts from a servlet engine or application server. The PHP/Java Bridge communicates with the
  VM through local sockets using an efficient communication protocol.
d18 1
a18 2
  </FONT></P>
<P><FONT > Requests from more than one HTTP server may either be routed to an application server running the PHP/Java Bridge or each HTTP server may own a PHP/Java Bridge and communicate with a J2EE java application server by exchanging java value objects; the necessary client-stub classes (ejb client .jar) can be loaded at run-time.
d24 1
a24 3
<P><FONT > Unlike previous attempts (the ext/java or the JSR223 sample implementation) the PHP/Java Bridge does <em>not</em> use the java native interface ("JNI"). Php instances are allocated from the HTTP (Apache/IIS) pool, instances of java/j2ee components are allocated from the backend. The allocated instances communicate using a "continuation passing style", see <code>java_closure()</code> below. In case a php instance crashes, it will not take down the java application server or servlet engine. 
</FONT></P>                                                                                            
<P><FONT > Since <a href="NEWS">PHP/Java Bridge version 3.0</a> it is also possible to use java as an "execution environment" for php scripts, java code can allocate and invoke php scripts from an external or internal pool. The script instances can be allocated from an external HTTP (e.g.: Apache/IIS) pool, from a internal php FastCGI pool or directly using the php CGI interface. Java 6 or an external <code>javax.script</code> package is required to use this functionality, please see the <a href="http://download.java.net/jdk6/docs/api/javax/script/package-summary.html"><code>javax.script</code></a> package for details.
d33 1
d36 2
a37 1
<P><FONT > PHP and the PHP/Java Bridge might also be interesting for java developers. There are a number of technologies based on the JSP template system such as jakarta <a href="http://struts.apache.org/">Struts</a> and its successor <a href="http://www.jcp.org/en/jsr/detail?id=127">Java Server Faces</a>. JSP and custom taglibs have problems on their own, combining them to create an object-based web framework exposes these problems; the JSP page is parsed from the top to the bottom and the defined "components" render and contribute to the object graph in one pass. Even the JSF originators acknowledge that this system is <a href="http://www.onjava.com/pub/a/onjava/2004/06/09/jsf.html?page=1">seriously flawed</a> and recommend a system like <a href="http://jakarta.apache.org/tapestry/">tapestry</a> or <a href="http://www.jsfcentral.com/articles/facelets_1.html">facelets</a> which define the components in java classes and bind them via ID's in the XML or HTML template. Since PHP/Java Bridge version 3.0 it is possible to embed php scripts or php methods into the JSF framework, so that UI developers can concentrate on developing HTML templates while web developers can create a prototype using php code and use the existing framework from their code. 
d39 1
a39 1

d119 1
a119 1
     available to the current script.  Available since <a href="http://sourceforge.net/mailarchive/forum.php?thread_id=8895955&forum_id=42415">PHP/Java Bridge version 3.0</a>. Example: <br><br>
a121 8
&lt;?php<br>
function toString() {<br>
&nbsp;&nbsp;$testVal = java_context()->getAttribute("testKey");<br>
&nbsp;&nbsp;return "Hello Java from Simple.php script: $testVal.";<br>
}<br>
java_context()->call(java_closure()) || die("This script must be called from java.");<br>
?&gt;<br>
<br>
d124 6
a129 11
&nbsp;&nbsp;&nbsp;&nbsp;PhpScriptEngine engine = new PhpScriptEngine();<br>
&nbsp;&nbsp;&nbsp;&nbsp;engine.put("testKey", "testVal");<br>
&nbsp;&nbsp;&nbsp;&nbsp;// allocate a php instance from the HTTP (Apache/IIS) pool ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;Reader reader = new URLReader(new URL("http://localhost:80/Simple.php"));<br>
&nbsp;&nbsp;&nbsp;&nbsp;engine.eval(reader);<br>
&nbsp;&nbsp;&nbsp;&nbsp;// and invoke the above toString() function.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Object script = ((Invocable)engine).getInterface(null);<br>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Result from script.toString():" + script.toString());<br>
&nbsp;&nbsp;&nbsp;&nbsp;// release the allocated php continuation (i.e. <br>
&nbsp;&nbsp;&nbsp;&nbsp;// release the request-handling HTTP process/thread)<br>
&nbsp;&nbsp;&nbsp;&nbsp;engine.release();<br>
d234 1
a234 1
  <code>$session=<strong>java_session</strong>()</code>: Creates or retrieves a session context. When the backend is running in a J2EE environment, the session is taken from the request object, otherwise it is taken from PHP. Please see the  <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/php/java/bridge/ISession.html">ISession interface documentation</a> for details. 
d238 1
a238 1
$servletRequest = $session->getServletRequest();<br>
d774 2
a775 3
<p>If you have a PHP4 installation, use the latest 2.0.x version. On PHP5 or PHP6 use the latest 3.x version. </p>
<p>If you want to upgrade from PHP/Java Bridge version 2.0.x to version 3.x, set the java.ext_java_compatibility option to "On".
At the moment there is little reason to upgrade from 2.0.x to 3.x. The 3.x versions currently don't work with PHP4 and have been tested in the tomcat servlet engine and in a Eclipse environment only. They are here to help developers to create a PHP Eclipse IDE plugin.</p>
d778 14
@


1.28
log
@*** empty log message ***
@
text
@d14 1
a14 1
  is a protocol which connects a PHP <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/documentation/PHP-API/html/java_8c.html">module</a>, <code>java.so</code>, <code>php_java.dll</code>, with an associated <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/index.html">backend</a>, <code>JavaBridge.jar</code>, <code>JavaBridge.war</code> or <code>MonoBridge.exe</code>,
a37 1
<img src="tomcat-jsf.jpg" align="right" vspace="0" hspace="0" name="php-jsf" alt="Apache/Tomcat with PHP scripts and the Java Server Faces framework">
d40 2
a41 1
<P><FONT >PHP and the PHP/Java Bridge might also be interesting for java developers. There are a number of technologies based on the JSP template system such as jakarta <a href="http://struts.apache.org/">Struts</a> and its successor <a href="http://www.jcp.org/en/jsr/detail?id=127">Java Server Faces</a>. Since PHP/Java Bridge version 3.0 it is possible to embed php scripts into the JSF framework, so that UI developers can concentrate on developing HTML templates while web developers can create a prototype using php code and use the existing framework from their code.</img>
a42 2
</FONT></P>                                                                                            
<p></p>
d122 1
a122 1
     available to the current script.  Available since <a href="http://sourceforge.net/mailarchive/forum.php?thread_id=8895955&forum_id=42415">PHP/Java Bridge version 3.0</a>. All implicit web objects (session, servlet context, etc.) are <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/php/java/servlet/Context.html#getHttpServletRequest()">available from the context</a> when the backend is running in a servlet engine or application server. Example: <br><br>
d125 8
d135 11
a145 6
&nbsp;&nbsp;&nbsp;&nbsp;ScriptEngineManager m = new ScriptEngineManager();<br>
&nbsp;&nbsp;&nbsp;&nbsp;ScriptEngine e = m.getEngineByName("php");<br>
&nbsp;&nbsp;&nbsp;&nbsp;e.put("key", "java");<br>
&nbsp;&nbsp;&nbsp;&nbsp;e.eval("&lt;?php ctx = java_context(); " +<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"echo 'Hello '.$ctx-&gt;getAttribute('key').' world!'; " + <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"?&gt;");<br>
d250 1
a250 1
  <code>$session=<strong>java_session</strong>()</code>: Creates or retrieves a session context. When the backend is running in a J2EE environment, the session is taken from the request object, otherwise it is taken from PHP. Please see the  <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/php/java/bridge/ISession.html">ISession interface documentation</a> for details. The <code>java_session()</code> must be called <a href="http://www.php.net/manual/en/function.headers-sent.php">before the response headers have been sent</a> and it should be called as the first statement within a php script.
d254 1
a254 1
$servletRequest = $session->getHttpServletRequest();<br>
d790 3
a792 2
<p>In production environments you can use PHP/Java Bridge 2.0.8 until PHP/Java Bridge 3.0.8 is available. 
</p>
a794 6
<li> <H4>Does the bridge run native code within my servlet engine or application server?</H4>
<p>No. The bridge backend is written in pure java, it doesn't use any native code. Native PHP runs within Apache, IIS, a FCGI server or via CGI. If the PHP instance crashes, an error page is returned to the client and a new PHP instance is started for the next request.</p>
<li> <H4>How do I make my script state (objects or variables) persistent?</H4>
<p>If you must code it yourself: with e.g. <code>java_session()->put("buf", $stringBuffer)</code> or via <code>$_SESSION["buf"]=$stringBuffer</code>. The <code>$_SESSION</code> is syntactic shugar provided by the <a href="http://www.php.net/manual/en/ref.session.php">php session module</a>, it uses <code><a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/documentation/PHP-API/html/java_8c.html#a34">java_session()<a></code> internaly. If you don't want depend on the php session module, for example if you have compiled php without the <code>session.so</code>, use java_session() instead of the <code>$_SESSION</code> syntax.</p>
<p>
If use use the <a href="http://www.jcp.org/en/jsr/detail?id=127">Java Server Faces</a> framework, you declare the scope of the script in the <a href="http://cvs.sourceforge.net/viewcvs.py/php-java-bridge/php-java-bridge/server/WEB-INF/faces-config.xml?view=markup">php managed bean descriptor<a>. For example if the <code>managed-bean-scope</code> is changed from <code>request</code> to <code>session</code>, the framework automatically saves the state of the php script instance and restores it when the next request belonging to the same session comes in.</p>
@


1.27
log
@*** empty log message ***
@
text
@d14 1
a14 1
  is a protocol which connects a PHP <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/documentation/API/html/java_8c.html">module</a>, <code>java.so</code>, <code>php_java.dll</code>, with an associated <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/index.html">backend</a>, <code>JavaBridge.jar</code>, <code>JavaBridge.war</code> or <code>MonoBridge.exe</code>,
d38 1
d41 2
a42 1
<P><FONT > PHP and the PHP/Java Bridge might also be interesting for java developers. There are a number of technologies based on the JSP template system such as jakarta <a href="http://struts.apache.org/">Struts</a> and its successor <a href="http://www.jcp.org/en/jsr/detail?id=127">Java Server Faces</a>. JSP and custom taglibs have problems on their own, combining them to create an object-based web framework exposes these problems; the JSP page is parsed from the top to the bottom and the defined "components" render and contribute to the object graph in one pass. Even the JSF originators acknowledge that this system is <a href="http://www.onjava.com/pub/a/onjava/2004/06/09/jsf.html?page=1">seriously flawed</a> and recommend a system like <a href="http://jakarta.apache.org/tapestry/">tapestry</a> or <a href="http://www.jsfcentral.com/articles/facelets_1.html">facelets</a> which define the components in java classes and bind them via ID's in the XML or HTML template. Since PHP/Java Bridge version 3.0 it is possible to embed php scripts or php methods into the JSF framework, so that UI developers can concentrate on developing HTML templates while web developers can create a prototype using php code and use the existing framework from their code. 
d44 1
a44 1

d124 1
a124 1
     available to the current script.  Available since <a href="http://sourceforge.net/mailarchive/forum.php?thread_id=8895955&forum_id=42415">PHP/Java Bridge version 3.0</a>. Example: <br><br>
a126 8
&lt;?php<br>
function toString() {<br>
&nbsp;&nbsp;$testVal = java_context()->getAttribute("testKey");<br>
&nbsp;&nbsp;return "Hello Java from Simple.php script: $testVal.";<br>
}<br>
java_context()->call(java_closure()) || die("This script must be called from java.");<br>
?&gt;<br>
<br>
d129 6
a134 11
&nbsp;&nbsp;&nbsp;&nbsp;PhpScriptEngine engine = new PhpScriptEngine();<br>
&nbsp;&nbsp;&nbsp;&nbsp;engine.put("testKey", "testVal");<br>
&nbsp;&nbsp;&nbsp;&nbsp;// allocate a php instance from the HTTP (Apache/IIS) pool ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;Reader reader = new URLReader(new URL("http://localhost:80/Simple.php"));<br>
&nbsp;&nbsp;&nbsp;&nbsp;engine.eval(reader);<br>
&nbsp;&nbsp;&nbsp;&nbsp;// and invoke the above toString() function.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Object script = ((Invocable)engine).getInterface(null);<br>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Result from script.toString():" + script.toString());<br>
&nbsp;&nbsp;&nbsp;&nbsp;// release the allocated php continuation (i.e. <br>
&nbsp;&nbsp;&nbsp;&nbsp;// release the request-handling HTTP process/thread)<br>
&nbsp;&nbsp;&nbsp;&nbsp;engine.release();<br>
d239 1
a239 1
  <code>$session=<strong>java_session</strong>()</code>: Creates or retrieves a session context. When the backend is running in a J2EE environment, the session is taken from the request object, otherwise it is taken from PHP. Please see the  <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/php/java/bridge/ISession.html">ISession interface documentation</a> for details. 
d243 1
a243 1
$servletRequest = $session->getServletRequest();<br>
d779 2
a780 3
<p>If you have a PHP4 installation, use the latest 2.0.x version. On PHP5 or PHP6 use the latest 3.x version. </p>
<p>If you want to upgrade from PHP/Java Bridge version 2.0.x to version 3.x, set the java.ext_java_compatibility option to "On".
At the moment there is little reason to upgrade from 2.0.x to 3.x. The 3.x versions currently don't work with PHP4 and have been tested in the tomcat servlet engine and in a Eclipse environment only. They are here to help developers to create a PHP Eclipse IDE plugin.</p>
d783 6
@


1.26
log
@PhpScriptEngine Discovery
@
text
@d785 1
a785 19
<p>Please follow the instructions in the INSTALL document as close as possible. Some distributions (BSD, Debian) use broken, patched or outdated autoconf, automake or libtool versions. If you get errors such as "configure.h.in missing", "run configure.guess" or other configure related error messages, please use the following commands to compile the bridge:<br>
<p>
<code>
<font size="-1">
#uncomment the following line on MacOSX and BSD only, see README<br>
#export CFLAGS="-DCFG_JAVA_SOCKET_INET"<br>
export INST=`pwd`/dist<br>
export LD_LIBRARY_PATH=$INST/lib:$LD_LIBRARY_PATH<br>
export PATH=$INST/bin/:$PATH<br>
(cd autoconf-2.59; ./configure --prefix=$INST && make && make install)<br>
(cd automake-1.6.3; ./configure --prefix=$INST && make && make install)<br>
(cd libtool-1.5.6; ./configure --prefix=$INST make && make install)<br>
(cd php-5.1.2; ./configure --prefix=$INST --disable-all --enable-fastcgi && make && make install)<br>
(cd php-java-bridge-2.0.8; phpize && ./configure --with-java=/usr/java/jdk1.5.0 && make && make install)<br>
# test, should display "java running"<br>
php php-java-bridge-2.0.8/test.php >result.html<br>
</font>
</code>
</p>
d800 1
a800 1
<li> <a href="http://www.eclipse.org/proposals/php-ide/">A proposal for a PHP IDE</a>.
@


1.25
log
@Release-3.0.6
@
text
@d611 1
a611 1
	--with-java=/opt/IBMJava2-14 &amp;&amp; make CFLAGS=&quot;-m32&quot;</code></FONT></P>
d785 1
a785 1
<p>Please follow the instructions in the INSTALL document as close as possible. Some distributions such as BSD or Debian use broken or outdated autoconf, automake or libtool versions. If you get errors "configure.h.in missing", "run configure.guess" or other configure related error messages, please use the following commands to compile the bridge:<br>
a810 4
<li> <H4>Where's the PHP5.1.x Windows binary?</H4>
<p>
PHP5.1.x already uses the PHP6 ABI. Please use the latest stable PHP5 version, which is PHP5.0.5.
The PHP6 ABI will be supported on windows when PHP6 or a stable PHP 5.1.x version is released (the current PHP5.1.x versions have problems when compiled with ZTS, that's a php bug, not a problem with the bridge).</p>
d818 1
@


1.24
log
@Release-3.0.4
@
text
@d14 3
a16 2
  is  a PHP <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/documentation/API/html/java_8c.html">module</a>, <code>java.so</code>, <code>php_java.dll</code>, with an associated <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/documentation/API/index.html">backend</a>, <code>JavaBridge.jar</code>, <code>JavaBridge.war</code> or <code>MonoBridge.exe</code>, which connects the PHP object system with Java or a <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm">ECMA 335</a> virtual machine. It fully implements <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> and
  can be used to access CLR (e.g. VB.NET, C#) or Java (e.g. Java, KAWA, JRuby) based applications from PHP scripts. The PHP/Java Bridge communicates with the
d43 1
d130 1
d133 4
a136 5
public class MyServlet extends php.java.script.PhpScriptServlet {<br>
&nbsp;&nbsp;public void service (ServletRequest req, ServletResponse res) throws ServletException  {<br>
&nbsp;&nbsp;&nbsp;&nbsp;ScriptEngine engine = getEngine(req);<br>
&nbsp;&nbsp;&nbsp;&nbsp;ScriptContext ctx = getContext(req, res);<br>
&nbsp;&nbsp;&nbsp;&nbsp;ctx.setAttribute("testKey", "testVal", ScriptContext.ENGINE_SCOPE);<br>
d139 1
a139 1
&nbsp;&nbsp;&nbsp;&nbsp;engine.eval(reader, ctx);<br>
d141 2
a142 3
&nbsp;&nbsp;&nbsp;&nbsp;Object phpTopLevelEnvironment = ((Invocable)engine).getInterface(null, null);<br>
&nbsp;&nbsp;&nbsp;&nbsp;String s = phpTopLevelEnvironment.toString();<br>
&nbsp;&nbsp;&nbsp;&nbsp;res.getWriter().write(s);<br>
d145 1
a145 2
&nbsp;&nbsp;&nbsp;&nbsp;releaseEngine();<br>
&nbsp;&nbsp;&nbsp;&nbsp;ctx.remove();<br>
d152 9
a160 1
  <code><strong>java_closure</strong>(ENVIRONMENT, MAP, TYPE)</code>: Makes it possible to call PHP code from java.  It closes over the PHP environment and packages it up as a java class.  If the ENVIRONMENT is missing, the current environment is used. If MAP is missing, the PHP procedures must have the same name as the required procedures. If TYPE is missing, the generated class is "generic", i.e. the interface it implements is determined when the closure is applied. Example which uses PHP and Mono:<br>
d410 1
a410 1
>long</TD
d412 1
a412 1
>64 bit integer</TD
d631 1
a631 1
java.servlet="/JavaBridge/PhpJavaServlet.php"
d727 1
a727 1
>The communication protocol. If set to "On" or to "/yourContext/YourServlet", the bridge uses HTTP to communicate with the <code>java.hosts</code> backends.</TD
d731 1
a731 1
java.servlet="/JavaBridge/PhpJavaServlet.php"
a743 1
></TR
d756 12
d781 38
d823 2
a824 1
<li> <a href="http://www.zend.com/store/products/zend-platform/java.php">A commercial bridge which uses the same technology as the PHP/Java Bridge</a>.
d827 1
@


1.23
log
@Release-3-0-2
@
text
@d623 1
a623 1
java.servlet="/JavaBridge/PhpJavaServlet"
d723 1
a723 1
java.servlet="/JavaBridge/PhpJavaServlet"
@


1.22
log
@Version-3.0.0pre
@
text
@d4 1
a4 1
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=utf-8">
a5 7
	<STYLE>
	<!--
		@@page { size: 21cm 29.7cm }
		P.sdfootnote { margin-left: 0.5cm; text-indent: -0.5cm; margin-bottom: 0cm; font-size: 10pt }
		A.sdfootnoteanc { font-size: 57% }
	-->
	</STYLE>
d11 2
a12 2
<P STYLE="margin-top: 0.42cm; page-break-after: avoid"><FONT ><FONT SIZE=4><B>What
is the PHP/Java Bridge?</B></FONT></FONT></P>
d14 1
a14 1
  is  a PHP module, <code>java.so</code>, <code>php_java.dll</code>, with an associated backend, <code>JavaBridge.jar</code>, <code>JavaBridge.war</code> or <code>MonoBridge.exe</code>, which connects the PHP object system with Java or a <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm">ECMA 335</a> virtual machine. It fully implements <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> and
d28 1
a28 1
<P><FONT > Since <a href="http://sourceforge.net/mailarchive/forum.php?thread_id=8895955&forum_id=42415">PHP/Java Bridge version 3.0</a> it is also possible to use java as an "execution environment" for php scripts, java code can allocate and invoke php scripts from an external or internal pool. The script instances can be allocated from an external HTTP (e.g.: Apache/IIS) pool, from a internal php FastCGI pool or directly using the php CGI interface. Java 6 or an external <code>javax.script</code> package is required to use this functionality, please see the <a href="http://download.java.net/jdk6/docs/api/javax/script/package-summary.html"><code>javax.script</code></a> package for details.
d31 2
a32 2
<P STYLE="margin-top: 0.42cm; page-break-after: avoid"><FONT ><FONT SIZE=4><B>Why
use PHP/Java Bridge?</B></FONT></FONT></P>
d242 1
a242 1
  <code>$session=<strong>java_session</strong>()</code>: Creates or retrieves a session context. When the backend is running in a J2EE environment, the session is taken from the request object, otherwise it is taken from PHP. Please see the  <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/doc/php/java/bridge/ISession.html">ISession interface documentation</a> for details. 
d253 1
a253 1
  <code>$session=<strong>java_session</strong>(SESSIONNAME)</code>: Creates or retrieves the session <code>SESSIONNAME</code>. This primitive uses a "private" session store with the name SESSIONNAME. Please see the  <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/doc/php/java/bridge/ISession.html">ISession interface documentation</a> for details. For java values <code>$_SESSION['var']=val</code> is syntactic shugar for <code>java_session(session_id())-&gt;put('var', val)</code>.
d576 2
a577 2
<P STYLE="margin-top: 0.42cm; page-break-after: avoid"><FONT ><FONT SIZE=4><B>Installation
instructions</B></FONT></FONT></P>
d762 1
a762 1
<P STYLE="margin-top: 0.42cm; page-break-after: avoid"><FONT ><FONT SIZE=4><B>Related</B></FONT></FONT></P>
a772 3

<!--  LocalWords:  PHP
 -->
@


1.21
log
@Release-3.0.0pre1
@
text
@d19 3
a21 4
is the PHP/Java bridge?</B></FONT></FONT></P>
<P><FONT > The PHP/Java bridge 
  is  a PHP module ("java.so" or "php_java.dll") with an associated backend ("JavaBridge.jar", "JavaBridge.war" or "MonoBridge.exe") which connect the PHP object system with the Java or <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm">ECMA 335</a>
  object system. It implements <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> (where applicable) and
d31 1
a31 1
<P><FONT > Clustering and load balancing is available if the backend runs in a servlet environment supporting these features, tomcat 5 for example.
d33 16
a48 9
<P STYLE="margin-top: 0.42cm; page-break-after: avoid"><FONT ><FONT SIZE=4><B>How does it compare to SOAP, XML-RPC, ext/java or the JSR223 sample implementation?</B></FONT></FONT></P>
<ul>
<li> The PHP/Java Bridge typically runs on the same computer as the PHP interpreter, so a very efficient protocol can be used. An example is provided which executes a mix of PHP/Java code nearly as fast as the pure java equivalent.
<li> It is not necessary to write and deploy a public interface. The bridge uses reflection once to determine what can be accessed in the backend.
<li> PHP scripts can load/unload java libraries at runtime.
<li> On linux the c/s communication channel is not visible and the backend runs in its own "Security Enhanced Linux" domain.
<li> The PHP/Java Bridge module doesn't use any state on the web-server side, it simply forwards the java(...) statements to the backend, which can communicate with the enterprise application server using RMI/IIOP or other java technologies.
<li> Unlike other attempts the PHP/Java Bridge does <em>not</em> use the java native interface ("JNI"). In case a php instance crashes, it will not take down the java application server or servlet engine.
</ul>
d124 34
d229 1
d249 1
a249 1
  <code>$session=<strong>java_get_session</strong>(SESSIONNAME)</code>: Creates or retrieves the session SESSIONNAME. The primitive returns a session handle which can be used to store and retrieve values which survive the current script.  The session can be invalidated with $session->destroy(). The <code><strong>java_get_session</strong></code> shall be used before creating java instances. If the backend is running in a servlet engine, Tomcat for example, the session handle is shared, i.e. it can be used to retrieve values stored by JSP scripts. Example:
d252 12
a263 1
$session=java_get_session("testSession");<br>
d280 1
a280 1
The <strong><code>java_get_session</code></strong> primitive is meant for values which <em>must</em> survive the current script.  If you want to cache data which is expensive to create, bind the data to a class.  Example:
d562 1
d586 1
a586 1
you have a RedHat Linux system (RedHat 9, RedHat Enterprise 3 or
d593 1
a593 1
	higher, libtool 1.4.3 or higher, automake 1.6.3 or higher, GNU make, autoconf 2.57 or higher and php 4.3.2 or higher
d627 1
a627 1
	<LI><P><FONT ><A name="mode4">In a production environment which requires <strong>load balancing and failover</strong> it is recommended deploy the backend into a servlet engine or an application server which supports these features, tomcat 5 for example. Disable the <code>java.socketname</code>, enable the <code>java.hosts</code> and <code>java.servlet</code> options and start the application server. The <code>.ini</code> file should contain:
d630 3
a632 2
java.servlet="On"
</code><br><br>
d726 1
a726 1
>The communication protocol. If set to "On", the bridge uses HTTP to communicate with the <code>java.hosts</code> backends.</TD
d730 1
a730 1
java.servlet="On"
d780 3
@


1.20
log
@Version-3.0(pre)
@
text
@d19 4
a22 3
is the PHP/Java Bridge?</B></FONT></FONT></P>
<P><FONT > The PHP/Java Bridge 
  is  a PHP module, <code>java.so</code>, <code>php_java.dll</code>, with an associated backend, <code>JavaBridge.jar</code>, <code>JavaBridge.war</code> or <code>MonoBridge.exe</code>, which connects the PHP object system with Java or a <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm">ECMA 335</a> virtual machine. It fully implements <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> and
d32 1
a32 1
<P><FONT > When the backend is running in a J2EE environment, session sharing between PHP and JSP is always possible. Clustering and load balancing is available if the J2EE environment supports these features.
d34 9
a42 16
<P><FONT > Unlike previous attempts (the ext/java or the JSR223 sample implementation) the PHP/Java Bridge does <em>not</em> use the java native interface ("JNI"). Php instances are allocated from the HTTP (Apache/IIS) pool, instances of java/j2ee components are allocated from the backend. The allocated instances communicate using a "continuation passing style", see <code>java_closure()</code> below. In case a php instance crashes, it will not take down the java application server or servlet engine. 
</FONT></P>                                                                                            
<P><FONT > Since PHP/Java Bridge version 3.0 it is also possible to use java as an "execution environment" for php scripts, java code can allocate and invoke php scripts from an external or internal pool. The script instances can be allocated from an external HTTP (e.g.: Apache/IIS) pool, from a internal php FastCGI pool or directly using the php CGI interface. Java 6 or an external <code>javax.script</code> package is required to use this functionality, please see the <a href="http://download.java.net/jdk6/docs/api/javax/script/package-summary.html"><code>javax.script</code></a> package for details.
</FONT></P>                                                                                            

<P STYLE="margin-top: 0.42cm; page-break-after: avoid"><FONT ><FONT SIZE=4><B>Why
use PHP/Java Bridge?</B></FONT></FONT></P>
<P><FONT > PHP components are essentially transient. For complex applications is usually necessary to introduce "middleware" components such as (enterprise-) "java beans" or enterprise applications which provide caching, connection pooling or the "business logic" for the pages generated by the PHP components. Parsing XML files for example is an expensive task and it might be necessary to cache the generated graph. Establishing connections to databases is an expensive operation so that it might be necessary to re-use used connections. The standard PHP XML or DB abstractions are useless in this area because they cannot rely on a middle tier to do caching or db connection pooling. 
</FONT></P>                                                                                            
<P><FONT > Even for trivial tasks it might be necessary to use a java class or java library. For example it might be necessary to generate Word, Excel or PDF documents  without tying the application to a specific system platform.
</FONT></P>                                                                                            
<P><FONT > PHP, the PHP/Java Bridge and the php files can be packaged within a standard J2EE archive, customers can easily deploy it into a J2EE application server or servlet engine. They don't have to install PHP and they usually cannot tell the difference whether the pages are generated by PHP, JSP or servlets.  Since the bridge allows session sharing between PHP and the J2EE components, developers can migrate their JSP based solutions to PHP step by step.
</FONT></P>                                                                                            
<P><FONT > PHP and the PHP/Java Bridge might also be interesting for java developers. There are a number of technologies based on the JSP template system such as jakarta <a href="http://struts.apache.org/">Struts</a> and its successor <a href="http://www.jcp.org/en/jsr/detail?id=127">Java Server Faces</a>. JSP and custom taglibs have problems on their own, combining them to create an object-based web framework exposes these problems; the JSP page is parsed from the top to the bottom and the defined "components" render and contribute to the object graph in one pass. Even the JSF originators acknowledge that this system is <a href="http://www.onjava.com/pub/a/onjava/2004/06/09/jsf.html?page=1">seriously flawed</a> and recommend a system like <a href="http://jakarta.apache.org/tapestry/">tapestry</a> or <a href="http://www.jsfcentral.com/articles/facelets_1.html">facelets</a> which define the components in java classes and bind them via ID's in the XML or HTML template. Whether or not these approaches will be accepted remains to be seen. PHP on the other hand is a full featured and mature script language designed specifically for generating dynamic web content.
</FONT></P>                                                                                            

a117 32
<br>
<li>
  <code><strong>java_context()</strong></code>: Makes the <code>javax.script.ScriptContext</code>
     available to the current script.  Available since PHP/Java Bridge version 3.0. Example: <br><br>
<blockquote>
<code>
&lt;?php<br>
function toString() {<br>
&nbsp;&nbsp;$testVal = java_context()->getAttribute("testKey");<br>
&nbsp;&nbsp;return "Hello Java from Simple.php script: $testVal.";<br>
}<br>
?&gt;<br>
<br>
public class MyServlet extends php.java.script.PhpScriptServlet {<br>
&nbsp;&nbsp;public void service (ServletRequest req, ServletResponse res) throws ServletException  {<br>
&nbsp;&nbsp;&nbsp;&nbsp;ScriptEngine engine = getEngine(req);<br>
&nbsp;&nbsp;&nbsp;&nbsp;ScriptContext ctx = getContext(req, res);<br>
&nbsp;&nbsp;&nbsp;&nbsp;ctx.setAttribute("testKey", "testVal", ScriptContext.ENGINE_SCOPE);<br>
&nbsp;&nbsp;&nbsp;&nbsp;// allocate a php instance from the HTTP (Apache/IIS) pool ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;Reader reader = new URLReader(new URL("http://localhost:80/Simple.php"));<br>
&nbsp;&nbsp;&nbsp;&nbsp;engine.eval(reader, ctx);<br>
&nbsp;&nbsp;&nbsp;&nbsp;// and invoke the above toString() function.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Object phpTopLevelClosure = ((Invocable)engine).getInterface(null, null);<br>
&nbsp;&nbsp;&nbsp;&nbsp;String s = phpTopLevelClosure.toString();<br>
&nbsp;&nbsp;&nbsp;&nbsp;res.getWriter().write(s);<br>
&nbsp;&nbsp;&nbsp;&nbsp;releaseEngine();<br>
&nbsp;&nbsp;&nbsp;&nbsp;ctx.remove();<br>
&nbsp;&nbsp;} <br>
}<br>
</code>
</blockquote>
<br>
a188 1
&nbsp;&nbsp;if(java_last_exception_get()) return; <br>
d208 1
a208 1
  <code>$session=<strong>java_session</strong>()</code>: Creates or retrieves a session context. When the backend is running in a J2EE environment, the session is taken from the request object, otherwise it is taken from PHP. Please see the  <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/doc/php/java/bridge/ISession.html">ISession interface documentation</a> for details. 
d211 1
a211 12
$session = java_session();<br>
$servletRequest = $session->getServletRequest();<br>
$servletRequest->setAttribute(...);<br>
...<br>
</code>
</blockquote>
<br>
<li>
  <code>$session=<strong>java_session</strong>(SESSIONNAME)</code>: Creates or retrieves the session <code>SESSIONNAME</code>. This primitive uses a "private" session store with the name SESSIONNAME. Please see the  <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/doc/php/java/bridge/ISession.html">ISession interface documentation</a> for details. For java values <code>$_SESSION['var']=val</code> is syntactic shugar for <code>java_session(session_id())-&gt;put('var', val)</code>.
<blockquote>
<code>
$session=java_session("testSession");<br>
d228 1
a228 1
The <strong><code>java_session</code></strong> primitive is meant for values which <em>must</em> survive the current script.  If you want to cache data which is expensive to create, bind the data to a class.  Example:
a509 1
      PHP be can run as a CGI sub-component within a pure java application server or be installed as a Apache/IIS module. 
d533 1
a533 1
you have a RedHat Linux system (RedHat Enterprise or
d540 1
a540 1
	higher, <em>autoconf </em> 2.57 or higher, <em>libtool</em> 1.4.3 or higher, <em>automake</em> 1.6.3 or higher, GNU make and php 4.3.2 or higher
d574 1
a574 1
	<LI><P><FONT ><A name="mode4">In a production environment which requires <strong>load balancing and failover</strong> or <strong>session sharing between PHP, JSP and Servlets</strong> it is recommended deploy the backend into a servlet engine or an application server; tomcat 5 for example. Disable the <code>java.socketname</code>, either a) enable the <code>java.hosts</code> and <code>java.servlet</code> options or b), if you don't have Apache or IIS, install PHP as a CGI/FastCGI binary so that your application server can find it and start the application server. The <code>.ini</code> file should contain:
d577 2
a578 3
java.servlet="/JavaBridge/PhpJavaServlet"
</code>
<br><br>
d672 1
a672 1
>The communication protocol. If set to "On" or to "/yourContext/YourServlet", the bridge uses HTTP to communicate with the <code>java.hosts</code> backends.</TD
d676 1
a676 1
java.servlet="/JavaBridge/PhpJavaServlet"
a725 3

<!--  LocalWords:  PHP
 -->
@


1.19
log
@documentation added
@
text
@d19 3
a21 4
is the PHP/Java bridge?</B></FONT></FONT></P>
<P><FONT > The PHP/Java bridge 
  is  a PHP module ("java.so" or "php_java.dll") with an associated backend ("JavaBridge.jar", "JavaBridge.war" or "MonoBridge.exe") which connect the PHP object system with the Java or <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm">ECMA 335</a>
  object system. It implements <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> (where applicable) and
d31 1
a31 1
<P><FONT > Clustering and load balancing is available if the backend runs in a servlet environment supporting these features, tomcat 5 for example.
d33 1
a33 1
<P><FONT > Unlike previous attempts (the ext/java or the JSR223 sample implementation) the PHP/Java Bridge does <em>not</em> use the java native interface ("JNI"). In case a php instance crashes, it will not take down the java application server or servlet engine. 
d35 14
d124 32
d247 12
a258 1
  <code>$session=<strong>java_get_session</strong>(SESSIONNAME)</code>: Creates or retrieves the session <code>SESSIONNAME</code>. If <code>SESSIONNAME</code> is missing, the session is either taken from the J2EE environment if the backend is running in a J2EE application server or servlet environment, otherwise it is taken from PHP. The primitive returns a session handle which can be used to store and retrieve values which survive the current script.  The session can be invalidated with $session->destroy(). The <code><strong>java_get_session</strong></code> shall be used before creating java instances. Session sharing between PHP and JSP is only possible when <code>java_get_session()</code> is called without a <code>SESSIONNAME</code> and when the JavaBridge.war is running in a J2EE application server or servlet engine. Please see the  <a href="http://cvs.sourceforge.net/viewcvs.py/*checkout*/php-java-bridge/php-java-bridge/server/doc/php/java/bridge/ISession.html">ISession interface documentation</a> for details. <p>For java values the PHP syntax <code>$_SESSION['var']=val</code> is equivalent to <code>java_get_session(session_id())-&gt;put('var', val)</code> and <code>val=$_SESSION['var']</code> is equivalent to <code>java_get_session(session_id())-&gt;get('var')</code>.
d261 1
a261 1
$session=java_get_session("testSession");<br>
d278 1
a278 1
The <strong><code>java_get_session</code></strong> primitive is meant for values which <em>must</em> survive the current script.  If you want to cache data which is expensive to create, bind the data to a class.  Example:
d560 1
d584 1
a584 1
you have a RedHat Linux system (RedHat 9, RedHat Enterprise 3 or
d591 1
a591 1
	higher, libtool 1.4.3 or higher, automake 1.6.3 or higher, GNU make, autoconf 2.57 or higher and php 4.3.2 or higher
d625 1
a625 1
	<LI><P><FONT ><A name="mode4">In a production environment which requires <strong>load balancing and failover</strong> it is recommended deploy the backend into a servlet engine or an application server which supports these features, tomcat 5 for example. Disable the <code>java.socketname</code>, enable the <code>java.hosts</code> and <code>java.servlet</code> options and start the application server. The <code>.ini</code> file should contain:
d628 3
a630 2
java.servlet="On"
</code><br><br>
d724 1
a724 1
>The communication protocol. If set to "On", the bridge uses HTTP to communicate with the <code>java.hosts</code> backends.</TD
d728 1
a728 1
java.servlet="On"
d778 3
@


1.18
log
@2.0.8RC1 fixes PR1276889, 1275899, 1274526, 1202896
@
text
@d34 2
a35 9
<P STYLE="margin-top: 0.42cm; page-break-after: avoid"><FONT ><FONT SIZE=4><B>How does it compare to SOAP, XML-RPC, ext/java or the JSR223 sample implementation?</B></FONT></FONT></P>
<ul>
<li> The PHP/Java Bridge typically runs on the same computer as the PHP interpreter, so a very efficient protocol can be used. An example is provided which executes a mix of PHP/Java code nearly as fast as the pure java equivalent.
<li> It is not necessary to write and deploy a public interface. The bridge uses reflection once to determine what can be accessed in the backend.
<li> PHP scripts can load/unload java libraries at runtime.
<li> On linux the c/s communication channel is not visible and the backend runs in its own "Security Enhanced Linux" domain.
<li> The PHP/Java Bridge module doesn't use any state on the web-server side, it simply forwards the java(...) statements to the backend, which can communicate with the enterprise application server using RMI/IIOP or other java technologies.
<li> Unlike other attempts the PHP/Java Bridge does <em>not</em> use the java native interface ("JNI"). In case a php instance crashes, it will not take down the java application server or servlet engine.
</ul>
d182 1
d202 1
a202 1
  <code>$session=<strong>java_get_session</strong>(SESSIONNAME)</code>: Creates or retrieves the session SESSIONNAME. The primitive returns a session handle which can be used to store and retrieve values which survive the current script.  The session can be invalidated with $session->destroy(). The <code><strong>java_get_session</strong></code> shall be used before creating java instances. If the backend is running in a servlet engine, Tomcat for example, the session handle is shared, i.e. it can be used to retrieve values stored by JSP scripts. Example:
@


1.17
log
@from index.html
@
text
@d355 2
d359 1
a359 3
>int</TD
><TD
>32 bit integer</TD
d379 1
a379 1
>double</TD
@


1.16
log
@updated from index.html
@
text
@d40 1
a40 1
<li> Other PHP modules do most of their work in the web-server (in C code), which makes them vulnerable to buffer overflows.  The PHP/Java Bridge module doesn't use any state on the web-server side, it simply forwards the java(...) statements to the backend, which can communicate with the enterprise application server using RMI/IIOP or other java technologies.
d178 2
a179 2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m1();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return m2();<br>
d181 1
a181 1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return e(ex);<br>
@


1.15
log
@gtk, swing and swt examples added
@
text
@d20 2
a21 2
<P><FONT > The PHP/Java bridge
  is  a PHP module which connects the PHP object system with the Java or <a href="http://www.ecma-international.org/publications/standards/Ecma-335.htm">ECMA 335</a>
d30 1
a30 1
<P><FONT > ECMA 335 based classes can be accessed if at least one JavaBridge.jar is running inside a ECMA complient VM, for example Novell's MONO or Microsoft's .NET.  Special features such as varargs, reflection or assembly loading are also supported. 
d34 1
a34 1
<P STYLE="margin-top: 0.42cm; page-break-after: avoid"><FONT ><FONT SIZE=4><B>How does it compare to SOAP or XML-RPC?</B></FONT></FONT></P>
d37 1
a37 1
<li> It is not necessary to write and deploy a public interface. The bridge uses reflection to determine what can be accessed in the local backend.
d40 2
a41 1
<li> Other PHP modules such do most of their work in the web-server (in C code), which makes them vulnerable to buffer overflows.  The PHP/Java Bridge module doesn't use any state on the web-server side, it simply forwards the java(...) statements to the local backend, which can communicate with the enterprise application server using RMI/IIOP or other java technologies.
d48 1
a48 2
  <code>new <strong>java</strong>("CLASSNAME")</code>: References and instanciates the class CLASSNAME.
<code><strong>Java</strong></code> can also be used for <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> compatibility.
d59 1
a59 1
      // create a 2x2 excel sheet and return it to the client<br>
d64 1
a64 1
      $Aqua = new java_class('org.apache.poi.hssf.util.HSSFColor$AQUA');<br>
d67 1
a67 1
      for($y=0; $y<2; $y++) {<br>
d69 1
a69 1
      &nbsp;for($x=0; $x<2; $x++) {<br>
d87 1
a87 1
  <code>new <strong>java_class</strong>("CLASSNAME")</code>: References the class CLASSNAME without creating an instance. The object returned is the class object itself, not an object of the class.  <code><strong>JavaClass</strong></code> can also be used for <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> compatibility.
d119 86
a204 1
  <code>$session=<strong>java_get_session</strong>(SESSIONNAME)</code>: Creates or retrieves the session SESSIONNAME. The primitive returns a session handle which can be used to store and retrieve values which survive the current script.  The session can be closed with $session->destroy(). The <code><strong>java_get_session</strong></code> shall be used before creating java instances.  It selects a node from the load balancer and then directs all further <strong><code>java</code></strong> or <strong><code>java_class</code></strong> calls to that node. If the node becomes unavailable, the session is lost and a new session is created on a different node. 
d206 3
a208 1
 Example:
d243 2
a244 2
  <li> <code><strong>java_exception</strong></code>: A java exception class. Available in PHP 5 and
    above only. <code><strong>JavaException</strong></code> can also be used for <A HREF="http://www.jcp.org/aboutJava/communityprocess/edr/jsr223/">JSR 223</A> compatibility. Example:<br><br>
d249 1
a249 1
      } catch(java_exception $ex) {<br>
d272 2
a273 2
$Array = new java_class("java.lang.reflect.Array");<br>
$String = new java_class("java.lang.String");<br>
d287 1
a287 1
$Collection=new java_class("java.util.Collection");<br>
d524 1
a524 1
   <li> Compiled with Novell's MONO (a ".NET" clone). This is
d556 1
a556 1
	for a 32 bit JVM (if you run a 64 Bit JVM, use the <code>-m64</code> flag instead): <BR><BR><code>phpize &amp;&amp; ./configure
@


1.14
log
@Release-2.0.7
@
text
@d36 1
a36 1
<li> The PHP/Java Bridge typically runs on the same computer as the PHP interpreter, so a very efficient protocol can be used. An example is provided which dynamically loads a java library and creates a 200x200 excel sheet using more than 40000 PHP/Java library calls.  The php example runs only 3-5 times slower than pure (jit-compiled) java code.
d38 1
a38 1
<li> The PHP scripts can load/unload java libraries at runtime.
d40 1
a40 1
<li> PHP modules such as XML-RPC do most of their work in the web-server (in C code), which makes them vulnerable to buffer overflows.  The PHP/Java Bridge module doesn't use any state on the web-server side, it simply forwards the java(...) statements to the local backend, which can communicate with the enterprise application server using RMI/IIOP or other java technologies.
d438 1
a438 1
 currently experimental.  </ul>
@


1.13
log
@from index.html
@
text
@d37 2
a38 2
<li> No need to write and deploy a public interface. The bridge uses reflection to determine what can be accessed in the local backend.
<li> It is possible to load/unload java libraries at runtime.
d40 1
a40 1
<li> Other modules such as XML-RPC do most of their work in the PHP module (in C code), which makes them vulnerable to buffer overflows.  The PHP/Java Bridge module doesn't use any state on the web-server side, it simply forwards the java(...) statements to the local backend. The local backend runs in a different process environment (and on SEL even in a different security domain), it can communicate with the enterprise application server using RMI/IIOP or other java technologies.
d378 1
a378 1
  on RedHat Enterprise 3, RedHat Fedora Core 1..3, FreeBSD 5.3, Solaris 9 (Sparc, 64 bit JVM)
d380 1
a380 1
  operating systems including HP-UX, WinXP.  
d487 1
a487 1
	<LI><P><FONT ><A name="mode4">In a production environment which requires <strong>load balancing and failover</strong> it is recommended deploy the backend into a servlet engine or an application server which support these features, tomcat 5 for example. Disable the <code>java.socketname</code>, enable the <code>java.hosts</code> and <code>java.servlet</code> options and start the application server. The <code>.ini</code> file should contain:
@


1.12
log
@from index.html
@
text
@d34 1
a34 1
<P STYLE="margin-top: 0.42cm; page-break-after: avoid"><FONT ><FONT SIZE=4><B>What is the advantage over SOAP or XML-RPC?</B></FONT></FONT></P>
d37 1
a37 1
<li> No need to write and deploy a public interface on the server side. The bridge uses reflection to determine what can or cannot be accessed in the local backend.
d40 1
a40 1
<li> Other modules such as XML-RPC do most of their work in the PHP module (C code), which makes them fulnerable to buffer overflows.  The PHP/Java Bridge module doesn't use any state on the web-server side, it simply forwards the java(...) statements to the local (java or .NET) backend. The local backend (which runs in a different domain than the web-server) can communicate with the enterprise application server using RMI/IIOP or other java technologies. An example can be found in the examples/j2ee folder.
@


1.11
log
@from index.html
@
text
@d40 1
a40 1
<li> Other modules such as XML-RPC do most of their work in the PHP module (C code), which makes them fulnerable to buffer overflows.  The PHP/Java Bridge module doesn't use any state on the web-server side, it simply forwards the java(...) statements to the local (java or .NET) backend. The local backend (which runs in a different domain than the web-server) can communicate with the enterprise application server using RMI/IIOP or other java technologies. An example which lets the backend communicate with an EJB server can be found in the examples/j2ee folder.
@


1.10
log
@from index.html
@
text
@d37 1
a37 1
<li> No need to write and deploy a public interface on the server side, the bridge uses reflection to determine what can or cannot be accessed in the local backend.
@


1.9
log
@Release-2.0.7-pre
@
text
@a5 3
	<META NAME="GENERATOR" CONTENT="OpenOffice.org 1.1.1  (Linux)">
	<META NAME="CREATED" CONTENT="20040925;14191900">
	<META NAME="CHANGED" CONTENT="16010101;0">
d30 1
a30 1
<P><FONT > On Unix the PHP/Java Bridge also supports "failover" and a very simple form of "load balancing". All backends automatically join a multicast group and the PHP/Java Bridge selects an appropriate backend based on the multicast responses.
d32 1
a32 1
<P><FONT > ECMA 335 based classes can be accessed if at least one JavaBridge.jar is running inside a ECMA complient VM, for example Novell's MONO or Microsoft's .NET.  Special features such as varargs, reflection or assembly loading are also supported. 
d34 8
a41 1

a85 12
<!-- <li> -->
<!--   <code>new <strong>mono</strong>("CLASSNAME")</code>: References and instanciates the class CLASSNAME. -->
<!--  After script -->
<!--      execution the referenced classes may be garbage collected. Example: <br><br> -->
     
<!-- <blockquote> -->
<!-- <code> -->
<!-- $s = new mono("System.Collections.Stack");<br> -->
<!-- $s->Push('Hello World');<br> -->
<!-- </code> -->
<!-- </blockquote> -->
<!-- <br> -->
a96 2
<!--       $Console = new JavaClass("cli.System.Console");<br> -->
<!--       $Console->WriteLine("Java {0} printed on .NET {1}!", array($obj, $Console) );<br> -->
a381 1
<a name="sel">
d389 2
a390 1
      java_require. On Security Enhanced Linux <code>.jar</code> files can only be loaded from locations which are tagged with the <em>lib_t</em> security context.
d422 2
a423 4
      external backend pool. Recommended for <a href="#mode4">production systems which require load balancing and failover</a>.  All backends are started independently
      and automatically join a multicast group.  The bridge sends out
      a multicast datagram and selects the appropriate backend based
      on the multicast responses.
d487 6
a492 6
	<LI><P><FONT ><A name="mode4">In a production environment which requires <strong>load balancing and failover</strong> it is recommended to disable the <code>java.socketname</code> and start all backends with the command: <code>java -jar JavaBridge.jar INET:&lt;socket number&gt; &lt;log level&gt; &lt;log file&gt;</code>. The <code>.ini</code> file should contain:
<BR><BR><code>extension = java.so<BR>[java]</code><br><br>
The commands to start the backends might be (examples):<br><br>
<code>JavaBridge.exe INET:9168 3 java-bridge-backend_1.log&</code><br>
<code>java -jar JavaBridge.jar INET:9169 3 java-bridge-backend_2.log&</code><br>
<code>java -jar JavaBridge.jar INET:9170 3 java-bridge-backend_3.log&</code><br>
d547 1
a547 1
>java.socketname="9267"
d575 1
a575 1
>Additional bridge hosts which are used when the local backend becomes unavailable. <strong>Useful on windows only, please switch it off on Unix to allow multicasts.</strong></TD
d581 12
d597 1
a597 1
>The java classpath. <strong>Please do not change the default value</code></TD
d609 1
a609 1
>The directory which contains the <code>natcJavaBridge.so</code> used for local ("unix domain") sockets. <strong>Please do not change the default value.</strong></TD
a622 1
<!-- There are several tutorials on the web which cover the old PHP 4 java extension, for example <a href="http://zez.org/article/articleview/26/1/"> this one</a>.  -->
d628 8
a635 1

@


1.8
log
@mono
@
text
@d559 1
a559 1
>java.socketname="9167"
@


1.7
log
@mono
@
text
@d156 1
a156 1
&nbsp;&nbsp; public static Cache instance=makeInstance();<br>
@


1.6
log
@mono
@
text
@d154 3
a156 5
public class Cache {// Compile this class, create cache.jar and copy it to /usr/share/java<br>
&nbsp;&nbsp; static Cache instance=null;<br>
&nbsp;&nbsp; public static synchronized Cache getInstance() {<br>
&nbsp;&nbsp;&nbsp; if(instance==null) instance=makeInstance(); <br>
&nbsp;&nbsp;&nbsp; return instance;<br>
d161 1
a161 1
$instance=$Cache->getInstance(); //instance will stay in the VM until the VM runs short of memory<br>
@


1.5
log
@*** empty log message ***
@
text
@d156 1
a156 1
&nbsp;&nbsp; public static Cache getInstance() {<br>
@


1.4
log
@documentation update
@
text
@d33 1
a33 1
<P><FONT > On Unix the PHP/Java Bridge also supports "failover" and "load balancing". All backends automatically join a multicast group and the PHP/Java Bridge selects an appropriate backend based on the multicast responses.
@


1.3
log
@docu
@
text
@d50 5
a54 4
      $hello = new java("java.lang.String", "hello");<br>
      print $hello;<br>
<br>
      // A complete example: <br>
a55 1
      java_require("http://php-java-bridge.sf.net/poi.jar"); <br><br>
d63 1
a63 1
      for($x=0; $x<2; $x++) {<br>
d65 1
a65 1
      &nbsp;for($y=0; $y=2; $y++) {<br>
d75 2
a76 1
      echo $memoryStream->getBytes();<br>
d113 1
a113 1
     a "http:", "ftp:", "file:" or a "jar:" location. On Security &quot;Enhanced Linux&quot; (<a href="README">please see the README</a>) the location must be tagged with a <em>lib_t</em> <a href="#sel">security context</a>. Example: <br><br>
d262 1
a262 1
>An opaque object handle.  However, we guarantee that the first handle always starts with 1 and that the next handle is n+1 for all n < 1024 (useful if you work with the raw <a href="PROTOCOL.TXT">XML protocol</a>, see the <a href="examples/clients/getProperties.py">python</a> and <a href="examples/clients/listToArray.scm">scheme</a> examples).</TD
d394 1
d402 1
a402 1
      java_require. <a name="sel">On Security Enhanced Linux <code>.jar</code> files can only be loaded from locations which are tagged with the <em>lib_t</em> security context</a>.
d413 1
@


1.2
log
@Release-2.0.6-pre2
@
text
@d18 1
a18 1
<!-- <a href="http://sourceforge.net"><img src="http://sourceforge.net/sflogo.php?group_id=117793&amp;type=1" width="88" height="31" border="0" alt="SourceForge.net Logo" /></a> -->
d53 6
d60 17
a76 2
      $Color = new java('org.apache.poi.hssf.util.HSSFColor$AQUA');<br>
      print $Color->index;<br><br>
a77 3
      // create an instance of a .NET stack, push a java object<br>
     $stack = new java("cli.System.Collections.Stack");<br>
     $stack->Push($Color);<br><br>
d104 2
a105 2
      $Console = new JavaClass("cli.System.Console");<br>
      $Console->WriteLine("Java {0} printed on .NET {1}!", array($obj, $Console) );<br>
d110 1
a110 1
  <code><strong>java_set_library_path</strong>("JAR1;JAR2")</code>: Makes additional libraries
d112 1
a112 1
     a "http:", "ftp:", "file:" or a "jar:" location. Example: <br><br>
d117 1
a117 1
      java_set_library_path("file:c:/xerces.jar;http://localhost/jdom.jar");<br>
a121 1
      java_set_library_path("");<br>
d160 1
a160 1
java_set_library_path(&quot;cache.jar&quot;);<br>
d261 1
a261 1
>An opaque object handle.  However, we guarantee that the first handle always starts with 1 and that the next handle is n+1 for all n < 1024 (useful if you work with the raw XML protocol, see the <a href="http://cvs.sourceforge.net/viewcvs.py/php-java-bridge/php-java-bridge/examples/clients/getProperties.py?view=markup">python</a> and <a href="http://cvs.sourceforge.net/viewcvs.py/php-java-bridge/php-java-bridge/examples/clients/listToArray.scm?rev=1.3&view=markup">scheme</a> examples).</TD
d400 1
a400 1
      java_set_library_path. On Security Enhanced Linux <code>.jar</code> files can only be loaded from locations which are tagged with the <em>lib_t</em> security context.
d406 1
a406 1
   <li> In the /usr/share/java/ directory, if it exists and is accessible
d620 1
a620 1
information please read the <a href="http://cvs.sourceforge.net/viewcvs.py/php-java-bridge/php-java-bridge/README?view=markup">README</a>, <a href="http://cvs.sourceforge.net/viewcvs.py/php-java-bridge/php-java-bridge/INSTALL?view=markup">INSTALL</a> and <a href="http://cvs.sourceforge.net/viewcvs.py/php-java-bridge/php-java-bridge/INSTALL.WINDOWS?view=markup">INSTALL.WINDOWS</a> documents contained in
@


1.1
log
@Release-2.0.6pre
@
text
@d18 1
a18 1
<a href="http://sourceforge.net"><img src="http://sourceforge.net/sflogo.php?group_id=117793&amp;type=1" width="88" height="31" border="0" alt="SourceForge.net Logo" /></a>
d311 1
a311 1
>An UTF-8 encoded string. Since PHP does not support unicode, all java.lang.String values are auto-converted into a byte[] (see above) using UTF-8 encoding. If you work with the raw XML protocol, this conversion can be <a href="http://cvs.sourceforge.net/viewcvs.py/php-java-bridge/php-java-bridge/PROTOCOL.TXT?rev=1.7&view=markup">switched off</a>.</TD
d484 3
a486 3
<code>JavaBridge.exe INET:9168 3 java-bridge-backend_1.log&<code><br>
<code>java -jar JavaBridge.jar INET:9169 3 java-bridge-backend_2.log&<code><br>
<code>java -jar JavaBridge.jar INET:9170 3 java-bridge-backend_3.log&<code><br>
@

