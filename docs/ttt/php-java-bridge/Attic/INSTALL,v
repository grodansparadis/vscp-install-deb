head	1.44;
access;
symbols
	upstream_version_5_3_4:1.43
	debian_version_5_3_4-1:1.43
	ROOT_Release-5-3-4:1.43
	Release-5-3-4:1.43.0.4
	ROOT_Release-5-3-3:1.43
	Release-5-3-3:1.43.0.2
	debian_version_5_3_2_1_2-1:1.41
	upstream_version_5_3_2_1_2:1.41
	debian_version_5_3_2_1_1-1:1.41
	debian_version_5_3_2_1_1:1.41
	upstream_version_5_3_2_1_1:1.41
	Root_Release-5-3-2-1:1.41
	Release-5-3-2-1:1.41
	ROOT_RELEASE-5-3-2-1:1.41
	RELEASE-5-3-2-1:1.41.0.14
	Release-5-3-2:1.41.0.10
	Root_Release-5-3-2:1.41
	Root_Release-5-3-1:1.41
	Release-5-3-1:1.41.0.8
	Release-5-2-3-1:1.41.0.6
	Root_Release-5-2-3-1:1.41
	Release-5-2-2-4:1.41.0.4
	Root_Release-5-2-2-4:1.41
	Release-5-2-2-1:1.41.0.2
	Root_Release-5-2-2-1:1.41
	upstream_version_5_2_2:1.40
	debian_version_5_2_2-1:1.40
	Release-5-2-2:1.40.0.10
	ROOT_Release-5-2-2:1.40
	ROOT_Release-5-2-1:1.40
	Release-5-2-1:1.40.0.8
	Release-5-2-0:1.40.0.6
	ROOT_Release-5-2-0:1.40
	ROOT_Release-5-1-2:1.40
	Release-5-1-2:1.40.0.4
	Version-5-1-1:1.40.0.2
	ROOT_Version-5-1-1:1.40
	debian_version_5_1_0-1:1.39
	upstream_version_5_1_0:1.39
	ROOT_Release-5-1-0:1.39
	Release-5-1-0:1.39.0.6
	ROOT_Release-5-0-0:1.39
	Release-5-0-0:1.39.0.4
	Release-4-3-3:1.39.0.2
	ROOT_Release-4-3-3:1.39
	upstream_version_4_3_2:1.38
	debian_version_4_3_2-1:1.38
	ROOT_Release-4-3-2:1.38
	Release-4-3-2:1.38.0.6
	Release-4-3-1:1.38.0.4
	ROOT_Release-4-3-1:1.38
	debian_version_4_3_0-1:1.38
	upstream_version_4_3_0:1.38
	ROOT_Release-4-3-0:1.38
	Release-4-3-0:1.38.0.2
	debian_version_3_2_1b-2:1.35
	debian_version_4_2_2-1:1.36
	upstream_version_4_2_2:1.36
	debian_version_3_2_1b-1:1.35
	upstream_version_3_2_1b:1.35
	Release-4-1-2:1.36.0.8
	Release-4-0-8:1.36.0.6
	debian_version_4_0_8a-1:1.36
	upstream_version_4_0_8a:1.36
	jostb-debian-ubuntu-patch:1.36.0.4
	debian_version_4_0_8-1:1.36
	upstream_version_4_0_8:1.36
	debian_version_4_0_7-1:1.36
	upstream_version_4_0_7:1.36
	debian_version_4_0_6-1:1.36
	upstream_version_4_0_6:1.36
	debian_version_4_0_2-1:1.36
	upstream_version_4_0_2:1.36
	Release-4-0-2_Root:1.36
	Release-4-0-2:1.36.0.2
	upstream_version_4_0_1:1.36
	debian_version_4_0_1-2:1.36
	Release-3-2-1:1.35.0.2
	Release-3-1-8:1.34.0.2
	Release-3-0-8_root:1.29.2.1
	Release-3-0-8_Root:1.31
	Release-3-0-8:1.29.0.2
	Release-2-0-8:1.19.0.2
	Release-2-0-7_Root:1.14
	Release-2-0-7:1.14.0.4
	Release-2-0-6-branch:1.14.0.2
	Version-1:1.10.0.6
	Version-2:1.10.0.4
	Release-2:1.10.0.2
	PHP-5:1.4.0.6
	Release-1-0-6:1.4.0.8
	sparc-64-test:1.4.0.2;
locks; strict;
comment	@# @;


1.44
date	2008.12.12.17.48.16;	author jost_boekemeier;	state dead;
branches;
next	1.43;

1.43
date	2008.11.08.13.08.40;	author jost_boekemeier;	state Exp;
branches;
next	1.42;

1.42
date	2008.11.01.12.41.04;	author jost_boekemeier;	state Exp;
branches;
next	1.41;

1.41
date	2008.09.20.15.00.57;	author jost_boekemeier;	state Exp;
branches;
next	1.40;

1.40
date	2008.02.04.19.32.53;	author jost_boekemeier;	state Exp;
branches;
next	1.39;

1.39
date	2007.12.28.13.56.41;	author jost_boekemeier;	state Exp;
branches;
next	1.38;

1.38
date	2007.09.30.16.07.52;	author jost_boekemeier;	state Exp;
branches;
next	1.37;

1.37
date	2007.09.19.10.12.27;	author jost_boekemeier;	state Exp;
branches;
next	1.36;

1.36
date	2007.03.09.20.28.06;	author andremachado;	state Exp;
branches;
next	1.35;

1.35
date	2006.12.09.09.35.01;	author jost2345;	state Exp;
branches;
next	1.34;

1.34
date	2006.09.05.20.40.32;	author jost2345;	state Exp;
branches;
next	1.33;

1.33
date	2006.08.08.17.20.45;	author jost2345;	state Exp;
branches;
next	1.32;

1.32
date	2006.06.19.20.37.14;	author jost2345;	state Exp;
branches;
next	1.31;

1.31
date	2006.04.30.17.01.55;	author jost2345;	state Exp;
branches;
next	1.30;

1.30
date	2006.04.12.17.46.45;	author jost2345;	state Exp;
branches;
next	1.29;

1.29
date	2006.02.13.18.34.16;	author jost2345;	state Exp;
branches
	1.29.2.1;
next	1.28;

1.28
date	2006.02.05.18.47.00;	author jost2345;	state Exp;
branches;
next	1.27;

1.27
date	2006.02.03.17.41.36;	author jost2345;	state Exp;
branches;
next	1.26;

1.26
date	2006.01.30.19.39.53;	author jost2345;	state Exp;
branches;
next	1.25;

1.25
date	2006.01.15.21.05.28;	author jost2345;	state Exp;
branches;
next	1.24;

1.24
date	2006.01.04.19.35.07;	author jost2345;	state Exp;
branches;
next	1.23;

1.23
date	2005.12.28.22.44.32;	author jost2345;	state Exp;
branches;
next	1.22;

1.22
date	2005.12.11.22.24.40;	author jost2345;	state Exp;
branches;
next	1.21;

1.21
date	2005.12.08.18.41.56;	author jost2345;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.26.18.03.59;	author jost2345;	state Exp;
branches;
next	1.19;

1.19
date	2005.09.19.19.34.53;	author jost2345;	state Exp;
branches;
next	1.18;

1.18
date	2005.09.07.21.13.45;	author jost2345;	state Exp;
branches;
next	1.17;

1.17
date	2005.08.29.16.10.10;	author jost2345;	state Exp;
branches;
next	1.16;

1.16
date	2005.08.21.11.39.39;	author jost2345;	state Exp;
branches;
next	1.15;

1.15
date	2005.08.14.15.11.45;	author jost2345;	state Exp;
branches;
next	1.14;

1.14
date	2005.05.11.18.03.08;	author jost2345;	state Exp;
branches;
next	1.13;

1.13
date	2005.05.04.22.13.08;	author jost2345;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.17.21.22.01;	author jost2345;	state Exp;
branches;
next	1.11;

1.11
date	2005.02.21.17.53.03;	author jost2345;	state Exp;
branches;
next	1.10;

1.10
date	2005.02.04.17.01.08;	author jost2345;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.03.16.56.07;	author jost2345;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.31.16.18.45;	author jost2345;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.28.16.32.51;	author jost2345;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.03.19.50.42;	author jost2345;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.21.14.44.55;	author jost2345;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.04.16.23.01;	author jost2345;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.21.12.21.30;	author jost2345;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.19.18.45.13;	author jost2345;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.17.17.32.36;	author jost2345;	state Exp;
branches;
next	;

1.29.2.1
date	2006.04.23.19.09.08;	author jost2345;	state Exp;
branches;
next	;


desc
@@


1.44
log
@removed java.so
@
text
@This file contains very detailed installation instructions. For most
users the command

  phpize && ./configure --with-java=$JAVA_HOME && make 

and the install.sh script should be sufficient.

NOTE for Fedora and RedHat Enterprise Linux: Linux RPMs contain
Security Enhanced Linux contexts. If you want to install software on a
SEL system (RHEL, Fedora, ...), please use the RPM build system
instead (rpmbuild -tb php-java-bridge*.tar.gz).  However, for a
development system you can switch off SEL and follow the instructions
below.


Quick Installation from source code
-----------------------------------
mkdir dist
INST=`pwd`/dist
LD_LIBRARY_PATH=$INST/lib:$LD_LIBRARY_PATH  
PATH=$INST/bin:$PATH
export INST LD_LIBRARY_PATH PATH

# compile
(cd autoconf-2.59; ./configure --prefix=$INST && make && make install)
(cd automake-1.9; ./configure --prefix=$INST && make && make install)
(cd libtool-1.5.20; ./configure --prefix=$INST && make && make install)
(cd php*; ./configure --prefix=$INST --disable-all --enable-fastcgi && make && make install)
(cd php-java-bridge*; phpize && ./configure --with-java=/usr/java/default && make && sh install.sh)

# test
php php-java-bridge*/test.php >result.html



Installation from source code (Solaris, FreeBSD, WinXP or Linux)
----------------------------------------------------------------

The following software components must be installed on your computer:

* an operating system. For example RedHat Enterprise Linux. If you
  build on Solaris, FreeBSD/MacOSX or WinXP, you also need the GNU
  toolchain (gcc, gnu make, autoconf etc.).

* a Java VM. For example IBM JDK 1.4.2 or GNU Java version 3 or above.

* optional: a J2EE server or servlet engine, for example Apache-Tomcat


The following instructions build the components:

* the apache web-server

* PHP as a apache module

* the PHP/Java Bridge as a PHP module and/or as a J2EE
  component (plugin)


The following build process first creates an artificial environment
(PATH, LD_LIBRARY_PATH) and installs all components into INST
(default: /usr/local). In a second step the installed components must
be deployed, which usually means that the files must be copied or
moved from the INST (default: /usr/local/) hierarchy into the system
(usually: /usr) hierarchy.

# adjust the install directory
INST=/usr/local #INST=$HOME/bridge

# remove all old files under $INST
#rm -rf $INST

# set build path
export PATH=$INST/bin:$PATH 
export LD_LIBRARY_PATH=$INST/lib:$LD_LIBRARY_PATH

# stop the system http service 
su - -c "service httpd stop"

# adjust the java version
JAVA_HOME=/usr/java/default
#JRE_HOME=/opt/jre1.6.0 # enable this, if you want to hard-code the JRE path

# The following software components are required during the build
# process: autoconf 2.57, automake 1.6.3 and libtool 1.4.3. If you
# don't have autoconf >= 2.57, automake >= 1.6.3 libtool >= 1.4.3, or
# versions which do not match, for example autoconf 2.59 and libtool
# 1.4.3, you must REMOVE THE OLD VERSIONS and compile and install
# these before proceeding:

(cd autoconf-2.57;  ./configure --prefix=$INST && make && su -c "make install")
(cd automake-1.6.3; ./configure --prefix=$INST && make && su -c "make install")
(cd libtool-1.4.3;  ./configure --prefix=$INST && make && su -c "make install")


#
# BUILD APACHE
# adjust apache MPM.  Prefork is standard behaviour in apache 1.3, worker
# creates worker thread pools which deliver content much faster.  But note:
# some third-party PHP modules may not be thread-safe.
#
MPM=prefork #MPM=worker

# compile and install apache 2
gunzip < httpd-2.x.y.tar.gz | tar xf -
cd httpd-2.x.y
./configure --with-mpm=$MPM --enable-module=so --prefix=$INST
make && su -c "make install"
cd ..


#
# BUILD PHP
#
gunzip < php-x.y.z.tar.gz | tar xf -
cd php-x.y.z
./configure --prefix=$INST --disable-all --with-apxs2=$INST/bin/apxs
make && su -c "make install"
# now activate php in the httpd.conf
su -c "echo 'AddType application/x-httpd-php .php' >>$INST/conf/httpd.conf"
# configure and build the J2EE ("php-cgi" fastcgi) component
./configure --prefix=$INST --disable-all
make && su -c "make install"
cd ..


#
# BUILD THE PHP/JAVA BRIDGE
#
gunzip < php-java-bridge_p.x.y.tar.gz | tar xf -
cd php-java-bridge-p.x.y
phpize
./configure --with-java=$JAVA_HOME,$JRE_HOME
make && su -c "make install"
# now activate the bridge in php.ini
su -c "touch $INST/lib/php.ini && echo -e 'extension=java.so\n[java]' >>$INST/lib/php.ini"
cd ..

# TEST
# create a file phpinfo.php in the document root directory 
# of apache and start the http service
su -c "echo '<?php phpinfo() ?>' >$INST/htdocs/phpinfo.php; chmod +xr $INST/htdocs/phpinfo.php; apachectl restart"

# checking cli, should return "java running"
echo '<?php phpinfo() ?>' | php | fgrep java

# checking web, should return "java running"
# (the <port> is the Listen port defined in $INST/conf/httpd.conf
# usually 80 or 8000)
wget -olog -O-  http://localhost:<port>/phpinfo.php|fgrep java


If the above test succeeded, copy the files "java.so",
"libnatcJavaBridge.so" and "JavaBridge.jar" (on Windows: php_java.dll
and JavaBridge.jar) to the extension_dir of your system php
installation and start the system http service again.

The modules/ directory also contains a file "JavaBridge.war" which can
be used to run php within a pure java application server. Please see
the INSTALL.J2EE document for details.

If something went wrong, for example if you have forgotten to set
JAVA_HOME or if configure failed because the installed autoconf
version is too old, you can only remove the build directory and start
from the beginning; removing the autom4te cache directories from the
build directory may be enough sometimes, but not always.

If the above cli test succeeded but the web test failed, check if
something is blocking the defined http port, the system httpd service
for example.



------------------------------------
Installation of the J2EE component
----------------------------------

Copy the file "JavaBridge.war" to the autodeploy folder of your J2EE
server.

Copy the php-cgi executable to the system PATH or into the WEB-INF/cgi
folder within "JavaBridge.war" and add a .sh wrapper (see the
WEB-INF/cgi/README for details).

On Windows copy the php-cgi.exe and the phpXts.dll to the system PATH
or into the WEB-INF/cgi folder within "JavaBridge.war" (see the
WEB-INF/cgi/README for details).


------------------------------------
Apache/J2EE load balancer setup
-------------------------------

Assuming that there are 3 J2EE nodes running on diego, carlos and
localhost, append the following lines at the end of your apache
httpd.conf:

    ProxyPass /JavaBridge balancer://mycluster maxattempts=3
    <Proxy balancer://mycluster>
      BalancerMember http://diego:8080/JavaBridge
      BalancerMember http://carlos:8080/JavaBridge
      BalancerMember http://localhost:8080/JavaBridge
    </Proxy>

Restart Apache and start at least one node. Check

    http://localhost/JavaBridge/jsp+php.jsp

and, if SSL is enabled

    https://localhost/JavaBridge/jsp+php.jsp


@


1.43
log
@Release-5-3-3
@
text
@@


1.42
log
@Apache/IIS and JSR 223 integration
@
text
@d29 1
a29 1
(cd php-java-bridge*; phpize && ./configure --with-java=/usr/java/default && make && make install)
@


1.41
log
@Release-5-2-2-1
@
text
@d29 1
a29 1
(cd php-java-bridge*; phpize && ./configure --with-java=/usr/java/jdk1.5.0 && make && make install)
d47 1
a47 1
* optional: Oracle 9i/10g AS or IBM WebSphere 5/6.
d57 1
a57 1
  component (plugin) for IBM WebSphere or Oracle AS.
a58 3
and optionally, if you want to run JSP and PHP from Apache/Tomcat:

* mod_jk with Apache/Tomcat.
d121 3
d175 14
a188 2
Load balancer setup
-------------------
d190 5
a194 1
Assuming that there are 3 tomcat nodes running on diego, carlos and
a213 6
------------------------------------
Installation of Tomcat/mod jk
-----------------------------

NOTE: MOD_JK SHOULD NOT BE USED ANYMORE. Please use Apache's ProxyPass
directive instead, see above.
@


1.40
log
@Version-5-1-1
@
text
@d11 1
a11 1
instead (rpmbuild --rebuild php-java-bridge*src.rpm).  However, for a
d28 2
a29 2
(cd php-5.*; ./configure --prefix=$INST --disable-all --enable-fastcgi && make && make install)
(cd php-java-bridge-3.*; phpize && ./configure --with-java=/usr/java/jdk1.5.0 && make && make install)
d32 1
a32 1
php php-java-bridge-3.*/test.php >result.html
@


1.39
log
@Release-4-3-3
@
text
@d175 2
a176 2
Installation of Tomcat/mod jk
-----------------------------
d178 3
a180 2
Optionally you can install the tomcat servlet engine to serve .jsp
files
d182 6
a187 2
Download and extract tomcat into a directory, for example /opt/tomcat5
and set the environment variable CATALINA_HOME, for example:
d189 1
a189 1
export CATALINA_HOME=/opt/tomcat5
d191 1
d193 1
a193 3
Download and install mod jk, for example
jakarta-tomcat-connectors-1.2.14.1-src.tar.gz, extract the file into a
folder and type the following commands:
d195 1
a195 2
cd jakarta-tomcat-connectors-1.2.14.1-src/jk/native/
./configure --with-apxs=$INST/bin/apxs && make && su -c "make install"
a196 3
# now activate mod_jk in the httpd.conf, mount the tomcat webapps
# directory and ask tomcat to handle all .jsp files
su -c "echo -e 'LoadModule jk_module modules/mod_jk.so\nJkAutoAlias $CATALINA_HOME/webapps\nJkMount /JavaBridge/*.jsp ajp13\nJkMount /JavaBridge/ ajp13' >>$INST/conf/httpd.conf"
d198 3
a200 30
Start tomcat, for example with the command:

$CATALINA_HOME/bin/catalina.sh start


Copy the JavaBridge.war file (which you should have created when
compiling the PHP/Java Bridge, see flag "--enable-servlet" above) from
the modules directory into the tomcat webapps directory, for example
with the command:

cp modules/JavaBridge.war $CATALINA_HOME/webapps

Check if tomcat has created the $CATALINA_HOME/webapps/JavaBridge
directory, if not, please check the tomcat logs for errors.

Direct php to tomcat:
su -c "echo -e 'extension=java.so\n[java]\njava.servlet=User\njava.hosts=127.0.0.1:8080' >$INST/lib/php.ini"

Start or re-start apache, for example with:
su -c "apachectl restart"

Visit http://localhost/JavaBridge and run the supplied examples.

The php .ini file [java] section should contain only java.log_level,
java.servlet and java.hosts entries.  Example:

       [java]
       java.log_level="2"
       java.servlet=User
       java.hosts="127.0.0.1:8080"
d202 2
a203 2
The PHP/Java Bridge log output appears in the server log file, for
example in $CATALINA_HOME/logs/localhost_log.*.txt
@


1.38
log
@Release-4-3-0
@
text
@a230 82

---------------------------------------------
Compiling the bridge without autoconf
-------------------------------------

Follow these instructions to create a java.so or php_java.dll on
systems which don't have autoconf or if ./configure fails (because the
installed autoconf scripts are too old).

To create a windows php_java.dll you'll need:

* A Windows machine with MINGW installed or a Unix machine with a C
  cross compiler, for example i386-pc-mingw32-gcc.

* the standard windows includes in the ./include directory

* the MINGW includes in the ./include directory

* the php5ts.dll in the $PHP directory

* the configured php4 or php5 source distribution in the $PHP
  directory


To create a unix java.so you'll need:

* A unix machine with a C compiler

* the standard unix includes in the /usr/include directory

* the configured php4 or php5 source distribution in the $PHP
  directory


cd to the php-java-bridge* directory and type the following commands:

BRIDGE_VERSION="`cat ./VERSION`"
PHP_JAVA=""
COND_GCJ=0
EXTENSION_NAME=JAVA

# The java executable on windows or unix
#PHP_JAVA_BIN="javaw"
PHP_JAVA_BIN="java"

# The extension_dir on windows or unix
#EXTENSION_DIR="c:/php"
EXTENSION_DIR="."

# The configured PHP directory, this directory must contain
# the php4ts or php5ts shared library and the header files
#PHP="../php-5.0.3"
PHP="../php-4.4.0"

# The directory which contains the system include files
# for windows (+MINGW include files) or unix
#SYS_INCLUDE="../include"
SYS_INCLUDE="/usr/include"

# The (cross-) compiler for windows or unix
#GCC=386-pc-mingw32-gcc
GCC=gcc

# create init_cfg.h and init_cfg.c
for i in init_cfg.c init_cfg.h; do 
sed "s*@@PHP_JAVA@@*${PHP_JAVA}*
s*@@COND_GCJ@@*${COND_GCJ}*
s*@@PHP_JAVA_BIN@@*${PHP_JAVA_BIN}*
s*@@EXTENSION@@*${EXTENSION_NAME}*
s*@@BRIDGE_VERSION@@*${BRIDGE_VERSION}*" \
<./${i}.in >./${i}
done

#compile command for windows (with ZTS)...
#$GCC -w -I$SYS_INCLUDE -I. -I$PHP -I$PHP/main -I$PHP/Zend -I$PHP/TSRM -D"TSRM_EXPORTS" -D"LIBZEND_EXPORTS" -D"ZTS" -D"_MBCS" -DCOMPILE_DL_JAVA -DCFG_JAVA_SOCKET_INET -DEXTENSION_DIR=\"$EXTENSION_DIR\" -c *.c

# ... or unix (without ZTS)
$GCC -w -I$SYS_INCLUDE -I. -I$PHP -I$PHP/main -I$PHP/Zend -I$PHP/TSRM -D"_MBCS" -DCOMPILE_DL_JAVA -DCFG_JAVA_SOCKET_INET -DEXTENSION_DIR=\"$EXTENSION_DIR\" -c *.c

#create the windows .dll or the unix .so file
#i386-pc-mingw32-dllwrap  --export-all-symbols -k  *.o -L$PHP -lphp5ts -lws2_32 -o php_java.dll
$GCC -shared  *.o  -Wl,-soname -Wl,java.so -o java.so
@


1.37
log
@Release-4-3-0
@
text
@d84 1
a84 1
JAVA_HOME=/opt/jdk1.4.2
@


1.36
log
@Files update 3.2.2 to 4.0.1. Extracted from the src.tar.gz downloaded from sf.net, uploaded by Jost Boekemeier. Update to repository by Andre Felipe Machado.
@
text
@d2 5
a6 2
users the build section from the README and the install.sh script
should be sufficient.
@


1.35
log
@Release-3-2-1
@
text
@d2 2
a3 2
users the build section in the ABOUT.HTM or README and the install.sh
script should be sufficient. 
d157 1
a157 1
the INSTALL.WEBSPHERE or INSTALL.ORACLE documents for details.
@


1.34
log
@Release-3-1-8rc3
@
text
@d115 1
a115 1
bunzip2 < php-x.y.z.tar.bz2 | tar xf -
d127 1
a127 1
bunzip2 < php-java-bridge_p.x.y.tar.bz2 | tar xf -
@


1.33
log
@Release-3-1-7
@
text
@d145 4
a148 1
wget -olog -O-  http://localhost/phpinfo.php|fgrep java
d165 4
@


1.32
log
@Release-3-1-0
@
text
@d154 1
a154 2
the bottom of the INSTALL.J2EE document how to install it into IBM
WebSphere, Oracle 10g, Tomcat5 or others.
d232 2
a233 2
* A Unix machine with a C cross compiler, for example
  386-pc-mingw32-gcc
@


1.31
log
@Release-3-1-0
@
text
@d1 10
a10 6

NOTE: Linux RPMs contain Security Enhanced Linux contexts. If you want
to install software on a SEL system (RHEL, Fedora, ...), please use
the RPM build system instead (rpmbuild --rebuild
php-java-bridge*src.rpm).  However, for a development system you can
switch off SEL and follow the instructions below.
d60 6
d152 5
d268 1
a268 1
#EXTENSION_DIR="c:/php5"
@


1.30
log
@Release-3.0.8
@
text
@d71 2
a72 1
JAVA_HOME=/opt/IBMJava2-141
d107 1
a107 1
./configure --prefix=$INST --without-java --with-apxs2=$INST/bin/apxs
d120 1
a120 1
./configure --with-java=$JAVA_HOME
@


1.29
log
@Release-3.0.7
@
text
@d201 1
a201 1
       java.servlet=MultiUser
@


1.29.2.1
log
@Release-3-0-8-1
@
text
@d201 1
a201 1
       java.servlet=User
@


1.28
log
@Release-3.0.7
@
text
@d38 1
a38 1
* a Java VM. For example IBM JDK 1.4.1 or GNU Java version 3 or above.
@


1.27
log
@Release-3.0.7
@
text
@a206 107
------------------------------------
Oracle 10g AS
-------------

  The following description assumes that you have the Oracle
  Application Server Containers for J2EE 10g installed, for example in
  /opt/10gAS and that the $J2EE_HOME points to the /opt/10gAS/j2ee/home
  directory.

  If you want to download the Oracle 10g AS, please only download the
  pure java implementation called "oc4j_extended.zip". It has a download
  size of less than 30MB. The complete Oracle 10g AS has a download size
  of more than 1GB and includes Apache and other software you don't need
  during development.

  Install the PHP/Java Bridge and copy the JavaBridge.war to the
  $J2EE_HOME/applications directory.

  Edit $J2EE_HOME/config/application.xml so that it contains the
  following line:

    <web-module id="JavaBridge" path="../../home/applications/JavaBridge.war"/>

  Edit $J2EE_HOME/config/http-web-site.xml so that it contains the
  following line:

    <web-app application="default" name="JavaBridge" root="/JavaBridge"/>


  Start the Oracle 10g application server, for example with:

    cd $J2EE_HOME
    java -jar oc4j.jar

  Run the PHP/Java Bridge examples, for example:

    http://localhost:8888/JavaBridge/test.php

  or 

    http://localhost:8888/JavaBridge/sessionSharing.php

  If there are problems, please check if oracle has created the
  $J2EE_HOME/applications/JavaBridge directory and read
  $J2EE_HOME/applications/JavaBridge/WEB-INF/cgi/README.

  The log output appears in $J2EE_HOME/log/global-application.log.


  For production systems it is recommended to install the complete
  Oracle Application Server, which includes Apache, and to install
  PHP as a Apache module.

------------------------------------
IBM WebSphere AS
----------------

  The following description assumes that you have the IBM WebSphere
  6.x Application Server installed and that $WAS_HOME points to the
  /opt/IBM/WebSphere/AppServer directory.

  Install the PHP/Java Bridge. Start the application server, for
  example with the command:

    $WAS_HOME/bin/startServer.sh  server1

  Log into your application server, for example via: 

    http://localhost:9060/ibm/console/secure/logon.do

  Click on Applications -> Install New Application -> Browse
  and select JavaBridge.war. 

  Enter /JavaBridge as "Context root" and click Next.
  Click Next
  Click Continue
  Click Next
  Select JavaBridge.war and click Next
  Select JavaBridge.war and click Next
  Click Finish
  Click on "Save to Master Configuration"
  Click Save

  Click on Applications -> Enterprise Applications and select JavaBridge.war
  Click Start
  
  Run the PHP/Java Bridge examples, for example:

    http://localhost:9080/JavaBridge/test.php

  or 

    http://localhost:9080/JavaBridge/sessionSharing.php

  If there are problems, please check if websphere has created the
  $WAS_HOME/profiles/default/installedApps/[...]/JavaBridge_war.ear/
  directory and read
  $WAS_HOME/[...]/JavaBridge_war.ear/JavaBridge.war/WEB-INF/cgi/README.

  The log output appears in the
  $WAS_HOME/profiles/default/logs/server1/ directory.


  For production systems it is recommended to install the IBM
  HttpServer (a Apache variant) and to install PHP as a Apache
  module.

@


1.26
log
@Release-3.0.7
@
text
@a0 2
Installation on RedHat Linux (RHEL, Fedora, ...)
-------------------------------------------------
d2 5
a6 2
* Install a J2RE, for example with the command[1]:
  rpm -i jdk-1_5_0-linux-i586.rpm 
a7 37
* Install PHP, for example with the command: 
  rpm -i php-4.3.2-8.ent.i386.rpm

* Install the web-server, for example with the command:
  rpm -i httpd-2.0.46-25.ent.i386.rpm

* Install the php-java-bridge, for example with the command:
  rpm -i php-java-bridge-x.y.z-1.i386.rpm

* If you have SECURITY ENHANCED LINUX, install the standalone backend,
  for example with the command: 

  rpm -i php-java-bridge-standalone-x.y.z-1.noarch.rpm

  This command should have provided instructions how to install the 
  php-java-bridge.te and php-java-bridge.fc policy files.

Start the web-server with the command: service httpd restart. If you
have installed the standalone backend start it, for example with the
command: service php-java-bridge restart

Create a simple php file in /var/www/html, for example with
the command: echo "<?php phpinfo(); ?>" >/var/www/html/phpinfo.php.

Browse to http://localhost/phpinfo.php and search for the 
output of the php java bridge module (the entry should be: 
"java support"  "Enabled").

Then install your your java libraries (.jar files) in /usr/share/java
or in java.libpath/lib (see output of phpinfo) and your php and
web-pages in /var/www/html or one of their sub-directories.

[1] 
On RHEL3 use the RPM from CD#9: IBMJava2-JRE-1.4.1-8.i386.rpm 
provides "j2re" instead of "jre".


a31 7
NOTE: RPMs contain Security Enhanced Linux contexts. If you want to
install software on a SEL system (RHEL, Fedora, ...), please use the
RPM build system instead (rpmbuild --rebuild php-java-bridge*src.rpm).
However, for a development system you can switch off SEL and follow
the instructions below.


@


1.25
log
@Release-3.0.6
@
text
@d14 1
a14 1
  rpm -i php-java-bridge-X.Y.Z-1.i386.rpm
d16 2
a17 3
* If you have SECURITY ENHANCED LINUX, the above command should have
  provided instructions how to install the php-java-bridge.te and
  php-java-bridge.fc policy files.
d19 8
a26 2
Start the web-server with the command: service httpd restart.
Start the bridge with the command: service php-java-bridge restart
d33 1
a33 1
"java.support: Enabled").
d41 1
a41 1
it provides "j2re" instead of "jre".
a46 2
#enable the following line on BSD and MacOS X only, see README
#export CFLAGS="-DCFG_JAVA_SOCKET_INET"
d48 4
a51 2
export INST=`pwd`/dist
export LD_LIBRARY_PATH=$INST/lib:$LD_LIBRARY_PATH  PATH=$INST/bin:$PATH
d58 1
a58 1
(cd php-java-bridge-3.*; ./configure --with-java=/usr/java/jdk1.5.0 && make && make install)
a108 2
#enable the following line on BSD and MacOS X only, see README
#export CFLAGS="-DCFG_JAVA_SOCKET_INET"
d244 1
a244 1
       java.servlet=User
a437 61

------------------------------------
Compiling a CGI binary on Windows
---------------------------------

  This operating system has some unusal problems with shared libraries
  (DLL's). The autoconf/libtool documentation states:

   - Macro: AC_LIBTOOL_WIN32_DLL
     This macro should be used if the package has been ported to build
     clean dlls on win32 platforms.  Usually this means that any
     library data items are exported with `__declspec(dllexport)' and
     imported with `__declspec(dllimport)'.  If this macro is not used,
     libtool will assume that the package libraries are not dll clean
     and will build only static libraries on win32 hosts.

  Until someone ports the sources to use __declspec, we avoid 
  creating shared libraries on this system.  Instead we will
  compile the extension into PHP:

  1. Install the source code of PHP 4.3.x or higher.

  2. Install RedHat's Cygwin (PHP needs autoconf).

  3. Delete the java sub-directory from php-4.3.x\ext. Copy the
     php-java-bridge directory to the php-x.y.z\ext directory and
     rename it to java.  Update the "m4_include" paths in
     php-x.y.z\ext\java\config.m4 so that they start with "ext/java/":

      m4_include(ext/java/tests.m4/function_checks.m4)
      m4_include(ext/java/tests.m4/java_check_broken_stdio_buffering.m4)
      ...
      m4_include(ext/java/tests.m4/java_check_broken_gcc_installation.m4)

  4. Invoke autoconf to register our java module within the PHP build
     tree:
 
      buildconf.bat --force 

     Instead of running "buildconf" you can also use autoconf directly:

      autoconf

     Then configure and compile php as usual:

      .\configure --with-java=%JAVA_HOME%
      make

  This will create a php binary with the PHP/Java Bridge included.
  You can then copy the sapi\cgi\php executable into the CGI directory 
  of your IIS web server. Before you start the web server, you must
  start the java bridge backend, for example by double-clicking on
  .\modules\JavaBridge.jar.


  Windows uses TCP/IP sockets instead of unix domain sockets. If you
  want to change the java.socketname from its default (which is 9267),
  you must use an integer. For example:

    java.socketname=9268

@


1.24
log
@Release-3.0.5(pre)
@
text
@d40 20
d104 2
@


1.23
log
@Release-3.0.4
@
text
@d4 2
a5 2
* Install a J2RE, for example with the command:
  rpm -i IBMJava2-JRE-1.4.1-8.i386.rpm
d34 5
@


1.22
log
@Release-3-0-2
@
text
@d202 1
a202 1
su -c "echo -e 'extension=java.so\n[java]\njava.servlet=On\njava.hosts=127.0.0.1:8080' >$INST/lib/php.ini"
d214 1
a214 1
       java.servlet=On
@


1.21
log
@Release-3-0-2
@
text
@d1 34
d38 6
a43 4
NOTE: If you run a SELinux kernel, you must install the policy files
before you can run the PHP/Java Bridge. The php-java-bridge source
tarball contains the policy files in the root directory. Please see
the README file.
d70 2
a71 2
# Choose a proper INST directory, for example /usr/local/ or
$HOME/PHP-JAVA-BRIDGE/ and type the following commands:
d73 2
a74 4
#
# adjust the install directory
#
INST=/usr/local
d76 1
a76 4
#
# First of all make sure that the build scripts don't find
# zombies or OLD VERSIONS OF THE PROGRAMS WE'RE BUILDING:
#
a79 2

#
a80 1
#
a82 1

a85 1

d90 2
a91 1
# 1.4.3, you must compile and install these before proceeding:
d149 11
@


1.20
log
@Version-3.0.0pre1
@
text
@a0 42
Installation from the Linux RPM 
-------------------------------

* Install a J2RE, for example with the command:
  rpm -i IBMJava2-JRE-1.4.1-8.i386.rpm

* Install PHP, for example with the command: 
  rpm -i php-4.3.2-8.ent.i386.rpm

* Install the web-server, for example with the command:
  rpm -i httpd-2.0.46-25.ent.i386.rpm

* Install the php-java-bridge, for example with the command:
  rpm -i php-java-bridge-X.Y.Z-1.i386.rpm

* If you have SECURITY ENHANCED LINUX, the above command should have
  provided instructions how to install the php-java-bridge.te and
  php-java-bridge.fc policy files. If you encounter problems, for
  example if the default policy is too restrictive, please report them
  to php-java-bridge-users@@lists.sourceforge.net and include the
  relevant audit log: "dmesg | fgrep avc:".

Start the web-server with the command: service httpd restart.
Start the bridge with the command: service php-java-bridge restart

Create a simple php file in /var/www/html, for example with
the command: echo "<?php phpinfo(); ?>" >/var/www/html/phpinfo.php.

Browse to http://localhost/phpinfo.php and search for the 
output of the php java bridge module (the entry should be: 
"java.support: Enabled").

Then install your your java libraries (.jar files) in /usr/share/java
or in java.libpath/lib (see output of phpinfo) and your php and
web-pages in /var/www/html or one of their sub-directories.

Please see the README and ABOUT.HTM for details.
--------------------------------------------------
--------------------------------------------------



d43 1
a43 1
# First of all make shure that the build scripts don't find
d222 1
a222 1
    http://localhost:8888/sessionSharing.php
d274 1
a274 1
    http://localhost:9080/sessionSharing.php
@


1.19
log
@Release-2.0.8
@
text
@d79 14
d94 1
a96 2
# adjust the install directory
INST=/usr/local
a100 4
# Tell the shell to use our programs
export PATH=$INST/bin:$PATH 
export LD_LIBRARY_PATH=$INST/lib:$LD_LIBRARY_PATH

d113 1
d118 1
d129 1
d131 1
d141 1
d143 1
d147 1
a147 8

# If you don't have a servlet engine or J2EE application server, use:
./configure --with-java=$JAVA_HOME --disable-servlet

# If you have a servlet engine or J2EE application server, locate
# j2ee.jar and use:
#./configure --with-java=$JAVA_HOME --enable-servlet=/path/to/j2ee.jar

d171 1
a171 1
files:
@


1.18
log
@2.0.8RC2 fixes PR1283148 and 1281189.
@
text
@d158 1
d205 260
a464 2
Please see the README for Oracle and WebSphere deployment
instructions.
@


1.17
log
@Release-2.0.8RC
@
text
@d165 4
d179 5
a183 1
su -c "echo -e 'LoadModule jk_module modules/mod_jk.so\nJkAutoAlias /opt/tomcat5/webapps\nJkMount /JavaBridge/*.jsp ajp13\nJkMount /JavaBridge/ ajp13' >>$INST/conf/httpd.conf"
a184 1
Start tomcat, for example with the command /opt/tomcat5/catalina.sh start
d191 1
a191 1
cp modules/JavaBridge.war /opt/tomcat5/webapps
d193 1
a193 1
Check if tomcat has created the /opt/tomcat5/webapps/JavaBridge
d200 1
a200 1
apachectl restart
@


1.16
log
@Release-2.0.8(pre3)
@
text
@d1 2
a2 2
Installation from RPM
---------------------
d43 2
a44 2
Installation from source code
-----------------------------
d53 8
a60 1
* an operating system, for example RedHat Enterprise Linux
d62 1
a62 1
* a Java VM, for example IBM JDK 1.4.1
d64 1
a64 5
The following software components are required to run PHP scripts with
java code embedded via a web-server.  It is assumed that these
components are not already installed on your computer. If they are
installed (including development packages), change the install
directory or skip the compilation/install steps for these components:
d66 1
a66 1
* PHP 4.3.x or above, for example 5.0.1
d68 2
a69 1
* the PHP/Java Bridge
d71 1
a71 1
* a web-server, for example Apache 2.x
d73 1
a74 1
Then choose a proper INST directory and type the following commands:
d76 7
a82 1
# adjust install directory
d85 20
a109 10
# stop the system http service 
su - -c "service httpd stop"

# If you don't have autoconf >= 2.57, automake >= 1.6.3 libtool >=
# 1.4.3, or versions which do not match, for example autoconf 2.59 and
# libtool 1.4.3, it is recommended to compile these before proceeding:
 (cd autoconf-2.57;  ./configure --prefix=$INST && make && su -c "make install")
 (cd automake-1.6.3; ./configure --prefix=$INST && make && su -c "make install")
 (cd libtool-1.4.3;  ./configure --prefix=$INST && make && su -c "make install")

d117 4
a120 3
# compile and install php 4.3
bunzip2 < php-4.3.x.tar.bz2 | tar xf -
cd php-4.3.x
d127 2
a128 1
# compile and install the php/java bridge
a130 2
export PATH=$INST/bin:$PATH 
export LD_LIBRARY_PATH=$INST/lib:$LD_LIBRARY_PATH
d132 8
a139 4
# If you don't have a servlet engine use:
./configure --with-java=/opt/IBMJava2-141 --disable-servlet
# If you have a servlet engine, locate j2ee.jar and use:
#./configure --with-java=/opt/IBMJava2-141 --enable-servlet=/path/to/j2ee.jar
d145 1
d195 1
d197 2
a198 1
Visit http://localhost/JavaBridge and run the supplied examples.
@


1.15
log
@Release-2.0.8-pre2
@
text
@d150 1
a150 1
su -c "echo -e 'LoadModule jk_module modules/mod_jk.so\nJkAutoAlias /opt/tomcat5/webapps\nJkMount /*.jsp ajp13' >>$INST/conf/httpd.conf"
d152 1
a152 1
Start tomcat, for example with the command /opt/tomcat5/catalina.sh
@


1.14
log
@load balancer rewrite
@
text
@a36 13
Individual classes (.class files) cannot be loaded, please create a
.jar archive, for example with the command: 

   jar cvf myLibrary-<version>.jar *.class 

and copy the library to /usr/share/java or one of its sub-directories
(if it is of general interest) or to java.libpath/lib, see output of
phpinfo.php above or one of its sub-directories (if it should be
visible to the PHP/Java Bridge only).  At run-time your library can be
referenced with the command:

   java_set_library_path("myLibrary-<version>.jar");

d112 4
a115 1
./configure --with-java=/opt/IBMJava2-141
d131 39
d171 1
@


1.13
log
@Release-2.0.6-pre2
@
text
@a98 1
for i in autoconf_2.57.tar.gz automake_1.6.3.tar.gz libtool_1.4.3.tar.gz; do
a101 1
done
@


1.12
log
@Version 2.0.6
@
text
@d34 3
a36 1
or in java.libpath/lib and your php and web-pages in /var/www/html.
d38 13
a50 1
.zip or .jar file, for example with the command: jar cvf cls.zip *.class
d72 3
a74 3
components are not already installed on your computer. If they are,
change the install directory or skip the compilation/install steps for
these components:
d96 9
@


1.11
log
@do not change the channel if server was forked by the httpd
@
text
@d64 1
a64 1
* the PHP/Java Bridge version 1.x
d99 2
a100 2
bunzip2 < php-java-bridge_1.x.y.tar.bz2 | tar xf -
cd php-java-bridge-1.x.y
@


1.10
log
@Release-1.0.8
@
text
@d33 4
a36 3
Then install your java classes in java.libpath (see output of
phpinfo), your java libraries (.jar files) in /usr/share/java or in
java.libpath/lib and your php and web-pages in /var/www/html.
@


1.9
log
@Release-1.0.8
@
text
@d16 6
a21 8
* IF you have SECURITY ENHANCED LINUX, install the SEL policy sources
  if they are not installed. For example with the command:
  rpm -i selinux-policy-targeted-sources-1.17.30-2.19.noarch.rpm
  Then update the policy with the command:
  su -c "sh update_policy.sh /etc/selinux/{strict||targeted}/src/policy reload"
  The value for "strict||targeted" depends on your setting in
  /etc/selinux/config. The "update_policy.sh" file can be found in the 
  documentation folder of the bridge: /usr/share/doc/php-java-bridge*.
d73 5
d84 1
a84 1
./configure  --enable-module=so --prefix=$INST
@


1.8
log
@Release-1.0.8
@
text
@a3 5
NOTE: If you run a SELinux kernel, you must install the policy files
before you can run the PHP/Java Bridge. The php-java-bridge RPM
contains the policy files in the /usr/share/doc directory. It is
assumed that you know how to install them.

d16 9
d35 3
a37 2
Then install your java classes in java.libpath (see output of phpinfo)
and your php and web-pages in /var/www/html.
d48 2
a49 2
tarball contains the policy files in the root directory. It is assumed
that you know how to install them.
@


1.7
log
@Release-1.0.8
@
text
@d6 1
a6 1
contains the policy files in the /usr/share/doc directory. I is
d43 1
a43 1
tarball contains the policy files in the root directory. I is assumed
@


1.6
log
@Release-1.0.8
@
text
@d4 5
d41 5
@


1.5
log
@php 4/5
@
text
@d38 1
a38 1
* an operating system, for example RedHat Enterprise Linux Version 3
d40 1
a40 1
* a Java VM, for example Sun JDK 1.4.2_02
d64 2
a65 2
gunzip < httpd_2.x.y.tar.gz | tar xf -
cd httpd_2.x.y
d73 1
a73 4
./configure --prefix=$INST \
--with-mysql \
--without-java \
--with-apxs2=$INST/bin/apxs
d81 1
a81 1
cd php-java-bridge_1.x.y
d85 1
a85 2
./configure --prefix=$INST \
--with-java=/opt/IBMJava2-141
@


1.4
log
@version
@
text
@d48 1
a48 1
* PHP 4.3.x
@


1.3
log
@Fixed a typo that caused a massive memory leak on the java side
@
text
@d14 1
a14 1
  rpm -i php-java-bridge-1.0.5-1.i386.rpm
d39 1
d49 1
d51 1
@


1.2
log
@Start java in a separate process and give pval's a proper reference count.
@
text
@d1 34
a34 1
Installation from source code.
@


1.1
log
@proper termination for the IBM JDK, README update, INSTALL added
@
text
@d1 1
a1 1
Installation guide:
d30 1
a30 1
./configure --prefix=$INST
@

