head	1.163;
access;
symbols
	Release-5-5-4-1:1.162.0.4
	Root_Release-5-5-4-1:1.162
	Release-5-5-4:1.162.0.2
	Root_Release-5-5-4:1.162
	Release-5-5-3:1.161.0.2
	ROOT_Release-5-5-3:1.161
	Release-5-5-2:1.160.0.16
	Root_Release-5-5-2:1.160
	debian_version_5_5_1-1:1.160
	Release-5-5-1:1.160.0.12
	upstream_version_5_5_1:1.160
	ROOT_Release-5-5-1:1.160
	debian_version_5_5-1:1.160
	upstream_version_5_5:1.160
	ROOT_Release-5-5:1.160
	Release-5-5:1.160.0.14
	debian_version_5_4_4_2-3:1.160
	Release-5-4-4-2-1:1.160.0.8
	debian_version_5_4_4_2-2:1.160
	debian_version_5_4_4_2-1:1.160
	upstream_version_5_4_4_2:1.160
	debian_version_5_4_4_1-1:1.160
	upstream_version_5_4_4_1:1.160
	debian_version_5_4_4-1:1.160
	upstream_version_5_4_4:1.160
	Release-5-4-4:1.160.0.10
	Root_Release-5-4-4:1.160
	debian_version_5_4_3_2-1:1.160
	upstream_version_5_4_3_2:1.160
	Release_5-4-3-2:1.160.0.6
	Root_Release_5-4-3-2:1.160
	upstream_version_5_4_3_1:1.160
	debian_version_5_4_3_1-1:1.160
	Release-5-4-3:1.160.0.4
	Root_Release-5-4-3:1.160
	Root_Release-5-4-1:1.160
	Release-5-4-1:1.160.0.2
	Root_Release-5-4:1.159
	Release-5-4:1.159.0.2
	upstream_version_5_3_4:1.158
	debian_version_5_3_4-1:1.158
	ROOT_Release-5-3-4:1.158
	Release-5-3-4:1.158.0.10
	ROOT_Release-5-3-3:1.158
	Release-5-3-3:1.158.0.6
	debian_version_5_3_2_1_2-1:1.158
	upstream_version_5_3_2_1_2:1.158
	debian_version_5_3_2_1_1-1:1.158
	debian_version_5_3_2_1_1:1.158
	upstream_version_5_3_2_1_1:1.158
	Root_Release-5-3-2-1:1.158
	Release-5-3-2-1:1.158
	ROOT_RELEASE-5-3-2-1:1.158
	RELEASE-5-3-2-1:1.158.0.8
	Release-5-3-2:1.158.0.4
	Root_Release-5-3-2:1.158
	Root_Release-5-3-1:1.158
	Release-5-3-1:1.158.0.2
	Release-5-2-3-1:1.157.0.6
	Root_Release-5-2-3-1:1.157
	Release-5-2-2-4:1.157.0.4
	Root_Release-5-2-2-4:1.157
	Release-5-2-2-1:1.157.0.2
	Root_Release-5-2-2-1:1.157
	upstream_version_5_2_2:1.156
	debian_version_5_2_2-1:1.156
	Release-5-2-2:1.156.0.4
	ROOT_Release-5-2-2:1.156
	ROOT_Release-5-2-1:1.156
	Release-5-2-1:1.156.0.2
	Release-5-2-0:1.155.0.2
	ROOT_Release-5-2-0:1.155
	ROOT_Release-5-1-2:1.154
	Release-5-1-2:1.154.0.6
	Version-5-1-1:1.154.0.4
	ROOT_Version-5-1-1:1.154
	debian_version_5_1_0-1:1.154
	upstream_version_5_1_0:1.154
	ROOT_Release-5-1-0:1.154
	Release-5-1-0:1.154.0.2
	ROOT_Release-5-0-0:1.153
	Release-5-0-0:1.153.0.2
	Release-4-3-3:1.152.0.2
	ROOT_Release-4-3-3:1.152
	upstream_version_4_3_2:1.151
	debian_version_4_3_2-1:1.151
	ROOT_Release-4-3-2:1.151
	Release-4-3-2:1.151.0.6
	Release-4-3-1:1.151.0.4
	ROOT_Release-4-3-1:1.151
	debian_version_4_3_0-1:1.151
	upstream_version_4_3_0:1.151
	ROOT_Release-4-3-0:1.151
	Release-4-3-0:1.151.0.2
	debian_version_3_2_1b-2:1.140
	debian_version_4_2_2-1:1.149
	upstream_version_4_2_2:1.149
	debian_version_3_2_1b-1:1.140
	upstream_version_3_2_1b:1.140
	Release-4-1-2:1.144.0.2
	Release-4-0-8:1.143.0.4
	debian_version_4_0_8a-1:1.143
	upstream_version_4_0_8a:1.143
	jostb-debian-ubuntu-patch:1.143.0.2
	debian_version_4_0_8-1:1.142
	upstream_version_4_0_8:1.142
	debian_version_4_0_7-1:1.141
	upstream_version_4_0_7:1.141
	debian_version_4_0_6-1:1.141
	upstream_version_4_0_6:1.141
	debian_version_4_0_2-1:1.141
	upstream_version_4_0_2:1.141
	Release-4-0-2_Root:1.141
	Release-4-0-2:1.141.0.2
	upstream_version_4_0_1:1.141
	debian_version_4_0_1-2:1.141
	Release-3-2-1:1.140.0.2
	Release-3-1-8:1.136.0.2
	Release-3-0-8_root:1.115.2.1
	Release-3-0-8_Root:1.120
	Release-3-0-8:1.115.0.2
	Release-2-0-8:1.94.0.4
	Release-2-0-7_Root:1.74
	Release-2-0-7:1.74.0.2
	Release-2-0-6-branch:1.64.0.2
	Version-1:1.39.0.6
	Version-2:1.39.0.4
	Release-2:1.39.0.2
	PHP-5:1.14.0.4
	Release-1-0-6:1.14.0.6
	sparc-64-test:1.12.0.2
	V-2004-08-28:1.1.1.1
	PHP-JAVA-BRIDGE:1.1.1;
locks; strict;
comment	@ * @;
expand	@k@;


1.163
date	2010.02.18.17.25.32;	author jost_boekemeier;	state dead;
branches;
next	1.162;

1.162
date	2009.10.17.17.40.22;	author jost_boekemeier;	state Exp;
branches;
next	1.161;

1.161
date	2009.09.14.16.52.39;	author jost_boekemeier;	state Exp;
branches;
next	1.160;

1.160
date	2008.12.21.16.24.34;	author jost_boekemeier;	state Exp;
branches
	1.160.16.1;
next	1.159;

1.159
date	2008.12.11.21.05.45;	author jost_boekemeier;	state Exp;
branches;
next	1.158;

1.158
date	2008.10.03.15.48.13;	author jost_boekemeier;	state Exp;
branches;
next	1.157;

1.157
date	2008.09.20.15.00.57;	author jost_boekemeier;	state Exp;
branches;
next	1.156;

1.156
date	2008.03.22.12.04.54;	author jost_boekemeier;	state Exp;
branches;
next	1.155;

1.155
date	2008.03.02.21.36.49;	author jost_boekemeier;	state Exp;
branches;
next	1.154;

1.154
date	2008.01.21.19.23.28;	author jost_boekemeier;	state Exp;
branches;
next	1.153;

1.153
date	2008.01.06.20.59.19;	author jost_boekemeier;	state Exp;
branches;
next	1.152;

1.152
date	2007.12.28.13.56.41;	author jost_boekemeier;	state Exp;
branches;
next	1.151;

1.151
date	2007.09.30.16.07.52;	author jost_boekemeier;	state Exp;
branches;
next	1.150;

1.150
date	2007.09.19.10.12.27;	author jost_boekemeier;	state Exp;
branches;
next	1.149;

1.149
date	2007.08.04.17.34.23;	author jost_boekemeier;	state Exp;
branches;
next	1.148;

1.148
date	2007.07.22.12.54.42;	author jost_boekemeier;	state Exp;
branches;
next	1.147;

1.147
date	2007.07.19.16.19.15;	author jost_boekemeier;	state Exp;
branches;
next	1.146;

1.146
date	2007.07.09.14.35.06;	author jost_boekemeier;	state Exp;
branches;
next	1.145;

1.145
date	2007.07.03.15.50.52;	author jost_boekemeier;	state Exp;
branches;
next	1.144;

1.144
date	2007.06.13.19.51.47;	author jost_boekemeier;	state Exp;
branches;
next	1.143;

1.143
date	2007.04.10.13.30.47;	author jost_boekemeier;	state Exp;
branches;
next	1.142;

1.142
date	2007.04.07.16.22.39;	author jost_boekemeier;	state Exp;
branches;
next	1.141;

1.141
date	2007.03.09.20.28.07;	author andremachado;	state Exp;
branches;
next	1.140;

1.140
date	2006.12.14.04.35.24;	author jost2345;	state Exp;
branches;
next	1.139;

1.139
date	2006.12.10.11.53.43;	author jost2345;	state Exp;
branches;
next	1.138;

1.138
date	2006.12.02.16.26.45;	author jost2345;	state Exp;
branches;
next	1.137;

1.137
date	2006.11.25.17.00.31;	author jost2345;	state Exp;
branches;
next	1.136;

1.136
date	2006.09.10.17.31.11;	author jost2345;	state Exp;
branches;
next	1.135;

1.135
date	2006.08.28.18.05.11;	author jost2345;	state Exp;
branches;
next	1.134;

1.134
date	2006.08.27.14.40.11;	author jost2345;	state Exp;
branches;
next	1.133;

1.133
date	2006.08.21.17.41.52;	author jost2345;	state Exp;
branches;
next	1.132;

1.132
date	2006.08.19.12.34.00;	author jost2345;	state Exp;
branches;
next	1.131;

1.131
date	2006.08.08.17.20.45;	author jost2345;	state Exp;
branches;
next	1.130;

1.130
date	2006.07.23.20.32.47;	author jost2345;	state Exp;
branches;
next	1.129;

1.129
date	2006.07.19.15.25.34;	author jost2345;	state Exp;
branches;
next	1.128;

1.128
date	2006.07.16.20.29.25;	author jost2345;	state Exp;
branches;
next	1.127;

1.127
date	2006.07.02.20.28.42;	author jost2345;	state Exp;
branches;
next	1.126;

1.126
date	2006.06.26.18.43.54;	author jost2345;	state Exp;
branches;
next	1.125;

1.125
date	2006.06.19.20.37.14;	author jost2345;	state Exp;
branches;
next	1.124;

1.124
date	2006.05.15.19.03.29;	author jost2345;	state Exp;
branches;
next	1.123;

1.123
date	2006.05.13.16.13.40;	author jost2345;	state Exp;
branches;
next	1.122;

1.122
date	2006.05.07.14.33.33;	author jost2345;	state Exp;
branches;
next	1.121;

1.121
date	2006.05.04.17.48.13;	author jost2345;	state Exp;
branches;
next	1.120;

1.120
date	2006.04.30.17.01.55;	author jost2345;	state Exp;
branches;
next	1.119;

1.119
date	2006.04.28.18.21.25;	author jost2345;	state Exp;
branches;
next	1.118;

1.118
date	2006.04.28.18.15.02;	author jost2345;	state Exp;
branches;
next	1.117;

1.117
date	2006.04.26.19.09.31;	author jost2345;	state Exp;
branches;
next	1.116;

1.116
date	2006.04.12.17.46.46;	author jost2345;	state Exp;
branches;
next	1.115;

1.115
date	2006.03.21.18.11.02;	author jost2345;	state Exp;
branches
	1.115.2.1;
next	1.114;

1.114
date	2006.03.19.14.42.44;	author jost2345;	state Exp;
branches;
next	1.113;

1.113
date	2006.03.18.18.56.40;	author jost2345;	state Exp;
branches;
next	1.112;

1.112
date	2006.03.16.20.27.00;	author jost2345;	state Exp;
branches;
next	1.111;

1.111
date	2006.03.12.16.44.39;	author jost2345;	state Exp;
branches;
next	1.110;

1.110
date	2006.03.10.18.41.37;	author jost2345;	state Exp;
branches;
next	1.109;

1.109
date	2006.03.07.18.59.27;	author jost2345;	state Exp;
branches;
next	1.108;

1.108
date	2006.02.03.17.41.36;	author jost2345;	state Exp;
branches;
next	1.107;

1.107
date	2006.01.30.19.39.53;	author jost2345;	state Exp;
branches;
next	1.106;

1.106
date	2006.01.15.21.05.30;	author jost2345;	state Exp;
branches;
next	1.105;

1.105
date	2006.01.08.23.44.40;	author jost2345;	state Exp;
branches;
next	1.104;

1.104
date	2006.01.04.19.35.07;	author jost2345;	state Exp;
branches;
next	1.103;

1.103
date	2005.12.19.19.36.40;	author jost2345;	state Exp;
branches;
next	1.102;

1.102
date	2005.12.18.18.17.48;	author jost2345;	state Exp;
branches;
next	1.101;

1.101
date	2005.12.11.22.24.40;	author jost2345;	state Exp;
branches;
next	1.100;

1.100
date	2005.12.09.19.21.07;	author jost2345;	state Exp;
branches;
next	1.99;

1.99
date	2005.12.08.18.41.56;	author jost2345;	state Exp;
branches;
next	1.98;

1.98
date	2005.11.26.18.03.59;	author jost2345;	state Exp;
branches;
next	1.97;

1.97
date	2005.11.23.19.09.42;	author jost2345;	state Exp;
branches;
next	1.96;

1.96
date	2005.11.17.17.24.19;	author jost2345;	state Exp;
branches;
next	1.95;

1.95
date	2005.11.05.13.11.19;	author jost2345;	state Exp;
branches;
next	1.94;

1.94
date	2005.09.16.20.28.51;	author jost2345;	state Exp;
branches;
next	1.93;

1.93
date	2005.09.15.19.17.38;	author jost2345;	state Exp;
branches;
next	1.92;

1.92
date	2005.09.13.16.46.47;	author jost2345;	state Exp;
branches;
next	1.91;

1.91
date	2005.09.07.21.13.45;	author jost2345;	state Exp;
branches;
next	1.90;

1.90
date	2005.09.01.20.58.24;	author jost2345;	state Exp;
branches;
next	1.89;

1.89
date	2005.08.29.16.10.10;	author jost2345;	state Exp;
branches;
next	1.88;

1.88
date	2005.08.24.20.58.31;	author jost2345;	state Exp;
branches;
next	1.87;

1.87
date	2005.08.23.19.09.58;	author jost2345;	state Exp;
branches;
next	1.86;

1.86
date	2005.08.23.18.20.56;	author jost2345;	state Exp;
branches;
next	1.85;

1.85
date	2005.08.21.11.39.39;	author jost2345;	state Exp;
branches;
next	1.84;

1.84
date	2005.08.18.18.31.39;	author jost2345;	state Exp;
branches;
next	1.83;

1.83
date	2005.08.14.15.11.45;	author jost2345;	state Exp;
branches;
next	1.82;

1.82
date	2005.08.11.18.08.16;	author jost2345;	state Exp;
branches;
next	1.81;

1.81
date	2005.08.01.16.56.55;	author jost2345;	state Exp;
branches;
next	1.80;

1.80
date	2005.07.28.17.00.41;	author jost2345;	state Exp;
branches;
next	1.79;

1.79
date	2005.07.25.20.42.27;	author jost2345;	state Exp;
branches;
next	1.78;

1.78
date	2005.07.17.13.46.23;	author jost2345;	state Exp;
branches;
next	1.77;

1.77
date	2005.07.13.18.22.08;	author jost2345;	state Exp;
branches;
next	1.76;

1.76
date	2005.07.13.18.02.40;	author jost2345;	state Exp;
branches;
next	1.75;

1.75
date	2005.07.12.15.23.09;	author jost2345;	state Exp;
branches;
next	1.74;

1.74
date	2005.07.08.17.57.22;	author jost2345;	state Exp;
branches
	1.74.2.1;
next	1.73;

1.73
date	2005.07.03.20.13.31;	author jost2345;	state Exp;
branches;
next	1.72;

1.72
date	2005.07.01.17.39.05;	author jost2345;	state Exp;
branches;
next	1.71;

1.71
date	2005.06.27.23.13.11;	author jost2345;	state Exp;
branches;
next	1.70;

1.70
date	2005.06.25.12.16.09;	author jost2345;	state Exp;
branches;
next	1.69;

1.69
date	2005.06.21.20.17.30;	author jost2345;	state Exp;
branches;
next	1.68;

1.68
date	2005.06.19.20.45.40;	author jost2345;	state Exp;
branches;
next	1.67;

1.67
date	2005.06.16.16.10.41;	author jost2345;	state Exp;
branches;
next	1.66;

1.66
date	2005.06.15.15.18.02;	author jost2345;	state Exp;
branches;
next	1.65;

1.65
date	2005.05.22.19.11.01;	author jost2345;	state Exp;
branches;
next	1.64;

1.64
date	2005.05.15.20.17.35;	author jost2345;	state Exp;
branches;
next	1.63;

1.63
date	2005.05.09.21.05.53;	author jost2345;	state Exp;
branches;
next	1.62;

1.62
date	2005.05.07.14.35.16;	author jost2345;	state Exp;
branches;
next	1.61;

1.61
date	2005.05.07.14.02.32;	author jost2345;	state Exp;
branches;
next	1.60;

1.60
date	2005.04.30.18.03.06;	author jost2345;	state Exp;
branches;
next	1.59;

1.59
date	2005.04.30.14.47.02;	author jost2345;	state Exp;
branches;
next	1.58;

1.58
date	2005.04.28.19.16.13;	author jost2345;	state Exp;
branches;
next	1.57;

1.57
date	2005.04.27.19.13.24;	author jost2345;	state Exp;
branches;
next	1.56;

1.56
date	2005.04.27.18.24.25;	author jost2345;	state Exp;
branches;
next	1.55;

1.55
date	2005.04.27.18.23.46;	author jost2345;	state Exp;
branches;
next	1.54;

1.54
date	2005.04.23.16.04.26;	author jost2345;	state Exp;
branches;
next	1.53;

1.53
date	2005.04.17.21.01.22;	author jost2345;	state Exp;
branches;
next	1.52;

1.52
date	2005.04.11.15.55.41;	author jost2345;	state Exp;
branches;
next	1.51;

1.51
date	2005.04.09.16.49.18;	author jost2345;	state Exp;
branches;
next	1.50;

1.50
date	2005.03.27.15.45.45;	author jost2345;	state Exp;
branches;
next	1.49;

1.49
date	2005.03.15.23.19.39;	author jost2345;	state Exp;
branches;
next	1.48;

1.48
date	2005.03.11.17.34.18;	author jost2345;	state Exp;
branches;
next	1.47;

1.47
date	2005.03.07.22.16.29;	author jost2345;	state Exp;
branches;
next	1.46;

1.46
date	2005.03.07.20.04.30;	author jost2345;	state Exp;
branches;
next	1.45;

1.45
date	2005.03.07.19.36.50;	author jost2345;	state Exp;
branches;
next	1.44;

1.44
date	2005.03.05.14.55.38;	author jost2345;	state Exp;
branches;
next	1.43;

1.43
date	2005.02.19.13.29.25;	author jost2345;	state Exp;
branches;
next	1.42;

1.42
date	2005.02.17.21.57.22;	author jost2345;	state Exp;
branches;
next	1.41;

1.41
date	2005.02.15.19.10.28;	author jost2345;	state Exp;
branches;
next	1.40;

1.40
date	2005.02.13.21.43.28;	author jost2345;	state Exp;
branches;
next	1.39;

1.39
date	2005.02.04.17.01.09;	author jost2345;	state Exp;
branches;
next	1.38;

1.38
date	2005.02.01.19.07.35;	author jost2345;	state Exp;
branches;
next	1.37;

1.37
date	2005.01.29.10.09.33;	author jost2345;	state Exp;
branches;
next	1.36;

1.36
date	2005.01.28.16.32.52;	author jost2345;	state Exp;
branches;
next	1.35;

1.35
date	2005.01.06.17.09.32;	author jost2345;	state Exp;
branches;
next	1.34;

1.34
date	2005.01.02.14.02.10;	author jost2345;	state Exp;
branches;
next	1.33;

1.33
date	2004.12.20.20.04.43;	author jost2345;	state Exp;
branches;
next	1.32;

1.32
date	2004.12.12.09.57.25;	author jost2345;	state Exp;
branches;
next	1.31;

1.31
date	2004.12.05.13.39.54;	author jost2345;	state Exp;
branches;
next	1.30;

1.30
date	2004.12.03.18.35.21;	author jost2345;	state Exp;
branches;
next	1.29;

1.29
date	2004.12.01.20.29.56;	author jost2345;	state Exp;
branches;
next	1.28;

1.28
date	2004.11.29.16.14.33;	author jost2345;	state Exp;
branches;
next	1.27;

1.27
date	2004.11.28.21.12.57;	author jost2345;	state Exp;
branches;
next	1.26;

1.26
date	2004.11.27.13.45.48;	author jost2345;	state Exp;
branches;
next	1.25;

1.25
date	2004.11.26.21.13.39;	author jost2345;	state Exp;
branches;
next	1.24;

1.24
date	2004.11.24.23.18.16;	author jost2345;	state Exp;
branches;
next	1.23;

1.23
date	2004.11.21.14.44.55;	author jost2345;	state Exp;
branches;
next	1.22;

1.22
date	2004.11.20.16.19.14;	author jost2345;	state Exp;
branches;
next	1.21;

1.21
date	2004.11.19.16.54.33;	author jost2345;	state Exp;
branches;
next	1.20;

1.20
date	2004.11.18.21.39.55;	author jost2345;	state Exp;
branches;
next	1.19;

1.19
date	2004.11.17.18.31.08;	author jost2345;	state Exp;
branches;
next	1.18;

1.18
date	2004.11.16.23.28.17;	author jost2345;	state Exp;
branches;
next	1.17;

1.17
date	2004.11.11.18.36.00;	author jost2345;	state Exp;
branches;
next	1.16;

1.16
date	2004.11.03.20.13.39;	author jost2345;	state Exp;
branches;
next	1.15;

1.15
date	2004.11.02.22.13.18;	author jost2345;	state Exp;
branches;
next	1.14;

1.14
date	2004.10.24.10.58.47;	author jost2345;	state Exp;
branches;
next	1.13;

1.13
date	2004.10.12.17.07.16;	author jost2345;	state Exp;
branches;
next	1.12;

1.12
date	2004.10.09.11.35.17;	author jost2345;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2004.10.07.11.19.46;	author jost2345;	state Exp;
branches;
next	1.10;

1.10
date	2004.10.04.16.30.13;	author jost2345;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.26.13.32.42;	author jost2345;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.23.13.12.45;	author jost2345;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.22.19.17.48;	author jost2345;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.21.12.21.30;	author jost2345;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.19.18.45.13;	author jost2345;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.10.13.23.50;	author jost2345;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.30.17.30.44;	author jost2345;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.29.15.24.30;	author jost2345;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.28.06.05.15;	author jost2345;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.08.28.06.05.15;	author jost2345;	state Exp;
branches;
next	;

1.12.2.1
date	2004.10.09.21.57.19;	author jost2345;	state Exp;
branches;
next	;

1.74.2.1
date	2005.07.12.16.24.14;	author jost2345;	state Exp;
branches;
next	;

1.115.2.1
date	2006.04.23.19.09.08;	author jost2345;	state Exp;
branches;
next	;

1.160.16.1
date	2009.09.14.16.23.59;	author jost_boekemeier;	state Exp;
branches;
next	;


desc
@@


1.163
log
@Release-6-0-0
@
text
@/*-*- mode: C; tab-width:4 -*-*/

/**\file 
 * This is the main entry point for the java extension. 

  It contains the global structures and the callbacks required for
  zend engine 1 and 2.

  Copyright (C) 2003-2007 Jost Boekemeier

  This file is part of the PHP/Java Bridge.

  The PHP/Java Bridge ("the library") is free software; you can
  redistribute it and/or modify it under the terms of the GNU General
  Public License as published by the Free Software Foundation; either
  version 2, or (at your option) any later version.

  The library is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with the PHP/Java Bridge; see the file COPYING.  If not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
  02111-1307 USA.

  Linking this file statically or dynamically with other modules is
  making a combined work based on this library.  Thus, the terms and
  conditions of the GNU General Public License cover the whole
  combination.

  As a special exception, the copyright holders of this library give you
  permission to link this library with independent modules to produce an
  executable, regardless of the license terms of these independent
  modules, and to copy and distribute the resulting executable under
  terms of your choice, provided that you also meet, for each linked
  independent module, the terms and conditions of the license of that
  module.  An independent module is a module which is not derived from
  or based on this library.  If you modify this library, you may extend
  this exception to your version of the library, but you are not
  obligated to do so.  If you do not wish to do so, delete this
  exception statement from your version.
 */

#include "zend.h"
#include "init_cfg.h"
#if !defined(ZEND_ENGINE_2)
# error "PHP 4 is not supported anymore. Use php-java-bridge-4.3.2 instead"
#else

#include "php_java.h"

/* wait, stat */
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
/* miscellaneous */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <errno.h>

#include "php_globals.h"
#include "ext/standard/info.h"

#include "zend_extensions.h"
#include "TSRM.h"

#include "init_cfg.h"

EXT_DECLARE_MODULE_GLOBALS(EXT)

/**
 * Holds the global configuration.
 * This structure is shared by all php instances
 */
struct cfg *EXT_GLOBAL (cfg)  = 0;

#ifdef __MINGW32__
static const int java_errno=0;
int *__errno (void) { return (int*)&java_errno; }
#ifdef ZEND_ENGINE_2
#define php_info_print_table_row(a, b, c) php_info_print_table_row_ex(a, "v", b, c)
#else
#define php_info_print_table_end() php_printf("</table><br />\n")
#endif
#endif

PHP_RINIT_FUNCTION(EXT) 
{
  return SUCCESS;
}

/**
 * Called when the request terminates. Closes the connection to the
 * back-end, destroys the proxyenv instance.
 */
PHP_RSHUTDOWN_FUNCTION(EXT)
{
  return SUCCESS;
}

EXT_FUNCTION(EXT_GLOBAL(get_default_channel))
{
  if(EXT_GLOBAL(cfg)->socketname_set && (EXT_GLOBAL(cfg)->sockname)) {
	char *name = EXT_GLOBAL(cfg)->sockname;
	if(name[0]=='@@' || name[0]=='/') { /* unix domain socket */
	  RETURN_STRING(name, 1);
	} else {					/* tcp socket */
	  RETURN_LONG(atoi(EXT_GLOBAL(cfg)->sockname));
	}
  } else {
	RETURN_NULL();
  }
}

#ifndef GENERATE_DOC
function_entry EXT_GLOBAL(functions)[] = {
  EXT_FE(EXT_GLOBAL(get_default_channel), NULL)
  {NULL, NULL, NULL}
};

zend_module_entry EXT_GLOBAL(module_entry) = {
  STANDARD_MODULE_HEADER,
  EXT_NAME(),
  EXT_GLOBAL(functions),
  EXT_MINIT(EXT),
  EXT_MSHUTDOWN(EXT),
  EXT_RINIT(EXT),
  EXT_RSHUTDOWN(EXT),
  EXT_MINFO(EXT),
  NO_VERSION_YET,
  STANDARD_MODULE_PROPERTIES
};
#endif /* !GENERATE_DOC */

#if defined(COMPILE_DL_JAVA) || defined(COMPILE_DL_MONO)
EXT_GET_MODULE(EXT)
#endif

/**
 * Holds the flags set/unset for all overridden java ini entries
 * these are U_HOST, U_SERVLET and U_SOCKNAME
 * @@see X_JAVABRIDGE_OVERRIDE_HOSTS
 */
int EXT_GLOBAL(ini_override);

/**
 * Holds the flags set/unset for all java ini entries
 */
int EXT_GLOBAL(ini_updated);

/**
 * The options set by the user.
 */
int EXT_GLOBAL(ini_user);

/**
 * The options which carry a value.
 */
int EXT_GLOBAL(ini_set);

static PHP_INI_MH(OnIniPersistentServletConnections)
{
  if (new_value && !(EXT_GLOBAL(ini_override)&U_PERSISTENT_SERVLET_CONNECTIONS)) {
	EXT_GLOBAL(update_persistent_servlet_connections)(new_value);
  }
  return SUCCESS;
}
static PHP_INI_MH(OnIniHosts)
{
  if (new_value && !(EXT_GLOBAL(ini_override)&U_HOSTS)) {
	EXT_GLOBAL(update_hosts)(new_value);
  }
  return SUCCESS;
}
static PHP_INI_MH(OnIniServlet)
{
  if (new_value && !(EXT_GLOBAL(ini_override)&U_SERVLET)) {
	EXT_GLOBAL(update_servlet)(new_value);
  }
  return SUCCESS;
}

static PHP_INI_MH(OnIniSockname)
{
  if (new_value && !(EXT_GLOBAL(ini_override)&U_SOCKNAME)) {
	EXT_GLOBAL(update_socketname)(new_value);
  }
  return SUCCESS;
}
static PHP_INI_MH(OnIniLogLevel)
{
  if (new_value) {
	if((EXT_GLOBAL (ini_set) &U_LOGLEVEL)) free(EXT_GLOBAL(cfg)->logLevel);
	EXT_GLOBAL(cfg)->logLevel = strdup(new_value);
	assert(EXT_GLOBAL(cfg)->logLevel); if(!EXT_GLOBAL(cfg)->logLevel) exit(6);
	EXT_GLOBAL(cfg)->logLevel_val=atoi(EXT_GLOBAL(cfg)->logLevel);
	EXT_GLOBAL(ini_updated)|=U_LOGLEVEL;
  }
  return SUCCESS;
}
PHP_INI_BEGIN()
  PHP_INI_ENTRY(EXT_NAME()/**/".servlet", NULL, PHP_INI_SYSTEM, OnIniServlet)
  PHP_INI_ENTRY(EXT_NAME()/**/".socketname", NULL, PHP_INI_SYSTEM, OnIniSockname)
  PHP_INI_ENTRY(EXT_NAME()/**/".hosts",   NULL, PHP_INI_SYSTEM, OnIniHosts)
  PHP_INI_ENTRY(EXT_NAME()/**/".persistent_servlet_connections",   NULL, PHP_INI_SYSTEM, OnIniPersistentServletConnections)
  PHP_INI_ENTRY(EXT_NAME()/**/".log_level",   NULL, PHP_INI_SYSTEM, OnIniLogLevel)
  PHP_INI_END()

/* PREFORK calls this once. All childs receive cloned values. However,
   the WORKER MPM calls this for the master and for all childs */
  static void EXT_GLOBAL(alloc_globals_ctor)(EXT_GLOBAL_EX(zend_,globals,_) *EXT_GLOBAL(globals) TSRMLS_DC)
{
  memset (EXT_GLOBAL(globals), 0, sizeof*EXT_GLOBAL(globals));
}



/**
 * Called when the module is initialized. Creates the Java and
 * JavaClass structures and tries to start the back-end if
 * java.socketname, java.servlet or java.hosts are not set.  The
 * back-end is not started if the environment variable
 * X_JAVABRIDGE_OVERRIDE_HOSTS exists and contains either "/" or
 * "host:port//context/servlet".  When running as a Apache/IIS module
 * or Fast CGI, this procedure is called only once. When running as a
 * CGI binary, it is called whenever the CGI binary is called.
 */
PHP_MINIT_FUNCTION(EXT)
{
  EXT_INIT_MODULE_GLOBALS(EXT, EXT_GLOBAL(alloc_globals_ctor), NULL);
  
  assert(!EXT_GLOBAL (cfg) );
  if(!EXT_GLOBAL (cfg) ) EXT_GLOBAL (cfg) = malloc(sizeof *EXT_GLOBAL (cfg) ); 
  if(!EXT_GLOBAL (cfg) ) exit(9);

  if(REGISTER_INI_ENTRIES()==SUCCESS) {
	EXT_GLOBAL(init_cfg) (TSRMLS_C);
  } 

  // disable named pipes if the socket option is set
  if(!EXT_GLOBAL(option_set_by_user)(U_SOCKNAME, EXT_GLOBAL(ini_user))) {
	struct stat buf;
	if ((0==stat("/dev/shm", &buf)) && (S_ISDIR(buf.st_mode)))
	  REGISTER_STRING_CONSTANT(EXTU/**/"_PIPE_DIR", "/dev/shm", CONST_CS | CONST_PERSISTENT);
  }
  /* 
   * don't bother setting JAVA_HOSTS if this is a fcgi servlet
   * (getenv("X_JAVABRIDGE_OVERRIDE_HOSTS")=="/") as the servlet will
   * set X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT anyway
   */
  if(EXT_GLOBAL(option_set_by_user)(U_HOSTS, EXT_GLOBAL(ini_user)) && !(EXT_GLOBAL(cfg)->is_fcgi_servlet)) {
	REGISTER_STRING_CONSTANT(EXTU/**/"_HOSTS", EXT_GLOBAL(cfg)->hosts, CONST_CS | CONST_PERSISTENT);
	if(EXT_GLOBAL(option_set_by_user)(U_SERVLET, EXT_GLOBAL(ini_user)))
	  REGISTER_STRING_CONSTANT(EXTU/**/"_SERVLET", EXT_GLOBAL(cfg)->servlet, CONST_CS | CONST_PERSISTENT);
	else
	  REGISTER_STRING_CONSTANT(EXTU/**/"_SERVLET", "", CONST_CS | CONST_PERSISTENT);
  }
  if(EXT_GLOBAL(option_set_by_user)(U_LOGLEVEL, EXT_GLOBAL(ini_user)))
	REGISTER_LONG_CONSTANT(EXTU/**/"_LOG_LEVEL", atoi(EXT_GLOBAL(cfg)->logLevel), CONST_CS | CONST_PERSISTENT);

  if(EXT_GLOBAL(option_set_by_user)(U_PERSISTENT_SERVLET_CONNECTIONS, EXT_GLOBAL(ini_user)))
	REGISTER_LONG_CONSTANT(EXTU/**/"_PERSISTENT_SERVLET_CONNECTIONS", 1, CONST_CS | CONST_PERSISTENT);

  return SUCCESS;
}

/**
 * Displays the module info.
 */
PHP_MINFO_FUNCTION(EXT)
{
  php_info_print_table_start();
  php_info_print_table_row(2, EXT_NAME()/**/" support", "Enabled");
  php_info_print_table_row(2, EXT_NAME()/**/" bridge", EXT_GLOBAL(bridge_version));
  if(EXT_GLOBAL(cfg)->socketname_set && EXT_GLOBAL(option_set_by_user) (U_SOCKNAME, EXT_GLOBAL(ini_user)))
	php_info_print_table_row(2, EXT_NAME()/**/".socketname", EXT_GLOBAL(cfg)->sockname);
  else {
	if(EXT_GLOBAL(option_set_by_user) (U_HOSTS, EXT_GLOBAL(ini_user)))
	  php_info_print_table_row(2, EXT_NAME()/**/".hosts", EXT_GLOBAL(cfg)->hosts);
	if(EXT_GLOBAL(option_set_by_user) (U_SERVLET, EXT_GLOBAL(ini_user)))
	  php_info_print_table_row(2, EXT_NAME()/**/".servlet", EXT_GLOBAL(cfg)->servlet);
	if(EXT_GLOBAL(option_set_by_user) (U_PERSISTENT_SERVLET_CONNECTIONS, EXT_GLOBAL(ini_user)))
	  php_info_print_table_row(2, EXT_NAME()/**/".persistent_servlet_connections", EXT_GLOBAL(cfg)->persistent_servlet_connections);
  }
  if(EXT_GLOBAL(option_set_by_user) (U_LOGLEVEL, EXT_GLOBAL(ini_user)))
	php_info_print_table_row(2, EXT_NAME()/**/".log_level", EXT_GLOBAL(cfg)->logLevel);
  php_info_print_table_end();
}

/**
 * Called when the module terminates. Stops the back-end, if it is running.
 * When running in Apache/IIS or as a FastCGI binary, this procedure is 
 * called only once. When running as a CGI binary this is called whenever
 * the CGI binary terminates.
 */
PHP_MSHUTDOWN_FUNCTION(EXT) 
{
  EXT_GLOBAL(destroy_cfg) (EXT_GLOBAL(ini_set));
  EXT_GLOBAL(ini_user) = EXT_GLOBAL(ini_set) = 0;

  UNREGISTER_INI_ENTRIES();

  assert(EXT_GLOBAL (cfg));
  if(EXT_GLOBAL (cfg) ) { 
	free(EXT_GLOBAL (cfg) ); EXT_GLOBAL (cfg) = 0; 
  }
	
  return SUCCESS;
}



/** Zend module stuff */

int EXT_GLOBAL(zend_startup)(zend_extension *extension)
{
	return zend_startup_module(&EXT_GLOBAL(module_entry));
}

void EXT_GLOBAL(zend_shutdown)(zend_extension *extension)
{
	/* Do nothing. */
}

int EXT_GLOBAL(api_no_check)(int api_no) 
{
  return SUCCESS;
}

#ifndef ZEND_EXT_API
#define ZEND_EXT_API    /**/
#endif
ZEND_EXTENSION();

zend_extension zend_extension_entry = {
  EXT_NAME(),
  BRIDGE_VERSION,
  "The PHP/Java Bridge authors",
  "(C) 2003-2008 by the authors",
  "http://php-java-bridge.sf.net",
  EXT_GLOBAL(zend_startup),
  EXT_GLOBAL(zend_shutdown),
  NULL,           /* activate_func_t */
  NULL,           /* deactivate_func_t */
  NULL,           /* message_handler_func_t */
  NULL,           /* op_array_handler_func_t */
  NULL,           /* statement_handler_func_t */
  NULL,           /* fcall_begin_handler_func_t */
  NULL,           /* fcall_end_handler_func_t */
  NULL,           /* op_array_ctor_func_t */
  NULL,           /* op_array_dtor_func_t */
  NULL,
  COMPAT_ZEND_EXTENSION_PROPERTIES
};

#endif	/* >= PHP5 */

#ifndef PHP_WRAPPER_H
#error must include php_wrapper.h
#endif
@


1.162
log
@Release-5-5-4
@
text
@@


1.161
log
@Merged Release-5-5-2 branch into HEAD
@
text
@d165 7
d209 1
d264 4
a267 1
  REGISTER_LONG_CONSTANT(EXTU/**/"_PERSISTENT_SERVLET_CONNECTIONS", 1, CONST_CS | CONST_PERSISTENT);
d286 2
@


1.160
log
@Release-5-4-1
@
text
@d54 1
a54 1
/* wait */
d56 2
d237 5
a241 3
  if(EXT_GLOBAL(option_set_by_user)(U_SOCKNAME, EXT_GLOBAL(ini_user)))
	REGISTER_STRING_CONSTANT(EXTU/**/"_PIPE_DIR", "", CONST_CS | CONST_PERSISTENT);

@


1.160.16.1
log
@http://sourceforge.net/mailarchive/forum.php?thread_name=5B533386-AC83-4E48-9E12-9DDD8D6EA321%40mac.com&forum_name=php-java-bridge-users
@
text
@d54 1
a54 1
/* wait, stat */
a55 2
#include <sys/stat.h>
#include <unistd.h>
d235 3
a237 5
  if(!EXT_GLOBAL(option_set_by_user)(U_SOCKNAME, EXT_GLOBAL(ini_user))) {
	struct stat buf;
	if ((0==stat("/dev/shm", &buf)) && (S_ISDIR(buf.st_mode)))
	  REGISTER_STRING_CONSTANT(EXTU/**/"_PIPE_DIR", "/dev/shm", CONST_CS | CONST_PERSISTENT);
  }
@


1.159
log
@java autostart removed
@
text
@d252 1
@


1.158
log
@Release-5-3-1
@
text
@d105 2
a106 2
  if(EXT_GLOBAL(can_fork)(TSRMLS_C) && (EXT_GLOBAL(cfg)->default_sockname)) {
	char *name = EXT_GLOBAL(cfg)->default_sockname;
d110 1
a110 1
	  RETURN_LONG(atoi(EXT_GLOBAL(cfg)->default_sockname));
a162 20
static PHP_INI_MH(OnIniPolicy)
{
  if (new_value) {
	if((EXT_GLOBAL (ini_set) &U_POLICY)) free(EXT_GLOBAL(cfg)->policy);
	EXT_GLOBAL(cfg)->policy=strdup(new_value);
	assert(EXT_GLOBAL(cfg)->policy); if(!EXT_GLOBAL(cfg)->policy) exit(6);
	EXT_GLOBAL(ini_updated)|=U_POLICY;
  }
  return SUCCESS;
}
static PHP_INI_MH(OnIniWrapper)
{
  if (new_value) {
	if((EXT_GLOBAL (ini_set) &U_WRAPPER)) free(EXT_GLOBAL(cfg)->wrapper);
	EXT_GLOBAL(cfg)->wrapper=strdup(new_value);
	assert(EXT_GLOBAL(cfg)->wrapper); if(!EXT_GLOBAL(cfg)->wrapper) exit(6);
	EXT_GLOBAL(ini_updated)|=U_WRAPPER;
  }
  return SUCCESS;
}
a184 40
static PHP_INI_MH(OnIniClassPath)
{
  if (new_value) {
	if((EXT_GLOBAL (ini_set) &U_CLASSPATH)) free(EXT_GLOBAL(cfg)->classpath);
	EXT_GLOBAL(cfg)->classpath =strdup(new_value);
	assert(EXT_GLOBAL(cfg)->classpath); if(!EXT_GLOBAL(cfg)->classpath) exit(6);
	EXT_GLOBAL(ini_updated)|=U_CLASSPATH;
  }
  return SUCCESS;
}
static PHP_INI_MH(OnIniLibPath)
{
  if (new_value) {
	if((EXT_GLOBAL (ini_set) &U_LIBRARY_PATH)) free(EXT_GLOBAL(cfg)->ld_library_path);
	EXT_GLOBAL(cfg)->ld_library_path = strdup(new_value);
	assert(EXT_GLOBAL(cfg)->ld_library_path); if(!EXT_GLOBAL(cfg)->ld_library_path) exit(6);
	EXT_GLOBAL(ini_updated)|=U_LIBRARY_PATH;
  }
  return SUCCESS;
}
static PHP_INI_MH(OnIniJava)
{
  if (new_value) {
	if((EXT_GLOBAL (ini_set) &U_JAVA)) free(EXT_GLOBAL(cfg)->vm);
	EXT_GLOBAL(cfg)->vm = strdup(new_value);
	assert(EXT_GLOBAL(cfg)->vm); if(!EXT_GLOBAL(cfg)->vm) exit(6);
	EXT_GLOBAL(ini_updated)|=U_JAVA;
  }
  return SUCCESS;
}
static PHP_INI_MH(OnIniJavaHome)
{
  if (new_value) {
	if((EXT_GLOBAL (ini_set) &U_JAVA_HOME)) free(EXT_GLOBAL(cfg)->vm_home);
	EXT_GLOBAL(cfg)->vm_home = strdup(new_value);
	assert(EXT_GLOBAL(cfg)->vm_home); if(!EXT_GLOBAL(cfg)->vm_home) exit(6);
	EXT_GLOBAL(ini_updated)|=U_JAVA_HOME;
  }
  return SUCCESS;
}
a195 10
static PHP_INI_MH(OnIniLogFile)
{
  if (new_value) {
	if((EXT_GLOBAL (ini_set) &U_LOGFILE)) free(EXT_GLOBAL(cfg)->logFile);
	EXT_GLOBAL(cfg)->logFile = strdup(new_value);
	assert(EXT_GLOBAL(cfg)->logFile); if(!EXT_GLOBAL(cfg)->logFile) exit(6);
	EXT_GLOBAL(ini_updated)|=U_LOGFILE;
  }
  return SUCCESS;
}
a199 7
  PHP_INI_ENTRY(EXT_NAME()/**/".wrapper",   NULL, PHP_INI_SYSTEM, OnIniWrapper)
  PHP_INI_ENTRY(EXT_NAME()/**/".security_policy",   NULL, PHP_INI_SYSTEM, OnIniPolicy)
  PHP_INI_ENTRY(EXT_NAME()/**/".classpath", NULL, PHP_INI_SYSTEM, OnIniClassPath)
  PHP_INI_ENTRY(EXT_NAME()/**/".libpath",   NULL, PHP_INI_SYSTEM, OnIniLibPath)
  PHP_INI_ENTRY(EXT_NAME()/**/"."/**/EXT_NAME()/**/"",   NULL, PHP_INI_SYSTEM, OnIniJava)
  PHP_INI_ENTRY(EXT_NAME()/**/"."/**/EXT_NAME()/**/"_home",   NULL, PHP_INI_SYSTEM, OnIniJavaHome)

a200 1
  PHP_INI_ENTRY(EXT_NAME()/**/".log_file",   NULL, PHP_INI_SYSTEM, OnIniLogFile)
a210 16
void EXT_GLOBAL(clone_cfg)(TSRMLS_D) {
  JG(ini_user)=EXT_GLOBAL(ini_user);
  JG(java_socket_inet) = EXT_GLOBAL(cfg)->java_socket_inet;
  if(JG(hosts)) free(JG(hosts));
  if(!(JG(hosts)=strdup(EXT_GLOBAL(cfg)->hosts))) exit(9);
  if(JG(servlet)) free(JG(servlet));
  if(!(JG(servlet)=strdup(EXT_GLOBAL(cfg)->servlet))) exit(9);
}
void EXT_GLOBAL(destroy_cloned_cfg)(TSRMLS_D) {
  if(JG(hosts)) free(JG(hosts));
  if(JG(servlet)) free(JG(servlet));
  JG(ini_user)=0;
  JG(java_socket_inet)=0;
  JG(hosts)=0;
  JG(servlet)=0;
}
a211 1
static int pid;
a223 4
  zend_class_entry *parent;
  
  pid = getpid ();

a230 3
	char *tmpdir, sockname_shm[] = SOCKNAME_SHM, sockname[] = SOCKNAME;
	/* set the default values for all undefined */
	
d232 1
a232 1
	EXT_GLOBAL(cfg)->pid = pid;
d234 3
a236 4
	EXT_GLOBAL(clone_cfg)(TSRMLS_C);
	EXT_GLOBAL(start_server) (TSRMLS_C);
	EXT_GLOBAL(destroy_cloned_cfg)(TSRMLS_C);
  } 
d247 2
d250 2
a253 29
/**
 * A stack element which keeps the current cfg.
 */
struct save_cfg {
  /** A copy of the ini options set by the user */
  int ini_user;
  /** A copy of servlet context */
  char *servlet;
  /** A copy of the host list */
  char *hosts;
  short java_socket_inet;
};
static void push_cfg(struct save_cfg*cfg TSRMLS_DC) {
  cfg->ini_user = JG(ini_user);
  cfg->java_socket_inet = JG(java_socket_inet);
  cfg->servlet = JG(servlet);
  cfg->hosts = JG(hosts);
  JG(ini_user) = EXT_GLOBAL(ini_user);
  if(!(JG(hosts)=strdup(EXT_GLOBAL(cfg)->hosts))) exit(9);
  if(!(JG(servlet)=strdup(EXT_GLOBAL(cfg)->servlet))) exit(9);
}
static void pop_cfg(struct save_cfg*cfg TSRMLS_DC) {
  JG(ini_user) = cfg->ini_user;
  JG(java_socket_inet) = cfg->java_socket_inet;
  if(JG(servlet)) free(JG(servlet)); 
  JG(servlet) = cfg->servlet;
  if(JG(hosts)) free(JG(hosts)); 
  JG(hosts) = cfg->hosts;
}
a259 21
  static const char on[]="On";
  static const char off[]="Off";
  short is_local=0, is_level;
  char*s, *server=0;
  struct save_cfg saved_cfg;

  push_cfg(&saved_cfg TSRMLS_CC);
  EXT_GLOBAL(clone_cfg)(TSRMLS_C);
  s = EXT_GLOBAL(get_server_string) (TSRMLS_C);

  if(!EXT_GLOBAL(cfg)->is_fcgi_servlet)
	server = EXT_GLOBAL(test_server) (0, &is_local, 0 TSRMLS_CC);
  else {						/* we don't own the back end */
	zval retval;
	static const char str[]=EXT_NAME()/**/"_server_name();";
	static const char name[]=EXT_NAME()/**/"_server_name";
	int val = zend_eval_string((char*)str, &retval, (char*)name TSRMLS_CC);
	if(SUCCESS==val && (Z_TYPE(retval)==IS_STRING)) server = strdup(Z_STRVAL(retval));
  }
  is_level = ((EXT_GLOBAL (ini_user)&U_LOGLEVEL)!=0);

d263 7
a269 11
#if EXTENSION == JAVA
  if(!server || is_local) {
								/* don't show default value, they may
								   not be used anyway */
	if((EXT_GLOBAL(option_set_by_user) (U_LIBRARY_PATH, EXT_GLOBAL(ini_user))))
	  php_info_print_table_row(2, EXT_NAME()/**/".libpath", EXT_GLOBAL(cfg)->ld_library_path);

								/* don't show default value, they may
								   not be used anyway */
	if((EXT_GLOBAL(option_set_by_user) (U_CLASSPATH, EXT_GLOBAL(ini_user))))
	  php_info_print_table_row(2, EXT_NAME()/**/".classpath", EXT_GLOBAL(cfg)->classpath);
d271 2
a272 27
#endif
  if(!server || is_local) {
	php_info_print_table_row(2, EXT_NAME()/**/"."/**/EXT_NAME()/**/"_home", EXT_GLOBAL(cfg)->vm_home);
	php_info_print_table_row(2, EXT_NAME()/**/"."/**/EXT_NAME(), EXT_GLOBAL(cfg)->vm);
	if((EXT_GLOBAL(option_set_by_user) (U_WRAPPER, EXT_GLOBAL(ini_user))))
	  php_info_print_table_row(2, EXT_NAME()/**/".wrapper", EXT_GLOBAL(cfg)->wrapper);
	if(strlen(EXT_GLOBAL(cfg)->logFile)==0) 
	  php_info_print_table_row(2, EXT_NAME()/**/".log_file", "<stderr>");
	else
	  php_info_print_table_row(2, EXT_NAME()/**/".log_file", EXT_GLOBAL(cfg)->logFile);
	
	php_info_print_table_row(2, EXT_NAME()/**/".log_level", is_level ? EXT_GLOBAL(cfg)->logLevel : "no value (use back-end's default level)");
	if(EXT_GLOBAL(option_set_by_user) (U_HOSTS, JG(ini_user)))  
	  php_info_print_table_row(2, EXT_NAME()/**/".hosts", JG(hosts));
	if(!EXT_GLOBAL(cfg)->policy) {
	  php_info_print_table_row(2, EXT_NAME()/**/".security_policy", "Off");
	} else {
	  /* set by user */
	  if(EXT_GLOBAL(option_set_by_user) (U_POLICY, EXT_GLOBAL(ini_user)))
		php_info_print_table_row(2, EXT_NAME()/**/".security_policy", EXT_GLOBAL(cfg)->policy);
	  else
		php_info_print_table_row(2, EXT_NAME()/**/".security_policy", "Off");
	}
	php_info_print_table_row(2, EXT_NAME()/**/" command", s);
  }
  php_info_print_table_row(2, EXT_NAME()/**/" server", server?server:"localhost");
  php_info_print_table_row(2, EXT_NAME()/**/" status", server?"running":"not running");
a273 5
  
  free(server);
  free(s);
  EXT_GLOBAL(destroy_cloned_cfg)(TSRMLS_C);
  pop_cfg(&saved_cfg TSRMLS_CC);
a283 2
  if (pid != getpid()) return SUCCESS; // workaround for a PHP/Apache 2.2.8 bug

a287 1
  EXT_GLOBAL(shutdown_library) ();
@


1.157
log
@Release-5-2-2-1
@
text
@a338 1
	EXT_GLOBAL(mktmpdir)();
a350 3

  REGISTER_STRING_CONSTANT(EXTU/**/"_PIPE_DIR", EXT_GLOBAL(cfg)->tmpdir, CONST_CS | CONST_PERSISTENT);

a476 1
	EXT_GLOBAL(rmtmpdir)();
@


1.156
log
@Release-5-2-1
@
text
@d334 1
@


1.155
log
@Release-5-2-0
@
text
@d285 1
d306 1
d321 2
d470 2
@


1.154
log
@Release-5-0-1
@
text
@a88 59

#if EXTENSION == JAVA
extern char java_inc[];
extern size_t java_inc_length();
static size_t java_stream_reader(void *handle, char *buf, size_t len TSRMLS_DC) {
  size_t end = java_inc_length()-1;
  size_t *pos = (size_t*)handle;
  size_t remain = end-*pos;
  if(end>*pos) {
	if(remain<len) len=remain;
	memcpy(buf, java_inc+*pos, len);
	*pos+=len;
	return len;
  }
  return 0;
}
#else
extern char mono_inc[];
extern size_t mono_inc_length();
static size_t java_stream_reader(void *handle, char *buf, size_t len TSRMLS_DC) {
  size_t end = mono_inc_length()-1;
  size_t *pos = (size_t*)handle;
  size_t remain = end-*pos;
  if(end>*pos) {
	if(remain<len) len=remain;
	memcpy(buf, mono_inc+*pos, len);
	*pos+=len;
	return len;
  }
  return 0;
}
#endif
static void java_stream_closer(void *handle TSRMLS_DC) {
}
static long java_stream_fteller(void *handle TSRMLS_DC) {
  return (long)*(size_t*)handle;
}

static zend_op_array *java_compile_string(char*name TSRMLS_DC) {
  zend_file_handle file_handle = {0};
  zend_stream stream = {0};
  size_t pos = 0;
  zend_op_array *array;

  stream.handle = &pos;
  stream.reader = java_stream_reader;
  stream.closer = java_stream_closer;
#if ZEND_EXTENSION_API_NO >= 220051025
  stream.fteller = java_stream_fteller;
#endif
  file_handle.type = ZEND_HANDLE_STREAM;
  file_handle.filename = name;
  file_handle.free_filename = 0;
  file_handle.handle.stream = stream;
  array = zend_compile_file(&file_handle, ZEND_REQUIRE_ONCE TSRMLS_CC);
  zend_destroy_file_handle(&file_handle TSRMLS_CC);
  return array;
}
  
a90 25
  static zend_op_array *ar;
  zend_op_array *current;
  zval *result = 0;

  if(!ar) {
	ar = java_compile_string(EXT_NAME()/**/".inc" TSRMLS_CC);
  }
  if(!ar) abort();
  EG(return_value_ptr_ptr) = &result;
  current = EG(active_op_array);
  EG(active_op_array) = ar;
  EG(no_extensions)=1;
  zend_execute(ar TSRMLS_CC);
  EG(no_extensions)=0;
#if 1
  destroy_op_array(ar TSRMLS_CC);
  efree(ar);
  ar = 0;
#endif
  if (!EG(exception)) {
	if (EG(return_value_ptr_ptr)) {
	  zval_ptr_dtor(EG(return_value_ptr_ptr));
	}
  }
  EG(active_op_array) = current;
a499 77
#if 0
static size_t count_catch_blocks (zend_op_array *op_array) 
{
  size_t count = 0;
  opline = op_array->opcodes+2;
  end = opline + op_array->last;
  while (opline < end) {
	if (opline[-2]==42 && opline[-1]==109 && opline[0]==107) {
	  count++;
	}
  }
  return count;
}

static void grow_op_array  (zend_op_array *op_array, size_t size)
{
  op_array->size = size;
  op_array->opcodes = 
	erealloc(op_array->opcodes, (op_array->size)*sizeof(zend_op));
}

static void patch_addresses (zend_op_array *op_array, size_t pos)
{
  opline = op_array->opcodes + pos;
  end = opline + op_array->last;
  while (opline < end) {
	switch (opline->opcode) {
	case ZEND_JMP:
	  opline->op1.u.jmp_addr += 1;
	  break;
	case ZEND_JMPZ:
	case ZEND_JMPNZ:
	case ZEND_JMPZ_EX:
	case ZEND_JMPNZ_EX:
	  opline->op2.u.jmp_addr += 1;
	  break;
	  }
  }
}
static void patch_position (zend_op_array *op_array, size_t pos)
{
  memmove (op_array+pos+1, op_array+pos, op_array->last-pos);
  op_array[pos]=ZEND_NOP;
  patch_addresses(op_array, ++pos);
}

static void patch_op_array (zend_op_array *op_array)
{
  opline = op_array->opcodes+2;
  end = opline + op_array->last;
  while (opline < end) {
	if (opline[-2]==42 && opline[-1]==109 && opline[0]==107) {
	  patch_position (op_array, opline-op_array);
	  opline++;
	}
  }
}
#endif
/** 
 * Modify the oparray to gain speed. 
 *
 * The PHP/Java Bridge protocol supports an asynchronous protocol mode
 * which allows the front- and back end to run in parallel. This mode
 * is 20 times faster than the default protocol mode, but, at certain
 * points the state must be synchronized.
 *
 * The following code inserts the synchronization points. Since it
 * depends on the way the language scanner works, this code is
 * currently not portable.
 */
void EXT_GLOBAL(op_array_handler)(zend_op_array *op_array) 
{
#if 0
  patch_op_array();
#endif
}

d509 1
a509 1
  "(C) 2003-2007 by the authors",
d516 1
a516 1
  EXT_GLOBAL(op_array_handler),           /* op_array_handler_func_t */
@


1.153
log
@Release-5-0-0
@
text
@d161 1
d163 1
@


1.152
log
@Release-4-3-3
@
text
@d425 1
a425 1
	REGISTER_STRING_CONSTANT(EXT_NAME()/**/"_HOSTS", EXT_GLOBAL(cfg)->hosts, CONST_CS | CONST_PERSISTENT);
d427 1
a427 1
	  REGISTER_STRING_CONSTANT(EXT_NAME()/**/"_SERVLET", EXT_GLOBAL(cfg)->servlet, CONST_CS | CONST_PERSISTENT);
d430 1
a430 1
  REGISTER_STRING_CONSTANT(EXT_NAME()/**/"_PIPE_DIR", EXT_GLOBAL(cfg)->tmpdir, CONST_CS | CONST_PERSISTENT);
@


1.151
log
@Release-4-3-0
@
text
@d49 1
a49 1
# include "java_php4.c"
d69 2
d562 123
@


1.150
log
@Release-4-3-0
@
text
@d88 1
d103 16
d125 1
a125 1
static zend_op_array *java_compile_string(zval*func, char*name TSRMLS_DC) {
a149 1
  zval func;
d153 1
a153 2
	ZVAL_STRING(&func, java_inc,0);
	ar = java_compile_string(&func, "Java.inc" TSRMLS_CC);
d186 6
a191 1
	RETURN_LONG(atoi(EXT_GLOBAL(cfg)->default_sockname));
a199 1
  /* TODO: Add XML parser and writer callbacks from parser.c */
d423 1
a423 1
	REGISTER_STRING_CONSTANT("JAVA_HOSTS", EXT_GLOBAL(cfg)->hosts, CONST_CS | CONST_PERSISTENT);
d425 1
a425 1
	  REGISTER_STRING_CONSTANT("JAVA_SERVLET", EXT_GLOBAL(cfg)->servlet, CONST_CS | CONST_PERSISTENT);
d428 1
a428 1
  REGISTER_STRING_CONSTANT("JAVA_PIPE_DIR", EXT_GLOBAL(cfg)->tmpdir, CONST_CS | CONST_PERSISTENT);
d474 1
d534 1
@


1.149
log
@Release-4-2-2
@
text
@d48 1
a48 1
#if !defined(ZEND_ENGINE_2) || EXTENSION == MONO
d398 6
a403 1
  if(EXT_GLOBAL(option_set_by_user)(U_HOSTS, EXT_GLOBAL(ini_user)) && !(!EXT_GLOBAL(cfg)->is_fcgi_servlet)) {
d405 1
a405 1
	if(EXT_GLOBAL(option_set_by_user)(U_SERVLET, EXT_GLOBAL(ini_user)) && !(!EXT_GLOBAL(cfg)->is_fcgi_servlet))
@


1.148
log
@Release-4-2-1
@
text
@a404 1
  REGISTER_LONG_CONSTANT("JAVA_CACHE_ENABLED", 0, CONST_CS | CONST_PERSISTENT); //FIXME
@


1.147
log
@Release-4-2-0
@
text
@d398 6
a403 2
  REGISTER_STRING_CONSTANT("JAVA_HOSTS", EXT_GLOBAL(cfg)->hosts, CONST_CS | CONST_PERSISTENT);
  REGISTER_STRING_CONSTANT("JAVA_SERVLET", EXT_GLOBAL(cfg)->servlet, CONST_CS | CONST_PERSISTENT);
d405 1
d446 2
a447 2
  short is_local, is_level;
  char*s, *server;
d452 10
a461 1
  server = EXT_GLOBAL(test_server) (0, &is_local, 0 TSRMLS_CC);
d468 1
a468 1
  if(is_local) {
d489 4
a492 5
  }
  php_info_print_table_row(2, EXT_NAME()/**/".log_level", is_level ? EXT_GLOBAL(cfg)->logLevel : "no value (use back-end's default level)");
  if(EXT_GLOBAL(option_set_by_user) (U_HOSTS, JG(ini_user)))  
	php_info_print_table_row(2, EXT_NAME()/**/".hosts", JG(hosts));
  if(!server || is_local) {
d502 1
d504 1
a504 1
  php_info_print_table_row(2, EXT_NAME()/**/" command", s);
a505 1
  php_info_print_table_row(2, EXT_NAME()/**/" server", server?server:"localhost");
@


1.146
log
@Release-4-1-8
@
text
@a65 8
#include "java_bridge.h"
#include "api.h"
#include "php_java_snprintf.h"

#ifdef ZEND_ENGINE_2
#include "zend_interfaces.h"
#include "zend_exceptions.h"
#endif
d67 1
d77 11
d108 1
a108 1
static zend_op_array *java_compile_string(zval*func, char*name) {
d117 1
d119 1
d124 1
a124 1
  array = zend_compile_file(&file_handle, ZEND_REQUIRE_ONCE);
d138 1
a138 1
	ar = java_compile_string(&func, "Java.inc");
a478 13
#if EXTENSION == JAVA
  if(EXT_GLOBAL(option_set_by_user) (U_SERVLET, JG(ini_user))) {
	char buf[255], *url;
	if(JG(servlet)) {
	  EXT_GLOBAL(snprintf)(buf, sizeof buf, "http%s://%s/%s", 
						   (EXT_GLOBAL(ini_user) & U_SECURE) ?"s":"", server, JG(servlet));
	  url = buf;
	} else {
	  url = (char*)off;
	}
	php_info_print_table_row(2, EXT_NAME()/**/".servlet", url);
  }
#endif
@


1.145
log
@Release-4-1-7
@
text
@d46 6
d84 39
a122 18
#ifdef __MINGW32__
static const int java_errno=0;
int *__errno (void) { return (int*)&java_errno; }
#ifdef ZEND_ENGINE_2
#define php_info_print_table_row(a, b, c) php_info_print_table_row_ex(a, "v", b, c)
#else
#define php_info_print_table_end() php_printf("</table><br />\n")
#endif
#endif

/** used by classNameCache */
static void classNameCacheEl_dtor(void *v) { zval_ptr_dtor((zval**)v); }

/**
 * Called when a new request starts.  Opens a connection to the
 * back-end, creates an instance of the proxyenv structure and clones
 * the servlet, hosts and ini_user flags.
 */
d125 23
a147 2
  if(!EXT_GLOBAL(cfg)->persistent_connections && JG(jenv)) {
	php_error(E_ERROR, "php_mod_"/**/EXT_NAME()/**/"(%d): Synchronization problem, rinit with active connection called. Cannot continue, aborting now. Please report this to: php-java-bridge-users@@lists.sourceforge.net",59);
d149 1
a149 2
  JG(is_closed)=0;
  zend_hash_init(&JG(classNameCache), 0, 0, classNameCacheEl_dtor, 0);
a153 29
 * Close or recycle the current connection.
 * If that failed, shut down all other connections as well.
 * @@return always true
 */
static short shutdown_connections(TSRMLS_D) {
  proxyenv *current = JG(jenv);
  HashTable *connections = &JG(connections);
  short success = EXT_GLOBAL(close_connection) (JG(jenv), EXT_GLOBAL(cfg)->persistent_connections TSRMLS_CC);
  if(!success) {				/* error: close all connections */
	proxyenv **env;

	/* destroy default connection */
	JG(peer)=JG(peerr)=-1; JG(servlet_ctx)=0;

	zend_hash_internal_pointer_reset(connections);
	while(SUCCESS==zend_hash_get_current_data(connections, (void**)&env)) {
	  if(*env!=current) {
		EXT_GLOBAL(activate_connection)(*env TSRMLS_CC);
		EXT_GLOBAL(close_connection) (*env, 0 TSRMLS_CC);
	  }
	  zend_hash_move_forward(connections);
	}
	zend_hash_clean(connections);
  }
  JG(jenv)=0;
  return 1;
}

/**
a158 7
  shutdown_connections(TSRMLS_C);
  if(JG(cb_stack)) { 
	zend_stack_destroy(JG(cb_stack));
	efree(JG(cb_stack)); JG(cb_stack) = 0; 
  }
  JG(is_closed)=1;
  zend_hash_destroy(&JG(classNameCache));
d162 1
a162 390
static short can_reconnect(TSRMLS_D) {
  return EXT_GLOBAL(cfg)->persistent_connections &&
	!(*JG(jenv))->peer_redirected;
}
	
/** try calling the procedure again with a new connection, if
	persistent connections are enabled */
#define API_CALL(proc) \
  EXT_GLOBAL(proc)(INTERNAL_FUNCTION_PARAM_PASSTHRU) ||	\
  (can_reconnect(TSRMLS_C) &&							\
   shutdown_connections(TSRMLS_C) &&					\
   EXT_GLOBAL(proc)(INTERNAL_FUNCTION_PARAM_PASSTHRU))

/**
 * Proto: object java_last_exception_get(void)
 *
 * \anchor doc20
 * Get last Java exception
 * \deprecated Use PHP5 try/catch instead.
 */
EXT_FUNCTION(EXT_GLOBAL(last_exception_get))
{
  API_CALL(last_exception_get);
}


/**
 * Proto: void java_last_exception_clear(void)
 *
 * \anchor doc21
 * Clear last java extension.
 * \deprecated Use PHP5 try/catch instead.
*/
EXT_FUNCTION(EXT_GLOBAL(last_exception_clear))
{
  API_CALL(last_exception_clear);
}

/**
 * Proto: void java_set_file_encoding(string)
 *
 * Set the java file encoding, for example UTF-8 or ASCII. Needed
 * because php does not support unicode. All string to byte array
 * conversions use this encoding. Example: \code
 * java_set_file_encoding("ISO-8859-1"); \endcode
 */
EXT_FUNCTION(EXT_GLOBAL(set_file_encoding))
{
  API_CALL(set_file_encoding);
}


/**
 * Proto: void java_require(string path) or java_set_library_path(string path)
 *
 * \anchor doc23
 * Set the library path. Example: 
 * \code
 * java_require("foo.jar;bar.jar"); 
 * \endcode
 *
 * The .jar files should be stored in /usr/share/java or
 * extension_dir/lib one of its sub-directories. However, it is also
 * possible to fetch .jar files from a remote server, for example:
 * \code
 * java_require("http://php-java-bridge.sf.net/kawa.jar;...");
 * \endcode
 *
 * Note that the classloader isolates the loaded libraries: When you
 * call java_require("foo.jar"); java_require("bar.jar"), the classes
 * from foo cannot see the classes loaded from bar. If you get a
 * NoClassDefFound error saying that one of your classes cannot
 * access the library you have loaded, you must reset the back-end to
 * clear the loader cache and load your classes and the library in one
 * java_require() call.
 */
EXT_FUNCTION(EXT_GLOBAL(require))
{
  API_CALL(require);
}

/**
 * Proto:  bool java_instanceof(object object, object clazz)
 *
 * \anchor doc24
 * Tests if object is an instance of clazz. 
 * Example: 
 * \code
 * return($o instanceof Java && $c instanceof Java && java_instanceof($o, $c)); 
 * \endcode
 */
EXT_FUNCTION(EXT_GLOBAL(instanceof))
{
  API_CALL(instanceof);
}

/**
 * Proto: object java_session([string], [bool], [exact number]) or object java_get_session([string], [bool], [exact number])
 *
 * \anchor doc25
 * Return a session handle.  When java_session() is called without 
 * arguments, the session is shared with java.
 * Example: 
 * \code
 * java_get_session()->put("key", new Java("java.lang.Object"));
 * [...]
 * \endcode
 * The java components (jsp, servlets) can retrieve the value, for
 * example with:
 * \code getSession().getAttribute("key"); \endcode
 *
 * When java_get_session() is called with a session name, the session
 * is not shared with java and no cookies are set. Example:
 * \code
 * java_get_session("myPublicApplicationStore")->put("key", "value");
 * \endcode
 *
 * When java_get_session() is called with a second argument set to true,
 * a new session is allocated, the old session is destroyed if necessary.
 * Example:
 * \code
 * java_get_session(null, true)->put("key", "val");
 * \endcode.
 *
 * The optional third argument specifies the default lifetime of the session, it defaults to \code session.gc_maxlifetime \endcode. The value 0 means that the session never times out.
 *
 * @@see get_context()
 */
EXT_FUNCTION(EXT_GLOBAL(get_session))
{
  API_CALL(session);
}

/**
 * Proto: object java_context(void) or object java_get_context(void)
 *
 * \anchor doc26
 * Returns the jsr223 script context handle.
 *
 * Example which closes over the current environment and passes it back to java:
 * \code
 * java_get_context()->call(java_closure()) || die "Script should be called from java";
 * \endcode
 *
 * It is possible to access implicit web objects (the session, the
 * application store etc.) from the context. Please see the JSR223
 * documentation for details. Example:
 * \code
 * java_get_context()->getHttpServletRequest();
 * \endcode
 * @@see get_session()
 */
EXT_FUNCTION(EXT_GLOBAL(get_context))
{
  API_CALL(context);
}

/**
 * Proto: string java_server_name(void) or string java_get_server_name(void)
 *
 * Returns the name of the back-end or null, if the back-end is not running. Example:
 * \code
 * $backend = java_get_server_name();
 * if(!$backend) wakeup_administrator("back-end not running");
 * echo "Connected to the back-end: $backend\n";
 * \endcode
 */
EXT_FUNCTION(EXT_GLOBAL(get_server_name))
{
  proxyenv *jenv;
  if (ZEND_NUM_ARGS()!=0) WRONG_PARAM_COUNT;

  jenv = EXT_GLOBAL(try_connect_to_server)(TSRMLS_C);
  if(jenv && (*jenv)->server_name) {
	RETURN_STRING((*jenv)->server_name, 1);
  }
  RETURN_NULL();
}

/**
 * Proto: void java_reset(void);
 *
 * Tries to reset the back-end to
 * its initial state. If the call succeeds, all 
 * caches are gone. 
 *
 * Example:
 * \code echo "Resetting back-end to initial state\n";
 * java_reset();
 * \endcode
 *
 * This procedure does nothing when the back-end runs
 * in a servlet environment or an application server. 
 */
EXT_FUNCTION(EXT_GLOBAL(reset))
{
  API_CALL(reset);
}

static int do_cast(zval *readobj, zval *writeobj, int type, int should_free TSRMLS_DC) {
  proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  long obj = 0;
  zval free_obj;

  if(!jenv) return FAILURE;
  if((*jenv)->handle==(*jenv)->async_ctx.handle_request) { /* async protocol */
	php_error(E_ERROR, "php_mod_"/**/EXT_NAME()/**/"(%d): cast() invalid while in stream mode", 21);
	return FAILURE;
  }

  if (should_free)
	free_obj = *writeobj;

  if(jenv && (Z_TYPE_P(readobj) == IS_OBJECT)) {
	EXT_GLOBAL(get_jobject_from_object)(readobj, &obj TSRMLS_CC);
  }

  if(obj) {
	INIT_PZVAL(writeobj);
    ZVAL_NULL(writeobj);
	switch(type) {

	case IS_STRING:
	  (*jenv)->writeInvokeBegin(jenv, 0, "castToString", 0, 'I', writeobj);
	  (*jenv)->writeObject(jenv, obj);
#ifdef ZEND_ENGINE_2
	  if (instanceof_function(Z_OBJCE_P(readobj), EXT_GLOBAL(exception_class_entry) TSRMLS_CC)) {
		zval *trace = 0;
		zval fname;
		ZVAL_STRINGL(&fname, "getTraceAsString", sizeof("gettraceasstring")-1, 0);
		call_user_function_ex(0, &readobj, &fname, &trace, 0, 0, 1, 0 TSRMLS_CC);
		if(trace) 
		  (*jenv)->writeString(jenv, Z_STRVAL_P(trace), Z_STRLEN_P(trace));
	  }
#endif
	  obj = (*jenv)->writeInvokeEnd(jenv);
	  break;
	case IS_BOOL:
	  (*jenv)->writeInvokeBegin(jenv, 0, "castToBoolean", 0, 'I', writeobj);
	  (*jenv)->writeObject(jenv, obj);
	  obj = (*jenv)->writeInvokeEnd(jenv);
	  break;
	case IS_LONG:
	  (*jenv)->writeInvokeBegin(jenv, 0, "castToExact", 0, 'I', writeobj);
	  (*jenv)->writeObject(jenv, obj);
	  obj = (*jenv)->writeInvokeEnd(jenv);
	  break;
	case IS_DOUBLE:
	  (*jenv)->writeInvokeBegin(jenv, 0, "castToInexact", 0, 'I', writeobj);
	  (*jenv)->writeObject(jenv, obj);
	  obj = (*jenv)->writeInvokeEnd(jenv);
	  break;
	case IS_OBJECT: 
	  *writeobj = *readobj;
	  zval_copy_ctor(writeobj);
	  convert_to_object(writeobj);
	  break;
	case IS_ARRAY: 
#ifdef ZEND_ENGINE_2
	  (*jenv)->writeInvokeBegin(jenv, 0, "castToArray", 0, 'I', writeobj);
	  (*jenv)->writeObject(jenv, obj);
	  obj = (*jenv)->writeInvokeEnd(jenv);
#else
	  obj = 0; // failed
#endif
	  break;
	default:
	  obj = 0; // failed
	  break;
	}
  } else {
	if(jenv) {
	  obj = 1;
	  INIT_PZVAL(writeobj);
	  ZVAL_NULL(writeobj);

	  switch(type) {
		
	  case IS_STRING:
		*writeobj = *readobj;
		zval_copy_ctor(writeobj);
		convert_to_string(writeobj);
		break;
	  case IS_BOOL:
		*writeobj = *readobj;
		zval_copy_ctor(writeobj);
		convert_to_boolean(writeobj);
		break;
	  case IS_LONG:
		*writeobj = *readobj;
		zval_copy_ctor(writeobj);
		convert_to_long(writeobj);
		break;
	  case IS_DOUBLE:
		*writeobj = *readobj;
		zval_copy_ctor(writeobj);
		convert_to_double(writeobj);
		break;
	  case IS_OBJECT: 
		*writeobj = *readobj;
		zval_copy_ctor(writeobj);
		convert_to_object(writeobj);
		break;
	  case IS_ARRAY: 
		*writeobj = *readobj;
		zval_copy_ctor(writeobj);
		convert_to_array(writeobj);
		break;
	  default:
		obj = 0; // failed
		break;
	  }
	}
  }
  if (should_free)
	zval_dtor(&free_obj);

  return obj?SUCCESS:FAILURE;
}

/**
 * Proto: object java_cast(object, string).
 *
 * \anchor doc88
 * Converts the java object obj into a PHP object. The second argument
 * must be [s]tring, [b]oolean, [i]nteger, [f]loat or [d]ouble,
 * [a]rray, [n]ull or [o]bject (which does nothing).<p> This procedure
 * is for compatibility with the pure PHP implementation, in the C
 * implementation this procedure is called automatically for each type
 * cast or when settype() is called.
 *
 *
 * Example:
 * \code 
 * $str = new java("java.lang.String", "12");
 * echo $str;
 * => [o(String):"12"]
 * $phpString = "$str";
 * echo $phpString;
 * => "12"
 * $phpNumber = (integer)$str;
 * echo $phpNumber;
 * => 12
 * $phpNumber2 = java_cast($str, "integer");
 * echo $phpNumber2;
 * => 12
 * \endcode
 *
 *
 */
EXT_FUNCTION(EXT_GLOBAL(cast))
{
  proxyenv *jenv;
  zval **object=0, **type=0;
  int tval, argc=ZEND_NUM_ARGS();
  char *s;
  if (argc!=2 || zend_get_parameters_ex(argc, &object, &type) == FAILURE)
    WRONG_PARAM_COUNT;
  convert_to_string_ex(type);
  s = Z_STRVAL_PP(type);
  switch(*s) {
  case 'S': case 's': tval = IS_STRING; break;
  case 'B': case 'b': tval = IS_BOOL; break;
  case 'L': case 'l': case 'I': case 'i': tval = IS_LONG; break;
  case 'D': case 'd': case 'F': case 'f': tval = IS_DOUBLE; break;
  case 'A': case 'a': tval = IS_ARRAY; break;
  case 'N': case 'n': tval = IS_NULL; break;
  case 'O': case 'o': tval = IS_OBJECT; break;
  }
  do_cast(*object, return_value, tval, 0 TSRMLS_CC);
}

/**
 * Proto: void java_begin_document(void)
 *
 * \anchor doc29
 * Enters stream mode (asynchronuous protocol). The statements are
 * sent to the back-end in one XML stream.
*/
EXT_FUNCTION(EXT_GLOBAL(begin_document))
{
  API_CALL(begin_document);
}

/**
 * Proto: void java_end_document(void)
 *
 * Ends stream mode.
*/
EXT_FUNCTION(EXT_GLOBAL(end_document))
d164 2
a165 40
  API_CALL(end_document);
}

/**
 * \anchor doc98
 * Proto: void java(string)
 *
 * Returns a reference to the java class which name is passed as an argument.
 *
 * Example:
 * \code 
 * print_r (java_values(java("java.lang.System")->getProperties()));
 * \endcode
*/
EXT_FUNCTION(EXT)
{
  static const char s1[] = "new JavaClass(\"";
  static const char s2[] = "\")";
  static const char name[] = "java";
  char *s, *arg;
  zval **str, **pobj;
  int argc = ZEND_NUM_ARGS();
  size_t len;;
  if (ZEND_NUM_ARGS()!=1 || zend_get_parameters_ex(1, &str) == FAILURE) WRONG_PARAM_COUNT;
  convert_to_string_ex(str);
  s = Z_STRVAL_PP(str);
  len = Z_STRLEN_PP(str);

  if(SUCCESS==zend_hash_find(&JG(classNameCache), s, len, (void**)&pobj)) {
	*return_value = **pobj;
	zval_copy_ctor(return_value);
	return;
  }	

  arg = malloc(sizeof(s1)+(sizeof(s2)-1)+strlen(s));
  strcpy(arg, s1);
  strcat(arg, s);
  strcat(arg, s2);
  if((SUCCESS!=zend_eval_string(arg, return_value, (char*)name TSRMLS_CC)) || (Z_TYPE_P(return_value)!=IS_OBJECT)) {
	WRONG_PARAM_COUNT;
d167 1
a167 2
	zend_hash_add(&JG(classNameCache), s, len, &return_value, sizeof(pval *), NULL);
	zval_add_ref(&return_value);
a170 257
#ifndef ZEND_ENGINE_2
EXT_FUNCTION(EXT_GLOBAL(__sleep))
{
  API_CALL(serialize);
}
EXT_FUNCTION(EXT_GLOBAL(__wakeup))
{
  API_CALL(deserialize);
}
#endif

/** 
 * Proto: mixed java_values(val) or mixed java_get_values(object ob)
 *
 * \anchor doc31
 * Evaluates the object and fetches its content, if possible.
 * A java array, Map or Collection object is returned
 * as a php array. An array, Map or Collection proxy is returned as a java array, Map or Collection object, and a null proxy is returned as null. All values of java types for which a primitive php type exists are returned as php values. Everything else is returned unevaluated. Please make sure that the values do not not exceed
 * php's memory limit. Example:
 *
 * \code
 * $str = new java("java.lang.String", "hello");
 * echo $str;
 * => [o(String):"hello"]
 * echo java_values($str);
 * => hello
 * $chr = $str->toCharArray();
 * echo $chr;
 * => [o(array_of-C):"[C@@1b10d42"]
 * $ar = java_values($chr);
 * print $ar;
 * => Array
 * print $ar[0];
 * => [o(Character):"h"]
 * print java_values($ar[0]);
 * => h
 * \endcode
 */
EXT_FUNCTION(EXT_GLOBAL(get_values))
{
  API_CALL(values);
}

/**
 * Proto: object java_closure([object],[array|string],[object]) or object java_get_closure([object],[array|string],[object])
 *
 * \anchor doc32
 * Closes over the php environment and packages it up as a java
 * class. Example: 
 * \code
 * function toString() {return "helloWorld";};
 * $object = java_get_closure();
 * echo "Java says that PHP says: $object\n";
 * \endcode
 *
 * When a php instance is supplied as an argument, the environment will be used
 * instead. When a string or key/value map is supplied as a second argument,
 * the java procedure names are mapped to the php procedure names. Example:
 * \code
 * function hello() {return "hello";};
 * echo (string)java_get_closure(null, "hello");
 * \endcode
 * 
 * When an array of java interfaces is supplied as a third argument,
 * the environment must implement these interfaces.
 * Example:
 * \code
 * class Listener {
 *   function actionPerformed($actionEvent) {
 *   ...
 *   }
 * }
 * function getListener() {
 *   return java_get_closure(new Listener(), null, array(new Java("java.awt.event.ActionListener")));
 * }
 * \endcode
 */
EXT_FUNCTION(EXT_GLOBAL(get_closure))
{
  API_CALL(get_closure);
}

/**
 * Only for internal use.
 */
EXT_FUNCTION(EXT_GLOBAL(exception_handler))
{
  zval **pobj;
  struct cb_stack_elem *stack_elem;
  int err = zend_stack_top(JG(cb_stack), (void**)&stack_elem); assert(SUCCESS==err);

  if (ZEND_NUM_ARGS()!=1 || zend_get_parameters_ex(1, &pobj) == FAILURE) WRONG_PARAM_COUNT;
  MAKE_STD_ZVAL(stack_elem->exception);
  *stack_elem->exception=**pobj;
  zval_copy_ctor(stack_elem->exception);

  RETURN_NULL();
}

/**
 * Only for internal use
 */
static void check_php4_exception(TSRMLS_D) {
#ifndef ZEND_ENGINE_2
  proxyenv*jenv = JG(jenv);
  struct cb_stack_elem *stack_elem;
  int err = zend_stack_top(JG(cb_stack), (void**)&stack_elem); assert(SUCCESS==err);
  (*jenv)->writeInvokeBegin(jenv, 0, "lastException", 0, 'P', stack_elem->exception);
  (*jenv)->writeInvokeEnd(jenv);
#endif
}
static int allocate_php4_exception(TSRMLS_D) {
#ifndef ZEND_ENGINE_2
  proxyenv*jenv = JG(jenv);
  struct cb_stack_elem *stack_elem;
  int err = zend_stack_top(JG(cb_stack), (void**)&stack_elem); assert(SUCCESS==err);
  MAKE_STD_ZVAL(stack_elem->exception);
  ZVAL_NULL(stack_elem->exception);
  (*jenv)->writeInvokeBegin(jenv, 0, "lastException", 0, 'P', stack_elem->exception);
  (*jenv)->writeObject(jenv, 0);
  (*jenv)->writeInvokeEnd(jenv);
#endif
  return 1;
}
static void call_with_handler(char*handler, const char*name TSRMLS_DC) {
  if(allocate_php4_exception(TSRMLS_C)) {
	int err, e;
	struct cb_stack_elem *stack_elem;
#ifdef ZEND_ENGINE_2
#if ZEND_EXTENSION_API_NO >= 220060519
	php_set_error_handling(EH_THROW, zend_exception_get_default(TSRMLS_C) TSRMLS_CC);
#else
	php_set_error_handling(EH_THROW, zend_exception_get_default() TSRMLS_CC);
#endif
#endif
	e = zend_stack_top(JG(cb_stack), (void**)&stack_elem); assert(SUCCESS==e);
	err = 
	  zend_eval_string((char*)handler, *stack_elem->retval_ptr, (char*)name TSRMLS_CC);

#ifdef ZEND_ENGINE_2
	php_std_error_handling();
#endif
	
	if (err != SUCCESS) { 
	  php_error(E_WARNING, "php_mod_"/**/EXT_NAME()/**/"(%d): Could not call user function: %s.", 22, Z_STRVAL_P(stack_elem->func));
	}
  }
}

static int java_call_user_function_ex(HashTable *function_table, zval **object_pp, zval *function_name, zval **retval_ptr_ptr, int param_count, zval **params[], int no_separation, HashTable *symbol_table TSRMLS_DC) {
#if !defined(ZEND_ENGINE_2) && defined(__MINGW32__)
  int i, err;
  zval *local_retval;
  zval **params_array = (zval **) emalloc(sizeof(zval *)*param_count);
  for (i=0; i<param_count; i++) {
	params_array[i] = *params[i];
	zval_copy_ctor(params_array[i]);
  }
  MAKE_STD_ZVAL(local_retval);
  err = call_user_function(function_table, object_pp, function_name, local_retval, param_count, params_array TSRMLS_CC);
  *retval_ptr_ptr=local_retval;
  zval_copy_ctor(*retval_ptr_ptr);
  efree(params_array);

  /* this is a dummy which is never called. It is here so that gcc
	 enables auto-import. */
  assert(!function_table);
  if(function_table) call_user_function_ex(function_table, object_pp, function_name, retval_ptr_ptr, param_count, params, no_separation, symbol_table TSRMLS_CC);

  return err;
#else
  return call_user_function_ex(function_table, object_pp, function_name, retval_ptr_ptr, param_count, params, no_separation, symbol_table TSRMLS_CC);
#endif
}
static void call_with_params(int count, zval ***func_params TSRMLS_DC) {
  if(allocate_php4_exception(TSRMLS_C)) {/* checked and destroyed in client. handle_exception() */
	struct cb_stack_elem *stack_elem;
	int err, e;
/* #ifdef ZEND_ENGINE_2 */
/* 	php_set_error_handling(EH_THROW, zend_exception_get_default() TSRMLS_CC); */
/* #endif */
	e = zend_stack_top(JG(cb_stack), (void**)&stack_elem);
	assert(SUCCESS==e);
	err = java_call_user_function_ex(0, stack_elem->object, stack_elem->func, stack_elem->retval_ptr, count, func_params, 1, 0 TSRMLS_CC);
/* #ifdef ZEND_ENGINE_2 */
/* 	php_std_error_handling(); */
/* #endif */
	if (err != SUCCESS) {
	  php_error(E_WARNING, "php_mod_"/**/EXT_NAME()/**/"(%d): Could not call user function: %s.", 23, Z_STRVAL_P(stack_elem->func));
	}
  }
}

/**
 * Only for internal use.
 */
EXT_FUNCTION(EXT_GLOBAL(call_with_exception_handler))
{
  int count, current, err;
  struct cb_stack_elem *stack_elem;
  err = zend_stack_top(JG(cb_stack), (void**)&stack_elem); assert(SUCCESS==err);
  if (ZEND_NUM_ARGS()==1) {
	*return_value=*stack_elem->func_params;
	zval_copy_ctor(return_value);
	return;
  }
  /* for functions in the global environment */
  if(!*stack_elem->object) {
	static const char name[] = "call_global_func_with_exception_handler";
	static const char call_user_funcH[] = "call_user_func_array('";
	static const char call_user_funcT[] = "',"/**/EXT_NAME()/**/"_call_with_exception_handler(true));";
	char *handler=emalloc(sizeof(call_user_funcH)-1+Z_STRLEN_P(stack_elem->func)+sizeof(call_user_funcT));
	assert(handler); if(!handler) exit(9);
	strcpy(handler, call_user_funcH); 
	strcat(handler, Z_STRVAL_P(stack_elem->func));
	strcat(handler, call_user_funcT);

	MAKE_STD_ZVAL(*stack_elem->retval_ptr); ZVAL_NULL(*stack_elem->retval_ptr);
	call_with_handler(handler, name TSRMLS_CC);
	check_php4_exception(TSRMLS_C);
	efree(handler);
  } else {
	zval ***func_params;
	HashTable *func_params_ht;
	/* for methods */
	current=0;
	func_params_ht = Z_ARRVAL_P(stack_elem->func_params);
	count = zend_hash_num_elements(func_params_ht);
	func_params = safe_emalloc(sizeof(zval **), count, 0);
	for (zend_hash_internal_pointer_reset(func_params_ht);
		 zend_hash_get_current_data(func_params_ht, (void **) &func_params[current]) == SUCCESS;
		 zend_hash_move_forward(func_params_ht)
		 ) {
	  current++;
	}
	
	call_with_params(count, func_params TSRMLS_CC);
	check_php4_exception(TSRMLS_C);
	efree(func_params);
  }
	
  RETURN_NULL();
}

/**
 * Proto: void java_inspect(object);
 *
 * Returns the contents (public fields, public methods, public
 * classes) of object as a string.
 * Example:
 * \code
 * echo java_inspect(java_get_context());
 * \endcode
 */
EXT_FUNCTION(EXT_GLOBAL(inspect)) {
  API_CALL(inspect);
}
d173 2
a174 32
  EXT_FE(EXT_GLOBAL(last_exception_get), NULL)
  EXT_FE(EXT_GLOBAL(last_exception_clear), NULL)
  EXT_FE(EXT_GLOBAL(set_file_encoding), NULL)
  EXT_FE(EXT_GLOBAL(instanceof), NULL)

  EXT_FE(EXT_GLOBAL(require),  NULL)
  EXT_FALIAS(EXT_GLOBAL(set_library_path), EXT_GLOBAL(require),  NULL)

  EXT_FE(EXT_GLOBAL(get_session), NULL)
  EXT_FALIAS(EXT_GLOBAL(session), EXT_GLOBAL(get_session), NULL)

  EXT_FE(EXT_GLOBAL(get_context), NULL)
  EXT_FALIAS(EXT_GLOBAL(context), EXT_GLOBAL(get_context), NULL)

  EXT_FE(EXT_GLOBAL(get_server_name), NULL)
  EXT_FALIAS(EXT_GLOBAL(server_name), EXT_GLOBAL(get_server_name), NULL)

  EXT_FE(EXT_GLOBAL(get_values), NULL)
  EXT_FALIAS(EXT_GLOBAL(values), EXT_GLOBAL(get_values), NULL)

  EXT_FE(EXT_GLOBAL(get_closure), NULL)
  EXT_FALIAS(EXT_GLOBAL(closure), EXT_GLOBAL(get_closure), NULL)

  EXT_FE(EXT_GLOBAL(call_with_exception_handler), NULL)
  EXT_FE(EXT_GLOBAL(exception_handler), NULL)
  EXT_FE(EXT_GLOBAL(inspect), NULL)
  EXT_FE(EXT_GLOBAL(reset), NULL)
  EXT_FE(EXT_GLOBAL(cast), NULL)

  EXT_FE(EXT_GLOBAL(begin_document), NULL)
  EXT_FE(EXT_GLOBAL(end_document), NULL)
  EXT_FE(EXT, NULL)
a217 32
/**
 * Represents the java class struct
 */
zend_class_entry *EXT_GLOBAL(class_entry);

/**
 * Represents the java class array struct
 */
zend_class_entry *EXT_GLOBAL(array_entry);

/**
 * Represents the java_class class struct
 */
zend_class_entry *EXT_GLOBAL(class_class_entry);

/**
 * Represents the javaclass class struct
 */
zend_class_entry *EXT_GLOBAL(class_class_entry_jsr);

/**
 * Represents the javaexception class struct
 */
zend_class_entry *EXT_GLOBAL(exception_class_entry);

#ifdef ZEND_ENGINE_2
/**
 * The object handlers, see create_object.
 */
zend_object_handlers EXT_GLOBAL(handlers);
#endif

a244 7
static PHP_INI_MH(OnIniPersistentConnections)
{
  if(new_value && 0) { //BROKEN
	EXT_GLOBAL(update_persistent_connections)(new_value);
  }
  return SUCCESS;
}
a333 1
  PHP_INI_ENTRY(EXT_NAME()/**/".persistent_connections",   NULL, PHP_INI_SYSTEM, OnIniPersistentConnections)
a339 291
  EXT_GLOBAL(globals)->jenv=0;
  EXT_GLOBAL(globals)->is_closed=-1;

  EXT_GLOBAL(globals)->ini_user=0;
  EXT_GLOBAL(globals)->java_socket_inet=0;

  EXT_GLOBAL(globals)->hosts=0;
  EXT_GLOBAL(globals)->servlet=0;

  zend_hash_init(&EXT_GLOBAL(globals)->connections, 0, 0, 0, 1);
  EXT_GLOBAL(globals)->cb_stack=0;

  EXT_GLOBAL(globals)->peer = EXT_GLOBAL(globals)->peerr = -1;
  EXT_GLOBAL(globals)->servlet_ctx = 0;
}

#ifdef ZEND_ENGINE_2

/**
 * Proto: object Java::Java (string classname [, string argument1, .\ .\ .\ ]) or object Java::Java (array arguments)  or object Java::java_exception (string classname [, string argument1, .\ .\ .\ ]) or object Java::JavaException (string classname [, string argument1, .\ .\ .\ ]);
 *
 * \anchor doc54
 * Java constructor. Example:
 * \code
 * $object = new Java("java.lang.String", "hello world"); 
 * echo (string)$object;
 * \endcode
 * \code
 * $ex = new JavaException("java.lang.NullPointerException");
 * throw $ex;
 * \endcode
 * \code
 * require_once("rt/java_util_LinkedList.php");
 * class org_apache_lucene_search_IndexSearcher extends java_Bridge {
 *   __construct() { 
 *     $args = func_get_args();
 *     array_unshift($args, "org.apache.lucene.search.IndexSearcher");
 *     $java = new Java($args); 
 *   }
 * }
 * class org_apache_lucene_search_PhraseQuery extends java_Bridge {
 *   __construct() { 
 *     $args = func_get_args();
 *     array_unshift($args, "org.apache.lucene.search.PhraseQuery");
 *     $java = new Java($args); 
 *   }
 * }
 * class org_apache_lucene_index_Term extends java_Bridge {
 *   __construct() { 
 *     $args = func_get_args();
 *     array_unshift($args, "org.apache.lucene.index.Term");
 *     $java = new Java($args); 
 *   }
 * }
 * $searcher = new org_apache_lucene_search_IndexSearcher(getcwd());
 * $term = new org_apache_lucene_index_Term("name", "test.php");
 * $phrase = new org_apache_lucene_search_PhraseQuery();
 * phrase->add($term);
 * $hits = $searcher->search($phrase);
 * $iter = $hits->iterator();
 * $list = new java_util_LinkedList();
 * while($iter->hasNext()) {
 * $next = $iter->next();
 * $name = $next->get("name");
 * $list->append($name);
 * }
 * echo $list;
 *
 * \endcode 
 */
EXT_FUNCTION(EXT_GLOBAL(construct))
{
  API_CALL(construct);
}

/** 
 * Proto: object Java::JavaClass ( string classname) or object java::java_class ( string classname);
 *
 * \anchor doc55
 * References a java class. Example: 
 * \code
 * $Object = new JavaClass("java.lang.Object");
 * $object = $Object->newInstance();
 * \endcode
 * \code
 * $Thread = new JavaClass("java.lang.Thread");
 * $Thread->sleep(1000);

 * \endcode
 */
EXT_FUNCTION(EXT_GLOBAL(construct_class))
{
  API_CALL(construct_class);
}

/** 
 * Proto: mixed Java::__call ( string procedure_name [, array arguments ])
 *
 * Calls a Java procedure
 * Example:
 * \code
 * # The JPersistenceAdapter makes it possible to serialize java values.
 * #
 * # Example:
 * # $v=new JPersistenceAdapter(new Java("java.lang.StringBuffer", "hello"));
 * # $id=serialize($v);
 * # $file=fopen("file.out","w");
 * # fwrite($file, $id);
 * # fclose($file);
 * #
 *
 * class JPersistenceProxy {
 *  var $java;
 *  var $serialID;
 *
 *  function __construct($java){ 
 *    $this->java=$java; 
 *    $this->serialID; 
 *  }
 *  function __sleep() {
 *    $buf = new Java("java.io.ByteArrayOutputStream");
 *    $out = new Java("java.io.ObjectOutputStream", $buf);
 *    $out->writeObject($this->java);
 *    $out->close();
 *    $this->serialID = base64_encode((string)$buf->toByteArray());
 *    return array("serialID");
 *  }
 *  function __wakeup() {
 *    $buf = new Java("java.io.ByteArrayInputStream",base64_decode($this->serialID));
 *    $in = new Java("java.io.ObjectInputStream", $buf);
 *    $this->java = $in->readObject();
 *    $in->close();
 *  }
 *  function getJava() {
 *    return $this->java;
 *  }
 *  function __destruct() { 
 *    if($this->java) return $this->java->__destruct(); 
 *  }
 * }
 *
 * class JPersistenceAdapter extends JPersistenceProxy {
 *  function __get($arg)       { if($this->java) return $this->java->__get($arg); }
 *  function __set($key, $val) { if($this->java) return $this->java->__set($key, $val); }
 *  function __call($m, $a)    { if($this->java) return $this->java->__call($m,$a); }
 *  function __toString()      { if($this->java) return $this->java->__toString(); }
 * }
 * \endcode
 */
EXT_METHOD(EXT, __call)
{
  API_CALL(call);
}


/** Proto: object Java::__toString (void)
 *
 * Displays the java object as a string. Note: it doesn't cast the
 * object to a string, thus echo $ob displays a string
 * representation of $ob, e.g.: \code [o(String)"hello"]\endcode
 *
 * Use a string cast or java_values(), if you want to display the java string as a php
 * string, e.g.:
 * \code 
 * echo (string)$string; // explicit cast
 * echo "$string"; // implicit cast
 * \endcode
 */
EXT_METHOD(EXT, __tostring)
{
  API_CALL(toString);
}


/**
 * Proto: void Java::__set(object, object)
 *
 * The setter
 * 
 * Example: \code $obj->property = "value"; \endcode If no property
 * exists, the bean properties are examined and a setter is called:
 * \code $object->setProperty(value)\endcode
 */
EXT_METHOD(EXT, __set)
{
  API_CALL(set);
}

/** 
 * Proto: void Java::__destruct()
 *
 * Example:
 * \code
 * 
 * # The JSessionAdapter makes it possible to store java values into the
 * # $_SESSION variable. 
 * 
 * # Example:
 * # $vector = new JSessionAdapter(new Java("java.util.Vector"));
 * # $vector->addElement(...);
 * # $_SESSION["v"]=$vector;
 *
 *
 * class JSessionProxy {
 *  var $java;
 *  var $serialID;
 *
 *  function __construct($java){ 
 *    $this->java=$java; 
 *    $this->serialID = uniqid(""); 
 *  }
 *  function __sleep() {
 *    $session=java_get_session("PHPSESSION".session_id());
 *    $session->put($this->serialID, $this->java);
 *    return array("serialID");
 *  }
 *  function __wakeup() {
 *    $session=java_get_session("PHPSESSION".session_id());
 *    $this->java = $session->get($this->serialID);
 *  }
 *  function getJava() {
 *    return $this->java;
 *  }
 *  function __destruct() { 
 *    if($this->java) return $this->java->__destruct(); 
 *  }
 * }
 *
 * class JSessionAdapter extends JSessionProxy {
 *  function __get($arg)       { if($this->java) return $this->java->__get($arg); }
 *  function __set($key, $val) { if($this->java) return $this->java->__set($key, $val); }
 *  function __call($m, $a)    { if($this->java) return $this->java->__call($m,$a); }
 *  function __toString()      { if($this->java) return $this->java->__toString(); }
 * }
 * \endcode
 */
EXT_METHOD(EXT, __destruct)
{
  /* dummy, see destroy_object in java_bridge.c */
}

/** 
 * Proto: object Java::__get(object)
 *
 * The getter. Example: \code echo (string) $object->property;
 * \endcode If no property exists, the bean properties are examined
 * and the getter is called, example: \code $object->getProperty()
 * \endcode.
 */
EXT_METHOD(EXT, __get)
{
  API_CALL(get);
}

/**
 * Proto: string Java::__sleep()
 *
 * Serializes the object. 
 * Example:
 * \code
 *   $vector=new JPersistenceAdapter(new Java("java.lang.StringBuffer", "hello"));
 *  $v=array (
 *	"test",
 *	$vector,
 *	3.14);
 *  $id=serialize($v);
 *  $file=fopen("test.ser","w");
 *  fwrite($file, $id);
 *  fclose($file);
 * \endcode
 */
EXT_METHOD(EXT, __sleep)
{
  API_CALL(serialize);
}

/** Proto: string Java::__wakeup()
 * 
 * Deserializes the object. 
 * Example: 
 * \code
 *  try {
 *    $v=unserialize($id);
 *  } catch (JavaException $e) {
 *    echo "Warning: Could not deserialize: ". $e->getCause() . "\n";
 *  }
 * \endcode
 */
EXT_METHOD(EXT, __wakeup)
{
  API_CALL(deserialize);
d343 7
a349 16
#ifndef GENERATE_DOC
# define EXT_ARRAY EXTC##Array
#endif 
/** Proto: bool Java::offsetExists()
 * 
 * Checks if an object exists at the given position.
 * Example:
 * \code
 * $System = new Java("java.lang.System");
 * $props = $System->getProperties();
 * if(!$props["user.home"]) die("No home dir!?!");
 * \endcode
 */
EXT_METHOD(EXT_ARRAY, offsetExists)
{
  API_CALL(offsetExists);
d351 7
a357 37

/** 
 * Proto: object Java::offsetGet()
 *
 * Get the object at a given position.
 *
 * Example:
 * \code
 * $System = new Java("java.lang.System");
 * $props = $System->getProperties();
 * echo $props["user.home"]);
 * \endcode
 *
 */
EXT_METHOD(EXT_ARRAY, offsetGet)
{
  API_CALL(offsetGet);
}

/** Proto: void Java::offsetSet(object, object);
 *
 * Set the object at a given position. Example:
 * \code
 * $Array = new JavaClass("java.lang.reflect.Array");
 * $testobj=$Array->newInstance(new JavaClass("java.lang.String"), array(2, 2, 2, 2, 2, 2));
 *
 * $testobj[0][0][0][0][0][1] = 1;
 * $testobj[0][0][0][0][1][0] = 2;
 * $testobj[0][0][0][1][0][0] = 3;
 * $testobj[0][0][1][0][0][0] = 4;
 * $testobj[0][1][0][0][0][0] = 5;
 * $testobj[1][0][0][0][0][0] = 6;
 * \endcode
 */
EXT_METHOD(EXT_ARRAY, offsetSet)
{
  API_CALL(offsetSet);
a359 390
/** Proto: string Java::offsetUnset()
 * 
 * Remove the entry at a given position. Used internally.
 */
EXT_METHOD(EXT_ARRAY, offsetUnset)
{
  API_CALL(offsetUnset);
}

static
ZEND_BEGIN_ARG_INFO(arginfo_zero, 0)
	 ZEND_END_ARG_INFO();

static
ZEND_BEGIN_ARG_INFO(arginfo_get, 0)
	 ZEND_ARG_INFO(0, index)
	 ZEND_END_ARG_INFO();

static
ZEND_BEGIN_ARG_INFO(arginfo_set, 0)
	 ZEND_ARG_INFO(0, index)
	 ZEND_ARG_INFO(0, newval)
	 ZEND_END_ARG_INFO();

#ifndef ZEND_ENGINE_2
function_entry EXT_GLOBAL(class_functions)[] = {
  EXT_ME(EXT, EXT, NULL, 0)
  EXT_ME(EXT, EXT_GLOBAL(class), NULL, 0)
  EXT_MALIAS(EXT, EXT_GLOBAL_N(class), EXT_GLOBAL(class), NULL, 0)
  EXT_ME(EXT, __call, arginfo_set, ZEND_ACC_PUBLIC)
  EXT_ME(EXT, __tostring, arginfo_zero, ZEND_ACC_PUBLIC)
  EXT_ME(EXT, __get, arginfo_get, ZEND_ACC_PUBLIC)
  EXT_ME(EXT, __set, arginfo_set, ZEND_ACC_PUBLIC)
  EXT_ME(EXT, __sleep, arginfo_zero, ZEND_ACC_PUBLIC)
  EXT_ME(EXT, __wakeup, arginfo_zero, ZEND_ACC_PUBLIC)
  EXT_ME(EXT, __destruct, arginfo_zero, ZEND_ACC_PUBLIC)
  {NULL, NULL, NULL}
};
#else
#ifndef GENERATE_DOC
function_entry EXT_GLOBAL(class_functions)[] = {
  ZEND_FENTRY(__construct, EXT_FN(EXT_GLOBAL(construct)), NULL, 0)
  EXT_ME(EXT, __call, arginfo_set, ZEND_ACC_PUBLIC)
  EXT_ME(EXT, __tostring, arginfo_zero, ZEND_ACC_PUBLIC)
  EXT_ME(EXT, __get, arginfo_get, ZEND_ACC_PUBLIC)
  EXT_ME(EXT, __set, arginfo_set, ZEND_ACC_PUBLIC)
  EXT_ME(EXT, __sleep, arginfo_zero, ZEND_ACC_PUBLIC)
  EXT_ME(EXT, __wakeup, arginfo_zero, ZEND_ACC_PUBLIC)
  EXT_ME(EXT, __destruct, arginfo_zero, ZEND_ACC_PUBLIC)
  //PHP_ME(EXT, __createReflectionInstance, NULL, 0)
  {NULL, NULL, NULL}
};
static function_entry (array_class_functions)[] = {
  ZEND_FENTRY(__construct, EXT_FN(EXT_GLOBAL(construct)), NULL, 0)
  EXT_ME(EXT_ARRAY, offsetExists,  arginfo_get, ZEND_ACC_PUBLIC)
  EXT_ME(EXT_ARRAY, offsetGet,     arginfo_get, ZEND_ACC_PUBLIC)
  EXT_ME(EXT_ARRAY, offsetSet,     arginfo_set, ZEND_ACC_PUBLIC)
  EXT_ME(EXT_ARRAY, offsetUnset,   arginfo_get, ZEND_ACC_PUBLIC)
  {NULL, NULL, NULL}
};
static function_entry (class_class_functions)[] = {
  ZEND_FENTRY(__construct, EXT_FN(EXT_GLOBAL(construct_class)), NULL, 0)
  {NULL, NULL, NULL}
};
#endif /*!GENERATE_DOC*/
#endif



#if ZEND_EXTENSION_API_NO >= 220060519 
static int cast(zval *readobj, zval *writeobj, int type TSRMLS_DC)
{
  int should_free = 0;
#else
static int cast(zval *readobj, zval *writeobj, int type, int should_free TSRMLS_DC)
{
#endif
  return do_cast(readobj, writeobj, type, should_free TSRMLS_CC);
 }


/**
 * Keeps the state of the iterator.
 */
typedef struct {
  /** The iterator */
  zend_object_iterator intern;
  /** A reference to the PhpMap instance */
  long vm_iterator;
  /** The current value */
  zval *current_object;
  /** The key type, string or long */
  int type;
} vm_iterator;

static void iterator_dtor(zend_object_iterator *iter TSRMLS_DC)
{
  proxyenv *jenv = JG(jenv);
  vm_iterator *iterator = (vm_iterator *)iter;
  
  zval_ptr_dtor((zval**)&iterator->intern.data);
  if (iterator->current_object) zval_ptr_dtor((zval**)&iterator->current_object);
  
  if(iterator->vm_iterator) {
	/* check jenv because destructor may be called after request
	   shutdown */
	if(jenv) (*jenv)->writeUnref(jenv, iterator->vm_iterator);
	iterator->vm_iterator = 0;
  }
  
  efree(iterator);
}

static int iterator_valid(zend_object_iterator *iter TSRMLS_DC)
{
  vm_iterator *iterator = (vm_iterator *)iter;
  return (iterator->vm_iterator && iterator->current_object) ? SUCCESS : FAILURE;
}

static void iterator_current_data(zend_object_iterator *iter, zval ***data TSRMLS_DC)
{
  vm_iterator *iterator = (vm_iterator *)iter;
  *data = &iterator->current_object;
}

static int iterator_current_key(zend_object_iterator *iter, zstr *str_key, uint *str_key_len, ulong *int_key TSRMLS_DC)
{
  vm_iterator *iterator = (vm_iterator *)iter;
  zval *presult;
  
  MAKE_STD_ZVAL(presult);
  ZVAL_NULL(presult);
  
  if(!EXT_GLOBAL(invoke)("currentKey", iterator->vm_iterator, 0, 0, 0, presult TSRMLS_CC)) ZVAL_NULL(presult);

  if(ZVAL_IS_NULL(presult)) {
	zval_ptr_dtor((zval**)&presult);
	return HASH_KEY_NON_EXISTANT;
  }

  if(iterator->type == HASH_KEY_IS_STRING) {
	size_t strlen = Z_STRLEN_P(presult);
	ZSTR_S(*str_key) = emalloc(strlen+1);
	memcpy(ZSTR_S(*str_key), Z_STRVAL_P(presult), strlen);
	(ZSTR_S(*str_key))[strlen]=0;

	// len+1 is due to a bug in php. It assignes the len with
	// key->value.str.len = str_key_len-1; In the evaluator the
	// obtained length is always increased by one, except for the
	// return value from iterator_current_key.  So we must do this
	// ourselfs.  The author's intention was probably to discard the
	// termination character, but that's pointless, if php expects our
	// string to be null terminated why does it ask for the string
	// length?  And if it doesn't expect a null terminated string, why
	// does it decrease the obtained length by one?
	*str_key_len = strlen+1;

  } else {
	ulong i;
	if(Z_TYPE_P(presult)==IS_STRING) { /* old servers send strings
										  instead of long */
	  i=(unsigned long)atol((char*)Z_STRVAL_P(presult));
	} else {
	  assert(Z_TYPE_P(presult)==IS_LONG);
	  i=(unsigned long)Z_LVAL_P(presult);
	}
	*int_key = i;
  }
  zval_ptr_dtor((zval**)&presult);
  return iterator->type;
}

static void init_current_data(vm_iterator *iterator TSRMLS_DC) 
{
  MAKE_STD_ZVAL(iterator->current_object);
  ZVAL_NULL(iterator->current_object);

  if(!EXT_GLOBAL(invoke)("currentData", iterator->vm_iterator, 0, 0, 0, iterator->current_object TSRMLS_CC)) ZVAL_NULL(iterator->current_object);
}

static void iterator_move_forward(zend_object_iterator *iter TSRMLS_DC)
{
  zval *presult;
  vm_iterator *iterator = (vm_iterator *)iter;
  proxyenv *jenv = JG(jenv);
  MAKE_STD_ZVAL(presult);
  ZVAL_NULL(presult);

  if (iterator->current_object) {
	zval_ptr_dtor((zval**)&iterator->current_object);
	iterator->current_object = NULL;
  }

  (*jenv)->writeInvokeBegin(jenv, iterator->vm_iterator, "moveForward", 0, 'I', presult);
  if(!(*jenv)->writeInvokeEnd(jenv)) ZVAL_NULL(presult);
  if(Z_BVAL_P(presult))
	init_current_data(iterator TSRMLS_CC);

  zval_ptr_dtor((zval**)&presult);
}

static zend_object_iterator_funcs EXT_GLOBAL(iterator_funcs) = {
  iterator_dtor,
  iterator_valid,
  iterator_current_data,
  iterator_current_key,
  iterator_move_forward,
  NULL
};

#if ZEND_EXTENSION_API_NO >= 220060519 
static zend_object_iterator *get_iterator(zend_class_entry *ce, zval *object, int by_ref TSRMLS_DC)
{
#else
static zend_object_iterator *get_iterator(zend_class_entry *ce, zval *object TSRMLS_DC)
{
  int by_ref = 0;
#endif
  zval *presult;
  proxyenv *jenv;
  vm_iterator *iterator;
  long vm_iterator, obj;

  if (by_ref) {					/* WTF?! */
	zend_error(E_ERROR, "An iterator cannot be used with foreach by reference");
  }

  iterator = emalloc(sizeof *iterator);
  jenv = JG(jenv);
  if((*jenv)->handle==(*jenv)->async_ctx.handle_request) { /* async protocol */
	php_error(E_ERROR, "php_mod_"/**/EXT_NAME()/**/"(%d): object iterator invalid while in stream mode, use $arr=java_values($java_obj); java_begin_document(); foreach($arr as ...) ...; java_end_document(); instead.", 21);
	return 0;
  }

  MAKE_STD_ZVAL(presult);
  ZVAL_NULL(presult);

  object->refcount++;
  iterator->intern.data = (void*)object;
  iterator->intern.funcs = &EXT_GLOBAL(iterator_funcs);

  EXT_GLOBAL(get_jobject_from_object)(object, &obj TSRMLS_CC);
  assert(obj);

  (*jenv)->writeInvokeBegin(jenv, 0, "getPhpMap", 0, 'I', presult);
  (*jenv)->writeObject(jenv, obj);
  (*jenv)->writeInvokeEnd(jenv);
  EXT_GLOBAL(get_jobject_from_object)(presult, &vm_iterator TSRMLS_CC);
  if (!vm_iterator) return NULL;
  iterator->vm_iterator = vm_iterator;

  (*jenv)->writeInvokeBegin(jenv, vm_iterator, "getType", 0, 'I', presult);
  if(!(*jenv)->writeInvokeEnd(jenv)) return NULL;

  iterator->type = Z_BVAL_P(presult) ? HASH_KEY_IS_STRING : HASH_KEY_IS_LONG;

  (*jenv)->writeInvokeBegin(jenv, vm_iterator, "hasMore", 0, 'I', presult);
  if(!(*jenv)->writeInvokeEnd(jenv)) return NULL;
  if(Z_BVAL_P(presult)) 
	init_current_data(iterator TSRMLS_CC);
  else
	iterator->current_object = NULL;

  zval_ptr_dtor((zval**)&presult);
  return (zend_object_iterator*)iterator;
}
static void make_lambda(zend_internal_function *f,
						void (*handler)(INTERNAL_FUNCTION_PARAMETERS))
{
  memset(f, 0, sizeof*f);
  f->type = ZEND_INTERNAL_FUNCTION;
  f->handler = handler;
}

#else

static int make_lambda(zend_internal_function *f,
					   void (*handler)(INTERNAL_FUNCTION_PARAMETERS))
{
  f->type = ZEND_INTERNAL_FUNCTION;
  f->handler = handler;
  f->function_name = NULL;
  f->arg_types = NULL;
}

/**
 * Call function handler for php4
 */
void 
EXT_GLOBAL(call_function_handler4)(INTERNAL_FUNCTION_PARAMETERS, zend_property_reference *property_reference)
{
  pval *object = property_reference->object;
  zend_overloaded_element *function_name = (zend_overloaded_element *)
    property_reference->elements_list->tail->data;
  char *name = Z_STRVAL(function_name->element);
  int arg_count = ZEND_NUM_ARGS();
  pval ***arguments = (pval ***) safe_emalloc(sizeof(zval **), arg_count, 0);
  enum constructor constructor = CONSTRUCTOR_NONE;
  zend_class_entry *ce = Z_OBJCE_P(getThis());
								/* Do not create an instance for new
								   java_class or new JavaClass */
  short createInstance = 1;
  zend_class_entry *parent;
  short rc;

  for(parent=ce; parent->parent; parent=parent->parent)
	if ((parent==EXT_GLOBAL(class_class_entry)) || ((parent==EXT_GLOBAL(class_class_entry_jsr)))) {
	  createInstance = 0;		/* do not create an instance for new java_class or new JavaClass */
	  break;
	}

  zend_get_parameters_array_ex(arg_count, arguments);
  if(!strcmp(name, ce->name)) constructor = CONSTRUCTOR;

								/* flatten constructor array into arg
								   list, for compatibility with the
								   php5 implementation: new
								   Java(array) or new
								   JavaClass(array).*/
  if(constructor==CONSTRUCTOR &&
	 arg_count==1 && Z_TYPE_PP(arguments[0])==IS_ARRAY) {
	zval **param_ptr, *arr = *arguments[0], ***argument_array, ***ptr;
	int n = zend_hash_num_elements(Z_ARRVAL_P(arr));
	ptr = argument_array = (zval ***) safe_emalloc(sizeof(zval **), n, 0);
	zend_hash_internal_pointer_reset(Z_ARRVAL_P(arr));
	while(zend_hash_get_current_data(Z_ARRVAL_P(arr), (void**)&param_ptr) == SUCCESS) {
	  *(ptr++) = param_ptr;
	  zend_hash_move_forward(Z_ARRVAL_P(arr));
	}
	efree(arguments);
	arg_count = n;
	arguments = argument_array;
  }

  EXT_GLOBAL(call_function_handler)(INTERNAL_FUNCTION_PARAM_PASSTHRU, 
									name, constructor, createInstance, 
									object, 
									arg_count, arguments);

  efree(arguments);
  pval_destructor(&function_name->element);
}

static pval 
get_property_handler(zend_property_reference *property_reference)
{
  pval presult, *object;
  zend_llist_element *element;
  zend_overloaded_element *property;
  char *name;

  element = property_reference->elements_list->head;
  property=(zend_overloaded_element *)element->data;
  name =  Z_STRVAL(property->element);
  object = property_reference->object;

  EXT_GLOBAL(get_property_handler)(name, object, &presult);

  pval_destructor(&property->element);
  return presult;
}

static int 
set_property_handler(zend_property_reference *property_reference, pval *value)
{
  int result;
  pval dummy, *object;
  zend_llist_element *element;
  zend_overloaded_element *property;
  char *name;

  element = property_reference->elements_list->head;
  property=(zend_overloaded_element *)element->data;
  name =  Z_STRVAL(property->element);
  object = property_reference->object;

  result = EXT_GLOBAL(set_property_handler) (name, object, value, &dummy);

  pval_destructor(&property->element);
  return result;
}
#endif

#if !defined(ZEND_ENGINE_2) && defined(__MINGW32__)
static void*return_msc_structure(void*mem, zend_property_reference *property_reference) {
   register zval res = get_property_handler(property_reference);
   return memcpy(mem, &res, sizeof res);
}
#endif

a372 106
#ifndef ZEND_ENGINE_2
  static const char nserialize[]="__sleep", ndeserialize[]="__wakeup";
  zend_internal_function serialize, deserialize;
  zend_class_entry ce;

#if !defined(ZEND_ENGINE_2) && defined(__MINGW32__)
  INIT_OVERLOADED_CLASS_ENTRY(ce, EXT_NAME(), NULL,
							  EXT_GLOBAL(call_function_handler4),
							  return_msc_structure,
							  set_property_handler);
#else
  INIT_OVERLOADED_CLASS_ENTRY(ce, EXT_NAME(), NULL,
							  EXT_GLOBAL(call_function_handler4),
							  get_property_handler,
							  set_property_handler);
#endif

  EXT_GLOBAL(class_entry) = zend_register_internal_class(&ce TSRMLS_CC);

  INIT_CLASS_ENTRY(ce, EXT_NAME()/**/"_class", NULL);
  parent = (zend_class_entry *) EXT_GLOBAL(class_entry);
  EXT_GLOBAL(class_class_entry) = 
	zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);
  INIT_CLASS_ENTRY(ce, EXT_NAME()/**/"class", NULL);
  parent = (zend_class_entry *) EXT_GLOBAL(class_class_entry);
  EXT_GLOBAL(class_class_entry_jsr) = 
	zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);

  make_lambda(&serialize, EXT_FN(EXT_GLOBAL(__sleep)));
  make_lambda(&deserialize, EXT_FN(EXT_GLOBAL(__wakeup)));

  if((FAILURE == (zend_hash_add(&EXT_GLOBAL(class_entry)->function_table, 
								(char*)nserialize, sizeof(nserialize), &serialize, sizeof(zend_function), NULL))) ||
	 (FAILURE == (zend_hash_add(&EXT_GLOBAL(class_entry)->function_table, 
								(char*)ndeserialize, sizeof(ndeserialize), &deserialize, sizeof(zend_function), NULL))))
	{
	  php_error(E_ERROR, "Could not register __sleep/__wakeup methods.");
	  return FAILURE;
	}

#else
  zend_class_entry ce;
  zend_internal_function call, get, set;
  
  make_lambda(&call, EXT_MN(EXT_GLOBAL(__call)));
  make_lambda(&get, EXT_MN(EXT_GLOBAL(__get)));
  make_lambda(&set, EXT_MN(EXT_GLOBAL(__set)));
  
  INIT_OVERLOADED_CLASS_ENTRY(ce, EXT_NAMEC(), 
							  EXT_GLOBAL(class_functions), 
							  (zend_function*)&call, 
							  (zend_function*)&get, 
							  (zend_function*)&set);

  memcpy(&EXT_GLOBAL(handlers), zend_get_std_object_handlers(), sizeof EXT_GLOBAL(handlers));
  //EXT_GLOBAL(handlers).clone_obj = clone;
  EXT_GLOBAL(handlers).cast_object = cast;

  EXT_GLOBAL(class_entry) =
	zend_register_internal_class(&ce TSRMLS_CC);
  EXT_GLOBAL(class_entry)->get_iterator = get_iterator;
  EXT_GLOBAL(class_entry)->create_object = EXT_GLOBAL(create_object);

  INIT_CLASS_ENTRY(ce, EXT_NAMEC()/**/"Array", 
				   (array_class_functions));
  parent = (zend_class_entry *) EXT_GLOBAL(class_entry);
  EXT_GLOBAL(array_entry) =
	zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);

  zend_class_implements(EXT_GLOBAL(array_entry) TSRMLS_CC, 1, 
						zend_ce_arrayaccess);

  INIT_OVERLOADED_CLASS_ENTRY(ce, EXT_NAME()/**/"_exception", 
							  EXT_GLOBAL(class_functions), 
							  (zend_function*)&call, 
							  (zend_function*)&get, 
							  (zend_function*)&set);
  
#if ZEND_EXTENSION_API_NO >= 220060519
  parent = (zend_class_entry *) zend_exception_get_default(TSRMLS_C);
#else
  parent = (zend_class_entry *) zend_exception_get_default();
#endif
  EXT_GLOBAL(exception_class_entry) =
	zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);
  // only cast and clone; no iterator, no array access
  EXT_GLOBAL(exception_class_entry)->create_object = EXT_GLOBAL(create_exception_object);
  
  INIT_CLASS_ENTRY(ce, EXT_NAME()/**/"_class", (class_class_functions));
  parent = (zend_class_entry *) EXT_GLOBAL(class_entry);

  EXT_GLOBAL(class_class_entry) = 
	zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);

  /* compatibility with the jsr implementation */
  INIT_CLASS_ENTRY(ce, EXT_NAMEC()/**/"Class", (class_class_functions));
  parent = (zend_class_entry *) EXT_GLOBAL(class_entry);
  EXT_GLOBAL(class_class_entry_jsr) = 
	zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);

  INIT_CLASS_ENTRY(ce, EXT_NAMEC()/**/"Exception", EXT_GLOBAL(class_functions));
  parent = (zend_class_entry *) EXT_GLOBAL(exception_class_entry);
  EXT_GLOBAL(exception_class_entry) = 
	zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);

#endif
d390 5
a394 4
	
#ifndef __MINGW32__
	EXT_GLOBAL(cfg)->pid = getpid();
#endif
a395 1
  } 
d427 1
a439 1
  EXT_GLOBAL(override_ini_for_redirect)(TSRMLS_C);
a485 1
  php_info_print_table_row(2, EXT_NAME()/**/".persistent_connections", EXT_GLOBAL(cfg)->persistent_connections?on:off);
a514 10
  proxyenv **env;
  HashTable *connections = &JG(connections);
  zend_hash_internal_pointer_reset(connections);
  while(SUCCESS==zend_hash_get_current_data(connections, (void**)&env)) {
	EXT_GLOBAL(activate_connection)(*env TSRMLS_CC);
	EXT_GLOBAL(close_connection) (*env, 0 TSRMLS_CC);
	zend_hash_move_forward(connections);
  }
  zend_hash_destroy(connections);
  
d529 1
@


1.144
log
@Release-4-1-0
@
text
@d983 1
a983 1
  if(new_value) {
@


1.143
log
@Release-3-0-8
@
text
@d87 4
d102 1
d147 1
d545 43
d878 1
@


1.142
log
@Release-3-0-8
@
text
@d1991 1
a1991 1
  if(EXT_GLOBAL(option_set_by_user) (U_HOSTS, EXT_GLOBAL(ini_user)))  
d1994 1
a1994 1
  if(EXT_GLOBAL(option_set_by_user) (U_SERVLET, EXT_GLOBAL(ini_user))) {
d1997 1
a1997 1
	  EXT_GLOBAL(snprintf)(buf, sizeof buf, "http%s://%s:%s", 
@


1.141
log
@Files update 3.2.2 to 4.0.1. Extracted from the src.tar.gz downloaded from sf.net, uploaded by Jost Boekemeier. Update to repository by Andre Felipe Machado.
@
text
@d415 43
a458 1

d1038 1
d1928 1
d1932 1
d1941 1
@


1.140
log
@Release-3-2-1
@
text
@d9 1
a9 1
  Copyright (C) 2006 Jost Boekemeier
@


1.139
log
@Release-3-2-1
@
text
@d626 3
d631 1
d1822 3
d1826 1
@


1.138
log
@Release-3-2-1
@
text
@d1947 1
a1947 1
	  url = off;
@


1.137
log
@Release-3-2-1
@
text
@d242 1
a242 1
 * Proto: object java_session([string], [bool]) or object java_get_session([string], [bool])
d268 3
@


1.136
log
@Release-3-1-8
@
text
@d62 1
d464 1
a464 1
  case 'D': case 'd': case 'F': case 'f': tval = IS_DOUBLE;
d1127 1
a1127 1
 *  function __put($key, $val) { if($this->java) return $this->java->__put($key, $val); }
d1214 1
a1214 1
 *  function __put($key, $val) { if($this->java) return $this->java->__put($key, $val); }
d1937 11
a1947 2
  if(EXT_GLOBAL(option_set_by_user) (U_SERVLET, EXT_GLOBAL(ini_user)))  
	php_info_print_table_row(2, EXT_NAME()/**/".servlet", JG(servlet)?JG(servlet):off);
@


1.135
log
@Release-3-1-8rc1
@
text
@d6 3
a8 3
 * It contains the global structures and the callbacks required for
 * zend engine 1 and 2.
 *
d160 1
d173 1
d199 1
d228 1
d243 1
d255 1
a255 1
 * When java_get_session() is called with a session handle, the session
d277 1
d422 1
a422 1
 *
d474 1
d504 4
a507 1
/** Proto: mixed java_values(val) or mixed java_get_values(object ob)
d539 1
d746 1
a746 1

d794 1
d1004 1
d1061 1
d1277 3
a1279 2
#define EXT_ARRAY EXTC##Array

d1372 1
d1397 1
d1414 3
d1418 1
d1420 1
d1422 1
d1424 1
d1645 9
a1653 4
								/* flatten array into arg list, for
								   compatibility with the php5
								   implementation */
  if(arg_count==1 && Z_TYPE_PP(arguments[0])==IS_ARRAY) {
a1666 1
  if(!strcmp(name, ce->name)) constructor = CONSTRUCTOR;
d1863 3
d1867 1
d1869 4
a1872 1
  char *servlet, *hosts;
@


1.134
log
@Release-3-1-8rc
@
text
@d1621 16
@


1.133
log
@Release-3-1-8devel1
@
text
@d334 79
a412 1
static int do_cast(zval *readobj, zval *writeobj, int type, int should_free TSRMLS_DC);
d656 3
a658 3
#ifdef ZEND_ENGINE_2
	php_set_error_handling(EH_THROW, zend_exception_get_default() TSRMLS_CC);
#endif
d662 3
a664 3
#ifdef ZEND_ENGINE_2
	php_std_error_handling();
#endif
a1384 78
static int do_cast(zval *readobj, zval *writeobj, int type, int should_free TSRMLS_DC) {
  proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  long obj = 0;
  zval free_obj;

  if(!jenv) return FAILURE;
  if((*jenv)->handle==(*jenv)->async_ctx.handle_request) { /* async protocol */
	php_error(E_ERROR, "php_mod_"/**/EXT_NAME()/**/"(%d): cast() invalid while in stream mode", 21);
	return FAILURE;
  }

  if (should_free)
	free_obj = *writeobj;

  if(jenv && (Z_TYPE_P(readobj) == IS_OBJECT)) {
	EXT_GLOBAL(get_jobject_from_object)(readobj, &obj TSRMLS_CC);
  }

  if(obj) {
	INIT_PZVAL(writeobj);
    ZVAL_NULL(writeobj);
	switch(type) {

	case IS_STRING:
	  (*jenv)->writeInvokeBegin(jenv, 0, "castToString", 0, 'I', writeobj);
	  (*jenv)->writeObject(jenv, obj);
#ifdef ZEND_ENGINE_2
	  if (instanceof_function(Z_OBJCE_P(readobj), EXT_GLOBAL(exception_class_entry) TSRMLS_CC)) {
		zval *trace = 0;
		zval fname;
		ZVAL_STRINGL(&fname, "gettraceasstring", sizeof("gettraceasstring")-1, 0);
		call_user_function_ex(0, &readobj, &fname, &trace, 0, 0, 1, 0 TSRMLS_CC);
		if(trace) 
		  (*jenv)->writeString(jenv, Z_STRVAL_P(trace), Z_STRLEN_P(trace));
	  }
#endif
	  obj = (*jenv)->writeInvokeEnd(jenv);
	  break;
	case IS_BOOL:
	  (*jenv)->writeInvokeBegin(jenv, 0, "castToBoolean", 0, 'I', writeobj);
	  (*jenv)->writeObject(jenv, obj);
	  obj = (*jenv)->writeInvokeEnd(jenv);
	  break;
	case IS_LONG:
	  (*jenv)->writeInvokeBegin(jenv, 0, "castToExact", 0, 'I', writeobj);
	  (*jenv)->writeObject(jenv, obj);
	  obj = (*jenv)->writeInvokeEnd(jenv);
	  break;
	case IS_DOUBLE:
	  (*jenv)->writeInvokeBegin(jenv, 0, "castToInexact", 0, 'I', writeobj);
	  (*jenv)->writeObject(jenv, obj);
	  obj = (*jenv)->writeInvokeEnd(jenv);
	  break;
	case IS_OBJECT: 
	  *writeobj = *readobj;
	  zval_copy_ctor(writeobj);
	  convert_to_object(writeobj);
	  break;
	case IS_ARRAY: 
#ifdef ZEND_ENGINE_2
	  (*jenv)->writeInvokeBegin(jenv, 0, "castToArray", 0, 'I', writeobj);
	  (*jenv)->writeObject(jenv, obj);
	  obj = (*jenv)->writeInvokeEnd(jenv);
#else
	  obj = 0; // failed
#endif
	  break;
	default:
	  obj = 0; // failed
	  break;
	}
  }

  if (should_free)
	zval_dtor(&free_obj);

  return obj?SUCCESS:FAILURE;
}
d1467 8
a1474 1
	ulong i =(unsigned long)atol((char*)Z_STRVAL_P(presult));
@


1.132
log
@Release-3-2-0devel
@
text
@d9 35
d334 1
a366 1
  static int do_cast(zval *readobj, zval *writeobj, int type, int should_free TSRMLS_DC);
d369 1
a369 1
  int argc=ZEND_NUM_ARGS();
d372 1
a372 1
    WRONG_PARAM_COUNT_WITH_RETVAL(0);
d384 1
a384 1
  do_cast(*object, *return_value, tval, 0 TSRMLS_CC);
d1363 1
a1363 1
	  convert_to_object_ex(writeobj);
@


1.131
log
@Release-3-1-7
@
text
@d300 53
d651 1
d890 1
a890 1
 * class org_apache_lucene_search_IndexSearcher extends php_Java {
d897 1
a897 1
 * class org_apache_lucene_search_PhraseQuery extends php_Java {
d904 1
a904 1
 * class org_apache_lucene_index_Term extends php_Java {
d1272 1
a1272 8
#if ZEND_EXTENSION_API_NO >= 220060519 
static int cast(zval *readobj, zval *writeobj, int type TSRMLS_DC)
{
  int should_free = 0;
#else
static int cast(zval *readobj, zval *writeobj, int type, int should_free TSRMLS_DC)
{
#endif
d1326 3
a1328 14
	  {
		long obj2;
		if(jenv && (Z_TYPE_P(readobj) == IS_OBJECT)) {
		  EXT_GLOBAL(get_jobject_from_object)(readobj, &obj2 TSRMLS_CC);
		}
		if(obj2) {
		  (*jenv)->writeInvokeBegin(jenv, 0, "cast", 0, 'I', writeobj);
		  (*jenv)->writeObject(jenv, obj);
		  (*jenv)->writeObject(jenv, obj2);
		  obj = (*jenv)->writeInvokeEnd(jenv);
		} else {
		  obj = 0; //failed
		}
	  }
d1350 10
@


1.130
log
@Release-3-1-6
@
text
@d11 2
a21 1
#include "php_java.h"
a701 7
static PHP_INI_MH(OnIniExtJavaCompatibility)
{
  if (new_value) {
	EXT_GLOBAL(update_compatibility)(new_value);
  }
  return SUCCESS;
}
a797 1
  PHP_INI_ENTRY(EXT_NAME()/**/".ext_java_compatibility",   NULL, PHP_INI_SYSTEM, OnIniExtJavaCompatibility)
d1251 10
d1353 1
a1353 1
static int iterator_current_key(zend_object_iterator *iter, char **str_key, uint *str_key_len, ulong *int_key TSRMLS_DC)
d1370 3
a1372 3
	*str_key = emalloc(strlen+1);
	memcpy(*str_key, Z_STRVAL_P(presult), strlen);
	(*str_key)[strlen]=0;
d1490 1
a1492 7
  f->function_name = NULL;
  f->scope = NULL;
  f->fn_flags = 0;
  f->prototype = NULL;
  f->num_args = 0;
  f->arg_info = NULL;
  f->pass_rest_by_reference = 0;
a1799 5
#ifndef ZEND_ENGINE_2
  php_info_print_table_row(2, EXT_NAME()/**/".ext_java_compatibility", on);
#else
  php_info_print_table_row(2, EXT_NAME()/**/".ext_java_compatibility", EXT_GLOBAL(cfg)->extJavaCompatibility?on:off);
#endif
@


1.129
log
@Release-3-1-6
@
text
@d75 4
@


1.128
log
@Release-3-1-6
@
text
@d1607 2
a1610 1
#if !defined(ZEND_ENGINE_2) && defined(__MINGW32__)
d1612 1
d1614 2
d1617 1
a1618 1
							  set_property_handler);
@


1.127
log
@Release-3-1-4
@
text
@d97 1
a97 1
	assert(zend_stack_is_empty(JG(cb_stack)));
d366 1
a366 1
 * When a php instance is supplied as a argument, that environment will be used
d472 1
a472 1
	 enables auto-import. If it is missing, the dll will crash (!??) */
d804 2
a805 1
/* vm_alloc_globals_ctor(zend_vm_globals *vm_globals) */
d818 3
d1705 2
a1706 1
  if(!EXT_GLOBAL (cfg) ) EXT_GLOBAL (cfg) = malloc(sizeof *EXT_GLOBAL (cfg) ); if(!EXT_GLOBAL (cfg) ) exit(9);
d1709 1
d1717 5
a1722 1
	
d1847 5
a1851 2
  if(EXT_GLOBAL (cfg) ) { free(EXT_GLOBAL (cfg) ); EXT_GLOBAL (cfg) = 0; }

@


1.126
log
@Release-3-1-2
@
text
@d816 1
a1578 16
static void make_local_socket_info(TSRMLS_D) {
  memset(&EXT_GLOBAL(cfg)->saddr, 0, sizeof EXT_GLOBAL(cfg)->saddr);
#ifndef CFG_JAVA_SOCKET_INET
  EXT_GLOBAL(cfg)->saddr.sun_family = AF_LOCAL;
  memset(EXT_GLOBAL(cfg)->saddr.sun_path, 0, sizeof EXT_GLOBAL(cfg)->saddr.sun_path);
  strcpy(EXT_GLOBAL(cfg)->saddr.sun_path, EXT_GLOBAL(get_sockname)(TSRMLS_C));
# ifdef HAVE_ABSTRACT_NAMESPACE
  *EXT_GLOBAL(cfg)->saddr.sun_path=0;
# endif
#else
  EXT_GLOBAL(cfg)->saddr.sin_family = AF_INET;
  EXT_GLOBAL(cfg)->saddr.sin_port=htons(atoi(EXT_GLOBAL(get_sockname)(TSRMLS_C)));
  EXT_GLOBAL(cfg)->saddr.sin_addr.s_addr = inet_addr( "127.0.0.1" );
#endif
}

a1707 1
	make_local_socket_info(TSRMLS_C);
@


1.125
log
@Release-3-1-0
@
text
@d96 4
d399 3
d403 3
a405 3
  MAKE_STD_ZVAL(JG(exception)); 
  *JG(exception)=**pobj;
  zval_copy_ctor(JG(exception));
d416 3
a418 1
  (*jenv)->writeInvokeBegin(jenv, 0, "lastException", 0, 'P', JG(exception));
d425 5
a429 3
  MAKE_STD_ZVAL(JG(exception));
  ZVAL_NULL(JG(exception));
  (*jenv)->writeInvokeBegin(jenv, 0, "lastException", 0, 'P', JG(exception));
d437 2
a438 2
	int err;

d442 1
d444 1
a444 1
	  zend_eval_string((char*)handler, *JG(retval_ptr), (char*)name TSRMLS_CC);
d451 1
a451 1
	  php_error(E_WARNING, "php_mod_"/**/EXT_NAME()/**/"(%d): Could not call user function: %s.", 22, Z_STRVAL_P(JG(func)));
d483 2
a484 1
	int err;
d488 3
a490 1
	err = java_call_user_function_ex(0, JG(object), JG(func), JG(retval_ptr), count, func_params, 1, 0 TSRMLS_CC);
d495 1
a495 1
	  php_error(E_WARNING, "php_mod_"/**/EXT_NAME()/**/"(%d): Could not call user function: %s.", 23, Z_STRVAL_P(JG(func)));
d505 3
a507 3
  zval ***func_params;
  HashTable *func_params_ht;
  int count, current;
d509 1
a509 1
	*return_value=*JG(func_params);
d514 1
a514 1
  if(!*JG(object)) {
d518 1
a518 1
	char *handler=emalloc(sizeof(call_user_funcH)-1+Z_STRLEN_P(JG(func))+sizeof(call_user_funcT));
d521 1
a521 1
	strcat(handler, Z_STRVAL_P(JG(func))); 
d524 1
a524 1
	MAKE_STD_ZVAL(*JG(retval_ptr)); ZVAL_NULL(*JG(retval_ptr)); 
d528 18
a545 1
	RETURN_NULL();
d547 1
a547 15
  /* for methods */
  current=0;
  func_params_ht = Z_ARRVAL_P(JG(func_params));
  count = zend_hash_num_elements(func_params_ht);
  func_params = safe_emalloc(sizeof(zval **), count, 0);
  for (zend_hash_internal_pointer_reset(func_params_ht);
	   zend_hash_get_current_data(func_params_ht, (void **) &func_params[current]) == SUCCESS;
	   zend_hash_move_forward(func_params_ht)
	   ) {
	current++;
  }

  call_with_params(count, func_params TSRMLS_CC);
  check_php4_exception(TSRMLS_C);
  efree(func_params);
d1242 1
@


1.124
log
@Release-3-1-0
@
text
@d25 1
d31 1
d44 5
a48 2
#define php_info_print_table_row(a, b, c)		\
  php_info_print_table_row_ex(a, "v", b, c)
a49 1

d65 3
a67 2
 * Called when the request terminates. Closes the connection to the
 * back-end, destroys the proxyenv instance.
d69 1
a69 2
PHP_RSHUTDOWN_FUNCTION(EXT)
{
d72 2
a73 2
  short success = EXT_GLOBAL(close_connection) (&JG(jenv), EXT_GLOBAL(cfg)->persistent_connections TSRMLS_CC);
  if(!success) {
d77 4
a80 1
	  if(*env!=current) EXT_GLOBAL(close_connection) (env, 0 TSRMLS_CC);
d85 11
d100 3
a102 4
static void last_exception_get(proxyenv *jenv, zval**return_value)
{
  (*jenv)->writeInvokeBegin(jenv, 0, "lastException", 0, 'P', *return_value);
  (*jenv)->writeInvokeEnd(jenv);
d104 8
d121 1
a121 10
  proxyenv *jenv;
  if (ZEND_NUM_ARGS()!=0) WRONG_PARAM_COUNT;
  jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) {RETURN_NULL();}
  if((*jenv)->handle==(*jenv)->async_ctx.handle_request) { /* async protocol */
	php_error(E_ERROR, "php_mod_"/**/EXT_NAME()/**/"(%d): last_exception_get() invalid while in stream mode", 21);
	RETURN_NULL();
  }

  last_exception_get(jenv, &return_value);
a124 6
static void last_exception_clear(proxyenv*jenv, zval**return_value) {
  (*jenv)->writeInvokeBegin(jenv, 0, "lastException", 0, 'P', *return_value);
  (*jenv)->writeObject(jenv, 0);
  (*jenv)->writeInvokeEnd(jenv);
}

d133 1
a133 6
  proxyenv *jenv;
  if (ZEND_NUM_ARGS()!=0) WRONG_PARAM_COUNT;
  jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) {RETURN_NULL();}

  last_exception_clear(jenv, &return_value);
d146 1
a146 35
  zval **enc;
  proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) {RETURN_NULL();}

  if (ZEND_NUM_ARGS()!=1 || zend_get_parameters_ex(1, &enc) == FAILURE)
	WRONG_PARAM_COUNT;

  convert_to_string_ex(enc);

  (*jenv)->writeInvokeBegin(jenv, 0, "setFileEncoding", 0, 'I', return_value);
  (*jenv)->writeString(jenv, Z_STRVAL_PP(enc), Z_STRLEN_PP(enc));
  (*jenv)->writeInvokeEnd(jenv);
}


static void require(INTERNAL_FUNCTION_PARAMETERS) {
  static const char ext_dir[] = "extension_dir";
  char *ext = php_ini_string((char*)ext_dir, sizeof ext_dir, 0);
  zval **path;
  proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) {RETURN_NULL();}

  if (ZEND_NUM_ARGS()!=1 || zend_get_parameters_ex(1, &path) == FAILURE)
	WRONG_PARAM_COUNT;

  convert_to_string_ex(path);

#if EXTENSION == JAVA
  (*jenv)->writeInvokeBegin(jenv, 0, "setJarLibraryPath", 0, 'I', return_value);
#else
  (*jenv)->writeInvokeBegin(jenv, 0, "setLibraryPath", 0, 'I', return_value);
#endif
  (*jenv)->writeString(jenv, Z_STRVAL_PP(path), Z_STRLEN_PP(path));
  (*jenv)->writeString(jenv, ext, strlen(ext));
  (*jenv)->writeInvokeEnd(jenv);
d175 1
a175 1
  require(INTERNAL_FUNCTION_PARAM_PASSTHRU);
d189 1
a189 77
  zval **pobj, **pclass;
  long obj, class;
  proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) {RETURN_NULL();}

  if (ZEND_NUM_ARGS()!=2 || zend_get_parameters_ex(2, &pobj, &pclass) == FAILURE)
	WRONG_PARAM_COUNT;

  convert_to_object_ex(pobj);
  convert_to_object_ex(pclass);

  obj = 0;
  EXT_GLOBAL(get_jobject_from_object)(*pobj, &obj TSRMLS_CC);
  if(!obj) {
	zend_error(E_ERROR, "Argument #1 for %s() must be a "/**/EXT_NAME()/**/" object", get_active_function_name(TSRMLS_C));
	return;
  }

  class = 0;
  EXT_GLOBAL(get_jobject_from_object)(*pclass, &class TSRMLS_CC);
  if(!class) {
	zend_error(E_ERROR, "Argument #2 for %s() must be a "/**/EXT_NAME()/**/" object", get_active_function_name(TSRMLS_C));
	return;
  }

  (*jenv)->writeInvokeBegin(jenv, 0, "InstanceOf", 0, 'I', return_value);
  (*jenv)->writeObject(jenv, obj);
  (*jenv)->writeObject(jenv, class);
  (*jenv)->writeInvokeEnd(jenv);
}

static long session_get_default_lifetime() {
  static const char session_max_lifetime[]="session.gc_maxlifetime";
  long l = zend_ini_long((char*)session_max_lifetime, sizeof(session_max_lifetime), 0);
  return l==0?1440:l;
}
static void session(INTERNAL_FUNCTION_PARAMETERS)
{
  proxyenv *jenv;
  zval **session=0, **is_new=0;
  int argc=ZEND_NUM_ARGS();
  char *current_ctx;
  
  if (argc>2 || zend_get_parameters_ex(argc, &session, &is_new) == FAILURE)
	WRONG_PARAM_COUNT;

  jenv=EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) RETURN_NULL();
  if((*jenv)->handle==(*jenv)->async_ctx.handle_request) { /* async protocol */
	php_error(E_ERROR, "php_mod_"/**/EXT_NAME()/**/"(%d): get_session() invalid while in stream mode", 21);
	RETURN_NULL();
  }

  current_ctx = (*jenv)->current_servlet_ctx;
  assert(EXT_GLOBAL(cfg)->is_cgi_servlet && current_ctx ||!EXT_GLOBAL(cfg)->is_cgi_servlet);
								/* create a new connection to the
								   back-end if java_session() is not
								   the first statement in a script */
  EXT_GLOBAL(check_session) (jenv TSRMLS_CC);

  (*jenv)->writeInvokeBegin(jenv, 0, "getSession", 0, 'I', return_value);
  /* cal getSession(String id, ...), if necessary */
  if(current_ctx && current_ctx != (*jenv)->servlet_ctx)
	(*jenv)->writeString(jenv, current_ctx, strlen(current_ctx));

  if(argc>0 && Z_TYPE_PP(session)!=IS_NULL) {
	convert_to_string_ex(session);
	(*jenv)->writeString(jenv, Z_STRVAL_PP(session), Z_STRLEN_PP(session)); 
  } else {
	(*jenv)->writeObject(jenv, 0);
  }
  (*jenv)->writeBoolean(jenv, (argc<2||Z_TYPE_PP(is_new)==IS_NULL)?0:Z_BVAL_PP(is_new)); 

  (*jenv)->writeLong(jenv, session_get_default_lifetime()); // session.gc_maxlifetime

  (*jenv)->writeInvokeEnd(jenv);
  (*jenv)->backend_has_session_proxy=1;
d222 1
a222 21
  session(INTERNAL_FUNCTION_PARAM_PASSTHRU);
}

static void context(INTERNAL_FUNCTION_PARAMETERS)
{
  proxyenv *jenv;
  int argc=ZEND_NUM_ARGS();
  char *current_ctx = 0;
  
  if (argc!=0)
	WRONG_PARAM_COUNT;

  jenv=EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) RETURN_NULL();
  current_ctx = (*jenv)->current_servlet_ctx;
  assert(EXT_GLOBAL(cfg)->is_cgi_servlet && current_ctx ||!EXT_GLOBAL(cfg)->is_cgi_servlet);
  (*jenv)->writeInvokeBegin(jenv, 0, "getContext", 0, 'I', return_value);
  /* call getContext(String id, ...), if necessary */
  if(current_ctx && current_ctx != (*jenv)->servlet_ctx)
	(*jenv)->writeString(jenv, current_ctx, strlen(current_ctx));
  (*jenv)->writeInvokeEnd(jenv);
d245 1
a245 1
  context(INTERNAL_FUNCTION_PARAM_PASSTHRU);
d273 1
a273 1
 * Tries to reset the backent to
d287 1
a287 9
  proxyenv *jenv;
  if (ZEND_NUM_ARGS()!=0) WRONG_PARAM_COUNT;

  jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) RETURN_NULL();

  (*jenv)->writeInvokeBegin(jenv, 0, "reset", 0, 'I', return_value);
  (*jenv)->writeInvokeEnd(jenv);
  php_error(E_WARNING, "php_mod_"/**/EXT_NAME()/**/"(%d): Your script has called the privileged procedure \""/**/EXT_NAME()/**/"_reset()\" which resets the "/**/EXT_NAME()/**/" back-end to its initial state. Therefore all "/**/EXT_NAME()/**/" caches are gone.", 18);
d298 2
a299 9
  static const char begin[] = "beginDocument";
  proxyenv *jenv;
  if (ZEND_NUM_ARGS()!=0) WRONG_PARAM_COUNT;
  jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) {RETURN_NULL();}
  if((*jenv)->handle==(*jenv)->async_ctx.handle_request) { /* async protocol */
	php_error(E_ERROR, "php_mod_"/**/EXT_NAME()/**/"(%d): begin_document() invalid while in stream mode", 21);
	RETURN_NULL();
  }
a300 4
  (*jenv)->writeInvokeBegin(jenv, 0, (char*)begin, sizeof(begin)-1, 'I', return_value);
  (*jenv)->writeInvokeEnd(jenv);
  EXT_GLOBAL(begin_async)(jenv);
}
d308 1
a308 13
  static const char end[] = "endDocument";
  proxyenv *jenv;
  if (ZEND_NUM_ARGS()!=0) WRONG_PARAM_COUNT;
  jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) {RETURN_NULL();}
  if((*jenv)->handle!=(*jenv)->async_ctx.handle_request) { /* async protocol */
	php_error(E_ERROR, "php_mod_"/**/EXT_NAME()/**/"(%d): end_document() invalid when not in stream mode", 21);
	RETURN_NULL();
  }

  (*jenv)->writeInvokeBegin(jenv, 0, (char*)end, sizeof(end)-1, 'I', return_value);
  EXT_GLOBAL(end_async)(jenv);
  (*jenv)->writeInvokeEnd(jenv);
a310 121
static void values(INTERNAL_FUNCTION_PARAMETERS)
{
  proxyenv *jenv;
  zval **pobj;
  long obj;

  jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) RETURN_NULL();
  if((*jenv)->handle==(*jenv)->async_ctx.handle_request) { /* async protocol */
	php_error(E_ERROR, "php_mod_"/**/EXT_NAME()/**/"(%d): values() invalid while in stream mode", 21);
	RETURN_NULL();
  }

  if (ZEND_NUM_ARGS()!=1 || zend_get_parameters_ex(1, &pobj) == FAILURE)
	WRONG_PARAM_COUNT;

  convert_to_object_ex(pobj);
  obj = 0;
  EXT_GLOBAL(get_jobject_from_object)(*pobj, &obj TSRMLS_CC);
  if(!obj) {
	*return_value = **pobj;
	zval_copy_ctor(return_value);
	return;
  }

  (*jenv)->writeInvokeBegin(jenv, 0, "getValues", 0, 'I', return_value);
  (*jenv)->writeObject(jenv, obj);
  (*jenv)->writeInvokeEnd(jenv);
}
static const char warn_session[] = 
"the session module's session_write_close() tried to write garbage, aborted. \
-- Have you loaded the session module before the java module? \n Use \
java_session(session_id())->put(key,val) instead of the \
\"$_SESSION[key]=val\" syntax, if you don't want to depend on the \
session module. Else if \"session_write_close();\" at the end of \
your script fixes this problem, please report this bug \
to the PHP release team.";
static const char identity[] = "serialID";
static void serialize(INTERNAL_FUNCTION_PARAMETERS)
{
  long obj;
  zval *handle, *id;

  proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) {
	php_error(E_WARNING, EXT_NAME()/**/" cannot be serialized. %s", warn_session);
	RETURN_NULL();
  }
  if((*jenv)->handle==(*jenv)->async_ctx.handle_request) { /* async protocol */
	php_error(E_ERROR, "php_mod_"/**/EXT_NAME()/**/"(%d): serialize() invalid while in stream mode", 21);
	RETURN_NULL();
  }

  EXT_GLOBAL(get_jobject_from_object)(getThis(), &obj TSRMLS_CC);
  if(!obj) {
	/* set a breakpoint in java_bridge.c destroy_object, in rshutdown
	   and get_jobject_from_object */
	php_error(E_WARNING, EXT_NAME()/**/" cannot be serialized. %s", warn_session);
	RETURN_NULL();
  }

  MAKE_STD_ZVAL(handle);
  ZVAL_NULL(handle);
  (*jenv)->writeInvokeBegin(jenv, 0, "serialize", 0, 'I', handle);
  (*jenv)->writeObject(jenv, obj);
  (*jenv)->writeLong(jenv, session_get_default_lifetime()); // session.gc_maxlifetime
  (*jenv)->writeInvokeEnd(jenv);
  zend_hash_update(Z_OBJPROP_P(getThis()), (char*)identity, sizeof identity, &handle, sizeof(pval *), NULL);

  /* Return the field that should be serialized ("serialID") */
  array_init(return_value);
  INIT_PZVAL(return_value);

  MAKE_STD_ZVAL(id);
  Z_TYPE_P(id)=IS_STRING;
  Z_STRLEN_P(id)=sizeof(identity)-1;
  Z_STRVAL_P(id)=estrdup(identity);
  zend_hash_index_update(Z_ARRVAL_P(return_value), 0, &id, sizeof(pval*), NULL);
}
static void deserialize(INTERNAL_FUNCTION_PARAMETERS)
{
  zval *handle, **id;
  int err;

  proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) {
	php_error(E_ERROR, EXT_NAME()/**/" cannot be de-serialized. %s", warn_session);
  }
  if((*jenv)->handle==(*jenv)->async_ctx.handle_request) { /* async protocol */
	php_error(E_ERROR, "php_mod_"/**/EXT_NAME()/**/"(%d): deserialize() invalid while in stream mode", 21);
	RETURN_NULL();
  }

  err = zend_hash_find(Z_OBJPROP_P(getThis()), (char*)identity, sizeof identity, (void**)&id);
  if(FAILURE==err) {
	/* set a breakpoint in java_bridge.c destroy_object, in rshutdown
	   and get_jobject_from_object */
	php_error(E_WARNING, EXT_NAME()/**/" cannot be deserialized. %s", warn_session);
  }
  
  MAKE_STD_ZVAL(handle);
  ZVAL_NULL(handle);
  (*jenv)->writeInvokeBegin(jenv, 0, "deserialize", 0, 'I', handle);
  (*jenv)->writeString(jenv, Z_STRVAL_PP(id), Z_STRLEN_PP(id));
  (*jenv)->writeLong(jenv, session_get_default_lifetime()); // use session.gc_maxlifetime
  (*jenv)->writeInvokeEnd(jenv);
  if(Z_TYPE_P(handle)!=IS_LONG) {
#ifndef ZEND_ENGINE_2
	php_error(E_WARNING, EXT_NAME()/**/" cannot be deserialized, session expired.");
#endif
	ZVAL_NULL(getThis());
  }	else {
#ifndef ZEND_ENGINE_2
	zend_hash_index_update(Z_OBJPROP_P(getThis()), 0, &handle, sizeof(pval *), NULL);
#else
	EXT_GLOBAL(store_jobject)(getThis(), Z_LVAL_P(handle) TSRMLS_CC);
#endif
  }
  
  RETURN_NULL();
}
d314 1
a314 1
  serialize(INTERNAL_FUNCTION_PARAM_PASSTHRU);
d318 1
a318 1
  deserialize(INTERNAL_FUNCTION_PARAM_PASSTHRU);
d348 1
a348 1
  values(INTERNAL_FUNCTION_PARAM_PASSTHRU);
d386 1
a386 78
  char *string_key;
  ulong num_key;
  zval **pobj, **pfkt, **pclass, **val;
  long class = 0;
  int key_type;
  proxyenv *jenv;
  int argc = ZEND_NUM_ARGS();

  if (argc>3 || zend_get_parameters_ex(argc, &pobj, &pfkt, &pclass) == FAILURE)
	WRONG_PARAM_COUNT;

  jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) RETURN_NULL();


  if (argc>0 && *pobj && Z_TYPE_PP(pobj) == IS_OBJECT) {
	zval_add_ref(pobj);
  }

  (*jenv)->writeInvokeBegin(jenv, 0, "makeClosure", 0, 'I', return_value);
  (*jenv)->writeLong(jenv, (argc==0||Z_TYPE_PP(pobj)==IS_NULL)?0:(long)*pobj);

  /* fname -> cname Map */
  if(argc>1) {
	if (Z_TYPE_PP(pfkt) == IS_ARRAY) {
	  (*jenv)->writeCompositeBegin_h(jenv);
	  zend_hash_internal_pointer_reset(Z_ARRVAL_PP(pfkt));
	  while ((key_type = zend_hash_get_current_key(Z_ARRVAL_PP(pfkt), &string_key, &num_key, 1)) != HASH_KEY_NON_EXISTANT) {
		if ((zend_hash_get_current_data(Z_ARRVAL_PP(pfkt), (void**)&val) == SUCCESS)) {
		  if(Z_TYPE_PP(val) == IS_STRING && key_type==HASH_KEY_IS_STRING) { 
			size_t len = strlen(string_key);
			(*jenv)->writePairBegin_s(jenv, string_key, len);
			(*jenv)->writeString(jenv, Z_STRVAL_PP(val), Z_STRLEN_PP(val));
			(*jenv)->writePairEnd(jenv);
		  } else {
			zend_error(E_ERROR, "Argument #2 for %s() must be null, a string, or a map of java => php function names.", get_active_function_name(TSRMLS_C));
		  }
		}
		zend_hash_move_forward(Z_ARRVAL_PP(pfkt));
	  }
	  (*jenv)->writeCompositeEnd(jenv);
	} else if (Z_TYPE_PP(pfkt) == IS_STRING) {
	  (*jenv)->writeString(jenv, Z_STRVAL_PP(pfkt), Z_STRLEN_PP(pfkt));
	} else {
	  (*jenv)->writeCompositeBegin_h(jenv);
	  (*jenv)->writeCompositeEnd(jenv);
	}
  }

  /* interfaces */
  if(argc>2) {
	(*jenv)->writeCompositeBegin_a(jenv);
	if(Z_TYPE_PP(pclass) == IS_ARRAY) {
	  zend_hash_internal_pointer_reset(Z_ARRVAL_PP(pclass));
	  while ((key_type = zend_hash_get_current_data(Z_ARRVAL_PP(pclass), (void**)&val)) == SUCCESS) {
		EXT_GLOBAL(get_jobject_from_object)(*val, &class TSRMLS_CC);
		if(class) { 
		  (*jenv)->writePairBegin(jenv);
		  (*jenv)->writeObject(jenv, class);
		  (*jenv)->writePairEnd(jenv);
		} else {
		  zend_error(E_ERROR, "Argument #3 for %s() must be a "/**/EXT_NAME()/**/" interface or an array of interfaces.", get_active_function_name(TSRMLS_C));
		}
		zend_hash_move_forward(Z_ARRVAL_PP(pclass));
	  }
	} else {
	  EXT_GLOBAL(get_jobject_from_object)(*pclass, &class TSRMLS_CC);
	  if(class) { 
		(*jenv)->writePairBegin(jenv);
		(*jenv)->writeObject(jenv, class);
		(*jenv)->writePairEnd(jenv);
	  } else {
		zend_error(E_ERROR, "Argument #3 for %s() must be a "/**/EXT_NAME()/**/" interface or an array of interfaces.", get_active_function_name(TSRMLS_C));
	  }
	}
	(*jenv)->writeCompositeEnd(jenv);
  }
  (*jenv)->writeInvokeEnd(jenv);
a388 1

d408 3
a410 1
  last_exception_get(JG(jenv), &JG(exception));
d415 1
d418 3
a420 1
  last_exception_clear(JG(jenv), &JG(exception));
d443 26
d475 1
a475 1
	err = call_user_function_ex(0, JG(object), JG(func), JG(retval_ptr), count, func_params, 0, NULL TSRMLS_CC);
a478 1
	
d544 1
a544 18
  zval **pobj;
  long obj;
  proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) {RETURN_NULL();}

  if (ZEND_NUM_ARGS()!=1 || zend_get_parameters_ex(1, &pobj) == FAILURE)
	WRONG_PARAM_COUNT;

  convert_to_object_ex(pobj);
  obj = 0;
  EXT_GLOBAL(get_jobject_from_object)(*pobj, &obj TSRMLS_CC);
  if(!obj) {
	zend_error(E_ERROR, "Argument for %s() must be a "/**/EXT_NAME()/**/" object", get_active_function_name(TSRMLS_C));
	return;
  }
  (*jenv)->writeInvokeBegin(jenv, 0, "inspect", 0, 'I', return_value);
  (*jenv)->writeObject(jenv, obj);
  (*jenv)->writeInvokeEnd(jenv);
a546 1

d599 7
d652 10
a661 3
static const char on[]="On";
static const char on2[]="1";
static const char off[]="Off";
d674 2
a675 5
  if (new_value) {
	if((EXT_GLOBAL (ini_set) &U_HOSTS)) free(EXT_GLOBAL(cfg)->hosts);
	EXT_GLOBAL(cfg)->hosts=strdup(new_value);
	assert(EXT_GLOBAL(cfg)->hosts); if(!EXT_GLOBAL(cfg)->hosts) exit(6);
	EXT_GLOBAL(ini_updated)|=U_HOSTS;
d681 4
a684 8
	if (new_value) {
	  if(!strncasecmp(on, new_value, 2) || !strncasecmp(on2, new_value, 1))
		EXT_GLOBAL(cfg)->extJavaCompatibility=1;
	  else
		EXT_GLOBAL(cfg)->extJavaCompatibility=0;
	  EXT_GLOBAL(ini_updated)|=U_EXT_JAVA_COMPATIBILITY;
	}
	return SUCCESS;
d688 4
a691 8
	if (new_value) {
	  if(!strncasecmp(on, new_value, 2) || !strncasecmp(on2, new_value, 1))
		EXT_GLOBAL(cfg)->persistent_connections=1;
	  else
		EXT_GLOBAL(cfg)->persistent_connections=0;
	  EXT_GLOBAL(ini_updated)|=U_PERSISTENT_CONNECTIONS;
	}
	return SUCCESS;
d695 2
a696 12
  if (new_value) {
	if((EXT_GLOBAL (ini_set) &U_SERVLET)) free(EXT_GLOBAL(cfg)->servlet);
	if(!strncasecmp(on, new_value, 2) || !strncasecmp(on2, new_value, 1)) {
	  EXT_GLOBAL(cfg)->servlet=strdup(DEFAULT_SERVLET);
	  EXT_GLOBAL(cfg)->servlet_is_default=1;
	}
	else {
	  EXT_GLOBAL(cfg)->servlet=strdup(new_value);
	  EXT_GLOBAL(cfg)->servlet_is_default=0;
	}
	assert(EXT_GLOBAL(cfg)->servlet); if(!EXT_GLOBAL(cfg)->servlet) exit(6);
	EXT_GLOBAL(ini_updated)|=U_SERVLET;
d703 2
a704 6
  if (new_value) {
	if((EXT_GLOBAL (ini_set) &U_SOCKNAME)) free(EXT_GLOBAL(cfg)->sockname);
	EXT_GLOBAL(cfg)->sockname=strdup(new_value);
	EXT_GLOBAL(cfg)->socketname_set=1;
	assert(EXT_GLOBAL(cfg)->sockname); if(!EXT_GLOBAL(cfg)->sockname) exit(6);
	EXT_GLOBAL(ini_updated)|=U_SOCKNAME;
d774 1
d803 1
a803 1
 * Proto: object Java::Java (string classname [, string argument1, .\ .\ .\ ]) or object Java::java_exception (string classname [, string argument1, .\ .\ .\ ]) or object Java::JavaException (string classname [, string argument1, .\ .\ .\ ]);
d813 37
d851 1
a851 1
 * \endcode
d855 1
a855 16
  zval **argv;
  int argc = ZEND_NUM_ARGS();

  argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
  if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
	php_error(E_ERROR, "Couldn't fetch arguments into array.");
	RETURN_NULL();
  }

  if(argc<1 || Z_TYPE_P(argv[0])!=IS_STRING) WRONG_PARAM_COUNT;

  EXT_GLOBAL(call_function_handler)(INTERNAL_FUNCTION_PARAM_PASSTHRU,
									EXT_NAME(), CONSTRUCTOR, 1,
									getThis(),
									argc, argv);
  efree(argv);
a857 1

d874 1
a874 16
  zval **argv;
  int argc = ZEND_NUM_ARGS();

  argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
  if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
	php_error(E_ERROR, "Couldn't fetch arguments into array.");
	RETURN_NULL();
  }

  if(argc<1 || Z_TYPE_P(argv[0])!=IS_STRING) WRONG_PARAM_COUNT;

  EXT_GLOBAL(call_function_handler)(INTERNAL_FUNCTION_PARAM_PASSTHRU,
									EXT_NAME(), CONSTRUCTOR, 0, 
									getThis(),
									argc, argv);
  efree(argv);
d933 2
a934 11
  zval **xargv, **argv;
  int i = 0, xargc, argc = ZEND_NUM_ARGS();
  HashPosition pos;
  zval **param;


  argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
  if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
	php_error(E_ERROR, "Couldn't fetch arguments into array.");
	RETURN_NULL();
  }
a935 18
  /* function arguments in arg#2 */
  xargc = zend_hash_num_elements(Z_ARRVAL_P(argv[1]));
  xargv = safe_emalloc(sizeof(zval *), xargc, 0);
  for (zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(argv[1]), &pos);
	   zend_hash_get_current_data_ex(Z_ARRVAL_P(argv[1]), (void **) &param, &pos) == SUCCESS;
	   zend_hash_move_forward_ex(Z_ARRVAL_P(argv[1]), &pos)) {
	/*zval_add_ref(param);*/
	xargv[i++] = *param;
  }

  EXT_GLOBAL(call_function_handler)(INTERNAL_FUNCTION_PARAM_PASSTHRU,
									Z_STRVAL(*argv[0]), CONSTRUCTOR_NONE, 0,
									getThis(),
									xargc, xargv);
								   
  efree(argv);
  efree(xargv);
}
d952 2
a953 12
  long result = 0;
  
  if(Z_TYPE_P(getThis()) == IS_OBJECT) {
	EXT_GLOBAL(get_jobject_from_object)(getThis(), &result TSRMLS_CC);
  }
  if(result) {
	proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
	if(!jenv) {RETURN_NULL();}
	if((*jenv)->handle==(*jenv)->async_ctx.handle_request){/* async protocol */
	  php_error(E_ERROR, "php_mod_"/**/EXT_NAME()/**/"(%d): __tostring() invalid while in stream mode", 21);
	  RETURN_NULL();
	}
a954 10
	(*jenv)->writeInvokeBegin(jenv, 0, "ObjectToString", 0, 'I', return_value);
	(*jenv)->writeObject(jenv, result);
	(*jenv)->writeInvokeEnd(jenv);

  } else {
	EXT_GLOBAL(call_function_handler)(INTERNAL_FUNCTION_PARAM_PASSTHRU,
									  "tostring", CONSTRUCTOR_NONE, 0, getThis(), 0, NULL);
  }

}
d967 1
a967 12
  zval **argv;
  int argc = ZEND_NUM_ARGS();
  
  argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
  if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
	php_error(E_ERROR, "Couldn't fetch arguments into array.");
	RETURN_NULL();
  }
  
  EXT_GLOBAL(set_property_handler)(Z_STRVAL(*argv[0]), getThis(), argv[1], return_value);
  
  efree(argv);
d1033 1
a1033 10
  zval **argv;
  int argc = ZEND_NUM_ARGS();
  argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
  if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
	php_error(E_ERROR, "Couldn't fetch arguments into array.");
	RETURN_NULL();
  }
  
  EXT_GLOBAL(get_property_handler)(Z_STRVAL(*argv[0]), getThis(), return_value);
  efree(argv);
d1055 1
a1055 1
  serialize(INTERNAL_FUNCTION_PARAM_PASSTHRU);
d1072 1
a1072 1
  deserialize(INTERNAL_FUNCTION_PARAM_PASSTHRU);
d1090 1
a1090 15
  proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  zval **argv;
  int argc;

  if(!jenv) {RETURN_NULL();}

  argc = ZEND_NUM_ARGS();
  argv = (zval **) safe_emalloc(sizeof(zval *), argc+1, 0);
  if (zend_get_parameters_array(ht, argc, argv+1) == FAILURE) {
	php_error(E_ERROR, "Couldn't fetch arguments into array.");
	RETURN_NULL();
  }
  argv[0]=getThis();
  EXT_GLOBAL(invoke)("offsetExists", 0, argc+1, argv, 0, return_value TSRMLS_CC);
  efree(argv);
a1092 1

d1108 1
a1108 15
  zval **argv;
  int argc;
  proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) {RETURN_NULL();}

  argc = ZEND_NUM_ARGS();
  argv = (zval **) safe_emalloc(sizeof(zval *), argc+1, 0);
  if (zend_get_parameters_array(ht, argc, argv+1) == FAILURE) {
	php_error(E_ERROR, "Couldn't fetch arguments into array.");
	RETURN_NULL();
  }

  argv[0]=getThis();
  EXT_GLOBAL(invoke)("offsetGet", 0, argc+1, argv, 0, return_value TSRMLS_CC);
  efree(argv);
d1128 1
a1128 15
  zval **argv;
  int argc;
  proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) {RETURN_NULL();}

  argc = ZEND_NUM_ARGS();
  argv = (zval **) safe_emalloc(sizeof(zval *), argc+1, 0);
  if (zend_get_parameters_array(ht, argc, argv+1) == FAILURE) {
	php_error(E_ERROR, "Couldn't fetch arguments into array.");
	RETURN_NULL();
  }

  argv[0]=getThis();
  EXT_GLOBAL(invoke)("offsetSet", 0, argc+1, argv, 0, return_value TSRMLS_CC);
  efree(argv);
d1137 1
a1137 15
  zval **argv;
  int argc;
  proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  if(!jenv) {RETURN_NULL();}

  argc = ZEND_NUM_ARGS();
  argv = (zval **) safe_emalloc(sizeof(zval *), argc+1, 0);
  if (zend_get_parameters_array(ht, argc, argv+1) == FAILURE) {
	php_error(E_ERROR, "Couldn't fetch arguments into array.");
	RETURN_NULL();
  }

  argv[0]=getThis();
  EXT_GLOBAL(invoke)("offsetUnset", 0, argc+1, argv, 0, return_value TSRMLS_CC);
  efree(argv);
d1198 5
d1205 1
d1230 1
a1230 1
	  (*jenv)->writeInvokeEnd(jenv);
d1235 1
a1235 1
	  (*jenv)->writeInvokeEnd(jenv);
d1240 1
a1240 1
	  (*jenv)->writeInvokeEnd(jenv);
d1245 1
a1245 1
	  (*jenv)->writeInvokeEnd(jenv);
d1257 1
a1257 1
		  (*jenv)->writeInvokeEnd(jenv);
d1267 1
a1267 1
	  (*jenv)->writeInvokeEnd(jenv);
d1272 3
d1330 1
a1330 1
  EXT_GLOBAL(invoke)("currentKey", iterator->vm_iterator, 0, 0, 0, presult TSRMLS_CC);
d1367 1
a1367 1
  EXT_GLOBAL(invoke)("currentData", iterator->vm_iterator, 0, 0, 0, iterator->current_object TSRMLS_CC);
d1384 1
a1384 1
  (*jenv)->writeInvokeEnd(jenv);
d1400 4
d1406 2
d1409 2
a1410 2
  proxyenv *jenv = JG(jenv);
  vm_iterator *iterator = emalloc(sizeof *iterator);
d1412 7
d1442 1
a1442 1
  (*jenv)->writeInvokeEnd(jenv);
d1447 1
a1447 1
  (*jenv)->writeInvokeEnd(jenv);
d1492 1
a1492 1
  pval **arguments = (pval **) emalloc(sizeof(pval *)*arg_count);
d1499 1
d1507 1
a1507 1
  getParametersArray(ht, arg_count, arguments);
d1575 7
d1601 3
d1605 1
d1635 3
a1637 3
  make_lambda(&call, EXT_FN(EXT_GLOBAL(__call)));
  make_lambda(&get, EXT_FN(EXT_GLOBAL(__get)));
  make_lambda(&set, EXT_FN(EXT_GLOBAL(__set)));
d1713 19
d1737 11
a1747 4
  short is_local;
  char*s=EXT_GLOBAL(get_server_string) (TSRMLS_C);
  char*server = EXT_GLOBAL(test_server) (0, &is_local, 0 TSRMLS_CC);
  short is_level = ((EXT_GLOBAL (ini_user)&U_LOGLEVEL)!=0);
d1788 11
d1806 1
d1821 2
a1822 1
	EXT_GLOBAL(close_connection) (env, 0 TSRMLS_CC);
a1824 1
  assert(JG(jenv)==0);			/* see close_connection */
@


1.123
log
@Release-3-1-0
@
text
@d66 12
a77 1
  EXT_GLOBAL(close_connection) (&JG(jenv), EXT_GLOBAL(cfg)->persistent_connections TSRMLS_CC);
d2224 1
@


1.122
log
@Release-3-1-0
@
text
@d248 1
d260 2
a261 1
  assert(EXT_GLOBAL(cfg)->is_cgi_servlet && (*jenv)->servlet_ctx ||!EXT_GLOBAL(cfg)->is_cgi_servlet);
d268 4
d323 1
d330 2
a331 2
 
  assert(EXT_GLOBAL(cfg)->is_cgi_servlet && (*jenv)->servlet_ctx ||!EXT_GLOBAL(cfg)->is_cgi_servlet);
d333 3
@


1.121
log
@Release-3-1-0
@
text
@d2195 1
a2195 1
  proxyenv *env;
d2199 1
a2199 1
	EXT_GLOBAL(close_connection) (&env, 0 TSRMLS_CC);
d2202 1
a2202 2
  assert(*JG(jenv)==0);
  JG(jenv)=0;
@


1.120
log
@Release-3-1-0
@
text
@d1027 1
d1128 2
a1574 1
  long obj;
d2124 2
d2195 10
a2204 1
  EXT_GLOBAL(close_connection) (&JG(jenv), 0 TSRMLS_CC);
@


1.119
log
@Release-3-1-0
@
text
@a45 13
static void clone_cfg(TSRMLS_D) {
  JG(ini_user)=EXT_GLOBAL(ini_user);
  JG(hosts)=strdup(EXT_GLOBAL(cfg)->hosts);
  JG(servlet)=strdup(EXT_GLOBAL(cfg)->servlet);
}
static void destroy_cloned_cfg(TSRMLS_D) {
  if(JG(hosts)) free(JG(hosts));
  if(JG(servlet)) free(JG(servlet));
  JG(ini_user)=0;
  JG(hosts)=0;
  JG(servlet)=0;
}

d48 1
a48 1
 * backend, creates an instance of the proxyenv structure and clones
d53 1
a53 7
  if(EXT_GLOBAL(cfg)) {
	clone_cfg(TSRMLS_C);
  }

  EXT_GLOBAL(init_channel)(TSRMLS_C);

  if(JG(jenv)) {
d62 1
a62 1
 * backend, destroys the proxyenv instance.
d66 1
a66 24
  destroy_cloned_cfg(TSRMLS_C);

  if(JG(jenv)) {
	if(*JG(jenv)) {
	  if((*JG(jenv))->peer!=-1) {
		/* end servlet session */
		EXT_GLOBAL(protocol_end)(JG(jenv));
		close((*JG(jenv))->peer);
		if((*JG(jenv))->peerr!=-1) close((*JG(jenv))->peerr);
		if((*JG(jenv))->peer0!=-1) close((*JG(jenv))->peer0);
	  }
	  if((*JG(jenv))->s) free((*JG(jenv))->s);
	  if((*JG(jenv))->send) free((*JG(jenv))->send);
	  if((*JG(jenv))->server_name) free((*JG(jenv))->server_name);
	  if((*JG(jenv))->servlet_ctx) free((*JG(jenv))->servlet_ctx);
	  if((*JG(jenv))->servlet_context_string) free((*JG(jenv))->servlet_context_string);
	  free(*JG(jenv));
	}
	free(JG(jenv));
  }

  JG(jenv) = NULL;
  EXT_GLOBAL(destroy_channel)(TSRMLS_C);

d187 1
a187 1
 * access the library you have loaded, you must reset the backend to
d261 1
a261 1
								   backend if java_session() is not
d355 1
a355 1
 * Returns the name of the backend or null, if the backend is not running. Example:
d358 2
a359 2
 * if(!$backend) wakeup_administrator("backend not running");
 * echo "Connected to the backend: $backend\n";
d382 1
a382 1
 * \code echo "Resetting backend to initial state\n";
d386 1
a386 1
 * This procedure does nothing when the backend runs
d399 1
a399 1
  php_error(E_WARNING, "php_mod_"/**/EXT_NAME()/**/"(%d): Your script has called the privileged procedure \""/**/EXT_NAME()/**/"_reset()\" which resets the "/**/EXT_NAME()/**/" backend to its initial state. Therefore all "/**/EXT_NAME()/**/" caches are gone.", 18);
d406 1
a406 1
 * sent to the backend in one XML stream.
d1001 11
d1111 1
a1111 1
  PHP_INI_ENTRY(EXT_NAME()/**/".log_level",   NULL, PHP_INI_ALL, OnIniLogLevel)
d1114 1
d2002 1
a2002 1
 * JavaClass structures and tries to start the backend if
d2004 1
a2004 1
 * backend is not started if the environment variable
d2119 1
a2119 1
	clone_cfg(TSRMLS_C);
d2121 1
a2121 1
	destroy_cloned_cfg(TSRMLS_C);
d2161 1
a2161 1
  php_info_print_table_row(2, EXT_NAME()/**/".log_level", is_level ? EXT_GLOBAL(cfg)->logLevel : "no value (use backend's default level)");
d2173 1
d2184 1
a2184 1
 * Called when the module terminates. Stops the backend, if it is running.
d2191 1
@


1.118
log
@Release-3-1-0
@
text
@d2205 1
@


1.117
log
@Release-3-1-0
@
text
@a1023 1
#ifdef HAVE_FAST_TCP_SOCKETS
a1030 3
#else
  return FAILURE;
#endif
a1044 1
#ifdef HAVE_FAST_TCP_SOCKETS
a1057 4
  return SUCCESS;
#else
  return FAILURE;
#endif
a2191 1
#ifdef HAVE_FAST_TCP_SOCKETS
a2196 3
#else
	php_info_print_table_row(2, EXT_NAME()/**/".hosts", "<not available on this OS>");
#endif
a2204 1
  php_info_print_table_row(2, EXT_NAME()/**/" server", server?server:"localhost");
@


1.116
log
@Release-3.0.8
@
text
@d1024 1
d1032 3
d1049 1
d1064 3
d2201 1
d2207 3
@


1.115
log
@Release-3.0.8rc
@
text
@d339 1
a339 1
 * java_get_session("myPrivateApplicationStore")->put("key", "value");
d376 1
a376 1
 * Example which closes over the current environment and pass it back to java:
d383 1
a383 1
 * documentation or for details. Example:
d397 1
a397 1
 * Returns the name of the backend or null if the backend is not running. Example:
d420 1
a420 1
 * its initial state. If the call succeeds, all session handles and
d441 1
a441 1
  php_error(E_WARNING, "php_mod_"/**/EXT_NAME()/**/"(%d): Your script has called the privileged procedure \""/**/EXT_NAME()/**/"_reset()\" which resets the "/**/EXT_NAME()/**/" backend to its initial state. Therefore all "/**/EXT_NAME()/**/" session variables and all caches are gone.", 18);
d620 4
a623 5
/** Proto: mixed java_values(object ob) or mixed java_get_values(object ob)
 *
 * Fetches the value(s) of the java object into a php variable. ob
 * must be a java object. A java array, Map or Collection is returned
 * as a php array. Please make sure that the values do not not exceed
a626 4
 * function fetchValues($obj) { 
 *  if($obj instanceof Java) return java_values($obj);
 *  return $obj;
 * }
d1324 1
a1324 1
 * Use a string cast if you want to display the java string as a php
d2188 1
a2188 1
	  php_info_print_table_row(2, EXT_NAME()/**/".log_file", "<stdout>");
@


1.115.2.1
log
@Release-3-0-8-1
@
text
@d339 1
a339 1
 * java_get_session("myPublicApplicationStore")->put("key", "value");
d376 1
a376 1
 * Example which closes over the current environment and passes it back to java:
d383 1
a383 1
 * documentation for details. Example:
d397 1
a397 1
 * Returns the name of the backend or null, if the backend is not running. Example:
d420 1
a420 1
 * its initial state. If the call succeeds, all 
d441 1
a441 1
  php_error(E_WARNING, "php_mod_"/**/EXT_NAME()/**/"(%d): Your script has called the privileged procedure \""/**/EXT_NAME()/**/"_reset()\" which resets the "/**/EXT_NAME()/**/" backend to its initial state. Therefore all "/**/EXT_NAME()/**/" caches are gone.", 18);
d620 5
a624 4
/** Proto: mixed java_values(val) or mixed java_get_values(object ob)
 * Evaluates the object and fetches its content, if possible.
 * A java array, Map or Collection object is returned
 * as a php array. An array, Map or Collection proxy is returned as a java array, Map or Collection object, and a null proxy is returned as null. All values of java types for which a primitive php type exists are returned as php values. Everything else is returned unevaluated. Please make sure that the values do not not exceed
d628 4
d1329 1
a1329 1
 * Use a string cast or java_values(), if you want to display the java string as a php
d2193 1
a2193 1
	  php_info_print_table_row(2, EXT_NAME()/**/".log_file", "<stderr>");
@


1.114
log
@Release-3.0.8rc
@
text
@a503 1
#ifdef ZEND_ENGINE_2
d508 3
a510 2
	zend_error(E_ERROR, "Argument for %s() must be a "/**/EXT_NAME()/**/" object", get_active_function_name(TSRMLS_C));
	RETURN_NULL();
a515 4
#else
  *return_value = **pobj;
  zval_copy_ctor(return_value);
#endif
a1681 30
static HashTable *get_properties(zval *object TSRMLS_DC)
{
  long obj;
  zval *presult;
  proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
  zend_object *zobj, *zobj2, *ztmp;
  zobj = zend_objects_get_address(object TSRMLS_CC);
  if(!jenv) {
	return zobj->properties;
  }
  
  MAKE_STD_ZVAL(presult);
  ZVAL_NULL(presult);
  EXT_GLOBAL(get_jobject_from_object)(object, &obj TSRMLS_CC);
  (*jenv)->writeInvokeBegin(jenv, 0, "castToArray", 0, 'I', presult);
  (*jenv)->writeObject(jenv, obj);
  (*jenv)->writeInvokeEnd(jenv);
  
  zend_hash_destroy(zobj->properties);
  FREE_HASHTABLE(zobj->properties);

  ALLOC_HASHTABLE(zobj->properties);
  zend_hash_init(zobj->properties, 0, NULL, ZVAL_PTR_DTOR, 0);

  zend_hash_copy(zobj->properties, Z_ARRVAL_P(presult), (copy_ctor_func_t) zval_add_ref, (void *) &ztmp, sizeof(zval *));

  zval_ptr_dtor((zval**)&presult);	

  return zobj->properties;
}
a2097 1
  EXT_GLOBAL(handlers).get_properties = get_properties;
@


1.113
log
@Release-3.0.8test1
@
text
@d1686 30
d2132 1
@


1.112
log
@Release-3.0.8test1
@
text
@d624 6
a629 1
/** Proto: array java_values(object ob) or array java_get_values(object ob)
a630 2
 * Fetches the object into a php array. ob must be a java array or it
 * must implement java.util.Map or java.util.Collection. Please make sure that the java array, Map or Collection does not exceed php's memory limit. Example:
d632 19
a650 1
 * print_r(java_get_values($sys->getProperties()));
d1747 1
a1747 1
	  (*jenv)->writeInvokeBegin(jenv, 0, "getValues", 0, 'I', writeobj);
@


1.111
log
@Release-3.0.8pre2
@
text
@d784 14
a797 2
  if(allocate_php4_exception(TSRMLS_C))
	if(zend_eval_string((char*)handler, *JG(retval_ptr), (char*)name TSRMLS_CC)!=SUCCESS) { 
d800 1
d803 11
a813 2
  if(allocate_php4_exception(TSRMLS_C))	/* checked and destroyed in client. handle_exception() */
	if (call_user_function_ex(0, JG(object), JG(func), JG(retval_ptr), count, func_params, 0, NULL TSRMLS_CC) != SUCCESS) {
d816 1
@


1.110
log
@Release-3.0.8pre2
@
text
@d131 4
d296 5
a300 1
 
d447 2
a448 1
 * Select asynchronuous protocol mode (streaming mode).
d457 4
d464 1
a464 1
  (*jenv)->handle=(*jenv)->async_ctx.handle_request;
d469 1
a469 1
 * End asynchronuous protocol mode (streaming mode).
d478 4
d484 1
a484 1
  (*jenv)->handle=(*jenv)->handle_request;
d496 4
d540 5
d580 4
d1306 4
d1649 4
d1841 5
@


1.109
log
@Release-3.0.8pre2
@
text
@d436 35
d875 2
@


1.108
log
@Release-3.0.7
@
text
@d41 1
a41 1
int *__errno (void) { return &java_errno; }
@


1.107
log
@Release-3.0.7
@
text
@d43 1
a43 1
  php_info_print_table_row_ex(a, "java", b, c)
d468 1
a468 1
java_session(session_id())->set(key,val) instead of the \
d471 1
a471 1
your script fixes this problem, please report this session module bug \
d945 1
a945 1
	if(!strncasecmp(on, new_value, 2) || !strncasecmp(on2, new_value, 1))
d947 3
a949 1
	else
d951 2
@


1.106
log
@Release-3.0.6
@
text
@a2063 1
	static const char default_wrapper[] = "no value (use default wrapper)";
d2066 2
a2067 1
	php_info_print_table_row(2, EXT_NAME()/**/".wrapper", (EXT_GLOBAL(option_set_by_user) (U_WRAPPER, EXT_GLOBAL(ini_user))) ? EXT_GLOBAL(cfg)->wrapper : (char*)default_wrapper);
d2080 3
d2084 1
d2096 1
a2096 1
 * When running in Apache/IIS, or as a FastCGI binary, this procedure is 
@


1.105
log
@Release-3.0.5
@
text
@a85 1
  EXT_GLOBAL(destroy_channel)(TSRMLS_C);
d105 1
d107 2
d278 2
a279 1
  return zend_ini_long((char*)session_max_lifetime, sizeof(session_max_lifetime), 0);
d294 4
a297 2
  EXT_GLOBAL(check_context) (jenv TSRMLS_CC); /* re-direct if no
												 context was found */
d311 1
a358 3
  EXT_GLOBAL(check_context) (jenv TSRMLS_CC); /* re-direct if no
												 context was found */

@


1.104
log
@Release-3.0.5(pre)
@
text
@d376 1
a376 1
 * @@see java_get_session()
d463 2
a464 2
"Probably the object has been destroyed already by the java_rshutdown() method -- have you loaded the \
session module before the java module? Use \
d467 3
a469 5
session module or if you cannot guarantee that the session module's \
rshutdown function is called before the zend objects store is \
destroyed and before the PHP/Java Bridge rshutdown function is called. \n\
If \"session_write_close();\" at the end of your script fixes this problem, \
please report this PHP bug to the PHP release team.";
d577 1
a577 1
 * echo (string)$object;
d927 11
d957 1
d1036 1
d1102 1
a1102 5
#if EXTENSION == JAVA
EXT_METHOD(EXT, java_class)
#elif EXTENSION == MONO
EXT_METHOD(EXT, mono_class)
#endif
d1212 1
a1212 1
 * object to a string, thus echo "$ob" displays a string
d1218 2
a1219 3
 * echo (string)$string; 
 * // implicit cast to string:
 * echo "".$string;
d1383 3
d1396 1
a1396 1
EXT_METHOD(EXT, offsetExists)
d1429 1
a1429 1
EXT_METHOD(EXT, offsetGet)
d1463 1
a1463 1
EXT_METHOD(EXT, offsetSet)
d1486 1
a1486 1
EXT_METHOD(EXT, offsetUnset)
a1525 1
  //EXT_MALIAS(EXT, __construct, EXT, arginfo_set, ZEND_ACC_PUBLIC)
d1545 1
a1545 2
  //PHP_ME(EXT, __getFunctions, NULL, 0)
  //PHP_ME(EXT, __getTypes, NULL, 0)
d1548 1
a1548 1
function_entry EXT_GLOBAL(array_class_functions)[] = {
d1550 8
a1557 4
  EXT_ME(EXT, offsetExists,  arginfo_get, ZEND_ACC_PUBLIC)
  EXT_ME(EXT, offsetGet,     arginfo_get, ZEND_ACC_PUBLIC)
  EXT_ME(EXT, offsetSet,     arginfo_set, ZEND_ACC_PUBLIC)
  EXT_ME(EXT, offsetUnset,   arginfo_get, ZEND_ACC_PUBLIC)
d1832 8
a1839 1
  short createInstance=!instanceof_function(ce, EXT_GLOBAL(class_class_entry) TSRMLS_CC);
d1962 1
a1962 1
  INIT_OVERLOADED_CLASS_ENTRY(ce, EXT_NAME(), 
d1977 2
a1978 2
  INIT_CLASS_ENTRY(ce, EXT_NAME()/**/"Array", 
				   EXT_GLOBAL(array_class_functions));
d1998 1
a1998 1
  INIT_CLASS_ENTRY(ce, EXT_NAME()/**/"_class", EXT_GLOBAL(class_functions));
d2005 1
a2005 1
  INIT_CLASS_ENTRY(ce, EXT_NAME()/**/"class", EXT_GLOBAL(class_functions));
d2010 1
a2010 1
  INIT_CLASS_ENTRY(ce, EXT_NAME()/**/"exception", EXT_GLOBAL(class_functions));
d2071 2
a2072 1
  php_info_print_table_row(2, EXT_NAME()/**/".hosts", JG(hosts));
d2074 2
a2075 1
  php_info_print_table_row(2, EXT_NAME()/**/".servlet", JG(servlet)?JG(servlet):off);
d2077 2
a2078 3
  if(!server || is_local) {
	php_info_print_table_row(2, EXT_NAME()/**/" command", s);
  }
@


1.103
log
@Release-3.0.3
@
text
@d274 4
d303 1
a303 1
  (*jenv)->writeLong(jenv, 1440); // FIXME: use session.gc_maxlifetime
d462 10
a471 1

d480 1
a480 1
	php_error(E_WARNING, EXT_NAME()/**/" cannot be serialized.");
a483 1
  assert(obj);
d485 3
a487 1
	php_error(E_WARNING, EXT_NAME()/**/" cannot be serialized.");
d495 1
a495 1
  (*jenv)->writeLong(jenv, 1440); // FIXME: use session.gc_maxlifetime
d516 1
a516 1
	php_error(E_ERROR, EXT_NAME()/**/" cannot be de-serialized.");
a519 1
  assert(SUCCESS==err);
d521 3
a523 2
	php_error(E_WARNING, EXT_NAME()/**/" cannot be deserialized.");
	RETURN_NULL();
d530 1
a530 1
  (*jenv)->writeLong(jenv, 1440); // FIXME: use session.gc_maxlifetime
d880 5
d1056 1
a1056 1
EXT_METHOD(EXT, EXT)
d1512 1
a1514 2
  EXT_MALIAS(EXT, EXT_GLOBAL_N(exception), EXT, NULL, 0)
  EXT_MALIAS(EXT, EXT_GLOBAL(exception), EXT, NULL, 0)
d1525 18
d1549 1
a1816 1
  short createInstance = 1;
d1818 4
a1821 7
  zend_class_entry *ce = Z_OBJCE_P(getThis()), *parent;

  for(parent=ce; parent->parent; parent=parent->parent)
	if ((parent==EXT_GLOBAL(class_class_entry)) || ((parent==EXT_GLOBAL(class_class_entry_jsr)))) {
	  createInstance = 0;		/* do not create an instance for new java_class or new JavaClass */
	  break;
	}
a1874 48
/*
 * check for CGI environment and set hosts so that we can connect back
 * to the sever from which we were called.
 */
static void override_ini_from_cgi(void) {
  static const char key_hosts[]="java.hosts";
  static const char key_servlet[] = "java.servlet";
  char *hosts;
  EXT_GLOBAL(cfg)->is_cgi_servlet=0;
  
  if ((hosts=getenv("X_JAVABRIDGE_OVERRIDE_HOSTS"))) {
	switch(*hosts) {
	case '/': 				/* this is fast cgi, override
							   information will be passed via
							   X_JAVABRIDGE_REDIRECT header (see
							   override_ini_for_redirect()). */
	  zend_alter_ini_entry((char*)key_servlet, sizeof key_servlet,
						   (char*)on, sizeof on,
						   ZEND_INI_SYSTEM, PHP_INI_STAGE_STARTUP);
	  break;

	default:					/* cgi binary with redirect
								   information */
	  {
		char *kontext, *host = strdup(hosts);
		kontext = strchr(host, '/');
		if(kontext) *kontext++=0;
		zend_alter_ini_entry((char*)key_hosts, sizeof key_hosts,
							 host, strlen(host)+1,
							 ZEND_INI_SYSTEM, PHP_INI_STAGE_STARTUP);
		if(!kontext) {
		  zend_alter_ini_entry((char*)key_servlet, sizeof key_servlet,
							   (char*)on, sizeof on,
							   ZEND_INI_SYSTEM, PHP_INI_STAGE_STARTUP);
		} else {
		  zend_alter_ini_entry((char*)key_servlet, sizeof key_servlet,
							   (char*)kontext, strlen(kontext)+1,
							   ZEND_INI_SYSTEM, PHP_INI_STAGE_STARTUP);
		}
		free(host);
	  }
	  /* fall through */
	case 0:					/* cgi binary, but redirect is off */
	  EXT_GLOBAL(cfg)->is_cgi_servlet=1;
	}
  }
}

a1888 5

  EXT_GLOBAL(cfg)->can_fork = 
	!(EXT_GLOBAL (option_set_by_user) (U_SOCKNAME, EXT_GLOBAL(ini_user))) &&
	!(EXT_GLOBAL (option_set_by_user) (U_HOSTS, EXT_GLOBAL(ini_user))) &&
	!(EXT_GLOBAL (option_set_by_user) (U_SERVLET, EXT_GLOBAL(ini_user)));
d1920 1
a1920 1
  parent = (zend_class_entry *) EXT_GLOBAL(class_entry);
d1958 9
a1966 1
  zend_class_implements(EXT_GLOBAL(class_entry) TSRMLS_CC, 1, zend_ce_arrayaccess);
a2007 3
	override_ini_from_cgi();
	EXT_GLOBAL(ini_user)|=EXT_GLOBAL(ini_updated);
	EXT_GLOBAL(ini_updated)=0;
d2031 9
a2039 2
	php_info_print_table_row(2, EXT_NAME()/**/".libpath", EXT_GLOBAL(cfg)->ld_library_path);
	php_info_print_table_row(2, EXT_NAME()/**/".classpath", EXT_GLOBAL(cfg)->classpath);
d2043 1
d2046 1
a2046 1
	php_info_print_table_row(2, EXT_NAME()/**/".wrapper", EXT_GLOBAL(cfg)->wrapper);
@


1.102
log
@Release-3.0.3
@
text
@d47 3
a49 5
  if(!JG(ini_user)) {
	JG(ini_user)=EXT_GLOBAL(ini_user);
	JG(hosts)=strdup(EXT_GLOBAL(cfg)->hosts);
	JG(servlet)=strdup(EXT_GLOBAL(cfg)->servlet);
  }
d66 5
a70 1
  if(EXT_GLOBAL(cfg)) clone_cfg(TSRMLS_C);
d86 1
d2027 1
@


1.101
log
@Release-3-0-2
@
text
@d91 1
@


1.100
log
@Release-3-0-2
@
text
@d114 1
a114 1
 * Proto: object java_last_exception_get(void);
d137 1
a137 1
 * Proto: void java_last_exception_clear(void);
d153 1
a153 1
 * Proto: void java_set_file_encoding(string);
d201 1
a201 1
 * Proto: void java_require(string path);
d229 1
a229 1
 * Proto:  bool java_instanceof(object object, object clazz);
d301 1
a301 1
 * Proto: void java_session([string], [bool]);
d307 1
a307 1
 * java_session()->put("key", new java("java.lang.Object"));
d314 1
a314 1
 * When java_session() is called with a session handle, the session
d317 1
a317 1
 * java_session("myPrivateApplicationStore")->put("key", "value");
d320 1
a320 1
 * When java_session() is called with a second argument set to true,
d324 1
a324 1
 * java_session(null, true)->put("key", "val");
d353 1
a353 1
 * Proto: object java_context(void);
d359 1
a359 1
 * java_context()->call(java_closure()) || die "Script should be called from java";
d366 1
a366 1
 * java_context()->getHttpServletRequest();
d376 1
a376 1
 * Proto: string java_get_server_name(void);
d380 1
a380 1
 * $backend = java_server_name();
d540 1
a540 1
/** Proto: array java_values(object ob);
d545 1
a545 1
 * print_r(java_values($sys->getProperties()));
d554 1
a554 1
 * Proto: object java_closure([object],[array|string],[object]);
d560 1
a560 1
 * $object = java_closure();
d569 1
a569 1
 * echo (string)java_closure(null, "hello");
d582 1
a582 1
 *   return java_closure(new Listener(), null, array(new java("java.awt.event.ActionListener")));
a670 2
 *
 * Exception handler for php5
a684 2
 *
 * Exception handler for php4
a713 2
 *
 * Proto: string java_call_with_exception_handler(void);
d767 1
a767 1
 * echo java_inspect(java_context());
d886 10
d995 1
d1020 1
a1020 1
 * Proto: object Java::Java (string classname [, string argument1, .\ .\ .\ ]);
d1026 3
a1028 2
 *
 * $ex = new JavaException("java.lang.Exception");
d1055 1
a1055 1
 * Proto: object Java::JavaClass ( string classname);
d1061 2
a1062 1
 *
d1093 1
a1093 1
 * Proto: mixed Java::__call ( string procedure_name [, array arguments ]);
d1101 1
a1101 1
 * # $v=new JPersistenceAdapter(new java("java.lang.StringBuffer", "hello"));
d1117 2
a1118 2
 *    $buf = new java("java.io.ByteArrayOutputStream");
 *    $out = new java("java.io.ObjectOutputStream", $buf);
d1125 2
a1126 2
 *    $buf = new java("java.io.ByteArrayInputStream",base64_decode($this->serialID));
 *    $in = new java("java.io.ObjectInputStream", $buf);
d1179 1
a1179 1
/** Proto: object Java::__toString (void);
d1216 1
a1216 1
 * Proto: string Java::__set(object, object);
d1241 1
a1241 1
 * Proto: void Java::__destruct();
d1294 1
a1294 1
 * Proto: string Java::__get(object);
d1316 1
a1316 1
 * Proto: string Java::__sleep();
d1321 1
a1321 1
 *   $vector=new JPersistenceAdapter(new java("java.lang.StringBuffer", "hello"));
d1337 1
a1337 1
/** Proto: string Java::__wakeup();
d1354 1
a1354 1
/** Proto: string Java::offsetExists();
d1359 1
a1359 1
 * $System = new java("java.lang.System");
d1385 1
a1385 1
 * Proto: string Java::offsetGet();
d1391 1
a1391 1
 * $System = new java("java.lang.System");
d1416 1
a1416 1
/** Proto: string Java::offsetSet();
d1450 1
a1450 1
/** Proto: string Java::offsetUnset();
d2045 1
a2045 1
  if(is_local) {
d2048 1
@


1.99
log
@Release-3-0-2
@
text
@d1521 1
a1521 1

d1548 1
a1548 1
		  EXT_GLOBAL(get_jobject_from_object)(writeobj, &obj2 TSRMLS_CC);
@


1.98
log
@Version-3.0.0pre1
@
text
@a28 1
#include "zend_builtin_functions.h"
d49 2
a50 2
	JG(hosts)=estrdup(EXT_GLOBAL(cfg)->hosts);
	JG(servlet)=estrdup(EXT_GLOBAL(cfg)->servlet);
d54 2
a55 2
  if(JG(hosts)) efree(JG(hosts));
  if(JG(servlet)) efree(JG(servlet));
d357 1
a357 1
 * Example:
a358 1
 * # close over the current environment and pass it back to java.
a368 1
 * @@see java_inspect()
d378 6
a383 1
 * Returns the name of the backend or null if the backend is not running. 
d520 1
d522 3
d543 1
a543 3
 * must implement java.util.Map or java.util.Collection. Before
 * calling this procedure, please make sure that the java array or Map
 * or Collection does not exceed php's memory limit. Example:
d1062 1
a1062 1
EXT_METHOD(EXT, javaclass)
d1064 1
a1064 1
EXT_METHOD(EXT, monoclass)
d1114 1
a1114 1
 *    $this->serialID = $buf->toByteArray();
d1118 1
a1118 1
 *    $buf = new java("java.io.ByteArrayInputStream", $this->serialID);
d1176 3
a1178 2
 * representation of $ob, e.g.: \code [o(String)"hello"]\endcode. Use
 * a string cast if you want to display the java string as a php
a1183 6
 * \endcode.
 * 
 * Example:
 * \code
 * $System = new JavaClass("java.lang.System");
 * echo (string)$System->currentTimeMillies();
d1283 1
a1283 9
  long obj;

  EXT_GLOBAL(get_jobject_from_object)(getThis(), &obj TSRMLS_CC);
  if(!obj) RETURN_TRUE;			/* may happen when vm is not initalized */

  if(JG(jenv))
	(*JG(jenv))->writeUnref(JG(jenv), obj);

  RETURN_TRUE;
d1349 1
a1349 1
 * See array::offsetExists(). 
d1353 1
a1353 1
 * $props = $System.getProperties();
a1361 1
  long obj;
d1366 2
a1367 2
  argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
  if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
d1371 2
a1372 8
  EXT_GLOBAL(get_jobject_from_object)(getThis(), &obj TSRMLS_CC);
  assert(obj);
  (*jenv)->writeInvokeBegin(jenv, 0, "getPhpMap", 0, 'I', return_value);
  (*jenv)->writeObject(jenv, obj);
  (*jenv)->writeInvokeEnd(jenv);
  EXT_GLOBAL(get_jobject_from_object)(return_value, &obj TSRMLS_CC);
  assert(obj);
  EXT_GLOBAL(invoke)("offsetExists", obj, argc, argv, 0, return_value TSRMLS_CC);
d1385 1
a1385 1
 * $props = $System.getProperties();
a1393 1
  long obj;
d1398 2
a1399 2
  argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
  if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
d1404 2
a1405 8
  EXT_GLOBAL(get_jobject_from_object)(getThis(), &obj TSRMLS_CC);
  assert(obj);
  (*jenv)->writeInvokeBegin(jenv, 0, "getPhpMap", 0, 'I', return_value);
  (*jenv)->writeObject(jenv, obj);
  (*jenv)->writeInvokeEnd(jenv);
  EXT_GLOBAL(get_jobject_from_object)(return_value, &obj TSRMLS_CC);
  assert(obj);
  EXT_GLOBAL(invoke)("offsetGet", obj, argc, argv, 0, return_value TSRMLS_CC);
a1427 1
  long obj;
d1432 2
a1433 2
  argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
  if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
d1437 3
a1439 8
  EXT_GLOBAL(get_jobject_from_object)(getThis(), &obj TSRMLS_CC);
  assert(obj);
  (*jenv)->writeInvokeBegin(jenv, 0, "getPhpMap", 0, 'I', return_value);
  (*jenv)->writeObject(jenv, obj);
  (*jenv)->writeInvokeEnd(jenv);
  EXT_GLOBAL(get_jobject_from_object)(return_value, &obj TSRMLS_CC);
  assert(obj);
  EXT_GLOBAL(invoke)("offsetSet", obj, argc, argv, 0, return_value TSRMLS_CC);
d1456 2
a1457 2
  argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
  if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
d1461 3
a1463 8
  EXT_GLOBAL(get_jobject_from_object)(getThis(), &obj TSRMLS_CC);
  assert(obj);
  (*jenv)->writeInvokeBegin(jenv, 0, "getPhpMap", 0, 'I', return_value);
  (*jenv)->writeObject(jenv, obj);
  (*jenv)->writeInvokeEnd(jenv);
  EXT_GLOBAL(get_jobject_from_object)(return_value, &obj TSRMLS_CC);
  assert(obj);
  EXT_GLOBAL(invoke)("offsetUnset", obj, argc, argv, 0, return_value TSRMLS_CC);
a1504 43
static zend_object_value create_object(zend_class_entry *class_type TSRMLS_DC)
{
  /* standard initialization, copied from parent zend_API.c */
  zval *tmp;
  zend_object *object;
  zend_object_value obj = zend_objects_new(&object, class_type TSRMLS_CC);
  ALLOC_HASHTABLE(object->properties);
  zend_hash_init(object->properties, 0, NULL, ZVAL_PTR_DTOR, 0);
  zend_hash_copy(object->properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref, (void *) &tmp, sizeof(zval *));

  /* real work */
  obj.handlers = (zend_object_handlers*)&EXT_GLOBAL(handlers);
  return obj;
}

static zend_object_value create_exception_object(zend_class_entry *class_type TSRMLS_DC)
{
  /* standard initialization, copied from parent zend_exceptions.c */
  zval tmp, obj;
  zend_object *object;
  zval *trace;
  obj.value.obj = zend_objects_new(&object, class_type TSRMLS_CC);

  ALLOC_HASHTABLE(object->properties);
  zend_hash_init(object->properties, 0, NULL, ZVAL_PTR_DTOR, 0);
  zend_hash_copy(object->properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref, (void *) &tmp, sizeof(zval *));
  
  ALLOC_ZVAL(trace);
  ZVAL_NULL(trace);
  trace->is_ref = 0;
  trace->refcount = 0;
  zend_fetch_debug_backtrace(trace, 0 TSRMLS_CC);
  
  zend_update_property_string(zend_exception_get_default(), &obj, "file", sizeof("file")-1, zend_get_executed_filename(TSRMLS_C) TSRMLS_CC);
  zend_update_property_long(zend_exception_get_default(), &obj, "line", sizeof("line")-1, zend_get_executed_lineno(TSRMLS_C) TSRMLS_CC);
  zend_update_property(zend_exception_get_default(), &obj, "trace", sizeof("trace")-1, trace TSRMLS_CC);
  
  /* real work */
  obj.value.obj.handlers = (zend_object_handlers*)&EXT_GLOBAL(handlers);
  
  return obj.value.obj;
}

d1726 2
d1855 1
a1855 1
		char *kontext, *host = estrdup(hosts);
d1870 1
a1870 1
		efree(host);
d1904 1
a1904 1
 * backend is NOT started if the environment variable
d1907 2
a1908 2
 * or Fast CGI, this procedure is called only once, when running as a
 * CGI binary it is called whenever the CGI binary is called.
d1966 1
a1966 1
  EXT_GLOBAL(class_entry)->create_object = create_object;
d1979 1
a1979 1
  EXT_GLOBAL(exception_class_entry)->create_object = create_exception_object;
@


1.97
log
@Release-3.0.0pre1
@
text
@d3 8
d33 6
a38 1
	 struct cfg *EXT_GLOBAL (cfg)  = 0;
d62 5
d78 4
d114 6
a119 2
/* {{{ proto object java_last_exception_get(void)
	 Get last Java exception */
a128 1
/* }}} */
d137 6
a142 2
/* {{{ proto void java_last_exception_clear(void)
	 Clear last java extension */
a151 1
/* }}} */
d153 8
a160 2
/* {{{ proto void java_set_file_encoding(void)
	 Set the java file encoding, for example UTF-8 or ASCII. Needed because php does not support unicode. */
a175 1
/* }}} */
d201 23
a223 2
/* {{{ proto void java_require(string path)
	 Set the library path. Example: java_require("foo.jar;bar.jar"); */
a227 1
/* }}} */
d229 9
a237 2
/* {{{ proto bool java_instanceof(object object, object clazz)
	 Tests if object is an instance of clazz. Example: return($o instanceof Java && $c instanceof Java && java_instanceof($o, $c)); */
a269 1
/* }}} */
d301 28
a328 2
/* {{{ proto void java_session([string], [bool])
	 Return a session handle. Example: java_session(null, true); */
a332 1
/* }}} */
d353 20
a372 2
/* {{{ proto object java_context(void)
	 Returns the jsr223 script context handle. Example: java_context()->getHttpServletRequest(); */
a376 1
/* }}} */
d378 5
a382 2
/* {{{ proto string java_get_server_name(void)
	 Returns the name of the backend or null if the backend is not running. */
a393 1
/* }}} */
d395 15
a409 2
/* {{{ proto void java_reset(void)
	 Tries to reset the backent to its initial state. If the call succeeds, all session handles and caches are gone. This procedure does nothing when the backend runs in a servlet environment or an application server. */
a421 2
/* }}} */

d534 10
a543 2
/* {{{ proto array java_get_values(object ob)
	 fetches the object into a php array. ob must be a java array or it must implement java.util.Map or java.util.Collection. Before calling this procedure, please make sure that the java array or Map or Collection does not exceed php's memory limit. Example: print_r(java_values($sys->getProperties()));*/
a547 1
/* }}} */
d549 33
a581 2
/* {{{ proto object java_get_closure([object],[array|string],[object])
	 Closes over the php environment and packages it up as a java class. Example: java_context()->call(java_get_closure); */
a662 1
/* }}} */
d666 2
d682 2
d712 5
a716 2
/* {{{ proto string java_call_with_exception_handler(void)
 Only for internal use. */
a760 1
/* }}} */
d762 10
a771 2
/* {{{ proto void java_inspect(object)
   Returns the contents (public fields, public methods, public classes) of object as a string. */
a791 1
/* }}} */
d843 18
a860 1
	 int EXT_GLOBAL(ini_updated), EXT_GLOBAL(ini_user), EXT_GLOBAL(ini_set);
d862 4
d867 4
d872 4
d879 3
d1010 13
a1022 2
/* {{{ proto object Java::Java ( string classname [, string argument1, ...])
   Java constructor. Example: new Java("java.lang.String", "hello world"); */
a1041 1
/* }}} */
d1044 18
a1061 3
/* {{{ proto object Java::JavaClass ( string classname)
   References a java class. Example: $String=new Java("java.lang.String"); $ob = $String->newInstance(); */
EXT_METHOD(EXT, EXT_GLOBAL(class))
a1079 1
/* }}} */
d1081 54
a1134 2
/* {{{ proto mixed Java::__call ( string procedure_name [, array arguments ])
   Calls a Java procedure */
a1166 1
/* }}} */
d1168 19
a1186 2
/* {{{ proto object Java::__toString (void)
   Displays the java object as a string. Note: it doesn't cast the object to a string, thus echo "$ob" displays a string representation of $ob, e.g.: [o(String)"hello"], and echo "".$ob (or: echo (string)$ob) displays $ob as a string, e.g.: hello. */
a1207 1
/* }}} */
d1209 9
a1217 2
/* {{{ proto string Java::__set(object, object)
 The setter. */
a1232 1
/* }}} */
d1234 48
a1281 2
/* {{{ proto string Java::__destruct()
 The destructor. */
a1293 1
/* }}} */
d1295 8
a1302 2
/* {{{ proto string Java::__get(object)
 The getter. */
a1315 1
/* }}} */
d1317 17
a1333 2
/* {{{ proto string Java::__sleep()
 Serializes the object. */
d1338 13
a1350 2
/* {{{ proto string Java::__wakeup()
 Deserializes the object. */
a1354 1
/* }}} */
d1356 10
a1365 2
/* {{{ proto string Java::offsetExists()
 See array::offsetExists(). */
a1390 1
/* }}} */
d1393 13
a1405 2
/* {{{ proto string Java::offsetGet()
 See array::offsetGet(). */
a1430 1
/* }}} */
d1432 15
a1446 2
/* {{{ proto string Java::offsetSet()
 See array::offsetSet(). */
a1470 1
/* }}} */
d1472 4
a1475 2
/* {{{ proto string Java::offsetUnset()
 See array::offsetUnset(). */
a1499 1
/* }}} */
d1832 3
d1975 10
d2094 3
d2137 6
@


1.96
log
@Version-3.0.0pre
@
text
@d91 3
d103 2
d111 3
d123 1
d125 2
d142 2
d166 4
a169 4
EXT_FUNCTION(EXT_GLOBAL(set_library_path))
{
  require(INTERNAL_FUNCTION_PARAM_PASSTHRU);
}
d174 1
d176 2
d210 1
d242 2
d248 1
d269 2
d275 1
d277 2
d290 1
d292 2
d306 1
d420 2
a421 5
EXT_FUNCTION(EXT_GLOBAL(values))
{
  values(INTERNAL_FUNCTION_PARAM_PASSTHRU);
}

d426 1
d428 2
d511 2
d556 3
d603 1
d605 2
d627 1
d814 2
d827 2
d835 1
d837 3
d851 2
d859 1
d861 2
d895 4
d920 4
d939 4
d955 4
d972 4
d980 2
d986 1
d988 2
d1015 5
d1045 1
d1047 2
d1073 1
d1075 2
d1101 1
@


1.95
log
@Version-3.0(pre)
@
text
@d25 1
a25 1
struct cfg *EXT_GLOBAL (cfg)  = 0;
d30 2
a31 2
#define php_info_print_table_row(a, b, c) \
   php_info_print_table_row_ex(a, "java", b, c)
a59 20
/**
 * Call the java continuation with the current continuation as its
 * argument
 */
static call_java_continuation_with_current_continuation(TSRMLS_D) {
  static const char name[] = "call_java_continuation_with_current_continuation";
  static const char code[] = "\
if(($kont=array_key_exists('X_JAVABRIDGE_CONTINUATION', $_SERVER)\n\
?$_SERVER['X_JAVABRIDGE_CONTINUATION']\n\
:(array_key_exists('HTTP_X_JAVABRIDGE_CONTINUATION', $_SERVER)\n\
?$_SERVER['HTTP_X_JAVABRIDGE_CONTINUATION']:false))) {\n\
\n\
$ctx = java_context();\n\
$continuation = $ctx->getAttribute('X_JAVABRIDGE_CONTINUATION', $kont);\n\
$continuation->call(java_closure());\n\
}\n";
  int ret = zend_eval_string((char*)code, 0, (char*)name TSRMLS_CC);
  assert(SUCCESS==ret);
}

a61 2
  call_java_continuation_with_current_continuation(TSRMLS_C);

d67 1
a67 1
								/* end servlet session */
d514 4
a517 4
	if(allocate_php4_exception(TSRMLS_C))
	  if(zend_eval_string((char*)handler, *JG(retval_ptr), (char*)name TSRMLS_CC)!=SUCCESS) { 
		php_error(E_WARNING, "php_mod_"/**/EXT_NAME()/**/"(%d): Could not call user function: %s.", 22, Z_STRVAL_P(JG(func)));
	  }
d593 4
a596 4
	EXT_FE(EXT_GLOBAL(last_exception_get), NULL)
	EXT_FE(EXT_GLOBAL(last_exception_clear), NULL)
	EXT_FE(EXT_GLOBAL(set_file_encoding), NULL)
	EXT_FE(EXT_GLOBAL(instanceof), NULL)
d598 2
a599 2
	EXT_FE(EXT_GLOBAL(require),  NULL)
	EXT_FALIAS(EXT_GLOBAL(set_library_path), EXT_GLOBAL(require),  NULL)
d601 2
a602 2
	EXT_FE(EXT_GLOBAL(get_session), NULL)
	EXT_FALIAS(EXT_GLOBAL(session), EXT_GLOBAL(get_session), NULL)
d604 2
a605 2
	EXT_FE(EXT_GLOBAL(get_context), NULL)
	EXT_FALIAS(EXT_GLOBAL(context), EXT_GLOBAL(get_context), NULL)
d607 2
a608 2
	EXT_FE(EXT_GLOBAL(get_server_name), NULL)
	EXT_FALIAS(EXT_GLOBAL(server_name), EXT_GLOBAL(get_server_name), NULL)
d610 2
a611 2
	EXT_FE(EXT_GLOBAL(get_values), NULL)
	EXT_FALIAS(EXT_GLOBAL(values), EXT_GLOBAL(get_values), NULL)
d613 2
a614 2
	EXT_FE(EXT_GLOBAL(get_closure), NULL)
	EXT_FALIAS(EXT_GLOBAL(closure), EXT_GLOBAL(get_closure), NULL)
d616 4
a619 4
	EXT_FE(EXT_GLOBAL(call_with_exception_handler), NULL)
	EXT_FE(EXT_GLOBAL(exception_handler), NULL)
	EXT_FE(EXT_GLOBAL(inspect), NULL)
	EXT_FE(EXT_GLOBAL(reset), NULL)
d621 1
a621 1
	{NULL, NULL, NULL}
d625 10
a634 10
	STANDARD_MODULE_HEADER,
	EXT_NAME(),
	EXT_GLOBAL(functions),
	EXT_MINIT(EXT),
	EXT_MSHUTDOWN(EXT),
	EXT_RINIT(EXT),
	EXT_RSHUTDOWN(EXT),
	EXT_MINFO(EXT),
	NO_VERSION_YET,
	STANDARD_MODULE_PROPERTIES
d641 1
a641 1
int EXT_GLOBAL(ini_updated), EXT_GLOBAL(ini_user), EXT_GLOBAL(ini_set);
d656 7
a662 7
	if (new_value) {
	  if((EXT_GLOBAL (ini_set) &U_HOSTS)) free(EXT_GLOBAL(cfg)->hosts);
	  EXT_GLOBAL(cfg)->hosts=strdup(new_value);
	  assert(EXT_GLOBAL(cfg)->hosts); if(!EXT_GLOBAL(cfg)->hosts) exit(6);
	  EXT_GLOBAL(ini_updated)|=U_HOSTS;
	}
	return SUCCESS;
d666 10
a675 10
	if (new_value) {
	  if((EXT_GLOBAL (ini_set) &U_SERVLET)) free(EXT_GLOBAL(cfg)->servlet);
	  if(!strncasecmp(on, new_value, 2) || !strncasecmp(on2, new_value, 1))
		EXT_GLOBAL(cfg)->servlet=strdup(DEFAULT_SERVLET);
	  else
		EXT_GLOBAL(cfg)->servlet=strdup(new_value);
	  assert(EXT_GLOBAL(cfg)->servlet); if(!EXT_GLOBAL(cfg)->servlet) exit(6);
	  EXT_GLOBAL(ini_updated)|=U_SERVLET;
	}
	return SUCCESS;
d680 7
a686 7
	if (new_value) {
	  if((EXT_GLOBAL (ini_set) &U_SOCKNAME)) free(EXT_GLOBAL(cfg)->sockname);
	  EXT_GLOBAL(cfg)->sockname=strdup(new_value);
	  assert(EXT_GLOBAL(cfg)->sockname); if(!EXT_GLOBAL(cfg)->sockname) exit(6);
	  EXT_GLOBAL(ini_updated)|=U_SOCKNAME;
	}
	return SUCCESS;
d690 7
a696 7
	if (new_value) {
	  if((EXT_GLOBAL (ini_set) &U_CLASSPATH)) free(EXT_GLOBAL(cfg)->classpath);
	  EXT_GLOBAL(cfg)->classpath =strdup(new_value);
	  assert(EXT_GLOBAL(cfg)->classpath); if(!EXT_GLOBAL(cfg)->classpath) exit(6);
	  EXT_GLOBAL(ini_updated)|=U_CLASSPATH;
	}
	return SUCCESS;
d700 7
a706 7
	if (new_value) {
	  if((EXT_GLOBAL (ini_set) &U_LIBRARY_PATH)) free(EXT_GLOBAL(cfg)->ld_library_path);
	  EXT_GLOBAL(cfg)->ld_library_path = strdup(new_value);
	  assert(EXT_GLOBAL(cfg)->ld_library_path); if(!EXT_GLOBAL(cfg)->ld_library_path) exit(6);
	  EXT_GLOBAL(ini_updated)|=U_LIBRARY_PATH;
	}
	return SUCCESS;
d720 7
a726 7
	if (new_value) {
	  if((EXT_GLOBAL (ini_set) &U_JAVA_HOME)) free(EXT_GLOBAL(cfg)->vm_home);
	  EXT_GLOBAL(cfg)->vm_home = strdup(new_value);
	  assert(EXT_GLOBAL(cfg)->vm_home); if(!EXT_GLOBAL(cfg)->vm_home) exit(6);
	  EXT_GLOBAL(ini_updated)|=U_JAVA_HOME;
	}
	return SUCCESS;
d730 8
a737 8
	if (new_value) {
	  if((EXT_GLOBAL (ini_set) &U_LOGLEVEL)) free(EXT_GLOBAL(cfg)->logLevel);
	  EXT_GLOBAL(cfg)->logLevel = strdup(new_value);
	  assert(EXT_GLOBAL(cfg)->logLevel); if(!EXT_GLOBAL(cfg)->logLevel) exit(6);
	  EXT_GLOBAL(cfg)->logLevel_val=atoi(EXT_GLOBAL(cfg)->logLevel);
	  EXT_GLOBAL(ini_updated)|=U_LOGLEVEL;
	}
	return SUCCESS;
d741 7
a747 7
	if (new_value) {
	  if((EXT_GLOBAL (ini_set) &U_LOGFILE)) free(EXT_GLOBAL(cfg)->logFile);
	  EXT_GLOBAL(cfg)->logFile = strdup(new_value);
	  assert(EXT_GLOBAL(cfg)->logFile); if(!EXT_GLOBAL(cfg)->logFile) exit(6);
	  EXT_GLOBAL(ini_updated)|=U_LOGFILE;
	}
	return SUCCESS;
d750 11
a760 11
	 PHP_INI_ENTRY(EXT_NAME()/**/".servlet", NULL, PHP_INI_SYSTEM, OnIniServlet)
	 PHP_INI_ENTRY(EXT_NAME()/**/".socketname", NULL, PHP_INI_SYSTEM, OnIniSockname)
	 PHP_INI_ENTRY(EXT_NAME()/**/".hosts",   NULL, PHP_INI_SYSTEM, OnIniHosts)
	 PHP_INI_ENTRY(EXT_NAME()/**/".classpath", NULL, PHP_INI_SYSTEM, OnIniClassPath)
	 PHP_INI_ENTRY(EXT_NAME()/**/".libpath",   NULL, PHP_INI_SYSTEM, OnIniLibPath)
	 PHP_INI_ENTRY(EXT_NAME()/**/"."/**/EXT_NAME()/**/"",   NULL, PHP_INI_SYSTEM, OnIniJava)
	 PHP_INI_ENTRY(EXT_NAME()/**/"."/**/EXT_NAME()/**/"_home",   NULL, PHP_INI_SYSTEM, OnIniJavaHome)

	 PHP_INI_ENTRY(EXT_NAME()/**/".log_level",   NULL, PHP_INI_ALL, OnIniLogLevel)
	 PHP_INI_ENTRY(EXT_NAME()/**/".log_file",   NULL, PHP_INI_SYSTEM, OnIniLogFile)
PHP_INI_END()
d763 1
a763 1
static void EXT_GLOBAL(alloc_globals_ctor)(EXT_GLOBAL_EX(zend_,globals,_) *EXT_GLOBAL(globals) TSRMLS_DC)
d778 2
a779 2
	zval **argv;
	int argc = ZEND_NUM_ARGS();
d781 5
a785 5
	argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
	if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
		php_error(E_ERROR, "Couldn't fetch arguments into array.");
		RETURN_NULL();
	}
d787 5
a791 5
	EXT_GLOBAL(call_function_handler)(INTERNAL_FUNCTION_PARAM_PASSTHRU,
								   EXT_NAME(), CONSTRUCTOR, 1,
								   getThis(),
								   argc, argv);
	efree(argv);
d796 2
a797 2
	zval **argv;
	int argc = ZEND_NUM_ARGS();
d799 5
a803 5
	argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
	if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
		php_error(E_ERROR, "Couldn't fetch arguments into array.");
		RETURN_NULL();
	}
d805 5
a809 5
	EXT_GLOBAL(call_function_handler)(INTERNAL_FUNCTION_PARAM_PASSTHRU,
								   EXT_NAME(), CONSTRUCTOR, 0, 
								   getThis(),
								   argc, argv);
	efree(argv);
d814 4
a817 4
	zval **xargv, **argv;
	int i = 0, xargc, argc = ZEND_NUM_ARGS();
	HashPosition pos;
	zval **param;
d820 5
a824 5
	argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
	if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
		php_error(E_ERROR, "Couldn't fetch arguments into array.");
		RETURN_NULL();
	}
d826 9
a834 9
	/* function arguments in arg#2 */
	xargc = zend_hash_num_elements(Z_ARRVAL_P(argv[1]));
	xargv = safe_emalloc(sizeof(zval *), xargc, 0);
	for (zend_hash_internal_pointer_reset_ex(Z_ARRVAL_P(argv[1]), &pos);
		 zend_hash_get_current_data_ex(Z_ARRVAL_P(argv[1]), (void **) &param, &pos) == SUCCESS;
		 zend_hash_move_forward_ex(Z_ARRVAL_P(argv[1]), &pos)) {
			/*zval_add_ref(param);*/
			xargv[i++] = *param;
	}
d836 4
a839 4
	EXT_GLOBAL(call_function_handler)(INTERNAL_FUNCTION_PARAM_PASSTHRU,
								   Z_STRVAL(*argv[0]), CONSTRUCTOR_NONE, 0,
								   getThis(),
								   xargc, xargv);
d841 2
a842 2
	efree(argv);
	efree(xargv);
d858 1
d861 1
a861 1
								   "tostring", CONSTRUCTOR_NONE, 0, getThis(), 0, NULL);
d1017 1
a1017 1
ZEND_END_ARG_INFO();
d1022 1
a1022 1
ZEND_END_ARG_INFO();
d1028 1
a1028 1
ZEND_END_ARG_INFO();
d1098 12
a1109 4
  if (type==IS_STRING) {
	proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
	long obj = 0;
	zval free_obj;
d1111 1
a1111 1
	if(!jenv) return FAILURE;
d1113 1
a1113 2
	if (should_free)
	  free_obj = *writeobj;
d1115 39
a1153 5
	if(jenv && (Z_TYPE_P(readobj) == IS_OBJECT)) {
	  EXT_GLOBAL(get_jobject_from_object)(readobj, &obj TSRMLS_CC);
	}
	if(obj) {
	  (*jenv)->writeInvokeBegin(jenv, 0, "ObjectToString", 0, 'I', writeobj);
d1156 4
d1161 4
d1166 1
a1166 5
	if (should_free)
	  zval_dtor(&free_obj);
	return obj?SUCCESS:FAILURE;
  }
  return FAILURE;
d1277 6
a1282 6
	iterator_dtor,
	iterator_valid,
	iterator_current_data,
	iterator_current_key,
	iterator_move_forward,
	NULL
d1324 9
a1332 9
	f->type = ZEND_INTERNAL_FUNCTION;
	f->handler = handler;
	f->function_name = NULL;
	f->scope = NULL;
	f->fn_flags = 0;
	f->prototype = NULL;
	f->num_args = 0;
	f->arg_info = NULL;
	f->pass_rest_by_reference = 0;
d1340 4
a1343 4
	f->type = ZEND_INTERNAL_FUNCTION;
	f->handler = handler;
	f->function_name = NULL;
	f->arg_types = NULL;
d1369 3
a1371 3
								 name, constructor, createInstance, 
								 object, 
								 arg_count, arguments);
d1427 10
a1436 4
  /*if (getenv("SERVER_SOFTWARE")
	  || getenv("SERVER_NAME")
	  || getenv("GATEWAY_INTERFACE")
	  || getenv("REQUEST_METHOD"))*/ {
d1438 6
a1443 3
	if ((hosts=getenv("X_JAVABRIDGE_OVERRIDE_HOSTS"))) {
	  EXT_GLOBAL(cfg)->is_cgi_servlet=1;
	  if(*hosts) {
d1445 1
a1445 4
							 hosts, strlen(hosts)+1,
							 ZEND_INI_SYSTEM, PHP_INI_STAGE_STARTUP);
		zend_alter_ini_entry((char*)key_servlet, sizeof key_servlet,
							 (char*)on, sizeof on,
d1447 10
d1458 3
d1516 4
a1519 4
  {
	php_error(E_ERROR, "Could not register __sleep/__wakeup methods.");
	return FAILURE;
  }
d1620 1
a1620 1
  php_info_print_table_row(2, EXT_NAME()/**/".hosts", EXT_GLOBAL(cfg)->hosts);
d1622 1
a1622 1
  php_info_print_table_row(2, EXT_NAME()/**/".servlet", EXT_GLOBAL(get_servlet_context) (TSRMLS_C)?on:off);
@


1.94
log
@Version 2.0.8RC5 fixes PR1286136 and 1291175
@
text
@d60 20
d82 2
d88 1
a88 1
	  if((*JG(jenv))->peer) {
d92 1
a92 1
		if((*JG(jenv))->peer0) close((*JG(jenv))->peer0);
d229 3
a231 3
  if(!EXT_GLOBAL(cfg)->is_cgi_servlet)
	EXT_GLOBAL(check_context) (jenv TSRMLS_CC); /* re-direct if no
												   context was found */
d247 1
a247 1
EXT_FUNCTION(EXT_GLOBAL(session))
d252 20
a271 1
EXT_FUNCTION(EXT_GLOBAL(get_session))
d273 1
a273 1
  session(INTERNAL_FUNCTION_PARAM_PASSTHRU);
d423 1
a423 1
EXT_FUNCTION(EXT_GLOBAL(closure))
a617 2
	EXT_FE(EXT_GLOBAL(require), NULL)
	EXT_FE(EXT_GLOBAL(set_library_path), NULL)
d619 4
d624 5
a628 1
	EXT_FE(EXT_GLOBAL(session), NULL)
d630 2
a631 1
	EXT_FE(EXT_GLOBAL(reset), NULL)
d633 5
a637 2
	EXT_FE(EXT_GLOBAL(values), NULL)
	EXT_FE(EXT_GLOBAL(closure), NULL)
d641 2
d1403 1
a1403 1
  if (getenv("SERVER_SOFTWARE")
d1406 1
a1406 1
	  || getenv("REQUEST_METHOD")) {
@


1.93
log
@Version 2.0.8RC4 fixes PR1291191, PR 1291175 and PR1286643
@
text
@a490 1
  return !setjmp(JG(php4_throw_buf));
@


1.92
log
@2.0.8RC3 fixes PR1283154 and 1286139 and 1288025 (partially).
@
text
@d201 1
a201 1
  if (argc>2 || zend_get_parameters_ex(1, &session, &is_new) == FAILURE)
@


1.91
log
@2.0.8RC2 fixes PR1283148 and 1281189.
@
text
@d198 2
a199 1
  zval **session;
d201 1
a201 1
  if (ZEND_NUM_ARGS()!=1 || zend_get_parameters_ex(1, &session) == FAILURE)
a203 2
  convert_to_string_ex(session);

d212 8
a219 2
  (*jenv)->writeString(jenv, Z_STRVAL_PP(session), Z_STRLEN_PP(session)); 
  (*jenv)->writeBoolean(jenv, 0); 
@


1.90
log
@2.0.8RC1 fixes PR1276889, 1275899, 1274526, 1202896
@
text
@d28 2
a29 2
static int java_errno=0;
int *__errno (void) { java_errno = 0; return &java_errno; }
a323 1
  long obj;
@


1.89
log
@Release-2.0.8RC
@
text
@d212 1
a212 1
 (*jenv)->writeInvokeBegin(jenv, 0, "getSession", 0, 'I', return_value);
d215 2
a216 1
  (*jenv)->writeLong(jenv, 1400); 
d286 82
d383 1
a383 2
  long obj, class = 0;
  short eval_class_array = 0;
a386 1
  HashTable *function_mappings = 0;
d423 3
a846 1
  int argc = ZEND_NUM_ARGS();
d872 5
a876 2
  php_error(E_ERROR, EXT_NAME()/**/" cannot be serialized. Please use the JSessionAdapter located in JSession.php in the php_java_lib folder.");
  RETURN_NULL();
d1006 2
a1007 2
  EXT_ME(EXT, __sleep, arginfo_set, ZEND_ACC_PUBLIC)
  EXT_MALIAS(EXT, __wakeup, __sleep, arginfo_zero, ZEND_ACC_PUBLIC)
a1240 1

d1254 1
d1257 9
a1341 1
  static const char server[] = "_SERVER";
a1343 1
  static const char override[] = "X_JAVABRIDGE_OVERRIDE_HOSTS";
d1352 1
a1352 1
	if (hosts=getenv("X_JAVABRIDGE_OVERRIDE_HOSTS")) {
d1391 2
d1410 12
@


1.88
log
@Release-2.0.8(pre4)
@
text
@d787 6
d920 2
@


1.87
log
@compiles under freebsd
@
text
@d35 5
a39 3
  JG(ini_user)=EXT_GLOBAL(ini_user);
  JG(hosts)=estrdup(EXT_GLOBAL(cfg)->hosts);
  JG(servlet)=estrdup(EXT_GLOBAL(cfg)->servlet);
d44 3
a321 1
  (*jenv)->writeCompositeBegin_h(jenv);
d324 1
d327 2
a328 3
		if ((zend_hash_get_current_data(Z_ARRVAL_PP(pfkt), (void**)&val) == SUCCESS) && key_type==HASH_KEY_IS_STRING) {
		  EXT_GLOBAL(get_jobject_from_object)(*val, &class TSRMLS_CC);
		  if(class) { 
d331 1
a331 1
			(*jenv)->writeString(jenv, string_key, len);
d334 1
a334 1
			zend_error(E_ERROR, "Argument #2 for %s() must be null, a string, or a map of java->php function names.", get_active_function_name(TSRMLS_C));
d339 1
a340 1
	  (*jenv)->writePairBegin_s(jenv, Z_STRVAL_PP(pfkt), Z_STRLEN_PP(pfkt));
a341 1
	  (*jenv)->writePairEnd(jenv);
a343 2
  (*jenv)->writeCompositeEnd(jenv);

d431 3
a433 3
	static const char name[] = "call_with_exception_handler";
	static const char call_user_funcH[] = "call_user_func_array(";
	static const char call_user_funcT[] = ","/**/EXT_NAME()/**/"_call_with_exception_handler(true));";
@


1.86
log
@Release-2.0.8(pre4)
@
text
@d88 1
d90 1
a90 1
  proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
d103 1
d105 1
a105 1
  proxyenv *jenv = EXT_GLOBAL(connect_to_server)(TSRMLS_C);
@


1.85
log
@Release-2.0.8(pre3)
@
text
@d29 1
a29 1
int *__errno (void) { java_errno = GetLastError(); return &java_errno; }
d34 9
d46 2
d57 2
d530 3
a532 2
static char off[]="Off";
static char on[]="On";
d547 4
a550 1
	  EXT_GLOBAL(cfg)->servlet=strdup(new_value);
d646 5
d1235 1
a1235 1
static void override_ini_from_cgi() {
d1251 6
a1256 6
		zend_alter_ini_entry((char*)key_hosts, sizeof key_hosts, 
							 hosts, strlen(hosts)+1, 
							 ZEND_INI_SYSTEM, PHP_INI_STAGE_RUNTIME);
		zend_alter_ini_entry((char*)key_servlet, sizeof key_servlet, 
							 (char*)on, sizeof on, 
							 ZEND_INI_SYSTEM, PHP_INI_STAGE_RUNTIME);
d1262 1
a1262 1
static void make_local_socket_info() {
d1267 1
a1267 1
  strcpy(EXT_GLOBAL(cfg)->saddr.sun_path, EXT_GLOBAL(get_sockname)());
d1273 1
a1273 1
  EXT_GLOBAL(cfg)->saddr.sin_port=htons(atoi(EXT_GLOBAL(get_sockname)()));
d1276 5
a1365 1
	extern void EXT_GLOBAL(init_cfg) ();
d1367 1
a1367 1
	EXT_GLOBAL(init_cfg) ();
d1372 4
a1375 4
	make_local_socket_info();
	EXT_GLOBAL(start_server) ();
  }

d1381 2
a1382 2
  char*s=EXT_GLOBAL(get_server_string) ();
  char*server = EXT_GLOBAL(test_server) (0, &is_local, 0);
d1405 1
a1405 1
  php_info_print_table_row(2, EXT_NAME()/**/".servlet", EXT_GLOBAL(get_servlet_context) ()?on:off);
a1419 3
  extern void EXT_GLOBAL(shutdown_library) ();
  extern void EXT_GLOBAL(destroy_cfg) (int);
  
@


1.84
log
@Release-2.0.8-pre3
@
text
@d188 3
a190 1
  EXT_GLOBAL(check_context) (jenv TSRMLS_CC);				/* re-direct if no context was found */
d542 1
a542 1
	if (new_value && strlen(new_value) && strncasecmp(off, new_value, sizeof(off)-1)) {
d1219 2
d1225 1
d1227 9
a1235 6
	  zend_alter_ini_entry((char*)key_hosts, sizeof key_hosts, 
						   hosts, strlen(hosts)+1, 
						   ZEND_INI_SYSTEM, PHP_INI_STAGE_RUNTIME);
	  zend_alter_ini_entry((char*)key_servlet, sizeof key_servlet, 
						   (char*)on, sizeof on, 
						   ZEND_INI_SYSTEM, PHP_INI_STAGE_RUNTIME);
d1240 16
d1342 6
a1347 13
	memset(&EXT_GLOBAL(cfg)->saddr, 0, sizeof EXT_GLOBAL(cfg)->saddr);
#ifndef CFG_JAVA_SOCKET_INET
	EXT_GLOBAL(cfg)->saddr.sun_family = AF_LOCAL;
	memset(EXT_GLOBAL(cfg)->saddr.sun_path, 0, sizeof EXT_GLOBAL(cfg)->saddr.sun_path);
	if(EXT_GLOBAL(cfg)->sockname) strcpy(EXT_GLOBAL(cfg)->saddr.sun_path, EXT_GLOBAL(cfg)->sockname);
# ifdef HAVE_ABSTRACT_NAMESPACE
	*EXT_GLOBAL(cfg)->saddr.sun_path=0;
# endif
#else
	EXT_GLOBAL(cfg)->saddr.sin_family = AF_INET;
	EXT_GLOBAL(cfg)->saddr.sin_port=htons(atoi(EXT_GLOBAL(cfg)->sockname));
	EXT_GLOBAL(cfg)->saddr.sin_addr.s_addr = inet_addr( "127.0.0.1" );
#endif
a1348 3
  override_ini_from_cgi();
  EXT_GLOBAL(ini_user)|=EXT_GLOBAL(ini_updated);
  EXT_GLOBAL(ini_updated)=0;
a1349 1
  EXT_GLOBAL(start_server) ();
@


1.83
log
@Release-2.0.8-pre2
@
text
@d43 1
d49 2
a50 1
		EXT_GLOBAL(protocol_end)(JG(jenv));	/* free servlet session */
d52 1
d58 1
d187 4
a190 1
  (*jenv)->writeInvokeBegin(jenv, 0, "getSession", 0, 'I', return_value);
d1343 1
a1343 1
  char*server = EXT_GLOBAL(test_server) (0, &is_local);
@


1.82
log
@Release-2.0.8-preview
@
text
@d368 1
a368 1
static void check_php4_exception() {
d373 1
a373 1
static int allocate_php4_exception() {
d383 1
a383 1
	if(allocate_php4_exception())
d389 1
a389 1
  if(allocate_php4_exception())	/* checked and destroyed in client. handle_exception() */
d417 1
a417 1
	check_php4_exception();
d434 1
a434 1
  check_php4_exception();
d642 18
a728 1
  zval **argv;
a731 6
  argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
  if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
	php_error(E_ERROR, "Couldn't fetch arguments into array.");
	RETURN_FALSE;
  }
  
a737 1
  efree(argv);
d871 5
a875 3
  EXT_MALIAS(EXT, EXT_GLOBAL_N(class), EXT, NULL, 0)
  EXT_MALIAS(EXT, EXT_GLOBAL(class), EXT, NULL, 0)
  EXT_MALIAS(EXT, __construct, EXT, arginfo_set, ZEND_ACC_PUBLIC)
@


1.81
log
@Release-2.0.8(pre)
@
text
@d29 1
a29 1
int *__errno (void) { return &java_errno; }
d54 1
a54 3
	  if((*JG(jenv))->servlet_redirect) free((*JG(jenv))->servlet_redirect);
	  if((*JG(jenv))->cookie_name) free((*JG(jenv))->cookie_name);
	  if((*JG(jenv))->cookie_value) free((*JG(jenv))->cookie_value);
d64 5
d71 1
d75 2
a76 1
  if (ZEND_NUM_ARGS()!=0) WRONG_PARAM_COUNT;
d78 3
a80 1
  (*jenv)->writeInvokeBegin(jenv, 0, "lastException", 0, 'P', return_value);
a82 1

d85 1
d89 1
a89 5
  if (ZEND_NUM_ARGS()!=0) WRONG_PARAM_COUNT;

  (*jenv)->writeInvokeBegin(jenv, 0, "lastException", 0, 'P', return_value);
  (*jenv)->writeObject(jenv, 0);
  (*jenv)->writeInvokeEnd(jenv);
d109 2
d126 1
d161 1
a161 1
	zend_error(E_ERROR, "Arument #2 for %s() must be a "/**/EXT_NAME()/**/" object", get_active_function_name(TSRMLS_C));
d222 1
d251 2
a252 2
  ZVAL_NULL(return_value);
  REPLACE_ZVAL_VALUE(&return_value, *pobj, 1);
d270 1
a270 1
  zval **pobj, **pfkt, **pclass;
d272 1
d284 3
a286 6
  if (argc>2) {
	EXT_GLOBAL(get_jobject_from_object)(*pclass, &class TSRMLS_CC);
	if(!class) {
	  zend_error(E_ERROR, "Argument #3 for %s() must be a "/**/EXT_NAME()/**/" object", get_active_function_name(TSRMLS_C));
	  return;
	}
d288 6
a293 1
	
d295 20
a314 8
	if (Z_TYPE_PP(pfkt) == IS_STRING) {
	  char *str = Z_STRVAL_PP(pfkt);
	  size_t length = Z_STRLEN_PP(pfkt);
	  ALLOC_HASHTABLE(function_mappings);
	  zend_hash_init(function_mappings, 0, NULL, ZVAL_PTR_DTOR, 0);
	  zend_hash_add(function_mappings, str, length, str, length, 0);
	} else {
	  if(!ZVAL_IS_NULL(*pfkt)) WRONG_PARAM_COUNT;		/* FIXME: check array */
a315 4
  } 

  if (Z_TYPE_PP(pobj) == IS_OBJECT) {
	zval_add_ref(pobj);
d317 1
a318 4
  (*jenv)->writeInvokeBegin(jenv, 0, "makeClosure", 0, 'I', return_value);
  (*jenv)->writeLong(jenv, (long)*pobj);
  (*jenv)->writeObject(jenv, class);
  (*jenv)->writeCompositeBegin_a(jenv);
d320 19
a338 4
  if(function_mappings) {
	zend_hash_internal_pointer_reset(function_mappings);
	while ((key_type = zend_hash_get_current_key(function_mappings, &string_key, &num_key, 1)) != HASH_KEY_NON_EXISTANT) {
	  if (key_type == HASH_KEY_IS_STRING) {
d340 1
a340 1
		(*jenv)->writeString(jenv, string_key, strlen(string_key));
d342 2
a344 1
	  zend_hash_move_forward(function_mappings);
d346 85
d433 4
a436 2
  (*jenv)->writeCompositeEnd(jenv);
  (*jenv)->writeInvokeEnd(jenv);
d475 2
d501 1
d508 2
d530 1
d533 1
a533 1
	if (new_value) {
d608 2
a609 2
	 PHP_INI_ENTRY(EXT_NAME()/**/"."/**/EXT_NAME()/**/"",   NULL, PHP_INI_ALL, OnIniJava)
	 PHP_INI_ENTRY(EXT_NAME()/**/"."/**/EXT_NAME()/**/"_home",   NULL, PHP_INI_ALL, OnIniJavaHome)
d612 1
a612 1
	 PHP_INI_ENTRY(EXT_NAME()/**/".log_file",   NULL, PHP_INI_ALL, OnIniLogFile)
a641 37
EXT_METHOD(EXT, EXT_GLOBAL(class))
{
	zval **argv;
	int argc = ZEND_NUM_ARGS();

	argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
	if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
		php_error(E_ERROR, "Couldn't fetch arguments into array.");
		RETURN_NULL();
	}

	EXT_GLOBAL(call_function_handler)(INTERNAL_FUNCTION_PARAM_PASSTHRU,
								   EXT_NAME(), CONSTRUCTOR, 0, 
								   getThis(),
								   argc, argv);
	efree(argv);
}

// exact copy of vm_class for jsr223 compatibility
EXT_METHOD(EXT, EXT_GLOBAL_N(class))
{
	zval **argv;
	int argc = ZEND_NUM_ARGS();

	argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
	if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
		php_error(E_ERROR, "Couldn't fetch arguments into array.");
		RETURN_NULL();
	}

	EXT_GLOBAL(call_function_handler)(INTERNAL_FUNCTION_PARAM_PASSTHRU,
								   EXT_NAME(), CONSTRUCTOR, 0, 
								   getThis(),
								   argc, argv);
	efree(argv);
}

a859 2
  EXT_ME(EXT, EXT_GLOBAL_N(class), NULL, 0)
  EXT_ME(EXT, EXT_GLOBAL(class), NULL, 0)
d861 3
d1126 1
a1126 1
  short createInstance;
d1128 7
d1138 1
a1138 2
  createInstance = strcmp(EXT_NAME()/**/"_class", name) && strcmp(EXT_NAME()/**/"class", name);
  if(!strcmp(EXT_NAME(), name) || !createInstance) constructor = CONSTRUCTOR;
a1195 1
  static const char key_on[] = "On";
d1207 1
a1207 1
						   (char*)key_on, sizeof key_on, 
d1227 2
a1228 1
  zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);
d1231 2
a1232 1
  zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);
d1279 2
a1280 1
  zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);
d1330 1
a1330 1
#if !defined(__MINGW32__) && EXTENSION == JAVA
a1335 1
#ifndef __MINGW32__
a1344 1
#endif
d1347 1
a1347 1
  php_info_print_table_row(2, EXT_NAME()/**/".servlet", EXT_GLOBAL(get_servlet_context) ()?"On":"Off");
a1348 1
#ifndef __MINGW32__
a1351 1
#endif
@


1.80
log
@PHP/JSP session sharing
@
text
@d54 1
d1098 6
a1103 1
static void override_from_cgi() {
d1110 6
a1115 9
	  if((EXT_GLOBAL (ini_set) &U_HOSTS)) free(EXT_GLOBAL(cfg)->hosts);
	  EXT_GLOBAL(cfg)->hosts=strdup(hosts);
	  assert(EXT_GLOBAL(cfg)->hosts); if(!EXT_GLOBAL(cfg)->hosts) exit(6);
	  EXT_GLOBAL (ini_updated)|=U_HOSTS;

	  if((EXT_GLOBAL (ini_set) &U_SERVLET)) free(EXT_GLOBAL(cfg)->servlet);
	  EXT_GLOBAL(cfg)->servlet=strdup("On");
	  assert(EXT_GLOBAL(cfg)->servlet); if(!EXT_GLOBAL(cfg)->servlet) exit(6);
	  EXT_GLOBAL (ini_updated)|=U_SERVLET;
d1217 1
a1217 1
  override_from_cgi();
@


1.79
log
@PR1243638: Running php and jsp side by side
@
text
@d164 1
a164 1
EXT_FUNCTION(EXT_GLOBAL(get_session))
a171 4
  if(JG(jenv)) {
	php_error(E_ERROR, "This script has already selected a backend.  Please call "/**/EXT_NAME()/**/"_get_session() before calling any of the "/**/EXT_NAME()/**/"functions.");
  }

d183 10
d217 2
a218 1
EXT_FUNCTION(EXT_GLOBAL(get_values))
d248 10
d350 1
d354 1
d478 5
a482 5
	 PHP_INI_ENTRY(EXT_NAME()/**/".servlet", NULL, PHP_INI_ALL, OnIniServlet)
	 PHP_INI_ENTRY(EXT_NAME()/**/".socketname", NULL, PHP_INI_ALL, OnIniSockname)
	 PHP_INI_ENTRY(EXT_NAME()/**/".hosts",   NULL, PHP_INI_ALL, OnIniHosts)
	 PHP_INI_ENTRY(EXT_NAME()/**/".classpath", NULL, PHP_INI_ALL, OnIniClassPath)
	 PHP_INI_ENTRY(EXT_NAME()/**/".libpath",   NULL, PHP_INI_ALL, OnIniLibPath)
d1232 4
a1235 2
  php_info_print_table_row(2, EXT_NAME()/**/".libpath", EXT_GLOBAL(cfg)->ld_library_path);
  php_info_print_table_row(2, EXT_NAME()/**/".classpath", EXT_GLOBAL(cfg)->classpath);
d1238 8
a1245 6
  php_info_print_table_row(2, EXT_NAME()/**/"."/**/EXT_NAME()/**/"_home", EXT_GLOBAL(cfg)->vm_home);
  php_info_print_table_row(2, EXT_NAME()/**/"."/**/EXT_NAME(), EXT_GLOBAL(cfg)->vm);
  if(strlen(EXT_GLOBAL(cfg)->logFile)==0) 
	php_info_print_table_row(2, EXT_NAME()/**/".log_file", "<stdout>");
  else
	php_info_print_table_row(2, EXT_NAME()/**/".log_file", EXT_GLOBAL(cfg)->logFile);
d1253 3
a1255 1
  php_info_print_table_row(2, EXT_NAME()/**/" command", s);
@


1.78
log
@gtk, swing and swt examples added
@
text
@d229 1
a229 1
	return;
d236 2
a237 1
  COPY_PZVAL_TO_ZVAL(*return_value, *pobj);
a251 1
  TSRMLS_FETCH();
d274 1
a274 1
	  WRONG_PARAM_COUNT;		/* FIXME: check array */
d276 3
a278 1
  } else if (Z_TYPE_PP(pobj) == IS_OBJECT) {
d303 22
d337 1
d358 1
a358 1
int EXT_GLOBAL(ini_updated), EXT_GLOBAL(ini_last_updated);
d370 3
a372 1
	  EXT_GLOBAL(cfg)->hosts=new_value;
d380 3
a382 1
	  EXT_GLOBAL(cfg)->servlet=new_value;
d390 3
a392 1
	  EXT_GLOBAL(cfg)->sockname=new_value;
d400 3
a402 1
	  EXT_GLOBAL(cfg)->classpath =new_value;
d410 3
a412 1
	  EXT_GLOBAL(cfg)->ld_library_path = new_value;
d420 3
a422 1
	EXT_GLOBAL(cfg)->vm = new_value;
d430 3
a432 1
	  EXT_GLOBAL(cfg)->vm_home = new_value;
d440 3
a442 1
	  EXT_GLOBAL(cfg)->logLevel = new_value;
d451 3
a453 1
	  EXT_GLOBAL(cfg)->logFile = new_value;
d459 5
a463 5
	 PHP_INI_ENTRY(EXT_NAME()/**/".servlet", NULL, PHP_INI_SYSTEM, OnIniServlet)
	 PHP_INI_ENTRY(EXT_NAME()/**/".socketname", NULL, PHP_INI_SYSTEM, OnIniSockname)
	 PHP_INI_ENTRY(EXT_NAME()/**/".hosts",   NULL, PHP_INI_SYSTEM, OnIniHosts)
	 PHP_INI_ENTRY(EXT_NAME()/**/".classpath", NULL, PHP_INI_SYSTEM, OnIniClassPath)
	 PHP_INI_ENTRY(EXT_NAME()/**/".libpath",   NULL, PHP_INI_SYSTEM, OnIniLibPath)
d1074 24
d1175 1
d1195 2
a1196 2
  assert(!EXT_GLOBAL(ini_last_updated));
  EXT_GLOBAL(ini_last_updated)=EXT_GLOBAL(ini_updated);
d1207 1
a1207 1
  short is_level = ((EXT_GLOBAL (ini_last_updated)&U_LOGLEVEL)!=0);
d1227 1
a1227 1
  php_info_print_table_row(2, EXT_NAME()/**/".servlet", EXT_GLOBAL(get_servlet_context) ()?EXT_GLOBAL(get_servlet_context) ():"Off");
d1245 2
a1246 2
  EXT_GLOBAL(destroy_cfg) (EXT_GLOBAL(ini_last_updated));
  EXT_GLOBAL(ini_last_updated)=0;
@


1.77
log
@gtk and swt examples added
@
text
@d114 1
d116 3
d244 1
a244 1
  zval **pobj, **pclass;
a245 1
  zend_class_entry *ce = 0;
d249 1
d251 2
a252 1
  if (argc>2 || zend_get_parameters_ex(argc, &pobj, &pclass) == FAILURE)
d258 1
a258 1
  if (argc>1) {
d261 1
a261 1
	  zend_error(E_ERROR, "Argument #2 for %s() must be a "/**/EXT_NAME()/**/" object", get_active_function_name(TSRMLS_C));
d265 12
a276 4

  if(argc>0) {
	if (Z_TYPE_PP(pobj) == IS_OBJECT) ce = Z_OBJCE_PP(pobj);
	if (!ce) WRONG_PARAM_COUNT;	/* FIXME: proper message */
d284 4
a287 3
  if(ce) {
	zend_hash_internal_pointer_reset(&ce->function_table);
	while ((key_type = zend_hash_get_current_key(&ce->function_table, &string_key, &num_key, 1)) != HASH_KEY_NON_EXISTANT) {
d293 1
a293 1
	  zend_hash_move_forward(&ce->function_table);
d296 1
@


1.76
log
@gtk and swt examples added
@
text
@d243 2
@


1.75
log
@Release-2.0.8pre
@
text
@a237 2
  proxyenv *jenv;
  int key_type;
d241 1
a241 1
  long obj, class;
d243 1
d245 1
a245 1
  if (ZEND_NUM_ARGS()!=2 || zend_get_parameters_ex(2, &pobj, &pclass) == FAILURE)
a247 3
  //convert_to_object_ex(pobj);
  //convert_to_object_ex(pclass);

a249 2
  if (Z_TYPE_PP(pobj) == IS_OBJECT) ce = Z_OBJCE_PP(pobj);
  if (!ce) WRONG_PARAM_COUNT;	/* FIXME: proper message */
d251 12
a262 5
  class = 0;
  EXT_GLOBAL(get_jobject_from_object)(*pclass, &class TSRMLS_CC);
  if(!class) {
	zend_error(E_ERROR, "Argument #1 for %s() must be a "/**/EXT_NAME()/**/" object", get_active_function_name(TSRMLS_C));
	return;
d267 1
a267 1
  (*jenv)->writeObject(jenv, class); /* FIXME: check for array */
d269 9
a277 7

  zend_hash_internal_pointer_reset(&ce->function_table);
  while ((key_type = zend_hash_get_current_key(&ce->function_table, &string_key, &num_key, 1)) != HASH_KEY_NON_EXISTANT) {
	if (key_type == HASH_KEY_IS_STRING) {
	  (*jenv)->writePairBegin(jenv);
	  (*jenv)->writeString(jenv, string_key, strlen(string_key));
	  (*jenv)->writePairEnd(jenv);
a278 1
	zend_hash_move_forward(&ce->function_table);
d1100 1
a1100 1
	strcpy(EXT_GLOBAL(cfg)->saddr.sun_path, EXT_GLOBAL(cfg)->sockname);
@


1.74
log
@Release-2.0.7
@
text
@d232 1
a232 1
  return_value = *pobj;
d236 46
d293 1
@


1.74.2.1
log
@Release-2.0.7RC
@
text
@d232 1
a232 1
  COPY_PZVAL_TO_ZVAL(*return_value, *pobj);
@


1.73
log
@Release-2.0.7pre
@
text
@d12 1
a12 1
#include "php_wrapper.h"
a15 1
#include "php_java.h"
d355 2
a356 2
	 PHP_INI_ENTRY(EXT_NAME()/**/"."/**/EXT_NAME()/**/"",   NULL, PHP_INI_SYSTEM, OnIniJava)
	 PHP_INI_ENTRY(EXT_NAME()/**/"."/**/EXT_NAME()/**/"_home",   NULL, PHP_INI_SYSTEM, OnIniJavaHome)
d358 2
a359 2
	 PHP_INI_ENTRY(EXT_NAME()/**/".log_level",   NULL, PHP_INI_SYSTEM, OnIniLogLevel)
	 PHP_INI_ENTRY(EXT_NAME()/**/".log_file",   NULL, PHP_INI_SYSTEM, OnIniLogFile)
a1060 2
  EXT_GLOBAL(start_server) ();
  
d1064 2
a1065 1
  
d1081 2
a1084 2
#endif
#ifndef __MINGW32__
d1092 3
@


1.72
log
@Release-2.0.7(pre)
@
text
@d1116 1
a1116 1
  assert(cfg);
@


1.71
log
@compiles with jdk1.5 + gnu java
@
text
@d233 1
a233 1
  RETURN_ZVAL(*pobj, 0, 0);
@


1.70
log
@Shut down servlet connection
@
text
@d1072 1
d1074 1
a1074 1
  char*server = EXT_GLOBAL(test_server) (0, 0);
@


1.69
log
@Release-2.0.7pre
@
text
@d48 4
a51 1
	  if((*JG(jenv))->peer) close((*JG(jenv))->peer);
@


1.68
log
@Release-2.0.7-pre
@
text
@d22 1
d29 2
a30 2
static int EXT_GLOBAL(errno)=0;
int *__errno (void) { return &EXT_GLOBAL(errno); }
d32 1
a32 1
   php_info_print_table_row_ex(a, EXT_NAME(), b, c)
d141 1
a141 1
	zend_error(E_ERROR, "Parameter #1 for %s() must be a "/**/EXT_NAME()/**/" object", get_active_function_name(TSRMLS_C));
d148 1
a148 1
	zend_error(E_ERROR, "Parameter #2 for %s() must be a "/**/EXT_NAME()/**/" object", get_active_function_name(TSRMLS_C));
d205 29
d235 10
a244 9
	PHP_FE(EXT_GLOBAL(last_exception_get), NULL)
	PHP_FE(EXT_GLOBAL(last_exception_clear), NULL)
	PHP_FE(EXT_GLOBAL(set_file_encoding), NULL)
	PHP_FE(EXT_GLOBAL(require), NULL)
	PHP_FE(EXT_GLOBAL(set_library_path), NULL)
	PHP_FE(EXT_GLOBAL(instanceof), NULL)
	PHP_FE(EXT_GLOBAL(get_session), NULL)
	PHP_FE(EXT_GLOBAL(get_server_name), NULL)
	PHP_FE(EXT_GLOBAL(reset), NULL)
d908 1
a908 1
  enum constructor constructor = CONSTRUCT_NONE;
@


1.67
log
@Tomcat 5
@
text
@d24 2
a25 2
ZEND_DECLARE_MODULE_GLOBALS(java)
struct cfg *cfg = 0;
d28 2
a29 2
static int java_errno=0;
int *__errno (void) { return &java_errno; }
d31 1
a31 1
   php_info_print_table_row_ex(a, "java", b, c)
d35 1
a35 1
PHP_RINIT_FUNCTION(java) 
d38 1
a38 1
	php_error(E_ERROR, "php_mod_java(%d): Synchronization problem, rinit with active connection called. Cannot continue, aborting now. Please report this to: php-java-bridge-users@@lists.sourceforge.net",59);
d43 1
a43 1
PHP_RSHUTDOWN_FUNCTION(java)
d62 1
a62 1
PHP_FUNCTION(java_last_exception_get)
d64 1
a64 1
  proxyenv *jenv = java_connect_to_server(TSRMLS_C);
d73 1
a73 1
PHP_FUNCTION(java_last_exception_clear)
d75 1
a75 1
  proxyenv *jenv = java_connect_to_server(TSRMLS_C);
d85 1
a85 1
PHP_FUNCTION(java_set_file_encoding)
d88 1
a88 1
  proxyenv *jenv = java_connect_to_server(TSRMLS_C);
d103 1
a103 1
  proxyenv *jenv = java_connect_to_server(TSRMLS_C);
d115 1
a115 1
PHP_FUNCTION(java_set_library_path)
d119 1
a119 1
PHP_FUNCTION(java_require)
d124 1
a124 1
PHP_FUNCTION(java_instanceof)
d128 1
a128 1
  proxyenv *jenv = java_connect_to_server(TSRMLS_C);
d138 1
a138 1
  java_get_jobject_from_object(*pobj, &obj TSRMLS_CC);
d140 1
a140 1
	zend_error(E_ERROR, "Parameter #1 for %s() must be a java object", get_active_function_name(TSRMLS_C));
d145 1
a145 1
  java_get_jobject_from_object(*pclass, &class TSRMLS_CC);
d147 1
a147 1
	zend_error(E_ERROR, "Parameter #2 for %s() must be a java object", get_active_function_name(TSRMLS_C));
d157 1
a157 1
PHP_FUNCTION(java_get_session)
d166 1
a166 1
	php_error(E_ERROR, "This script has already selected a backend.  Please call java_get_session() before calling any of the java* or mono* functions.");
d171 1
a171 1
  jenv=java_connect_to_server(TSRMLS_C);
d180 1
a180 1
PHP_FUNCTION(java_get_server_name)
d185 1
a185 1
  jenv = java_try_connect_to_server(TSRMLS_C);
d192 1
a192 1
PHP_FUNCTION(java_reset)
d197 1
a197 1
  jenv = java_connect_to_server(TSRMLS_C);
d204 10
a213 10
function_entry java_functions[] = {
	PHP_FE(java_last_exception_get, NULL)
	PHP_FE(java_last_exception_clear, NULL)
	PHP_FE(java_set_file_encoding, NULL)
	PHP_FE(java_require, NULL)
	PHP_FE(java_set_library_path, NULL)
	PHP_FE(java_instanceof, NULL)
	PHP_FE(java_get_session, NULL)
	PHP_FE(java_get_server_name, NULL)
	PHP_FE(java_reset, NULL)
d217 1
a217 1
zend_module_entry java_module_entry = {
d219 7
a225 7
	"java",
	java_functions,
	PHP_MINIT(java),
	PHP_MSHUTDOWN(java),
	PHP_RINIT(java),
	PHP_RSHUTDOWN(java),
	PHP_MINFO(java),
d230 2
a231 2
#ifdef COMPILE_DL_JAVA
ZEND_GET_MODULE(java)
d234 4
a237 4
int java_ini_updated, java_ini_last_updated;
zend_class_entry *php_java_class_entry;
zend_class_entry *php_java_class_class_entry;
zend_class_entry *php_java_exception_class_entry;
d240 1
a240 1
zend_object_handlers php_java_handlers;
d246 2
a247 2
	  cfg->hosts=new_value;
	  java_ini_updated|=U_HOSTS;
d254 2
a255 2
	  cfg->servlet=new_value;
	  java_ini_updated|=U_SERVLET;
d262 2
a263 2
	  cfg->sockname=new_value;
	  java_ini_updated|=U_SOCKNAME;
d270 2
a271 2
	  cfg->classpath =new_value;
	  java_ini_updated|=U_CLASSPATH;
d278 2
a279 2
	  cfg->ld_library_path = new_value;
	  java_ini_updated|=U_LIBRARY_PATH;
d286 2
a287 2
	cfg->java = new_value;
	java_ini_updated|=U_JAVA;
d294 2
a295 2
	  cfg->java_home = new_value;
	  java_ini_updated|=U_JAVA_HOME;
d302 3
a304 3
	  cfg->logLevel = new_value;
	  cfg->logLevel_val=atoi(cfg->logLevel);
	  java_ini_updated|=U_LOGLEVEL;
d311 2
a312 2
	  cfg->logFile = new_value;
	  java_ini_updated|=U_LOGFILE;
d317 7
a323 7
	 PHP_INI_ENTRY("java.servlet", NULL, PHP_INI_SYSTEM, OnIniServlet)
	 PHP_INI_ENTRY("java.socketname", NULL, PHP_INI_SYSTEM, OnIniSockname)
	 PHP_INI_ENTRY("java.hosts",   NULL, PHP_INI_SYSTEM, OnIniHosts)
	 PHP_INI_ENTRY("java.classpath", NULL, PHP_INI_SYSTEM, OnIniClassPath)
	 PHP_INI_ENTRY("java.libpath",   NULL, PHP_INI_SYSTEM, OnIniLibPath)
	 PHP_INI_ENTRY("java.java",   NULL, PHP_INI_SYSTEM, OnIniJava)
	 PHP_INI_ENTRY("java.java_home",   NULL, PHP_INI_SYSTEM, OnIniJavaHome)
d325 2
a326 2
	 PHP_INI_ENTRY("java.log_level",   NULL, PHP_INI_SYSTEM, OnIniLogLevel)
	 PHP_INI_ENTRY("java.log_file",   NULL, PHP_INI_SYSTEM, OnIniLogFile)
d329 2
a330 2

static void php_java_alloc_globals_ctor(zend_java_globals *java_globals TSRMLS_DC)
d332 2
a333 2
  java_globals->jenv=0;
  java_globals->is_closed=-1;
d338 1
a338 37
PHP_METHOD(java, java)
{
	zval **argv;
	int argc = ZEND_NUM_ARGS();

	argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
	if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
		php_error(E_ERROR, "Couldn't fetch arguments into array.");
		RETURN_NULL();
	}

	php_java_call_function_handler(INTERNAL_FUNCTION_PARAM_PASSTHRU,
								   "java", CONSTRUCT_JAVA, 1,
								   getThis(),
								   argc, argv);
	efree(argv);
}

PHP_METHOD(java, mono)
{
	zval **argv;
	int argc = ZEND_NUM_ARGS();

	argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
	if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
		php_error(E_ERROR, "Couldn't fetch arguments into array.");
		RETURN_NULL();
	}

	php_java_call_function_handler(INTERNAL_FUNCTION_PARAM_PASSTHRU,
								   "mono", CONSTRUCT_MONO, 1,
								   getThis(),
								   argc, argv);
	efree(argv);
}

PHP_METHOD(java, java_class)
d349 2
a350 2
	php_java_call_function_handler(INTERNAL_FUNCTION_PARAM_PASSTHRU,
								   "java", CONSTRUCT_JAVA, 0, 
d356 1
a356 1
PHP_METHOD(java, mono_class)
d367 2
a368 2
	php_java_call_function_handler(INTERNAL_FUNCTION_PARAM_PASSTHRU,
								   "mono", CONSTRUCT_MONO, 0, 
d374 2
a375 2
// exact copy of java_class for jsr223 compatibility
PHP_METHOD(java, javaclass)
d386 2
a387 2
	php_java_call_function_handler(INTERNAL_FUNCTION_PARAM_PASSTHRU,
								   "java", CONSTRUCT_JAVA, 0, 
d393 1
a393 20
// exact copy of java_class for jsr223 compatibility
PHP_METHOD(java, monoclass)
{
	zval **argv;
	int argc = ZEND_NUM_ARGS();

	argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
	if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
		php_error(E_ERROR, "Couldn't fetch arguments into array.");
		RETURN_NULL();
	}

	php_java_call_function_handler(INTERNAL_FUNCTION_PARAM_PASSTHRU,
								   "mono", CONSTRUCT_MONO, 0, 
								   getThis(),
								   argc, argv);
	efree(argv);
}

PHP_METHOD(java, __call)
d417 2
a418 2
	php_java_call_function_handler(INTERNAL_FUNCTION_PARAM_PASSTHRU,
								   Z_STRVAL(*argv[0]), CONSTRUCT_NONE, 0,
d425 1
a425 1
PHP_METHOD(java, __tostring)
d430 1
a430 1
	java_get_jobject_from_object(getThis(), &result TSRMLS_CC);
d433 1
a433 1
	proxyenv *jenv = java_connect_to_server(TSRMLS_C);
d440 2
a441 2
	php_java_call_function_handler(INTERNAL_FUNCTION_PARAM_PASSTHRU,
								   "tostring", CONSTRUCT_NONE, 0, getThis(), 0, NULL);
d445 1
a445 1
PHP_METHOD(java, __set)
d456 1
a456 1
  php_java_set_property_handler(Z_STRVAL(*argv[0]), getThis(), argv[1], return_value);
d460 1
a460 1
PHP_METHOD(java, __destruct)
d472 2
a473 2
  java_get_jobject_from_object(getThis(), &obj TSRMLS_CC);
  if(!obj) RETURN_TRUE;			/* may happen when java is not initalized */
d481 1
a481 1
PHP_METHOD(java, __get)
d491 1
a491 1
  php_java_get_property_handler(Z_STRVAL(*argv[0]), getThis(), return_value);
d494 1
a494 1
PHP_METHOD(java, offsetExists)
d496 1
a496 1
  proxyenv *jenv = java_connect_to_server(TSRMLS_C);
d509 1
a509 1
  java_get_jobject_from_object(getThis(), &obj TSRMLS_CC);
d514 1
a514 1
  java_get_jobject_from_object(return_value, &obj TSRMLS_CC);
d516 1
a516 1
  php_java_invoke("offsetExists", obj, argc, argv, 0, return_value TSRMLS_CC);
d519 1
a519 1
PHP_METHOD(java, offsetGet)
d524 1
a524 1
  proxyenv *jenv = java_connect_to_server(TSRMLS_C);
d534 1
a534 1
  java_get_jobject_from_object(getThis(), &obj TSRMLS_CC);
d539 1
a539 1
  java_get_jobject_from_object(return_value, &obj TSRMLS_CC);
d541 1
a541 1
  php_java_invoke("offsetGet", obj, argc, argv, 0, return_value TSRMLS_CC);
d545 1
a545 1
PHP_METHOD(java, offsetSet)
d550 1
a550 1
  proxyenv *jenv = java_connect_to_server(TSRMLS_C);
d559 1
a559 1
  java_get_jobject_from_object(getThis(), &obj TSRMLS_CC);
d564 1
a564 1
  java_get_jobject_from_object(return_value, &obj TSRMLS_CC);
d566 1
a566 1
  php_java_invoke("offsetSet", obj, argc, argv, 0, return_value TSRMLS_CC);
d570 1
a570 1
PHP_METHOD(java, offsetUnset)
d575 1
a575 1
  proxyenv *jenv = java_connect_to_server(TSRMLS_C);
d584 1
a584 1
  java_get_jobject_from_object(getThis(), &obj TSRMLS_CC);
d589 1
a589 1
  java_get_jobject_from_object(return_value, &obj TSRMLS_CC);
d591 1
a591 1
  php_java_invoke("offsetUnset", obj, argc, argv, 0, return_value TSRMLS_CC);
d610 13
a622 13
function_entry php_java_class_functions[] = {
  PHP_ME(java, javaclass, NULL, 0)
  PHP_ME(java, java_class, NULL, 0)
  PHP_ME(java, java, NULL, 0)
  PHP_ME(java, __call, arginfo_set, ZEND_ACC_PUBLIC)
  PHP_ME(java, __tostring, arginfo_zero, ZEND_ACC_PUBLIC)
  PHP_ME(java, __get, arginfo_get, ZEND_ACC_PUBLIC)
  PHP_ME(java, __set, arginfo_set, ZEND_ACC_PUBLIC)
  PHP_ME(java, __destruct, arginfo_zero, ZEND_ACC_PUBLIC)
  PHP_ME(java, offsetExists,  arginfo_get, ZEND_ACC_PUBLIC)
  PHP_ME(java, offsetGet,     arginfo_get, ZEND_ACC_PUBLIC)
  PHP_ME(java, offsetSet,     arginfo_set, ZEND_ACC_PUBLIC)
  PHP_ME(java, offsetUnset,   arginfo_get, ZEND_ACC_PUBLIC)
d639 1
a639 1
  obj.handlers = (zend_object_handlers*)&php_java_handlers;
d656 1
d666 1
a666 1
  obj.value.obj.handlers = (zend_object_handlers*)&php_java_handlers;
d674 1
a674 1
	proxyenv *jenv = java_connect_to_server(TSRMLS_C);
d684 1
a684 1
	  java_get_jobject_from_object(readobj, &obj TSRMLS_CC);
d702 1
a702 1
  long java_iterator;
d705 1
a705 1
} java_iterator;
d710 1
a710 1
  java_iterator *iterator = (java_iterator *)iter;
d715 1
a715 1
  if(iterator->java_iterator) {
d718 2
a719 2
	if(jenv) (*jenv)->writeUnref(jenv, iterator->java_iterator);
	iterator->java_iterator = 0;
d727 2
a728 2
  java_iterator *iterator = (java_iterator *)iter;
  return (iterator->java_iterator && iterator->current_object) ? SUCCESS : FAILURE;
d733 1
a733 1
  java_iterator *iterator = (java_iterator *)iter;
d739 1
a739 1
  java_iterator *iterator = (java_iterator *)iter;
d745 1
a745 1
  php_java_invoke("currentKey", iterator->java_iterator, 0, 0, 0, presult TSRMLS_CC);
d777 1
a777 1
static void init_current_data(java_iterator *iterator TSRMLS_DC) 
d782 1
a782 1
  php_java_invoke("currentData", iterator->java_iterator, 0, 0, 0, iterator->current_object TSRMLS_CC);
d788 1
a788 1
  java_iterator *iterator = (java_iterator *)iter;
d798 1
a798 1
  (*jenv)->writeInvokeBegin(jenv, iterator->java_iterator, "moveForward", 0, 'I', presult);
d806 1
a806 1
static zend_object_iterator_funcs java_iterator_funcs = {
d819 2
a820 2
  java_iterator *iterator = emalloc(sizeof *iterator);
  long java_iterator, obj;
d826 1
a826 1
  iterator->intern.funcs = &java_iterator_funcs;
d828 1
a828 1
  java_get_jobject_from_object(object, &obj TSRMLS_CC);
d834 3
a836 3
  java_get_jobject_from_object(presult, &java_iterator TSRMLS_CC);
  if (!java_iterator) return NULL;
  iterator->java_iterator = java_iterator;
d838 1
a838 1
  (*jenv)->writeInvokeBegin(jenv, java_iterator, "getType", 0, 'I', presult);
d843 1
a843 1
  (*jenv)->writeInvokeBegin(jenv, java_iterator, "hasMore", 0, 'I', presult);
d868 1
a868 1
php_java_call_function_handler4(INTERNAL_FUNCTION_PARAMETERS, zend_property_reference *property_reference)
d881 3
a883 8
  if(!strncmp("mono", name, 4) && arg_count>0) {
	createInstance = strcmp("mono_class", name) && strcmp("monoclass", name);
	if(!strcmp("mono", name) || !createInstance) constructor = CONSTRUCT_MONO;
  } else {
	createInstance = strcmp("java_class", name) && strcmp("javaclass", name);
	if(!strcmp("java", name) || !createInstance) constructor = CONSTRUCT_JAVA;
  }
  php_java_call_function_handler(INTERNAL_FUNCTION_PARAM_PASSTHRU, 
d905 1
a905 1
  php_java_get_property_handler(name, object, &presult);
d925 1
a925 1
  result = php_java_set_property_handler(name, object, value, &dummy);
d932 1
a932 1
PHP_MINIT_FUNCTION(java)
d937 2
a938 2
  INIT_OVERLOADED_CLASS_ENTRY(ce, "java", NULL,
							  php_java_call_function_handler4,
d942 1
a942 1
  php_java_class_entry = zend_register_internal_class(&ce TSRMLS_CC);
d944 2
a945 2
  INIT_CLASS_ENTRY(ce, "java_class", NULL);
  parent = (zend_class_entry *) php_java_class_entry;
d947 2
a948 2
  INIT_CLASS_ENTRY(ce, "javaclass", NULL);
  parent = (zend_class_entry *) php_java_class_entry;
a950 9
  INIT_CLASS_ENTRY(ce, "mono", NULL);
  parent = (zend_class_entry *) php_java_class_entry;
  zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);
  INIT_CLASS_ENTRY(ce, "mono_class", NULL);
  parent = (zend_class_entry *) php_java_class_entry;
  zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);
  INIT_CLASS_ENTRY(ce, "monoclass", NULL);
  parent = (zend_class_entry *) php_java_class_entry;
  zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);
d955 3
a957 3
  make_lambda(&call, ZEND_FN(java___call));
  make_lambda(&get, ZEND_FN(java___get));
  make_lambda(&set, ZEND_FN(java___set));
d959 2
a960 2
  INIT_OVERLOADED_CLASS_ENTRY(ce, "java", 
							  php_java_class_functions, 
d965 3
a967 3
  memcpy(&php_java_handlers, zend_get_std_object_handlers(), sizeof php_java_handlers);
  //php_java_handlers.clone_obj = clone;
  php_java_handlers.cast_object = cast;
d969 1
a969 1
  php_java_class_entry =
d971 3
a973 3
  php_java_class_entry->get_iterator = get_iterator;
  php_java_class_entry->create_object = create_object;
  zend_class_implements(php_java_class_entry TSRMLS_CC, 1, zend_ce_arrayaccess);
d975 2
a976 2
  INIT_OVERLOADED_CLASS_ENTRY(ce, "java_exception", 
							  php_java_class_functions, 
d982 1
a982 1
  php_java_exception_class_entry =
d985 1
a985 1
  php_java_exception_class_entry->create_object = create_exception_object;
d987 2
a988 2
  INIT_CLASS_ENTRY(ce, "java_class", php_java_class_functions);
  parent = (zend_class_entry *) php_java_class_entry;
d990 1
a990 1
  php_java_class_class_entry = 
d994 2
a995 2
  INIT_CLASS_ENTRY(ce, "javaclass", php_java_class_functions);
  parent = (zend_class_entry *) php_java_class_entry;
d998 3
a1000 3
  INIT_CLASS_ENTRY(ce, "javaexception", php_java_class_functions);
  parent = (zend_class_entry *) php_java_exception_class_entry;
  php_java_exception_class_entry = 
a1002 8
  INIT_CLASS_ENTRY(ce, "mono", php_java_class_functions);
  parent = (zend_class_entry *) php_java_class_entry;
  zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);

  INIT_CLASS_ENTRY(ce, "monoclass", php_java_class_functions);
  parent = (zend_class_entry *) php_java_class_entry;
  zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);

d1005 1
a1005 1
  ZEND_INIT_MODULE_GLOBALS(java, php_java_alloc_globals_ctor, NULL);
d1007 2
a1008 2
  assert(!cfg);
  if(!cfg) cfg = malloc(sizeof *cfg); if(!cfg) exit(9);
d1011 1
a1011 1
	extern void java_init_cfg();
d1013 2
a1014 2
	java_init_cfg();
	memset(&cfg->saddr, 0, sizeof cfg->saddr);
d1016 3
a1018 3
	cfg->saddr.sun_family = AF_LOCAL;
	memset(cfg->saddr.sun_path, 0, sizeof cfg->saddr.sun_path);
	strcpy(cfg->saddr.sun_path, cfg->sockname);
d1020 1
a1020 1
	*cfg->saddr.sun_path=0;
d1023 3
a1025 3
	cfg->saddr.sin_family = AF_INET;
	cfg->saddr.sin_port=htons(atoi(cfg->sockname));
	cfg->saddr.sin_addr.s_addr = inet_addr( "127.0.0.1" );
d1028 1
a1028 1
  java_start_server();
d1030 3
a1032 3
  assert(!java_ini_last_updated);
  java_ini_last_updated=java_ini_updated;
  java_ini_updated=0;
d1036 1
a1036 1
PHP_MINFO_FUNCTION(java)
d1038 4
a1041 3
  char*s=java_get_server_string();
  char*server = java_test_server(0, 0);
  
d1043 8
a1050 2
  php_info_print_table_row(2, "java support", "Enabled");
  php_info_print_table_row(2, "java bridge", java_bridge_version);
d1052 2
a1053 6
  php_info_print_table_row(2, "java.libpath", cfg->ld_library_path);
  php_info_print_table_row(2, "java.classpath", cfg->classpath);
  php_info_print_table_row(2, "java.java_home", cfg->java_home);
  php_info_print_table_row(2, "java.java", cfg->java);
  if(strlen(cfg->logFile)==0) 
	php_info_print_table_row(2, "java.log_file", "<stdout>");
d1055 2
a1056 2
	php_info_print_table_row(2, "java.log_file", cfg->logFile);
  php_info_print_table_row(2, "java.log_level", cfg->logLevel);
d1058 1
a1058 1
  php_info_print_table_row(2, "java.hosts", cfg->hosts);
d1060 1
a1060 1
  php_info_print_table_row(2, "java command", s);
d1062 2
a1063 2
  php_info_print_table_row(2, "java status", server?"running":"not running");
  php_info_print_table_row(2, "java server", server?server:"localhost");
d1070 1
a1070 1
PHP_MSHUTDOWN_FUNCTION(java) 
d1072 2
a1073 2
  extern void php_java_shutdown_library();
  extern void java_destroy_cfg(int);
d1075 2
a1076 2
  java_destroy_cfg(java_ini_last_updated);
  java_ini_last_updated=0;
d1079 1
a1079 1
  php_java_shutdown_library();
d1082 1
a1082 1
  if(cfg) { free(cfg); cfg = 0; }
@


1.66
log
@Tomcat 5 support / multicasts removed
@
text
@d303 1
d350 1
a350 1
								   "java", 1, 1,
d368 1
a368 1
								   "mono", 1, 1,
d386 1
a386 1
								   "java", 1, 0, 
d404 1
a404 1
								   "mono", 1, 0, 
d423 1
a423 1
								   "java", 1, 0, 
d442 1
a442 1
								   "mono", 1, 0, 
d473 1
a473 1
								   Z_STRVAL(*argv[0]), 0, 0,
d496 1
a496 1
								   "tostring", 0, 0, getThis(), 0, NULL);
d931 1
a931 2
  short constructor;
  short is_mono;
a935 1
	is_mono=1;
d937 1
a937 1
	constructor = !strcmp("mono", name) || !createInstance;
a938 1
	is_mono=0;
d940 1
a940 1
	constructor = !strcmp("java", name) || !createInstance;
@


1.65
log
@php-mono-bridge 0.9
@
text
@a14 1
#include "ext/session/php_session.h"
d51 2
d169 1
a169 8
  JG(session_is_new)=0;
#if HAVE_PHP_SESSION
  if (PS(session_status) != php_session_active &&
	  PS(session_status) != php_session_disabled) {
	PS(id)=estrndup(Z_STRVAL_PP(session), Z_STRLEN_PP(session));
	php_session_start(TSRMLS_C);
  }
#endif
d171 1
a171 1
  jenv=java_connect_to_server_no_multicast(TSRMLS_C);
d175 2
a176 2
  (*jenv)->writeBoolean(jenv, JG(session_is_new)); 
  (*jenv)->writeLong(jenv, PS(gc_maxlifetime)); 
d192 12
d213 1
d251 8
d316 1
d731 2
@


1.64
log
@Version 2.0.6 (windows)
@
text
@d751 3
a753 1
	(*JG(jenv))->writeUnref(JG(jenv), iterator->java_iterator);
@


1.63
log
@add java_require to the list of public functions
@
text
@d1072 1
d1102 1
d1112 1
d1114 1
d1116 1
@


1.62
log
@Version 2.0.6-pre2
@
text
@d202 1
@


1.61
log
@Version 2.0.6-pre2
@
text
@a513 5
#ifndef __MINGW32__
  else
	if(atoi(cfg->logLevel)>=4)
	  fputs("PHP bug, an object destructor was called after module shutdown\n", stderr);
#endif
@


1.60
log
@enable external sessions
@
text
@d100 1
a100 2
PHP_FUNCTION(java_set_library_path)
{
d114 8
@


1.59
log
@Release-2.0.6pre
@
text
@a166 2
	jenv=java_connect_to_server_no_multicast(TSRMLS_C);
	if(!jenv) RETURN_NULL();
d170 2
@


1.58
log
@PR1174918
@
text
@d175 1
@


1.57
log
@java_get_session with load balancer
@
text
@d84 16
d193 1
@


1.56
log
@java_get_session with load balancer
@
text
@d136 1
a136 4
  zval **argv;
  int argc = ZEND_NUM_ARGS();
  
  if (argc!=1) WRONG_PARAM_COUNT;
d138 3
d145 1
a145 6
  argv = (zval **) safe_emalloc(sizeof(zval *), argc, 0);
  if (zend_get_parameters_array(ht, argc, argv) == FAILURE) {
	php_error(E_ERROR, "Couldn't fetch arguments into array.");
	RETURN_NULL();
  }

d149 1
a149 1
	PS(id)=estrdup(Z_STRVAL_P(argv[0]));
a150 1
	JG(session_is_new)=0;
a152 2
	//	if(JG(session_is_new)) {
	  //php_java_invoke(// destroy old session
d156 4
a159 3
  php_java_invoke("getSession", 0, argc, argv, 1, return_value TSRMLS_CC);

  efree(argv);
@


1.55
log
@java_get_session with load balancer
@
text
@d159 2
a160 2
	if(JG(session_is_new)) {
	  php_java_invoke(// destroy old session
@


1.54
log
@PR1187636 ] java_get_session support
@
text
@d15 1
d140 4
a143 3

  jenv=java_connect_to_server_no_multicast(TSRMLS_C);
  if(!jenv) RETURN_NULL();
d151 13
@


1.53
log
@multicast: ignore outdated packets
@
text
@d134 1
d138 4
a141 1
  if (argc!=2) WRONG_PARAM_COUNT;
@


1.52
log
@PR1176522
@
text
@a878 1
  zval *zval0;
@


1.51
log
@abort if connection is alive in rinit
@
text
@d37 4
a40 1
  assert(!JG(jenv)); if(JG(jenv)) exit(18);
d56 1
d278 1
@


1.50
log
@mono
@
text
@d37 2
a38 2
	assert(!JG(jenv));
	return SUCCESS;
@


1.49
log
@MONO and .NET support added
@
text
@d351 1
a351 1
PHP_METHOD(java, monoclass)
d422 13
d437 2
d673 2
a674 1
	long obj;
d680 9
a688 3
	java_get_jobject_from_object(readobj, &obj TSRMLS_CC);
	assert(obj);
	php_java_invoke("toString", obj,  0, 0, 0, writeobj TSRMLS_CC);
d691 1
a691 1
	return SUCCESS;
a878 8
	size_t len=4+Z_STRLEN(*arguments[0]);
	char *arg0=emalloc(len+1);
	strcpy(arg0, "cli.");
	strncat(arg0, Z_STRVAL(*arguments[0]), len-4);
	MAKE_STD_ZVAL(zval0);
	ZVAL_NULL(zval0);
	ZVAL_STRINGL(zval0, arg0, len, 0);
	arguments[0]=zval0;
a891 1
  if(is_mono) zval_ptr_dtor(&zval0);
d1059 1
a1059 1
  char*server = java_test_server(0);
@


1.48
log
@windows fixes
@
text
@a187 1
zend_class_entry *php_java_jsr_class_class_entry;
d296 18
d332 18
d351 1
a351 1
PHP_METHOD(java, javaclass)
d369 19
d849 4
a852 2
  short createInstance = strcmp("java_class", name) && strcmp("javaclass", name);
  short constructor = !strcmp("java", name) || !createInstance;
d856 17
d878 1
d941 10
d996 1
a996 2
  php_java_jsr_class_class_entry = 
	zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);
d1003 8
@


1.47
log
@java_get_server_name
@
text
@d47 1
d148 1
a148 3
  char *name;
  int socket;

d151 3
a153 7
  name=java_test_server(&socket);
  if(name) close(socket);
  if(!name) {
	RETURN_NULL();
  } else {
	ZVAL_STRING(return_value, name, 1);
	free(name);
d155 1
@


1.46
log
@java_get_server_name
@
text
@d153 7
a159 3
  if(name) close(sock);
  ZVAL_STRING(return_value, name, 1);
  free(name);
@


1.45
log
@Release-2.0.1
@
text
@d145 13
d164 1
@


1.44
log
@Release 2.0
@
text
@d127 1
a127 1
PHP_FUNCTION(java_session_get)
d140 1
a140 1
  php_java_invoke("getSession", 0, argc, argv, return_value TSRMLS_CC);
d150 1
a150 1
	PHP_FE(java_session_get, NULL)
d433 1
a433 1
  php_java_invoke("offsetExists", obj, argc, argv, return_value TSRMLS_CC);
d458 1
a458 1
  php_java_invoke("offsetGet", obj, argc, argv, return_value TSRMLS_CC);
d483 1
a483 1
  php_java_invoke("offsetSet", obj, argc, argv, return_value TSRMLS_CC);
d508 1
a508 1
  php_java_invoke("offsetUnset", obj, argc, argv, return_value TSRMLS_CC);
d527 1
a527 1
static function_entry java_class_functions[] = {
d598 1
a598 1
	php_java_invoke("toString", obj,  0, 0, writeobj TSRMLS_CC);
d650 1
a650 1
  php_java_invoke("currentKey", iterator->java_iterator, 0, 0, presult TSRMLS_CC);
d687 1
a687 1
  php_java_invoke("currentData", iterator->java_iterator, 0, 0, iterator->current_object TSRMLS_CC);
d772 2
a773 2
static void 
call_function_handler(INTERNAL_FUNCTION_PARAMETERS, zend_property_reference *property_reference)
d841 1
a841 1
							  call_function_handler,
d862 1
a862 1
							  java_class_functions, 
d878 1
a878 1
							  java_class_functions, 
d889 1
a889 1
  INIT_CLASS_ENTRY(ce, "java_class", java_class_functions);
d896 1
a896 1
  INIT_CLASS_ENTRY(ce, "javaclass", java_class_functions);
d901 1
a901 1
  INIT_CLASS_ENTRY(ce, "javaexception", java_class_functions);
@


1.43
log
@Protocol update
@
text
@d27 8
a93 9
static short check_type (zval *pobj, zend_class_entry *class TSRMLS_DC) {
#ifdef ZEND_ENGINE_2
  if (zend_get_class_entry(pobj TSRMLS_CC) != class)
	return 0;
  else
#endif
	return 1;
}

d108 1
a108 3
  if((Z_TYPE_PP(pobj) == IS_OBJECT) && check_type(*pobj, php_java_class_entry TSRMLS_CC)){
	java_get_jobject_from_object(*pobj, &obj TSRMLS_CC);
  }
d110 1
a110 1
	zend_error(E_WARNING, "Parameter #1 for %s() must be a java object", get_active_function_name(TSRMLS_C));
d115 1
a115 6
  if((Z_TYPE_PP(pclass) == IS_OBJECT) &&
	 (check_type(*pclass, php_java_class_entry TSRMLS_CC)||
	  check_type(*pclass, php_java_class_class_entry TSRMLS_CC)||
	  check_type(*pclass, php_java_jsr_class_class_entry TSRMLS_CC))){
	java_get_jobject_from_object(*pclass, &class TSRMLS_CC);
  }
d117 1
a117 1
	zend_error(E_WARNING, "Parameter #2 for %s() must be a java object", get_active_function_name(TSRMLS_C));
d127 18
d150 1
a170 1
int  le_jobject;
d389 1
d393 1
a907 5
  /* Register the resource, with destructor (arg 1) and text
	 description (arg 3), the other arguments are just standard
	 placeholders */
  le_jobject = zend_register_list_destructors_ex(php_java_destructor, NULL, "java", module_number);
  
@


1.42
log
@Protocol update
@
text
@d934 1
a934 1
  int status = java_test_server();
a947 1
  php_info_print_table_row(2, "java.sockname", cfg->sockname);
d950 2
a951 1
  php_info_print_table_row(2, "java status", (status==SUCCESS)?"running":"not running");
d954 1
@


1.41
log
@Replaced JNI with XML protocol
@
text
@d49 2
a50 3
/*   jlong result = 0; */
/*   proxyenv *jenv = java_connect_to_server(TSRMLS_C); */
/*   if(!jenv) {RETURN_NULL();} */
d52 1
a52 1
/*   if (ZEND_NUM_ARGS()!=0) WRONG_PARAM_COUNT; */
d54 2
a55 4
/*   result = (jlong)(long)return_value; */

/*   (*jenv)->LastException(jenv, result); */
//FIXME
d60 8
a67 12
/*   proxyenv *jenv = java_connect_to_server(TSRMLS_C); */
/*   jlong result = 0; */
/*   jvalue args[0]; */
/*   if(!jenv) {RETURN_NULL();} */

/*   if (ZEND_NUM_ARGS()!=0) WRONG_PARAM_COUNT; */

/*   result = (jlong)(long)return_value; */
  
/*   (*jenv)->CallVoidMethodA(0, jenv, JG(php_reflect),  */
/* 						   JG(clearEx), args); */
//FIXME
d72 12
a83 18
/*   zval **path; */
/*   jlong result = 0; */
/*   jstring p; */
/*   proxyenv *jenv = java_connect_to_server(TSRMLS_C); */
/*   jvalue args[1]; */
/*   if(!jenv) {RETURN_NULL();} */

/*   if (ZEND_NUM_ARGS()!=1 || zend_get_parameters_ex(1, &path) == FAILURE)  */
/* 	WRONG_PARAM_COUNT; */

/*   convert_to_string_ex(path); */

/*   result = (jlong)(long)return_value; */

/*   p = writeString(Z_STRVAL_PP(path)); */
/*   args[0].l=p; */
/*   (*jenv)->CallVoidMethodA(1, jenv, JG(php_reflect),  */
/* 						   JG(setJarPath), args); */
d97 36
a132 39
/*   zval **pobj, **pclass; */
/*   jobject obj, class; */
/*   jboolean result; */
/*   proxyenv *jenv = java_connect_to_server(TSRMLS_C); */
/*   if(!jenv) {RETURN_NULL();} */

/*   if (ZEND_NUM_ARGS()!=2 || zend_get_parameters_ex(2, &pobj, &pclass) == FAILURE)  */
/* 	WRONG_PARAM_COUNT; */

/*   convert_to_object_ex(pobj); */
/*   convert_to_object_ex(pclass); */

/*   obj = NULL; */
/*   if((Z_TYPE_PP(pobj) == IS_OBJECT) && check_type(*pobj, php_java_class_entry TSRMLS_CC)){ */
/* 	java_get_jobject_from_object(*pobj, &obj TSRMLS_CC); */
/*   } */
/*   if(!obj) { */
/* 	zend_error(E_WARNING, "Parameter #1 for %s() must be a java object", get_active_function_name(TSRMLS_C)); */
/* 	return; */
/*   } */

/*   class = NULL; */
/*   if((Z_TYPE_PP(pclass) == IS_OBJECT) &&  */
/* 	 (check_type(*pclass, php_java_class_entry TSRMLS_CC)|| */
/* 	  check_type(*pclass, php_java_class_class_entry TSRMLS_CC)|| */
/* 	  check_type(*pclass, php_java_jsr_class_class_entry TSRMLS_CC))){ */
/* 	java_get_jobject_from_object(*pclass, &class TSRMLS_CC); */
/*   } */
/*   if(!class) { */
/* 	zend_error(E_WARNING, "Parameter #2 for %s() must be a java object", get_active_function_name(TSRMLS_C)); */
/* 	return; */
/*   } */

/*   result = (*jenv)->IsInstanceOf(jenv, obj, class); */
/*   if(result == JNI_TRUE) { */
/* 	RETURN_TRUE; */
/*   } else { */
/* 	RETURN_FALSE; */
/*   } */
d171 8
d237 1
d366 1
a366 1
  jobject obj;
d378 1
a378 1
	(*JG(jenv))->DeleteGlobalRef(JG(jenv), obj);
d404 2
a405 2
  jobject obj, map;
  jvalue args[1];
d416 6
a421 7

  BEGIN_TRANSACTION(jenv);
  args[0].l=obj;
  map = (*jenv)->CallObjectMethodA(1, jenv, JG(php_reflect), JG(getPhpMap), args);

  php_java_invoke("offsetExists", map, argc, argv, return_value TSRMLS_CC);
  END_TRANSACTION(jenv);
d428 1
a428 1
  jobject obj, map;
a429 1
  jvalue args[1];
d438 1
d441 6
a446 6
  BEGIN_TRANSACTION(jenv);
  args[0].l=obj;
  map = (*jenv)->CallObjectMethodA(1, jenv, JG(php_reflect), JG(getPhpMap), args);

  php_java_invoke("offsetGet", map, argc, argv, return_value TSRMLS_CC);
  END_TRANSACTION(jenv);
d454 1
a454 1
  jobject obj, map;
a455 1
  jvalue args[1];
d466 6
a471 7

  BEGIN_TRANSACTION(jenv);
  args[0].l=obj;
  map = (*jenv)->CallObjectMethodA(1, jenv, JG(php_reflect), JG(getPhpMap), args);

  php_java_invoke("offsetSet", map, argc, argv, return_value TSRMLS_CC);
  END_TRANSACTION(jenv);
d479 1
a479 1
  jobject obj, map;
a480 1
  jvalue args[1];
d491 6
a496 7

  BEGIN_TRANSACTION(jenv);
  args[0].l=obj;
  map = (*jenv)->CallObjectMethodA(1, jenv, JG(php_reflect), JG(getPhpMap), args);

  php_java_invoke("offsetUnset", map, argc, argv, return_value TSRMLS_CC);
  END_TRANSACTION(jenv);
d578 1
a578 1
	jobject obj;
d586 1
a586 1
	php_java_invoke("tostring", obj,  0, 0, writeobj TSRMLS_CC);
d597 1
a597 1
  jobject java_iterator;
d611 1
a611 1
	(*jenv)->DeleteGlobalRef(jenv, iterator->java_iterator);
d680 1
a680 1
  jvalue args[0];
d683 2
d690 4
a693 2
  BEGIN_TRANSACTION(jenv);
  if((*jenv)->CallObjectMethodA(0, jenv, iterator->java_iterator, JG(moveForward), args))
d695 2
a696 1
  END_TRANSACTION(jenv);
d710 1
d713 3
a715 3

  jobject java_iterator, obj;
  jvalue args[1];
d724 6
a729 1
  BEGIN_TRANSACTION(jenv);
d731 2
a732 3
  args[0].l=obj;
  java_iterator = (*jenv)->CallObjectMethodA(1, jenv, JG(php_reflect), JG(getPhpMap), args);
  if (!java_iterator) return NULL;
d734 1
a734 7
  java_iterator = (*jenv)->NewGlobalRef(jenv, java_iterator);
  assert(java_iterator);
  iterator->java_iterator = java_iterator;
  iterator->type = 
	(*jenv)->CallObjectMethodA(0, jenv, java_iterator, JG(getType), args)
	? HASH_KEY_IS_STRING
	: HASH_KEY_IS_LONG;
d736 3
a738 1
  if((*jenv)->CallObjectMethodA(0, jenv, java_iterator, JG(hasMore), args)) {
a739 2
  }
  END_TRANSACTION(jenv);
d741 1
a938 1
  php_info_print_table_row(2, "java command", s);
d948 3
@


1.40
log
@Replaced JNI with XML protocol
@
text
@d34 9
a42 3
  if(JG(jenv)&&*JG(jenv)&&(*JG(jenv))->peer) SFCLOSE((*JG(jenv))->peer);
  if(JG(jenv)&&*JG(jenv)) free(*JG(jenv));
  if(JG(jenv)) free(JG(jenv));
@


1.39
log
@Release-1.0.8
@
text
@a17 1
#include "protocol.h"
a33 2
  if (JG(php_reflect)) (*JG(jenv))->DeleteGlobalRef(JG(jenv), JG(php_reflect));
  if (JG(reflect_class)) (*JG(jenv))->DeleteGlobalRef(JG(jenv), JG(reflect_class));
a36 2

  JG(php_reflect) = NULL;
d43 3
a45 3
  jlong result = 0;
  proxyenv *jenv = java_connect_to_server(TSRMLS_C);
  if(!jenv) {RETURN_NULL();}
d47 1
a47 1
  if (ZEND_NUM_ARGS()!=0) WRONG_PARAM_COUNT;
d49 1
a49 1
  result = (jlong)(long)return_value;
d51 2
a52 2
  (*jenv)->LastException(jenv, JG(php_reflect), 
						 JG(lastEx), result);
d57 12
a68 11
  proxyenv *jenv = java_connect_to_server(TSRMLS_C);
  jlong result = 0;
  jvalue args[0];
  if(!jenv) {RETURN_NULL();}

  if (ZEND_NUM_ARGS()!=0) WRONG_PARAM_COUNT;

  result = (jlong)(long)return_value;
  
  (*jenv)->CallVoidMethodA(0, jenv, JG(php_reflect), 
						   JG(clearEx), args);
d73 18
a90 20
  zval **path;
  jlong result = 0;
  jstring p;
  proxyenv *jenv = java_connect_to_server(TSRMLS_C);
  jvalue args[1];
  if(!jenv) {RETURN_NULL();}

  if (ZEND_NUM_ARGS()!=1 || zend_get_parameters_ex(1, &path) == FAILURE) 
	WRONG_PARAM_COUNT;

  convert_to_string_ex(path);

  result = (jlong)(long)return_value;

  BEGIN_TRANSACTION(jenv);
  p = (*jenv)->NewStringUTF(jenv, Z_STRVAL_PP(path));
  args[0].l=p;
  (*jenv)->CallVoidMethodA(1, jenv, JG(php_reflect), 
						   JG(setJarPath), args);
  END_TRANSACTION(jenv);
d104 39
a142 39
  zval **pobj, **pclass;
  jobject obj, class;
  jboolean result;
  proxyenv *jenv = java_connect_to_server(TSRMLS_C);
  if(!jenv) {RETURN_NULL();}

  if (ZEND_NUM_ARGS()!=2 || zend_get_parameters_ex(2, &pobj, &pclass) == FAILURE) 
	WRONG_PARAM_COUNT;

  convert_to_object_ex(pobj);
  convert_to_object_ex(pclass);

  obj = NULL;
  if((Z_TYPE_PP(pobj) == IS_OBJECT) && check_type(*pobj, php_java_class_entry TSRMLS_CC)){
	java_get_jobject_from_object(*pobj, &obj TSRMLS_CC);
  }
  if(!obj) {
	zend_error(E_WARNING, "Parameter #1 for %s() must be a java object", get_active_function_name(TSRMLS_C));
	return;
  }

  class = NULL;
  if((Z_TYPE_PP(pclass) == IS_OBJECT) && 
	 (check_type(*pclass, php_java_class_entry TSRMLS_CC)||
	  check_type(*pclass, php_java_class_class_entry TSRMLS_CC)||
	  check_type(*pclass, php_java_jsr_class_class_entry TSRMLS_CC))){
	java_get_jobject_from_object(*pclass, &class TSRMLS_CC);
  }
  if(!class) {
	zend_error(E_WARNING, "Parameter #2 for %s() must be a java object", get_active_function_name(TSRMLS_C));
	return;
  }

  result = (*jenv)->IsInstanceOf(jenv, obj, class);
  if(result == JNI_TRUE) {
	RETURN_TRUE;
  } else {
	RETURN_FALSE;
  }
a250 1
  java_globals->php_reflect=0;
a251 1
  java_globals->reflect_class=0;
@


1.38
log
@iterate over non-primitive array values
@
text
@d99 1
a99 1
static short check_type (zval *pobj, zend_class_entry *class) {
d101 1
a101 1
  if (zend_get_class_entry(pobj) != class)
d123 1
a123 1
  if((Z_TYPE_PP(pobj) == IS_OBJECT) && check_type(*pobj, php_java_class_entry)){
d133 3
a135 3
	 (check_type(*pclass, php_java_class_entry)||
	  check_type(*pclass, php_java_class_class_entry)||
	  check_type(*pclass, php_java_jsr_class_class_entry))){
d383 1
a383 1
  java_get_jobject_from_object(getThis(), &obj);
d423 1
a423 1
  java_get_jobject_from_object(getThis(), &obj);
d430 1
a430 1
  php_java_invoke("offsetExists", map, argc, argv, return_value);
d449 1
a449 1
  java_get_jobject_from_object(getThis(), &obj);
d455 1
a455 1
  php_java_invoke("offsetGet", map, argc, argv, return_value);
d475 1
a475 1
  java_get_jobject_from_object(getThis(), &obj);
d482 1
a482 1
  php_java_invoke("offsetSet", map, argc, argv, return_value);
d502 1
a502 1
  java_get_jobject_from_object(getThis(), &obj);
d509 1
a509 1
  php_java_invoke("offsetUnset", map, argc, argv, return_value);
d598 1
a598 1
	java_get_jobject_from_object(readobj, &obj);
d600 1
a600 1
	php_java_invoke("tostring", obj,  0, 0, writeobj);
d652 1
a652 1
  php_java_invoke("currentKey", iterator->java_iterator, 0, 0, presult);
d689 1
a689 1
  php_java_invoke("currentData", iterator->java_iterator, 0, 0, iterator->current_object);
d729 1
a729 1
  java_get_jobject_from_object(object, &obj);
@


1.37
log
@Release-1.0.8
@
text
@d300 19
d530 1
d542 1
d562 27
d650 1
d687 1
d884 1
a884 1
  php_java_exception_class_entry->create_object = create_object;
d886 1
a886 1
  INIT_CLASS_ENTRY(ce, "java_class", NULL);
d893 1
a893 1
  INIT_CLASS_ENTRY(ce, "javaclass", NULL);
d898 1
a898 1
  INIT_CLASS_ENTRY(ce, "javaexception", NULL);
@


1.36
log
@Release-1.0.8
@
text
@d836 1
a836 1
  INIT_CLASS_ENTRY(ce, "java_class", java_class_functions);
d843 1
a843 1
  INIT_CLASS_ENTRY(ce, "javaclass", java_class_functions);
d848 1
a848 1
  INIT_CLASS_ENTRY(ce, "javaexception", java_class_functions);
@


1.35
log
@Release-1.0.8
@
text
@a889 38
static char*get_server_args() {
  int i;
  char*s;
  char*env[N_SENV];
  char*args[N_SARGS];
  unsigned int length = 0;

  java_get_server_args(env, args);

  for(i=0; i< (sizeof env)/(sizeof*env); i++) {
	if(!env[i]) break;
	length+=strlen(env[i])+1;
  }
  for(i=0; i< (sizeof args)/(sizeof*args); i++) {
	size_t l;
	if(!args[i]) break;
	l=strlen(args[i]);
	length+=(l?l:2)+1;
  }
  s=malloc(length+1);
  assert(s);
  *s=0;
  for(i=0; i< (sizeof env)/(sizeof*env); i++) {
	if(!env[i]) break;
	strcat(s, env[i]); strcat(s, " ");
	free(env[i]);
  }
  for(i=0; i< (sizeof args)/(sizeof*args); i++) {
	if(!args[i]) break;
	if(!strlen(args[i])) strcat(s,"'");
	strcat(s, args[i]);
	if(!strlen(args[i])) strcat(s,"'");
	strcat(s, " ");
	free(args[i]);
  }
  s[length]=0;
  return s;
}
d892 1
a892 1
  char*s=get_server_args();
@


1.34
log
@ZTS
@
text
@d133 3
a135 1
	 (check_type(*pclass, php_java_class_entry)||check_type(*pclass, php_java_class_class_entry))){
d178 5
a182 1
zend_class_entry *php_java_class_entry, *php_java_class_class_entry, *php_java_exception_class_entry;
d728 1
a728 1
  short createInstance = strcmp("java_class", name);
d797 3
a816 2
  ce.get_iterator = get_iterator;
  ce.create_object = create_object;
d820 2
d823 1
a829 3
  ce.get_iterator = get_iterator;
  ce.create_object = create_object;

d833 2
d841 12
@


1.33
log
@use java security instead of dropping the process privileges
@
text
@d26 1
d49 1
a49 1
  proxyenv *jenv = java_connect_to_server(&JG(cfg) TSRMLS_CC);
d62 1
a62 1
  proxyenv *jenv = java_connect_to_server(&JG(cfg) TSRMLS_CC);
d80 1
a80 1
  proxyenv *jenv = java_connect_to_server(&JG(cfg) TSRMLS_CC);
d113 1
a113 1
  proxyenv *jenv = java_connect_to_server(&JG(cfg) TSRMLS_CC);
d124 1
a124 1
	java_get_jobject_from_object(*pobj, &obj);
d134 1
a134 1
	java_get_jobject_from_object(*pclass, &class);
d184 1
a184 1
	  JG(cfg).sockname=new_value;
d192 1
a192 1
	  JG(cfg).classpath =new_value;
d200 1
a200 1
	  JG(cfg).ld_library_path = new_value;
d208 1
a208 1
	JG(cfg).java = new_value;
d216 1
a216 1
	  JG(cfg).java_home = new_value;
d224 1
a224 1
	  JG(cfg).logLevel = new_value;
d232 1
a232 1
	  JG(cfg).logFile = new_value;
a255 11
static void init_server()
{
  extern int java_test_server(struct cfg*cfg TSRMLS_DC);
  extern void java_start_server(struct cfg*cfg TSRMLS_DC);

  if(java_test_server(&JG(cfg) TSRMLS_CC)==FAILURE) {
	java_start_server(&JG(cfg) TSRMLS_CC);
	java_test_server(&JG(cfg) TSRMLS_CC);
  }
}

d364 1
a364 1
	if(atoi(JG(cfg).logLevel)>=4)
d385 1
a385 1
  proxyenv *jenv = java_connect_to_server(&JG(cfg) TSRMLS_CC);
d414 1
a414 1
  proxyenv *jenv = java_connect_to_server(&JG(cfg) TSRMLS_CC);
d440 1
a440 1
  proxyenv *jenv = java_connect_to_server(&JG(cfg) TSRMLS_CC);
d467 1
a467 1
  proxyenv *jenv = java_connect_to_server(&JG(cfg) TSRMLS_CC);
a743 2
  TSRMLS_FETCH();

d749 1
a749 1
  php_java_get_property_handler(name, object, &presult TSRMLS_CC);
a763 2
  TSRMLS_FETCH();

d769 1
a769 1
  result = php_java_set_property_handler(name, object, value, &dummy TSRMLS_CC);
d841 2
d845 1
a845 1
	extern void java_init_cfg(struct cfg *cfg);
d847 1
a847 1
	java_init_cfg(&JG(cfg));
d849 3
a851 3
	JG(cfg).saddr.sun_family = AF_LOCAL;
	memset(JG(cfg).saddr.sun_path, 0, sizeof JG(cfg).saddr.sun_path);
	strcpy(JG(cfg).saddr.sun_path, JG(cfg).sockname);
d853 1
a853 1
	*JG(cfg).saddr.sun_path=0;
d856 3
a858 3
	JG(cfg).saddr.sin_family = AF_INET;
	JG(cfg).saddr.sin_port=htons(atoi(JG(cfg).sockname));
	JG(cfg).saddr.sin_addr.s_addr = inet_addr( "127.0.0.1" );
d861 1
a861 1
  init_server();
d869 1
a869 1
static char*get_server_args(struct cfg*cfg) {
d876 1
a876 1
  java_get_server_args(cfg, env, args);
d909 2
a910 3
  extern int java_test_server(struct cfg*cfg TSRMLS_DC);
  char*s=get_server_args(&JG(cfg));
  int status = java_test_server(&JG(cfg) TSRMLS_CC);
d916 5
a920 5
  php_info_print_table_row(2, "java.libpath", JG(cfg).ld_library_path);
  php_info_print_table_row(2, "java.classpath", JG(cfg).classpath);
  php_info_print_table_row(2, "java.java_home", JG(cfg).java_home);
  php_info_print_table_row(2, "java.java", JG(cfg).java);
  if(strlen(JG(cfg).logFile)==0) 
d923 2
a924 2
	php_info_print_table_row(2, "java.log_file", JG(cfg).logFile);
  php_info_print_table_row(2, "java.log_level", JG(cfg).logLevel);
d933 2
a934 2
  extern void php_java_shutdown_library(struct cfg*cfg TSRMLS_DC);
  extern void java_destroy_cfg(int, struct cfg*cfg TSRMLS_DC);
d936 1
a936 1
  java_destroy_cfg(java_ini_last_updated, &JG(cfg) TSRMLS_CC);
d940 5
a944 1
  php_java_shutdown_library(&JG(cfg) TSRMLS_CC);
@


1.32
log
@secure mode
@
text
@a28 1
    extern int java_connect_to_server(struct cfg*cfg TSRMLS_DC);
a29 1
	java_connect_to_server(&JG(cfg) TSRMLS_CC);
d48 2
a53 5
  
  if(!JG(jenv)) {
	php_error(E_ERROR, "java not initialized");
	return;
  }
d55 2
a56 2
  (*JG(jenv))->LastException(JG(jenv), JG(php_reflect), 
							 JG(lastEx), result);
d61 1
d64 1
d70 2
a71 7
  if(!JG(jenv)) {
	php_error(E_ERROR, "java not initialized");
	return;
  }

  (*JG(jenv))->CallVoidMethodA(0, JG(jenv), JG(php_reflect), 
							   JG(clearEx), args);
d79 1
a79 1
  proxyenv *jenv =JG(jenv);
d81 1
a88 5
  
  if(!JG(jenv)) {
	php_error(E_ERROR, "java not initialized");
	return;
  }
d91 1
a91 1
  p = (*JG(jenv))->NewStringUTF(JG(jenv), Z_STRVAL_PP(path));
d93 2
a94 2
  (*JG(jenv))->CallVoidMethodA(1, JG(jenv), JG(php_reflect), 
							   JG(setJarPath), args);
d112 2
a120 5
  if(!JG(jenv)) {
	php_error(E_ERROR, "java not initialized");
	return;
  }

d140 1
a140 1
  result = (*JG(jenv))->IsInstanceOf(JG(jenv), obj, class);
d260 1
a260 1
  if(java_test_server(&JG(cfg) TSRMLS_CC)==FAILURE) 
d262 2
a263 1
  java_test_server(&JG(cfg) TSRMLS_CC);
d361 1
a361 1
  
d395 1
a395 1
  proxyenv *jenv =JG(jenv);
d400 1
d413 1
a413 1
  map = (*JG(jenv))->CallObjectMethodA(1, JG(jenv), JG(php_reflect), JG(getPhpMap), args);
d424 1
a424 1
  proxyenv *jenv =JG(jenv);
d426 1
d438 1
a438 1
  map = (*JG(jenv))->CallObjectMethodA(1, JG(jenv), JG(php_reflect), JG(getPhpMap), args);
d450 1
a450 1
  proxyenv *jenv = JG(jenv);
d452 1
d477 1
a477 1
  proxyenv *jenv = JG(jenv);
d479 1
@


1.31
log
@release 1.0.7
@
text
@d874 3
a937 1
#ifndef CFG_JAVA_SOCKET_ANON
a938 1
#endif
@


1.30
log
@release 1.0.7
@
text
@d510 5
a514 1
ZEND_BEGIN_ARG_INFO(arginfo_array_offsetGet, 0)
d519 1
a519 1
ZEND_BEGIN_ARG_INFO(arginfo_array_offsetSet, 0)
d527 9
a535 9
  PHP_ME(java, __call, NULL, 0)
  PHP_ME(java, __tostring, NULL, 0)
  PHP_ME(java, __get, NULL, 0)
  PHP_ME(java, __set, NULL, 0)
  PHP_ME(java, __destruct, NULL, 0)
  PHP_ME(java, offsetExists,  arginfo_array_offsetGet, ZEND_ACC_PUBLIC)
  PHP_ME(java, offsetGet,     arginfo_array_offsetGet, ZEND_ACC_PUBLIC)
  PHP_ME(java, offsetSet,     arginfo_array_offsetSet, ZEND_ACC_PUBLIC)
  PHP_ME(java, offsetUnset,   arginfo_array_offsetGet, ZEND_ACC_PUBLIC)
@


1.29
log
@release 1.0.7
@
text
@d22 1
d372 1
a372 2
  zval **argv, **handle;
  int type;
d383 1
a383 1
  assert(obj); if(!obj) RETURN_FALSE;
d485 2
a486 2
  zval **argv, **handle;
  int type, argc;
@


1.28
log
@trampoline
@
text
@d66 1
d77 2
a78 2
  (*JG(jenv))->CallVoidMethod(1, JG(jenv), JG(php_reflect), 
							  JG(clearEx));
d87 1
d103 3
a105 2
  (*JG(jenv))->CallVoidMethod(2, JG(jenv), JG(php_reflect), 
							  JG(setJarPath), p);
d379 1
a379 1
	RETURN_NULL();
d383 2
a384 1
  assert(obj);
d392 1
d413 1
d425 2
a426 1
  map = (*JG(jenv))->CallObjectMethod(1, JG(jenv), JG(php_reflect), JG(getPhpMap), obj);
d430 1
d438 1
d449 2
a450 1
  map = (*JG(jenv))->CallObjectMethod(1, JG(jenv), JG(php_reflect), JG(getPhpMap), obj);
d454 1
d463 1
d475 2
a476 1
  map = (*jenv)->CallObjectMethod(1, jenv, JG(php_reflect), JG(getPhpMap), obj);
d480 1
d489 1
d501 2
a502 1
  map = (*jenv)->CallObjectMethod(1, jenv, JG(php_reflect), JG(getPhpMap), obj);
d506 1
d542 1
a542 1
  ALLOC_HASHTABLE_REL(object->properties);
d648 1
a648 3
  object_init_ex(iterator->current_object, php_java_class_entry);
  iterator->current_object->is_ref=1;
  iterator->current_object->refcount=1;
d654 1
d657 1
d663 1
a663 1
  if((*jenv)->CallObjectMethod(0, jenv, iterator->java_iterator, JG(moveForward)))
d683 1
d693 3
a695 1
  java_iterator = (*jenv)->CallObjectMethod(1, jenv, JG(php_reflect), JG(getPhpMap), obj);
d702 1
a702 1
	(*jenv)->CallObjectMethod(0, jenv, java_iterator, JG(getType))
d706 1
a706 1
  if((*jenv)->CallObjectMethod(0, jenv, java_iterator, JG(hasMore))) {
d840 3
d961 4
@


1.27
log
@trampoline
@
text
@d12 1
a12 1
#include "php.h"
d36 1
d85 1
d99 1
d103 1
d108 1
a108 1
  if (zend_get_class_entry(pobj) != php_java_class_entry)
d142 2
a143 1
  if((Z_TYPE_PP(pclass) == IS_OBJECT) && check_type(*pclass, php_java_class_entry)){
d186 1
a186 1
zend_class_entry *php_java_class_entry, *php_java_exception_class_entry;
d384 2
a385 1
	fputs("PHP bug, an object destructor was called after module shutdown", stderr);
d404 1
d417 2
d422 1
a422 1

d604 16
a619 2
	*str_key_len = Z_STRLEN_P(presult);
	*str_key = estrndup(Z_STRVAL_P(presult), *str_key_len);
d827 2
a828 1
  zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);
@


1.26
log
@PHP5
@
text
@a99 2

  (*JG(jenv))->DeleteLocalRef(JG(jenv), p);
d113 2
a114 3
  zval **pobj, **pclass, **handle;
  jobject obj;
  jclass class;
a115 1
  int type, n;
d128 1
a128 1
  n = FAILURE;
d130 1
a130 1
	n = zend_hash_index_find(Z_OBJPROP_PP(pobj), 0, (void**) &handle);
d132 1
a132 1
  if(n==FAILURE) {
a135 2
  obj = zend_list_find(Z_LVAL_PP(handle), &type);
  assert(obj);
d137 3
a139 3
  n = FAILURE;
  if((Z_TYPE_PP(pobj) == IS_OBJECT) && check_type(*pobj, php_java_class_entry)){
	n = zend_hash_index_find(Z_OBJPROP_PP(pclass), 0, (void**) &handle);
d141 1
a141 1
  if(n==FAILURE) {
a144 2
  class = zend_list_find(Z_LVAL_PP(handle), &type);
  assert(class);
d264 2
d267 1
a267 1
	java_start_server(&JG(cfg));
d361 22
d398 2
a399 2
  zval **argv, **handle;
  int type, argc;
d408 2
a409 2
  zend_hash_index_find(Z_OBJPROP_P(getThis()), 0, (void**) &handle);
  obj = zend_list_find(Z_LVAL_PP(handle), &type);
d417 2
a418 2
  zval **argv, **handle;
  int type, argc;
d420 1
d428 3
a430 2
  zend_hash_index_find(Z_OBJPROP_P(getThis()), 0, (void**) &handle);
  obj = zend_list_find(Z_LVAL_PP(handle), &type);
d434 1
a434 1

d439 2
a440 2
  zval **argv, **handle;
  int type, argc;
d442 1
d450 5
a454 3
  zend_hash_index_find(Z_OBJPROP_P(getThis()), 0, (void**) &handle);
  obj = zend_list_find(Z_LVAL_PP(handle), &type);
  map = (*JG(jenv))->CallObjectMethod(1, JG(jenv), JG(php_reflect), JG(getPhpMap), obj);
d457 1
a457 1

d465 1
d473 5
a477 3
  zend_hash_index_find(Z_OBJPROP_P(getThis()), 0, (void**) &handle);
  obj = zend_list_find(Z_LVAL_PP(handle), &type);
  map = (*JG(jenv))->CallObjectMethod(1, JG(jenv), JG(php_reflect), JG(getPhpMap), obj);
d480 1
a480 1

d501 1
a529 2
	zval **handle;
	int type, n;
d534 1
a534 3
	n = zend_hash_index_find(Z_OBJPROP_P(readobj), 0, (void**) &handle);
	assert(n);
	obj = zend_list_find(Z_LVAL_PP(handle), &type);
a581 1
  proxyenv *jenv = JG(jenv);
d617 1
d622 2
a623 1
  if((*JG(jenv))->CallObjectMethod(0, JG(jenv), iterator->java_iterator, JG(moveForward)))
d625 1
a641 2
  zval **handle;
  int type;
d648 1
a648 2
  zend_hash_index_find(Z_OBJPROP_P(object), 0, (void**) &handle);
  obj = zend_list_find(Z_LVAL_PP(handle), &type);
d650 2
d666 2
d804 1
a804 2
  zend_class_entry *php_java_class_class_entry = 
	zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);
d877 7
a883 6
	char*s=get_server_args(&JG(cfg));
	int status = java_test_server(&JG(cfg) TSRMLS_CC);

	php_info_print_table_start();
	php_info_print_table_row(2, "java support", "Enabled");
	php_info_print_table_row(2, "java bridge", java_bridge_version);
d885 1
a885 1
	php_info_print_table_row(2, "java command", s);
d887 13
a899 13
	php_info_print_table_row(2, "java.libpath", JG(cfg).ld_library_path);
	php_info_print_table_row(2, "java.classpath", JG(cfg).classpath);
	php_info_print_table_row(2, "java.java_home", JG(cfg).java_home);
	php_info_print_table_row(2, "java.java", JG(cfg).java);
	if(strlen(JG(cfg).logFile)==0) 
	  php_info_print_table_row(2, "java.log_file", "<stdout>");
	else
	  php_info_print_table_row(2, "java.log_file", JG(cfg).logFile);
	php_info_print_table_row(2, "java.log_level", JG(cfg).logLevel);
	php_info_print_table_row(2, "java status", (status==SUCCESS)?"running":"not running");
	php_info_print_table_end();

	free(s);
d906 1
a906 1

@


1.25
log
@php 5
@
text
@d104 9
d133 1
a133 1
  if ((Z_TYPE_PP(pobj) == IS_OBJECT) && (zend_get_class_entry(*pobj) == php_java_class_entry)) {
d144 1
a144 1
  if ((Z_TYPE_PP(pobj) == IS_OBJECT) && (zend_get_class_entry(*pobj) == php_java_class_entry)) {
@


1.24
log
@PHP5 iterator/array
@
text
@d123 4
a126 1
  n = zend_hash_index_find(Z_OBJPROP_PP(pobj), 0, (void**) &handle);
d128 1
a128 1
	php_error(E_ERROR, "parameter #1 is not a java object");
d134 4
a137 1
  n = zend_hash_index_find(Z_OBJPROP_PP(pclass), 0, (void**) &handle);
d139 1
a139 1
	php_error(E_ERROR, "parameter #2 is not a java object");
d181 3
a339 1
  /* FIXME: better use String.valueOf() instead */
a342 1

d476 39
d749 3
d753 1
a757 2
  php_java_class_entry->ce_flags=0;//??? FIXME

d771 2
a772 3
zend_class_entry *e=
zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);
 e->ce_flags=0;//??? FIXME
@


1.23
log
@php 4/5
@
text
@d20 4
d104 43
d151 1
d273 1
a273 1
								   "java", 1, 0,
d291 1
a291 1
								   "java", 1, 1, 
d364 89
d455 10
a464 6
	PHP_ME(java, java_class, NULL, 0)
	PHP_ME(java, java, NULL, 0)
	PHP_ME(java, __call, NULL, 0)
	PHP_ME(java, __tostring, NULL, 0)
	PHP_ME(java, __get, NULL, 0)
	PHP_ME(java, __set, NULL, 0)
d467 125
d616 2
a617 2
  short createInstance = !strcmp("java_class", name);
  short constructor = !strcmp("java", name) || createInstance;
d676 1
d684 5
a688 1
	php_java_class_entry = zend_register_internal_class(&ce TSRMLS_CC);
d690 32
a721 16
	zend_class_entry ce;
	zend_class_entry *parent;
	zend_internal_function call, get, set;

	make_lambda(&call, ZEND_FN(java___call));
	make_lambda(&get, ZEND_FN(java___get));
	make_lambda(&set, ZEND_FN(java___set));

	INIT_OVERLOADED_CLASS_ENTRY(ce, "java", 
								java_class_functions, 
								(zend_function*)&call, 
								(zend_function*)&get, 
								(zend_function*)&set);
	
	php_java_class_entry =
	  zend_register_internal_class(&ce TSRMLS_CC);
d723 15
a737 5
	INIT_OVERLOADED_CLASS_ENTRY(ce, "java_exception", 
								java_class_functions, 
								(zend_function*)&call, 
								(zend_function*)&get, 
								(zend_function*)&set);
d739 1
a739 21
	parent = (zend_class_entry *) zend_exception_get_default();
	php_java_exception_class_entry =
	  zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);

	INIT_CLASS_ENTRY(ce, "java_class", java_class_functions);
	parent = (zend_class_entry *) php_java_class_entry;
	zend_register_internal_class_ex(&ce, parent, NULL TSRMLS_CC);
#endif

	/* Register the resource, with destructor (arg 1) and text
	   description (arg 3), the other arguments are just standard
	   placeholders */
	le_jobject = zend_register_list_destructors_ex(php_java_destructor, NULL, "java", module_number);

	ZEND_INIT_MODULE_GLOBALS(java, php_java_alloc_globals_ctor, NULL);

	if(REGISTER_INI_ENTRIES()==SUCCESS) {
	  /* set the default values for all undefined */
	  extern void java_init_cfg(struct cfg *cfg);

	  java_init_cfg(&JG(cfg));
d741 3
a743 3
	  JG(cfg).saddr.sun_family = AF_LOCAL;
	  memset(JG(cfg).saddr.sun_path, 0, sizeof JG(cfg).saddr.sun_path);
	  strcpy(JG(cfg).saddr.sun_path, JG(cfg).sockname);
d745 3
a747 3
	  JG(cfg).saddr.sin_family = AF_INET;
	  JG(cfg).saddr.sin_port=htons(atoi(JG(cfg).sockname));
	  JG(cfg).saddr.sin_addr.s_addr = inet_addr( "127.0.0.1" );
d749 8
a756 8
	}
	init_server();

	assert(!java_ini_last_updated);
	java_ini_last_updated=java_ini_updated;
	java_ini_updated=0;

	return SUCCESS;
@


1.22
log
@php 4/5
@
text
@d225 19
a243 1
								   "java",
d274 1
a274 1
								   Z_STRVAL(*argv[0]),
d285 1
a285 1
								   "tostring", getThis(), 0, NULL);
d318 1
d350 2
d356 2
a357 1
								 name, object, 
d445 4
@


1.21
log
@php 4/5
@
text
@d438 1
a438 1
	  JG(cfg).saddr.sun_family = AF_UNIX;
@


1.20
log
@Version 1.1
@
text
@d345 1
a345 1
  pval presult;
d355 1
d357 1
a357 1
  presult = php_java_get_property_handler(char* name, pval* object TSRMLS_CC);
d367 1
d377 1
d379 1
a379 1
  result = php_java_set_property_handler(name, object, value TSRMLS_CC);
d389 5
a393 4
  INIT_OVERLOADED_CLASS_ENTRY(php_java_class_entry, "java", NULL,
								call_function_handler,
								get_property_handler,
								set_property_handler);
d395 1
a395 1
	zend_register_internal_class(&php_java_class_entry TSRMLS_CC);
@


1.19
log
@php 5
@
text
@d126 1
a126 1
zend_class_entry *php_java_class_entry;
d263 7
d302 1
d394 1
a394 1
	zend_class_entry *parent = (zend_class_entry *) zend_exception_get_default();
d408 10
@


1.18
log
@PHP 5 support
@
text
@a43 1
  jmethodID lastEx;
a52 2
  lastEx = (*JG(jenv))->GetMethodID(JG(jenv), JG(reflect_class), 
          "lastException", "(JJ)V");
d54 2
a55 2
  (*JG(jenv))->LastException(JG(jenv), JG(php_reflect), lastEx, 
							  result);
a60 1
  jmethodID clearEx;
a69 2
  clearEx = (*JG(jenv))->GetMethodID(JG(jenv), JG(reflect_class), 
          "clearException", "()V");
d72 1
a72 1
							  clearEx);
a78 1
  jmethodID setJarPath;
a91 3
  setJarPath = (*JG(jenv))->GetMethodID(JG(jenv), JG(reflect_class), 
										"setJarLibraryPath", 
										"(Ljava/lang/String;)V");
d95 1
a95 1
							  setJarPath, p);
a211 37
static void print_array(int argc, pval** argv)
{
	int i;
  for (i=0; i<argc; i++) {
	  pval*arg=argv[i];
	  switch (Z_TYPE_P(arg)) {
	  case IS_STRING:
		  puts(Z_STRVAL_P(arg));
      break;

    case IS_OBJECT:
		puts("object");
      break;

    case IS_BOOL:
		puts("bool");
      break;

    case IS_LONG:
		puts("long");
      break;

    case IS_DOUBLE:
		puts("double");
      break;

    case IS_ARRAY:
      {
		  puts("array");
      }

      break;
	  default:
		puts("bleh");
	  }
  }
}
a222 2
	puts("java called");
	print_array(argc, argv);
a254 4
	print_array(argc, argv);
	puts("call called");
	print_array(argc, argv);

d274 1
a274 4
  puts("set called");
  print_array(argc, argv);
  
  php_java_set_property_handler(Z_STRVAL(*argv[0]), getThis(), argv[1]);
a279 1
  pval presult;
a281 1
  
d288 1
a288 5
  puts("get called");
  print_array(argc, argv);
  
  presult = php_java_get_property_handler(Z_STRVAL(*argv[0]), getThis());
  
d386 1
d399 2
a400 1
	php_java_class_entry = zend_register_internal_class(&ce TSRMLS_CC);
@


1.17
log
@win32/mingw
@
text
@d136 1
a136 1
zend_class_entry php_java_class_entry;
d221 216
d439 5
a443 5
	/* function definitions found in bridge.c */
	INIT_OVERLOADED_CLASS_ENTRY(php_java_class_entry, "java", NULL,
								php_java_call_function_handler,
								php_java_get_property_handler,
								php_java_set_property_handler);
d446 16
d559 2
a560 2
  extern void php_java_shutdown_library(TSRMLS_D);
  extern void java_destroy_cfg(int, struct cfg*);
d562 1
a562 1
  java_destroy_cfg(java_ini_last_updated, &JG(cfg));
d566 1
a566 1
  php_java_shutdown_library(TSRMLS_C);
@


1.16
log
@loop in malloc_consolidate when apache received a sighup
@
text
@d241 1
d243 1
d247 5
@


1.15
log
@Release-1.0.6a
@
text
@d323 1
a323 4
  // DISABLED: This will cause malloc_consolidate to spin in
  // an infinite loop.  Releasing the memory isn't necessary
  // anyway because the exit() call does this for us
/*   java_destroy_cfg(java_ini_last_updated, &JG(cfg)); */
@


1.14
log
@Load libraries from /usr/share/java or from ext_dir/lib
@
text
@d323 4
a326 1
  java_destroy_cfg(java_ini_last_updated, &JG(cfg));
@


1.13
log
@Added support for Slowlaris' broken stdio:
SFREAD SFWRITE SFDOPEN SFCLOSE SFEOF SFERROR: Use these instead of the stdio
versions.  On Solaris these functions access the raw socket, which is slow
but at least it works
@
text
@d81 1
a81 1
PHP_FUNCTION(java_set_jar_library_path)
d113 1
a113 1
	PHP_FE(java_set_jar_library_path, NULL)
@


1.12
log
@more expressive error messages
@
text
@d32 1
a32 1
  if(JG(jenv)&&*JG(jenv)&&(*JG(jenv))->peer) fclose((*JG(jenv))->peer);
@


1.12.2.1
log
@workaround for broken sparc stdio
@
text
@a18 1
#include "jfile.h"
d32 1
a32 1
  if(JG(jenv)&&*JG(jenv)&&(*JG(jenv))->peer) java_fclose((*JG(jenv))->peer);
@


1.11
log
@gcc2
@
text
@d135 1
a135 1
int java_ini_updated = 0;
a222 1
    short updated=0;
a244 1
      updated=1; 
a245 1

d248 3
a250 2
	if(updated) 
	  java_ini_updated=0;
d321 4
@


1.10
log
@anon socket: do not advertise socketname
@
text
@d314 1
a314 9
	if(status==SUCCESS) {
	  php_info_print_table_row(2, "java status", "running");
	} else {
#ifndef CFG_JAVA_SOCKET_ANON
	  php_info_print_table_row(2, "java not running.");
#else
	  php_info_print_table_row(2, "java not running, start with:", s);
#endif
	}
@


1.9
log
@java_set_jar_library_path added
@
text
@d26 2
a27 1
	return java_connect_to_server(&JG(cfg) TSRMLS_CC) || SUCCESS;
d31 1
a31 1
   if (JG(php_reflect)) (*JG(jenv))->DeleteGlobalRef(JG(jenv), JG(php_reflect));
d244 1
d259 2
a260 2
  char*env[2];
  char*args[9];
a261 1
  extern void java_get_server_args(struct cfg*cfg, char*env[2], char*args[9]);
d296 1
d298 1
d301 4
a308 1
	php_info_print_table_row(2, "java.socketname", JG(cfg).sockname);
d317 3
a319 1
	  char*s=get_server_args(&JG(cfg));
d321 1
a321 1
	  free(s);
d324 2
@


1.8
log
@The server now tracks resources
@
text
@d49 4
d59 1
d69 4
d80 29
d112 1
@


1.7
log
@Close the socket in rshutdown
@
text
@d30 1
a30 1
  if (JG(php_reflect)) (*JG(jenv))->DeleteGlobalRef(JG(jenv), JG(php_reflect));
@


1.6
log
@Fixed a typo that caused a massive memory leak on the java side
@
text
@d25 1
a25 1
	if(JG(jenv)) return SUCCESS;
d30 8
a37 1
	return SUCCESS;
@


1.5
log
@Start java in a separate process and give pval's a proper reference count.
@
text
@d188 1
a188 1
	le_jobject = zend_register_list_destructors_ex(NULL, php_java_destructor, "java", module_number);
@


1.4
log
@pass modified user's environment to the child process
@
text
@d176 1
d198 1
a198 1
	  java_ini_updated=0; 
d202 4
@


1.3
log
@bugfixes for apache 1.3.x
@
text
@d218 1
d220 2
a221 1
	length+=strlen(args[i])+1;
d233 4
a236 1
	strcat(s, args[i]); strcat(s, " ");
@


1.2
log
@update to 1.0.0
@
text
@d94 2
a95 2
	  if(JG(cfg).sockname) free(JG(cfg).sockname);
	  JG(cfg).sockname=strdup(new_value);
d102 2
a103 2
	  if(JG(cfg).classpath) free(JG(cfg).classpath);
	  JG(cfg).classpath =strdup(new_value);
d110 2
a111 2
	  if(JG(cfg).ld_library_path) free(JG(cfg).ld_library_path);
	  JG(cfg).ld_library_path = strdup(new_value);
d117 5
a121 5
	if (new_value) {
	  if(JG(cfg).java) free(JG(cfg).java);
		JG(cfg).java = strdup(new_value);
	}
	return SUCCESS;
d126 2
a127 2
	  if(JG(cfg).java_home) free(JG(cfg).java_home);
	  JG(cfg).java_home = strdup (new_value);
d134 2
a135 2
	  if(JG(cfg).logLevel) free(JG(cfg).logLevel);
	  JG(cfg).logLevel = strdup(new_value);
d142 2
a143 2
	  if(JG(cfg).logFile) free(JG(cfg).logFile);
	  JG(cfg).logFile = strdup(new_value);
d161 11
a171 1
	memset(java_globals, 0, sizeof(zend_java_globals));
a189 1
	REGISTER_INI_ENTRIES();
d191 8
a198 5
	extern void java_init_cfg(struct cfg*cfg);
	java_init_cfg(&JG(cfg));
	extern int java_test_server(struct cfg*cfg TSRMLS_DC);
	if(java_test_server(&JG(cfg) TSRMLS_CC)==FAILURE) 
	  java_start_server(&JG(cfg));
d200 2
a201 1
	return java_test_server(&JG(cfg) TSRMLS_CC) || SUCCESS;
@


1.1
log
@Initial revision
@
text
@d12 4
a47 1

d103 1
a103 1
	  JG(cfg).classpath =(new_value);
d111 1
a111 1
	  JG(cfg).ld_library_path = (new_value);
d119 1
a119 1
		JG(cfg).java = (new_value);
d127 1
a127 1
	  JG(cfg).java_home = (new_value);
d135 1
a135 1
	  JG(cfg).logLevel = (new_value);
d143 1
a143 1
	  JG(cfg).logFile = (new_value);
a146 1

d148 5
a152 5
	 PHP_INI_ENTRY("java.socketname", NULL, PHP_INI_ALL, OnIniSockname)
	 PHP_INI_ENTRY("java.classpath", NULL, PHP_INI_ALL, OnIniClassPath)
	 PHP_INI_ENTRY("java.libpath",   NULL, PHP_INI_ALL, OnIniLibPath)
	 PHP_INI_ENTRY("java.java",   NULL, PHP_INI_ALL, OnIniJava)
	 PHP_INI_ENTRY("java.java_home",   NULL, PHP_INI_ALL, OnIniJavaHome)
d154 2
a155 2
	 PHP_INI_ENTRY("java.log_level",   NULL, PHP_INI_ALL, OnIniLogLevel)
	 PHP_INI_ENTRY("java.log_file",   NULL, PHP_INI_ALL, OnIniLogFile)
a165 1
	static char buf[80];
d191 1
a191 1
  int i, p;
d251 2
@


1.1.1.1
log
@Initial
@
text
@@
