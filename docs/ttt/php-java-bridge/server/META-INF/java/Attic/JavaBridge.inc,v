head	1.43;
access;
symbols
	Root_Release_7-0-1:1.39
	Release_7-0-1:1.39.0.12
	Release_7-0-0:1.39.0.10
	Root_Release_7-0-0:1.39
	Release-6-2-2:1.39.0.8
	Release-6-1-2-3:1.39
	Root_Release-6-1-2-3:1.39
	Release-6-1-2-2:1.39.0.6
	Root_Release-6-1-2-2:1.39
	debian_version_6_1_2_1-1:1.39
	upstream_version_6_1_2_1:1.39
	Release-6-1-2-1_new:1.39.0.4
	Root_Release-6-1-2-1_new:1.39
	Release-6-1-2-1:1.39.0.2
	Root_Release-6-1-2-1:1.39
	upstream_version_6_1_2:1.38
	debian_version_6_1_2-1:1.38
	Release-6-1-2:1.38.0.4
	Root_Release-6-1-2:1.38
	debian_version_6_1_1-2:1.38
	debian_version_6_1_1-1:1.38
	upstream_version_6_1_1:1.38
	Release-6-1-1:1.38.0.2
	Root_Release-6-1-1:1.38
	Release-6-0-4:1.36.0.6
	Root_Release-6-0-4:1.36
	Release-6-0-3_NEW:1.36.0.2
	Root_Release-6-0-3_NEW:1.36
	Release-6-0-3:1.36.0.4
	Root_Release-6-0-3:1.36
	Release-6-0-0:1.35.0.2
	Root_Release-6-0-0:1.36
	Release-5-5-4-1:1.32.0.2
	Root_Release-5-5-4-1:1.32
	Release-5-5-4:1.31.0.2
	Root_Release-5-5-4:1.31
	Release-5-5-3:1.30.0.2
	ROOT_Release-5-5-3:1.30
	Release-5-5-2:1.28.0.2
	Root_Release-5-5-2:1.28
	debian_version_5_5_1-1:1.27
	Release-5-5-1:1.26.0.2
	upstream_version_5_5_1:1.26
	ROOT_Release-5-5-1:1.26
	debian_version_5_5-1:1.25
	upstream_version_5_5:1.25
	ROOT_Release-5-5:1.25
	Release-5-5:1.25.0.2
	debian_version_5_4_4_2-3:1.24
	Release-5-4-4-2-1:1.24.0.2
	debian_version_5_4_4_2-2:1.22
	debian_version_5_4_4_2-1:1.22
	upstream_version_5_4_4_2:1.22
	debian_version_5_4_4_1-1:1.21
	upstream_version_5_4_4_1:1.21
	debian_version_5_4_4-1:1.21
	upstream_version_5_4_4:1.21
	Release-5-4-4:1.21.0.6
	Root_Release-5-4-4:1.21
	debian_version_5_4_3_2-1:1.21
	upstream_version_5_4_3_2:1.21
	Release_5-4-3-2:1.21.0.2
	Root_Release_5-4-3-2:1.21
	upstream_version_5_4_3_1:1.21
	debian_version_5_4_3_1-1:1.21
	Release-5-4-3:1.19.0.4
	Root_Release-5-4-3:1.19
	Root_Release-5-4-1:1.19
	Release-5-4-1:1.19.0.2
	Root_Release-5-4:1.18
	Release-5-4:1.18.0.4
	upstream_version_5_3_4:1.18
	debian_version_5_3_4-1:1.18
	ROOT_Release-5-3-4:1.18
	Release-5-3-4:1.18.0.2
	ROOT_Release-5-3-3:1.17
	Release-5-3-3:1.17.0.2
	debian_version_5_3_2_1_2-1:1.16
	upstream_version_5_3_2_1_2:1.16
	debian_version_5_3_2_1_1-1:1.15
	debian_version_5_3_2_1_1:1.15
	upstream_version_5_3_2_1_1:1.15
	Root_Release-5-3-2-1:1.15
	Release-5-3-2-1:1.15
	ROOT_RELEASE-5-3-2-1:1.15
	RELEASE-5-3-2-1:1.15.0.8
	Release-5-3-2:1.15.0.4
	Root_Release-5-3-2:1.15
	Root_Release-5-3-1:1.15
	Release-5-3-1:1.15.0.2
	Release-5-2-3-1:1.14.0.6
	Root_Release-5-2-3-1:1.14
	Release-5-2-2-4:1.14.0.4
	Root_Release-5-2-2-4:1.14
	Release-5-2-2-1:1.14.0.2
	Root_Release-5-2-2-1:1.14
	upstream_version_5_2_2:1.13
	debian_version_5_2_2-1:1.13
	Release-5-2-2:1.13.0.2
	ROOT_Release-5-2-2:1.13
	ROOT_Release-5-2-1:1.12
	Release-5-2-1:1.12.0.2
	Release-5-2-0:1.11.0.14
	ROOT_Release-5-2-0:1.11
	ROOT_Release-5-1-2:1.11
	Release-5-1-2:1.11.0.12
	Version-5-1-1:1.11.0.10
	ROOT_Version-5-1-1:1.11
	debian_version_5_1_0-1:1.11
	upstream_version_5_1_0:1.11
	ROOT_Release-5-1-0:1.11
	Release-5-1-0:1.11.0.8
	ROOT_Release-5-0-0:1.11
	Release-5-0-0:1.11.0.6
	Release-4-3-3:1.11.0.4
	ROOT_Release-4-3-3:1.11
	upstream_version_4_3_2:1.11
	debian_version_4_3_2-1:1.11
	ROOT_Release-4-3-2:1.11
	Release-4-3-2:1.11.0.2
	Release-4-3-1:1.9.0.2
	ROOT_Release-4-3-1:1.9
	debian_version_4_3_0-1:1.8
	upstream_version_4_3_0:1.8
	ROOT_Release-4-3-0:1.8
	Release-4-3-0:1.8.0.2
	debian_version_4_2_2-1:1.6
	upstream_version_4_2_2:1.6
	Release-4-1-2:1.4.0.2
	Release-4-0-8:1.3.0.2
	debian_version_4_0_8a-1:1.3
	upstream_version_4_0_8a:1.3
	jostb-debian-ubuntu-patch:1.2.0.2
	debian_version_4_0_8-1:1.2
	upstream_version_4_0_8:1.2
	debian_version_4_0_7-1:1.1
	upstream_version_4_0_7:1.1
	debian_version_4_0_6-1:1.1
	upstream_version_4_0_6:1.1
	debian_version_4_0_2-1:1.1
	upstream_version_4_0_2:1.1
	Release-4-0-2_Root:1.1
	Release-4-0-2:1.1.0.2;
locks; strict;
comment	@# @;


1.43
date	2017.04.09.14.00.08;	author jost_boekemeier;	state dead;
branches;
next	1.42;

1.42
date	2017.03.26.14.51.01;	author jost_boekemeier;	state Exp;
branches;
next	1.41;

1.41
date	2017.03.24.19.46.23;	author jost_boekemeier;	state Exp;
branches;
next	1.40;

1.40
date	2017.03.23.21.37.37;	author jost_boekemeier;	state Exp;
branches;
next	1.39;

1.39
date	2010.05.02.11.49.36;	author jost_boekemeier;	state Exp;
branches;
next	1.38;

1.38
date	2010.03.24.18.03.15;	author jost_boekemeier;	state Exp;
branches;
next	1.37;

1.37
date	2010.03.16.16.46.23;	author jost_boekemeier;	state Exp;
branches;
next	1.36;

1.36
date	2010.02.28.15.20.43;	author jost_boekemeier;	state Exp;
branches;
next	1.35;

1.35
date	2010.02.21.16.14.58;	author jost_boekemeier;	state Exp;
branches;
next	1.34;

1.34
date	2010.02.18.16.31.00;	author jost_boekemeier;	state Exp;
branches;
next	1.33;

1.33
date	2010.01.29.17.05.20;	author jost_boekemeier;	state Exp;
branches;
next	1.32;

1.32
date	2009.12.06.19.46.46;	author jost_boekemeier;	state Exp;
branches;
next	1.31;

1.31
date	2009.10.17.17.40.23;	author jost_boekemeier;	state Exp;
branches;
next	1.30;

1.30
date	2009.09.27.17.39.22;	author jost_boekemeier;	state Exp;
branches;
next	1.29;

1.29
date	2009.09.14.16.52.39;	author jost_boekemeier;	state Exp;
branches;
next	1.28;

1.28
date	2009.09.01.17.25.18;	author jost_boekemeier;	state Exp;
branches
	1.28.2.1;
next	1.27;

1.27
date	2009.08.28.15.55.34;	author jost_boekemeier;	state Exp;
branches;
next	1.26;

1.26
date	2009.08.22.16.37.06;	author jost_boekemeier;	state Exp;
branches;
next	1.25;

1.25
date	2009.07.25.13.56.02;	author jost_boekemeier;	state Exp;
branches;
next	1.24;

1.24
date	2009.07.04.14.55.19;	author jost_boekemeier;	state Exp;
branches;
next	1.23;

1.23
date	2009.07.02.16.26.50;	author jost_boekemeier;	state Exp;
branches;
next	1.22;

1.22
date	2009.04.11.14.17.16;	author jost_boekemeier;	state Exp;
branches;
next	1.21;

1.21
date	2009.01.20.22.29.17;	author jost_boekemeier;	state Exp;
branches;
next	1.20;

1.20
date	2009.01.06.17.05.11;	author jost_boekemeier;	state Exp;
branches;
next	1.19;

1.19
date	2008.12.22.20.07.43;	author jost_boekemeier;	state Exp;
branches;
next	1.18;

1.18
date	2008.11.15.14.27.51;	author jost_boekemeier;	state Exp;
branches;
next	1.17;

1.17
date	2008.10.26.15.23.02;	author jost_boekemeier;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	2008.10.12.16.15.53;	author jost_boekemeier;	state Exp;
branches;
next	1.15;

1.15
date	2008.10.03.15.48.14;	author jost_boekemeier;	state Exp;
branches;
next	1.14;

1.14
date	2008.09.20.15.00.58;	author jost_boekemeier;	state Exp;
branches;
next	1.13;

1.13
date	2008.03.30.17.01.34;	author jost_boekemeier;	state Exp;
branches;
next	1.12;

1.12
date	2008.03.22.12.04.56;	author jost_boekemeier;	state Exp;
branches;
next	1.11;

1.11
date	2007.12.09.15.13.12;	author jost_boekemeier;	state Exp;
branches;
next	1.10;

1.10
date	2007.12.04.22.07.09;	author jost_boekemeier;	state Exp;
branches;
next	1.9;

1.9
date	2007.12.02.18.05.08;	author jost_boekemeier;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.30.16.07.52;	author jost_boekemeier;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.19.10.12.27;	author jost_boekemeier;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.19.16.19.19;	author jost_boekemeier;	state Exp;
branches;
next	1.5;

1.5
date	2007.07.09.14.35.06;	author jost_boekemeier;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.13.19.51.48;	author jost_boekemeier;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.15.11.24.48;	author jost_boekemeier;	state Exp;
branches;
next	1.2;

1.2
date	2007.04.07.16.22.43;	author jost_boekemeier;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.19.13.03.17;	author jost_boekemeier;	state Exp;
branches;
next	;

1.17.2.1
date	2008.11.09.17.01.41;	author jost_boekemeier;	state Exp;
branches;
next	1.17.2.2;

1.17.2.2
date	2008.11.10.17.54.17;	author jost_boekemeier;	state Exp;
branches;
next	1.17.2.3;

1.17.2.3
date	2008.11.15.14.22.31;	author jost_boekemeier;	state Exp;
branches;
next	;

1.28.2.1
date	2009.09.12.15.52.34;	author jost_boekemeier;	state Exp;
branches;
next	;


desc
@@


1.43
log
@Release-7.1.1
@
text
@<?php /*-*- mode: php; tab-width:4 -*-*/

  /** java_JavaBridge.php -- provides the PHP/Java Bridge PHP API.
   * 
   * Copyright (C) 2003-2007 Jost Boekemeier
   * 
   * This file is part of the PHP/Java Bridge.
   * 
   * The PHP/Java Bridge ("the library") is free software; you can
   * redistribute it and/or modify it under the terms of the GNU General
   * Public License as published by the Free Software Foundation; either
   * version 2, or (at your option) any later version.
   * 
   * The library is distributed in the hope that it will be useful, but
   * WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   * General Public License for more details.
   * 
   * You should have received a copy of the GNU General Public License
   * along with the PHP/Java Bridge; see the file COPYING.  If not, write to the
   * Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   * 02111-1307 USA.
   * 
   * Linking this file statically or dynamically with other modules is
   * making a combined work based on this library.  Thus, the terms and
   * conditions of the GNU General Public License cover the whole
   * combination.
   * 
   * As a special exception, the copyright holders of this library give you
   * permission to link this library with independent modules to produce an
   * executable, regardless of the license terms of these independent
   * modules, and to copy and distribute the resulting executable under
   * terms of your choice, provided that you also meet, for each linked
   * independent module, the terms and conditions of the license of that
   * module.  An independent module is a module which is not derived from
   * or based on this library.  If you modify this library, you may extend
   * this exception to your version of the library, but you are not
   * obligated to do so.  If you do not wish to do so, delete this
   * exception statement from your version. 
   *
   * @@author     Jost Boekemeier
   * @@license    GPL
   * @@link       http://php-java-bridge.sf.net
   */

if(!function_exists("java_get_base")) {

  1.0E512; // Workaround pfsockopen bug; initialize the socket subsystem

  /**
   * @@access private
   */
  function java_get_base() {
	$ar = get_required_files();
	$arLen = sizeof($ar);
	if($arLen>0) {
	  $thiz = $ar[$arLen-1];
	  return dirname($thiz);
	} else {
	  return "java";
	}
  }
  /**
   * @@access private
   */
  function java_truncate($str) {
    if (strlen($str)>955)
      return substr($str, 0, 475).'[...]'.substr($str,-475);
    return $str;
  }
  require_once(java_get_base()."/Options.inc");
  require_once(java_get_base()."/JavaProxy.inc");

  /**
   * @@access private
   */
  class java_JavaException  extends Exception {
	function __toString() {return $this->getMessage();}
  };
  /**
   * @@access private
   */
  class java_RuntimeException extends java_JavaException {};
  /**
   * @@access private
   */
  class java_IOException extends java_JavaException {};
  /**
   * @@access private
   */
  class java_ConnectException extends java_IOException {};
  /**
   * @@access private
   */
  class java_IllegalStateException extends java_RuntimeException {};
  /**
   * @@access private
   */
  class java_IllegalArgumentException extends java_RuntimeException {
	function __construct($ob) {
	  parent::__construct("illegal argument: ".gettype($ob));
	}
  };

  /**
   * @@access private
   */
  function java_eval($code) {
    $newCode = '';
    foreach (token_get_all($code) as $item)
    {
        if (is_array($item))
        {
            switch ($item[0])
            {
                case T_EXIT :
                    $item[1] = 'return';
                    break;
            }
            $item = $item[1];
        }
        $newCode.= $item;
    }
    $c=__javaproxy_Client_getClient();
	$exitCode=eval((substr($newCode,0,2)=='<'.'?'?'?'.'>':'').$newCode);
	$c->setExitCode($exitCode);
	return $exitCode;
  }

  /**
   * @@access private
   */
  function java_autoload_function5($x) {
	$s=str_replace("_", ".", $x);

    $c=__javaproxy_Client_getClient();
    if(!($c->invokeMethod(0, "typeExists", array($s)))) return false;

	$i = "class ${x} extends Java {".
	  "static function type(\$sub=null){if(\$sub) \$sub='\$'.\$sub; return java('${s}'.\"\$sub\");}".
	  'function __construct() {$args = func_get_args();'.
	  'array_unshift($args, '."'$s'".'); parent::__construct($args);}}';
	eval ("$i");
	return true;
  }
  /**
   * @@access private
   */
  function java_autoload_function($x) {
    $idx = strrpos($x, "\\"); if (!$idx) return java_autoload_function5($x);

    $str=str_replace("\\", ".", $x);

    $client=__javaproxy_Client_getClient();
    if(!($client->invokeMethod(0, "typeExists", array($str)))) return false;

    $package = substr($x,0, $idx);
    $name = substr($x, 1+$idx);
    $instance = "namespace $package; class ${name} extends \\Java {".
	  "static function type(\$sub=null){if(\$sub) \$sub='\$'.\$sub;return \\java('${str}'.\"\$sub\");}".
	  "static function __callStatic(\$procedure, \$args) {return \\java_invoke(\\java('${str}'), \$procedure, \$args);}".
	  'function __construct() {$args = func_get_args();'.
	  'array_unshift($args, '."'$str'".'); parent::__construct($args);}}';
	eval ("$instance");
	return true;
  }
  /** Autoload Java classes if not disabled via define("JAVA_DISABLE_AUTOLOAD", true); */
  if(!defined("JAVA_DISABLE_AUTOLOAD") && function_exists("spl_autoload_register")) spl_autoload_register("java_autoload_function");

  /**
   * @@access private
   */
  function java_autoload($libs=null) {
	trigger_error('Please use <a href="http://php-java-bridge.sourceforge.net/pjb/webapp.php>tomcat or jee hot deployment</a> instead', E_USER_WARNING);
  }

  /**
   * Include the output of some Java resource.

   * java_virtual() uses the PHP/Java Bridge protocol to render .jsp,
   * .jsf or other Java resources through PHP scripts running within
   * Apache, IIS or as a JEE sub component.
   *
   * Example: 
   * <code>
   * <?php require_once("java/Java.inc");
   * java_session();
   * echo java_virtual("/test.jsp", true);
   * ?>
   * </code>
   *
   * @@access public
   * @@param string The local resource
   * @@param bool return the response
   * @@return mixed The response or true
   * @@see http://php.net/manual/en/function.virtual.php
   * @@see java_session();
   */
  function java_virtual($path, $return=false) {

	$req = java_context()->getHttpServletRequest();
	$req = new java("php.java.servlet.VoidInputHttpServletRequest", $req);

	$res = java_context()->getHttpServletResponse();
	$res = new java("php.java.servlet.RemoteHttpServletResponse", $res);

	$req->getRequestDispatcher($path)->include($req, $res);
	if ($return) return $res->getBufferContents();

	echo $res->getBufferContents();
	return true;
  }
  /**
   * Access the java type with the given name. 
   *
   * This procedure can be
   * used to access constants or procedures within a class.  <br>
   *
   * To access class features, use the java constructor instead.<br>
   *
   * Example: <code> java("java.lang.Long")->MAX_VALUE </code>
   *
   *<br> Any declared exception can be caught by PHP code. <br>
   * Exceptions derived from java.lang.RuntimeException or Error must
   * not be caught unless declared in the methods throws clause -- OutOfMemoryErrors cannot be caught at all,
   * even if declared.
   *
   * @@access public
   * @@param string The type name
   * @@see Java
   */
  function Java($name) { 
	static $classMap = array();
	if(array_key_exists($name, $classMap)) return $classMap[$name];
	return $classMap[$name]=new JavaClass($name);
  }

  /**
   * Alias for java_closure();
   * @@access private
   * @@see java_closure();
   */
  function java_get_closure() {return java_closure_array(func_get_args());}

  /**
   * Alias for java_closure();
   * @@access private
   * @@see java_closure();
   */
  function java_wrap() {return java_closure_array(func_get_args());}
  
  /**
   * Alias for java_values();
   * @@access private
   * @@see java_values();
   */
  function java_get_values($arg) { return java_values($arg); }

  /**
   * Alias for java_session();
   * @@access private
   * @@see java_session();
   */
  function java_get_session() {return java_session_array(func_get_args());}

  /**
   * Alias for java_context();
   * @@access private
   * @@see java_context();
   */
  function java_get_context() {return java_context(); }

  /**
   * Alias for java_server_name();
   * @@access private
   * @@see java_server_name();
   */
  function java_get_server_name() { return java_server_name(); }

  /**
   * Alias for java_is_null();
   * @@access private
   * @@see java_is_null();
   */
  function java_isnull($value) { return is_null (java_values ($value)); }

  /**
   * Checks whether a value is null or not.
   *
   * Example: <code> java_is_null(java("java.lang.System")->getProperty("foo")) </code>
   *
   * @@access public
   * @@param mixed A Java object or a PHP value
   * @@return true if $value is the PHP or Java null value.
   */
  function java_is_null($value) { return is_null (java_values ($value)); }

  /**
   * Alias for java_is_true();
   * @@access private
   * @@see java_is_true();
   */
  function java_istrue($value) { return  (boolean)(java_values ($value)); }

  /**
   * Checks whether a value is not NULL, 0, "" or false. 

   * Note that if
   * you want to check if a value is boolean true, use the following
   * test: <code>java_values($value)===true</code>
   * 
   * Example:
   * <code>
   * java_is_true(new java.lang.String("12")) => true
   * </code>
   *
   * Example:
   * <code>
   * java_is_true(new java.lang.String("")) => false
   * </code>
   *
   * Example:
   * <code>
   * java_is_true(1==1) => true
   * </code>
   *
   * Example: <code> java_is_true(java("java.lang.System")->getProperty("foo")) </code>
   *
   * @@access public
   * @@param mixed A Java object or a PHP value
   * @@return true if the PHP or Java value is true.
   */
  function java_is_true($value) { return (boolean)(java_values ($value)); }

  /**
   * Alias for java_is_false();
   * @@access private
   * @@see java_is_false();
   */
  function java_isfalse($value) { return !(java_values ($value)); }

  /**
   * Checks whether a value is NULL, 0, "" or false. 
   *
   * Note that if you want to check if a value is boolean false, use
   * the following test: <code>java_values($value)===false</code>
   * 
   * Example:
   * <code>
   * java_is_false(new java.lang.String("12")) => false
   * </code>
   *
   * Example:
   * <code>
   * java_is_false(new java.lang.String("")) => true
   * </code>
   *
   * Example:
   * <code>
   * java_is_false(1==1) => false
   * </code>
   *
   * Example: <code> java_is_false(java("java.lang.System")->getProperty("foo")) </code>
   *
   * @@access public
   * @@param mixed A Java object or a PHP value
   * @@return true if the PHP or Java value is false.
   */
  function java_is_false($value) { return !(java_values ($value)); }

  /**
   * Alias for java_set_file_encoding();
   * @@access private
   * @@see java_set_file_encoding();
   */
  function java_set_encoding($enc) { return java_set_file_encoding ($enc); }

  /**
   * Call the current Java continuation with the closed-over PHP environment
   * $kontinuation as its argument.
   *
   * This procedure can be used to transfer control back to a Java
   * continuation so that Java can call PHP procedures defined within
   * the passed environment. If no current Java continuation exists,
   * the procedure does nothing.
   *
   *
   * Example PHP script:
   * <code>
   * <?php require_once("java/Java.inc");
   *
   * // ... calculate sales for a given month ...
   * function calculateSales($month) {return ((int)(string)$month)+1;}
   *
   * write_response($response);
   *
   * // prepare for out-of-band data: make our top-level environment
   * // available to Java. But only if it has been requested by Java:
   * java_call_with_continuation();
   * ?>
   * </code>
   *
   * If the above PHP script is named
   * "calculateSales.php", the JSR 223 API can be used to invoke its
   * functions or methods, to debug or test certain
   * functionality from Java while keeping the script running in a
   * production environment. The Java code follows:
   * <code>
   * import javax.script.*;
   * import java.net.*;
   * import java.io.*;
   * class SalesTest {
   *     public static void test(Integer month) throws Exception {
   *         ScriptEngine e = new ScriptEngineManager().getEngineByName("php-invocable");
   *		 ByteArrayOutputStream out;
   *		 OutputStreamWriter writer;
   *	     e.getContext().setWriter(writer=new OutputStreamWriter(out=new ByteArrayOutputStream()));
   *         Object res=e.eval(new php.java.script.URLReader(new URL("http://localhost/calculateSales.php")));
   *         System.err.println(((Invocable)e).invokeFunction("calculateSales", new Object[]{month}));
   *         ((Closeable)e).close();
   *         System.err.println("PHP exit() code:" + String.valueOf(res));
   *         System.err.println("PHP output:" + String.valueOf(out));
   *      }
   *      public static void main(String s[]) throws Exception {
   *         test(new Integer(12));
   *      }
   * }
   * </code>
   *
   * The above Java program opens a URL connection to the PHP script,
   * invokes the calculateSales() function from the passed PHP 
   * environment and then outputs the exit code and the HTML response
   * of the PHP script.
   *
   * @@access public
   * @@param mixed May either be null, a PHP function name, a PHP object or a java_closure. If a PHP object is provided, the object is passed to Java. If a function name is provided, the function must return a java_closure. Otherwise the current environment is used.
   */
  function java_call_with_continuation($kontinuation=null) {
	if (java_getHeader("X_JAVABRIDGE_INCLUDE", $_SERVER) && !java_getHeader("X_JAVABRIDGE_INCLUDE_ONLY", $_SERVER)) {
	  if (is_null($kontinuation))
		java_context()->call(java_closure());
	  elseif (is_string($kontinuation)) 
		java_context()->call(call_user_func($kontinuation));
	  elseif ($kontinuation instanceof java_JavaType) 
		java_context()->call($kontinuation);
	  else
		java_context()->call(java_closure($kontinuation));
	}
  }
 } //!java_defined  DO NOT REMOVE THIS LINE
?>
@


1.42
log
@New FastCGI implementation
@
text
@@


1.41
log
@New FastCGI implementation
@
text
@d125 3
a127 1
    $c->setExitCode(eval('?'.'>'.$newCode));
@


1.40
log
@New FastCGI implementation
@
text
@a107 8
  function java_exit($exitCode) {
    $c=__javaproxy_Client_getClient();
    $c->setExitCode($exitCode);
  }
  
  /**
   * @@access private
   */
d117 1
a117 1
                    $item[1] = 'java_exit';
d124 2
a125 1
    eval('?'.'>'.$newCode);
@


1.39
log
@Release-6-1-2-1
@
text
@d108 30
@


1.38
log
@Release-6-1-1
@
text
@d3 42
a44 37
  /* java_JavaBridge.php -- provides the PHP/Java Bridge PHP API.

  Copyright (C) 2003-2007 Jost Boekemeier

  This file is part of the PHP/Java Bridge.

  The PHP/Java Bridge ("the library") is free software; you can
  redistribute it and/or modify it under the terms of the GNU General
  Public License as published by the Free Software Foundation; either
  version 2, or (at your option) any later version.

  The library is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with the PHP/Java Bridge; see the file COPYING.  If not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
  02111-1307 USA.

  Linking this file statically or dynamically with other modules is
  making a combined work based on this library.  Thus, the terms and
  conditions of the GNU General Public License cover the whole
  combination.

  As a special exception, the copyright holders of this library give you
  permission to link this library with independent modules to produce an
  executable, regardless of the license terms of these independent
  modules, and to copy and distribute the resulting executable under
  terms of your choice, provided that you also meet, for each linked
  independent module, the terms and conditions of the license of that
  module.  An independent module is a module which is not derived from
  or based on this library.  If you modify this library, you may extend
  this exception to your version of the library, but you are not
  obligated to do so.  If you do not wish to do so, delete this
  exception statement from your version. */
@


1.37
log
@Release-6-1-0
@
text
@d55 1
a55 1
	  return "java/";
@


1.36
log
@Release-6-0-3
@
text
@d349 1
a349 1
   * Call the Java continuation with the closed-over PHP environment
d354 2
a355 2
   * the passed environment. If the script has not been requested by
   * Java, the procedure does nothing.
a361 2
   * class my_SalesCalculator { function calculateSales($month) {return ((int)(string)$month)+1;} ... }
   * 
d363 1
d369 1
a369 1
   * java_call_with_continuation(new mySalesCalculator());
d406 1
a406 1
   * @@param mixed If a PHP object is provided, the object is passed to Java. Otherwise the current environment is used.
d410 8
a417 1
	  java_context()->call(is_null($kontinuation)?java_closure():(($kontinuation instanceof java_JavaType)?$kontinuation:java_closure($kontinuation)));
@


1.35
log
@Release-6-0-0
@
text
@d170 1
d173 4
a176 1
	$res = new java("php.java.servlet.RemoteHttpServletResponse");
d410 2
a411 3
	if ($java_script = java_getHeader("X_JAVABRIDGE_INCLUDE", $_SERVER)) { 
	  if ($java_script!="@@") {chdir (dirname ($java_script)); require_once($java_script);} 
	  if(!java_getHeader("X_JAVABRIDGE_INCLUDE_ONLY", $_SERVER)) java_context()->call(is_null($kontinuation)?java_closure():(($kontinuation instanceof java_JavaType)?$kontinuation:java_closure($kontinuation)));
a413 1

@


1.34
log
@Release-6-0-0
@
text
@d148 5
a152 1
   * Include the outcome of some other local (.jsp, .asp, ...) resource.
d154 7
a160 1
   * Example: <code>virtual("/test.jsp");</code>
d164 4
a167 1
   * @@see Java
d169 9
a177 6
  if (!function_exists("virtual")) {
	function virtual($path) {
	  $req = java_context()->getHttpServletRequest();
	  $res = java_context()->getHttpServletResponse();
	  $req->getRequestDispatcher($path)->include($req, $res);
	}
d272 3
a274 1
   * Checks whether a value is not NULL, 0, "" or false. Note that if
d276 1
a276 1
   * test: java_values($value)===true.
d278 2
d281 9
a289 1
   * java_is_true(new java.lang.String("") => false
d291 1
d309 4
a312 3
   * Checks whether a value is NULL, 0, "" or false. Note that if
   * you want to check if a value is boolean false, use the following
   * test: java_values($value)===false.
d314 2
d317 9
a325 1
   * java_is_false(new java.lang.String("") => true
d327 1
@


1.33
log
@Release-5-5-5
@
text
@d141 20
a160 35
   * Load a set of java libraries and make them available in the current name space.
   * Available since php 5.3. Example:
   * {@@source 4 14}
   * @@access private
   * @@since PHP 5.3
   */
  function java_autoload($libs=null) 
  {
/*
    java_autoload("lucene.jar");
   
    use org\apache\lucene;
    use org\apache\lucene\index;
    use org\apache\lucene\search;
    use org\apache\lucene\search\IndexSearcher as LuceneSearcher;
   
    $searcher = new LuceneSearcher(...);
    $term = new index\Term("name", "someTerm");
    $phrase = new search\PhraseQuery();
   
    $phrase->add($term);
    $hits = $searcher->search($phrase);
    ...
*/
	static $once = false;
	if($once) 
	  throw new java_IllegalStateException("java_autoload called more than once");
	$once = true;
	java_require($libs);
	if(function_exists("spl_autoload_register")) {
	  if(defined("JAVA_DISABLE_AUTOLOAD")) spl_autoload_register("java_autoload_function");
	} else {
	  function __autoload($x) {
		return java_autoload_function($x);
	  }
a162 1

a303 7
   * @@deprecated: Use java_require() instead.
   * @@access private
   * @@see java_require();
   */
  function java_set_library_path($arg) { return java_require($arg); }
  
  /**
@


1.32
log
@Release-5-5-4-1
@
text
@d272 7
a278 1
   * Checks whether a value is true or not.
d296 7
a302 1
   * Checks whether a value is false or not.
@


1.31
log
@Release-5-5-4
@
text
@d103 16
d120 1
a120 1
    $idx = strrpos($x, "\\"); if (!$idx) return false;
d377 1
a377 1
	  if ($java_script!="@@") {chdir (dirname ($java_script)); require($java_script);} 
@


1.30
log
@Release 5.5.3
@
text
@d72 3
a74 1
  class java_RuntimeException extends Exception {};
d78 5
a82 1
  class java_IOException extends Exception {};
a99 18

  /**
   * @@access private
   */
  function java_autoload_function5($x) {
	$str=str_replace("_", ".", $x);

    $client=__javaproxy_Client_getClient();
    if(!($client->invokeMethod(0, "typeExists", array($str)))) return false;

	$instance = "class ${x} extends Java {".
	  "static function type(\$sub=null){if(\$sub) \$sub='\$'.\$sub; return java('${str}'.\"\$sub\");}".
	  'function __construct() {$args = func_get_args();'.
	  'array_unshift($args, '."'$str'".'); parent::__construct($args);}}';
	eval ("$instance");
	return true;
  }

d104 1
a104 1
    $idx = strrpos($x, "\\"); if (!$idx) return java_autoload_function5($x);
a310 1
   * require_once("sales_functions.inc");
d312 2
d320 1
a320 1
   * java_call_with_continuation(java_closure());
d339 1
a339 1
   *         Object res=e.eval(new php.java.bridge.URLReader(new URL("http://localhost/calculateSales.php")));
d357 1
a357 1
   * @@param mixed A PHP environment.
d362 1
a362 1
	  if(!java_getHeader("X_JAVABRIDGE_INCLUDE_ONLY", $_SERVER)) java_context()->call(is_null($kontinuation)?java_closure():$kontinuation); 
@


1.29
log
@Merged Release-5-5-2 branch into HEAD
@
text
@d58 8
d199 1
d370 1
a370 1
  function java_call_with_continuation($kontinuation) {
d373 1
a373 1
	  if(!java_getHeader("X_JAVABRIDGE_INCLUDE_ONLY", $_SERVER)) java_context()->call($kontinuation); 
@


1.28
log
@Release-5-5-2
@
text
@d135 1
a135 1
  function java_autoload() 
@


1.28.2.1
log
@Release-5-5-2
@
text
@d135 1
a135 1
  function java_autoload($libs=null) 
@


1.27
log
@Fedora 11 SEL updates
@
text
@d132 1
a132 1
   * @@access public
d326 3
a328 3
   * Assuming the PHP script above is named
   * "calculateSales.php", using the JSR 223 API one can invoke the
   * script functions or methods to debug or test certain
@


1.26
log
@Release-5-5-1
@
text
@d42 3
@


1.25
log
@Release-5-5
@
text
@a41 9
  $version = phpversion();
  if ((version_compare("5.3.0", $version, ">"))) {
   1E512; // initialize errno
   if ((version_compare("5.1.2", $version, ">"))) {
	$msg = "<br><strong>PHP $version too old.</strong><br>\nPlease set the path to
a PHP 5.1.x executable, see php_exec in the WEB-INF/web.xml";
	die($msg);
   }
  }
d55 2
a56 2
  $JAVA_BASE=java_get_base();
  require_once("${JAVA_BASE}/JavaProxy.inc");
d122 2
a126 1
   *
d128 1
a128 16
   * <code>
   * java_autoload("lucene.jar;mysql-connector-java.jar"); // load from /usr/share/java or $HOME/lib
   *
   * use org\apache\lucene;
   * use org\apache\lucene\index;
   * use org\apache\lucene\search;
   * use org\apache\lucene\search\IndexSearcher as LuceneSearcher;
   *
   * $searcher = new LuceneSearcher(...);
   * $term = new index\Term("name", "someTerm");
   * $phrase = new search\PhraseQuery();
   *
   * $phrase->add($term);
   * $hits = $searcher->search($phrase);
   * ...
   *</code>
d132 18
a149 1
  function java_autoload($libs=null) {
d156 1
a156 1
	  if(defined(JAVA_DISABLE_AUTOLOAD)) spl_autoload_register("java_autoload_function");
d177 1
a177 2
   * even if declared.  <br> This is consistent with the JEE EJB
   * specification.
d297 68
@


1.24
log
@Documentation update
@
text
@d125 1
d137 1
a137 1
   * java_autoload();
d162 1
a162 1
	  spl_autoload_register("java_autoload_function");
@


1.23
log
@PHP 5.3 final uses \ instead of ::
@
text
@d179 6
@


1.22
log
@Release-5-4-4-2
@
text
@d114 1
a114 1
    $idx = strrpos($x, "::"); if (!$idx) return java_autoload_function5($x);
d116 1
a116 1
    $str=str_replace("::", ".", $x);
d122 3
a124 3
    $name = substr($x, 2+$idx);
    $instance = "namespace $package; class ${name} extends ::Java {".
	  "static function type(\$sub=null){if(\$sub) \$sub='\$'.\$sub;return ::java('${str}'.\"\$sub\");}".
d138 4
a141 4
   * use org::apache::lucene;
   * use org::apache::lucene::index;
   * use org::apache::lucene::search;
   * use org::apache::lucene::search::IndexSearcher as LuceneSearcher;
d144 2
a145 2
   * $term = new index::Term("name", "someTerm");
   * $phrase = new search::PhraseQuery();
@


1.21
log
@Release-5-4-3-1
@
text
@d136 1
a136 1
   * java_autoload("lucene.jar:log4j.jar");
a150 1
   * @@param string The libraries separated by a semicolon
@


1.20
log
@Release-5-4-3
@
text
@a210 7
   * Alias for java_values();
   * @@access private
   * @@see java_values();
   */
  function java_unwrap($arg) { return java_values($arg); }

  /**
@


1.19
log
@Release-5-4-1
@
text
@d171 1
a171 1
   * Access the java type with the given name.
d173 6
a178 1
   * Example: <code> java("java.lang.System")->getProperties(); </code>
d182 1
@


1.18
log
@Release 5.3.3
@
text
@d43 3
a45 1
  if ((version_compare("5.1.2", $version, ">"))) {
d49 1
@


1.17
log
@Apache/IIS and JSR 223 integration
@
text
@d131 1
a131 1
   * Available since php 5.2.0. Example:
d133 13
a145 3
   * java_autoload("itext.jar;log4j.jar");
   * $byte = java_lang_Byte::type()->TYPE;
   * $reader = new com_lowagie_text_pdf_PdfReader("mypdf.pdf");
d148 1
a148 1
   * @@param $libs The libraries separated by a semicolon
d150 1
d173 1
a173 1
   * @@param $name The type name
d183 1
a183 1
   * @@see #java_closure();
d190 1
a190 1
   * @@see #java_closure();
d197 1
a197 1
   * @@see #java_values();
d204 1
a204 1
   * @@see #java_values();
d211 1
a211 1
   * @@see #java_session();
d218 1
a218 1
   * @@see #java_context();
d225 1
a225 1
   * @@see #java_server_name();
d232 1
a232 1
   * @@see #java_is_null();
d239 1
a239 1
   * Example: <code> java_is_null(java("java.lang.System")->;getProperty("foo")) </code>
d242 1
a242 1
   * @@param $value A Java object or a PHP value
d248 1
a248 1
   * Alias for java_is_null();
d250 1
a250 1
   * @@see #java_is_null();
d255 1
a255 1
   * Checks whether a value is null or not.
d257 1
a257 1
   * Example: <code> java_is_null(java("java.lang.System")->;getProperty("foo")) </code>
d260 2
a261 2
   * @@param $value A Java object or a PHP value
   * @@return true if $value is the PHP or Java null value.
d266 1
a266 1
   * Alias for java_is_null();
d268 1
a268 1
   * @@see #java_is_null();
d273 1
a273 1
   * Checks whether a value is null or not.
d275 1
a275 1
   * Example: <code> java_is_null(java("java.lang.System")->;getProperty("foo")) </code>
d278 2
a279 2
   * @@param $value A Java object or a PHP value
   * @@return true if $value is the PHP or Java null value.
d286 1
a286 1
   * @@see #java_set_file_encoding();
d293 1
a293 1
   * @@see #java_require();
@


1.17.2.1
log
@Release 5.3.3
@
text
@d237 1
a237 1
   * Alias for java_is_true();
d239 1
a239 1
   * @@see #java_is_true();
d244 1
a244 1
   * Checks whether a value is true or not.
d246 1
a246 1
   * Example: <code> java_is_true(java("java.lang.System")->getProperty("foo")) </code>
d250 1
a250 1
   * @@return true if the PHP or Java value is true.
d255 1
a255 1
   * Alias for java_is_false();
d257 1
a257 1
   * @@see #java_is_false();
d262 1
a262 1
   * Checks whether a value is alse or not.
d264 1
a264 1
   * Example: <code> java_is_false(java("java.lang.System")->getProperty("foo")) </code>
d268 1
a268 1
   * @@return true if the PHP or Java value is false.
@


1.17.2.2
log
@Release 5.3.3
@
text
@d138 1
a138 1
   * @@param string The libraries separated by a semicolon
d162 1
a162 1
   * @@param string The type name
d172 1
a172 1
   * @@see java_closure();
d179 1
a179 1
   * @@see java_closure();
d186 1
a186 1
   * @@see java_values();
d193 1
a193 1
   * @@see java_values();
d200 1
a200 1
   * @@see java_session();
d207 1
a207 1
   * @@see java_context();
d214 1
a214 1
   * @@see java_server_name();
d221 1
a221 1
   * @@see java_is_null();
d228 1
a228 1
   * Example: <code> java_is_null(java("java.lang.System")->getProperty("foo")) </code>
d231 1
a231 1
   * @@param mixed A Java object or a PHP value
d239 1
a239 1
   * @@see java_is_true();
d249 1
a249 1
   * @@param mixed A Java object or a PHP value
d257 1
a257 1
   * @@see java_is_false();
d262 1
a262 1
   * Checks whether a value is false or not.
d267 1
a267 1
   * @@param mixed A Java object or a PHP value
d275 1
a275 1
   * @@see java_set_file_encoding();
d282 1
a282 1
   * @@see java_require();
@


1.17.2.3
log
@Release 5.3.3
@
text
@d131 1
a131 1
   * Available since php 5.3. Example:
d133 3
a135 13
   * java_autoload("lucene.jar:log4j.jar");
   *
   * use org::apache::lucene;
   * use org::apache::lucene::index;
   * use org::apache::lucene::search;
   * use org::apache::lucene::search::IndexSearcher as LuceneSearcher;
   *
   * $searcher = new LuceneSearcher(...);
   * $term = new index::Term("name", "someTerm");
   * $phrase = new search::PhraseQuery();
   *
   * $phrase->add($term);
   * $hits = $searcher->search($phrase);
a139 1
   * @@since PHP 5.3
@


1.16
log
@PR#2157571
@
text
@d130 1
d175 7
d191 7
@


1.15
log
@Release-5-3-1
@
text
@d71 8
@


1.14
log
@Release-5-2-2-1
@
text
@d85 1
a85 1
  function java_autoload_function($x) {
d87 4
a90 2
	$client=__javaproxy_Client_getClient();
	if(!($client->invokeMethod(0, "typeExists", array($str)))) return false;
d100 21
@


1.13
log
@Release-5-2-2
@
text
@d191 36
@


1.12
log
@Release-5-2-1
@
text
@d44 2
a45 1
	$msg = "<br><strong>PHP $version too old.</strong><br>\nFor PHP versions < 5.1.4 install the java.so or php_java.dll from the php-java-bridge-legacy download.<br>\nOr set the path to the PHP executable, see php_exec in the WEB-INF/web.xml";
@


1.11
log
@Release-4-3-2
@
text
@d172 18
@


1.10
log
@Release-4-3-1a
@
text
@d172 7
@


1.9
log
@Release-4-3-1
@
text
@a83 9
  function java_javabridge($j, $p) {
    static $classMap = array();
    if(array_key_exists($j, $classMap)) return $classMap[$j];
    return $classMap[$j]=new $p(new JavaClass($j));
  }

  /**
   * @@access private
   */
a85 1

d88 4
a91 10

	$clazz = "class ${x}___Class extends java_JavaBridge {".
	  'function __construct($java) {$this->java=$java;}'.
	  "}";
	$instance = "class ${x} extends ${x}___Class {".
	  "static function type(\$sub=null){if(\$sub) \$sub='\$'.\$sub; return java_javabridge('${str}'.\"\$sub\", '${x}___Class');}".
	  'function __construct() {$args = '.
	  '$this->__java_coerceArgs(func_get_args());'.
	  'array_unshift($args, '."'$str'".'); $this->java = new Java($args);}}';
	eval ("$clazz");
d95 1
@


1.8
log
@Release-4-3-0
@
text
@d76 1
a76 1
	  parent::__construct(is_object($ob)?$ob->__toString():(string)$ob);
@


1.7
log
@Release-4-3-0
@
text
@d47 3
d63 3
d67 3
d71 3
d81 3
d90 3
d111 12
d138 8
d149 1
a149 1
	return $classMap[$name]=new JavaClass(array($name), false);
d151 5
d157 6
d164 6
d171 6
d178 6
d185 6
@


1.6
log
@Release-4-2-0
@
text
@d68 40
@


1.5
log
@Release-4-1-8
@
text
@d61 1
@


1.4
log
@Release-4-1-0
@
text
@d41 1
a41 33
if(extension_loaded('java') && !function_exists("java_set_base")) {
  function java_set_base() {
	$ar = get_required_files();
	$arLen = sizeof($ar);
	if($arLen>0) {
	  $java_base = dirname($ar[$arLen-1]);
	  $url = parse_url($java_base);
	  if(isset($url["scheme"]) && ($url["scheme"]=="http")) {
		$host = $url["host"];
		$port = $url["port"];
		$path = $url["path"];
		$dir = dirname($path);
		$_SERVER['X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT']="h:${host}:${port}/${dir}/JavaBridge.phpjavabridge";
	  }
	}
  }
  if(!array_key_exists('X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT', $_SERVER))
	java_set_base();

  /*
   * java.so or php_java.dll < 4.1.1 don't export a Java() function.
   * Provide one.
   */
  if(!function_exists("Java")) {
	function Java($name) { 
	  static $classMap = array();
	  if(array_key_exists($name, $classMap)) return $classMap[$name];
	  return $classMap[$name]=new JavaClass(array($name), false);
	}
  }
 }

if(!extension_loaded('java') && !function_exists("java_get_base")) {
@


1.3
log
@Release-3-0-8
@
text
@a41 6
  // the C extension doesn't define a Java(className) function
  function Java($name) {
	static $classMap = array();
	if(array_key_exists($name, $classMap)) return $classMap[$name];
	return $classMap[$name]=new JavaClass($name);
  }
d59 12
d102 1
a102 1
	return $classMap[$name]=java_create(array($name), false);
@


1.2
log
@Release-3-0-8
@
text
@d63 2
a64 1
  java_set_base();
@


1.1
log
@Release-4-0-2
@
text
@d41 25
d92 5
a96 2
  function Java($name) { return java_create(array($name), false); }
  
@

