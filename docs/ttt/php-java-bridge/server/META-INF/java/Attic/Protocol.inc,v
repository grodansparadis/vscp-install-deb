head	1.56;
access;
symbols
	Root_Release_7-0-1:1.52
	Release_7-0-1:1.52.0.6
	Release_7-0-0:1.52.0.4
	Root_Release_7-0-0:1.52
	Release-6-2-2:1.52.0.2
	Release-6-1-2-3:1.46
	Root_Release-6-1-2-3:1.46
	Release-6-1-2-2:1.46.0.2
	Root_Release-6-1-2-2:1.46
	debian_version_6_1_2_1-1:1.45
	upstream_version_6_1_2_1:1.45
	Release-6-1-2-1_new:1.45.0.4
	Root_Release-6-1-2-1_new:1.45
	Release-6-1-2-1:1.45.0.2
	Root_Release-6-1-2-1:1.45
	upstream_version_6_1_2:1.44
	debian_version_6_1_2-1:1.44
	Release-6-1-2:1.44.0.2
	Root_Release-6-1-2:1.44
	debian_version_6_1_1-2:1.43
	debian_version_6_1_1-1:1.43
	upstream_version_6_1_1:1.43
	Release-6-1-1:1.43.0.2
	Root_Release-6-1-1:1.43
	Release-6-0-4:1.42.0.8
	Root_Release-6-0-4:1.42
	Release-6-0-3_NEW:1.42.0.4
	Root_Release-6-0-3_NEW:1.42
	Release-6-0-3:1.42.0.6
	Root_Release-6-0-3:1.42
	Release-6-0-0:1.42.0.2
	Root_Release-6-0-0:1.42
	Release-5-5-4-1:1.39.0.2
	Root_Release-5-5-4-1:1.39
	Release-5-5-4:1.38.0.2
	Root_Release-5-5-4:1.38
	Release-5-5-3:1.37.0.2
	ROOT_Release-5-5-3:1.37
	Release-5-5-2:1.35.0.4
	Root_Release-5-5-2:1.35
	debian_version_5_5_1-1:1.35
	Release-5-5-1:1.35.0.2
	upstream_version_5_5_1:1.35
	ROOT_Release-5-5-1:1.35
	debian_version_5_5-1:1.34
	upstream_version_5_5:1.34
	ROOT_Release-5-5:1.34
	Release-5-5:1.34.0.2
	debian_version_5_4_4_2-3:1.33
	Release-5-4-4-2-1:1.33.0.2
	debian_version_5_4_4_2-2:1.33
	debian_version_5_4_4_2-1:1.33
	upstream_version_5_4_4_2:1.33
	debian_version_5_4_4_1-1:1.31
	upstream_version_5_4_4_1:1.31
	debian_version_5_4_4-1:1.30
	upstream_version_5_4_4:1.30
	Release-5-4-4:1.30.0.4
	Root_Release-5-4-4:1.30
	debian_version_5_4_3_2-1:1.29
	upstream_version_5_4_3_2:1.29
	Release_5-4-3-2:1.29.0.2
	Root_Release_5-4-3-2:1.29
	upstream_version_5_4_3_1:1.28
	debian_version_5_4_3_1-1:1.28
	Release-5-4-3:1.28.0.2
	Root_Release-5-4-3:1.28
	Root_Release-5-4-1:1.27
	Release-5-4-1:1.27.0.2
	Root_Release-5-4:1.26
	Release-5-4:1.26.0.2
	upstream_version_5_3_4:1.24
	debian_version_5_3_4-1:1.24
	ROOT_Release-5-3-4:1.24
	Release-5-3-4:1.24.0.2
	ROOT_Release-5-3-3:1.22
	Release-5-3-3:1.22.0.2
	debian_version_5_3_2_1_2-1:1.21
	upstream_version_5_3_2_1_2:1.21
	debian_version_5_3_2_1_1-1:1.20
	debian_version_5_3_2_1_1:1.20
	upstream_version_5_3_2_1_1:1.20
	Root_Release-5-3-2-1:1.20
	Release-5-3-2-1:1.20
	ROOT_RELEASE-5-3-2-1:1.20
	RELEASE-5-3-2-1:1.20.0.16
	Release-5-3-2:1.20.0.12
	Root_Release-5-3-2:1.20
	Root_Release-5-3-1:1.20
	Release-5-3-1:1.20.0.10
	Release-5-2-3-1:1.20.0.8
	Root_Release-5-2-3-1:1.20
	Release-5-2-2-4:1.20.0.6
	Root_Release-5-2-2-4:1.20
	Release-5-2-2-1:1.20.0.4
	Root_Release-5-2-2-1:1.20
	upstream_version_5_2_2:1.20
	debian_version_5_2_2-1:1.20
	Release-5-2-2:1.20.0.2
	ROOT_Release-5-2-2:1.20
	ROOT_Release-5-2-1:1.19
	Release-5-2-1:1.19.0.2
	Release-5-2-0:1.18.0.4
	ROOT_Release-5-2-0:1.18
	ROOT_Release-5-1-2:1.18
	Release-5-1-2:1.18.0.2
	Version-5-1-1:1.17.0.2
	ROOT_Version-5-1-1:1.17
	debian_version_5_1_0-1:1.16
	upstream_version_5_1_0:1.16
	ROOT_Release-5-1-0:1.16
	Release-5-1-0:1.16.0.2
	ROOT_Release-5-0-0:1.15
	Release-5-0-0:1.15.0.2
	Release-4-3-3:1.14.0.2
	ROOT_Release-4-3-3:1.14
	upstream_version_4_3_2:1.13
	debian_version_4_3_2-1:1.13
	ROOT_Release-4-3-2:1.13
	Release-4-3-2:1.13.0.2
	Release-4-3-1:1.12.0.4
	ROOT_Release-4-3-1:1.12
	debian_version_4_3_0-1:1.12
	upstream_version_4_3_0:1.12
	ROOT_Release-4-3-0:1.12
	Release-4-3-0:1.12.0.2
	debian_version_4_2_2-1:1.11
	upstream_version_4_2_2:1.11
	Release-4-1-2:1.7.0.2
	Release-4-0-8:1.6.0.4
	debian_version_4_0_8a-1:1.6
	upstream_version_4_0_8a:1.6
	jostb-debian-ubuntu-patch:1.6.0.2
	debian_version_4_0_8-1:1.6
	upstream_version_4_0_8:1.6
	debian_version_4_0_7-1:1.5
	upstream_version_4_0_7:1.5
	debian_version_4_0_6-1:1.5
	upstream_version_4_0_6:1.5
	debian_version_4_0_2-1:1.3
	upstream_version_4_0_2:1.3
	Release-4-0-2_Root:1.3
	Release-4-0-2:1.3.0.2
	upstream_version_4_0_1:1.1
	debian_version_4_0_1-2:1.1;
locks; strict;
comment	@# @;


1.56
date	2017.04.09.14.00.06;	author jost_boekemeier;	state dead;
branches;
next	1.55;

1.55
date	2017.03.25.15.39.42;	author jost_boekemeier;	state Exp;
branches;
next	1.54;

1.54
date	2017.03.23.21.37.37;	author jost_boekemeier;	state Exp;
branches;
next	1.53;

1.53
date	2017.03.02.17.40.37;	author jost_boekemeier;	state Exp;
branches;
next	1.52;

1.52
date	2017.01.30.22.28.58;	author jost_boekemeier;	state Exp;
branches;
next	1.51;

1.51
date	2010.09.04.12.31.34;	author jost_boekemeier;	state Exp;
branches;
next	1.50;

1.50
date	2010.09.04.12.19.54;	author jost_boekemeier;	state Exp;
branches;
next	1.49;

1.49
date	2010.07.04.16.18.40;	author jost_boekemeier;	state Exp;
branches;
next	1.48;

1.48
date	2010.07.02.12.19.37;	author jost_boekemeier;	state Exp;
branches;
next	1.47;

1.47
date	2010.06.30.16.04.51;	author jost_boekemeier;	state Exp;
branches;
next	1.46;

1.46
date	2010.05.23.11.52.14;	author jost_boekemeier;	state Exp;
branches;
next	1.45;

1.45
date	2010.05.02.11.49.36;	author jost_boekemeier;	state Exp;
branches;
next	1.44;

1.44
date	2010.04.14.15.24.07;	author jost_boekemeier;	state Exp;
branches;
next	1.43;

1.43
date	2010.03.24.18.03.16;	author jost_boekemeier;	state Exp;
branches;
next	1.42;

1.42
date	2010.02.21.16.14.58;	author jost_boekemeier;	state Exp;
branches;
next	1.41;

1.41
date	2010.02.18.16.31.00;	author jost_boekemeier;	state Exp;
branches;
next	1.40;

1.40
date	2010.01.23.10.09.35;	author jost_boekemeier;	state Exp;
branches;
next	1.39;

1.39
date	2009.12.06.19.46.46;	author jost_boekemeier;	state Exp;
branches;
next	1.38;

1.38
date	2009.10.17.17.40.23;	author jost_boekemeier;	state Exp;
branches;
next	1.37;

1.37
date	2009.09.27.17.39.22;	author jost_boekemeier;	state Exp;
branches;
next	1.36;

1.36
date	2009.09.14.16.52.39;	author jost_boekemeier;	state Exp;
branches;
next	1.35;

1.35
date	2009.08.22.16.37.06;	author jost_boekemeier;	state Exp;
branches
	1.35.4.1;
next	1.34;

1.34
date	2009.07.25.13.56.02;	author jost_boekemeier;	state Exp;
branches;
next	1.33;

1.33
date	2009.04.12.12.10.23;	author jost_boekemeier;	state Exp;
branches;
next	1.32;

1.32
date	2009.04.11.14.40.14;	author jost_boekemeier;	state Exp;
branches;
next	1.31;

1.31
date	2009.03.15.15.33.22;	author jost_boekemeier;	state Exp;
branches;
next	1.30;

1.30
date	2009.03.08.14.34.47;	author jost_boekemeier;	state Exp;
branches;
next	1.29;

1.29
date	2009.02.15.22.15.46;	author jost_boekemeier;	state Exp;
branches;
next	1.28;

1.28
date	2008.12.30.16.48.02;	author jost_boekemeier;	state Exp;
branches;
next	1.27;

1.27
date	2008.12.21.16.24.34;	author jost_boekemeier;	state Exp;
branches;
next	1.26;

1.26
date	2008.12.11.21.05.45;	author jost_boekemeier;	state Exp;
branches;
next	1.25;

1.25
date	2008.12.09.12.55.03;	author jost_boekemeier;	state Exp;
branches;
next	1.24;

1.24
date	2008.11.30.17.08.48;	author jost_boekemeier;	state Exp;
branches;
next	1.23;

1.23
date	2008.11.15.14.27.51;	author jost_boekemeier;	state Exp;
branches;
next	1.22;

1.22
date	2008.10.25.17.34.28;	author jost_boekemeier;	state Exp;
branches
	1.22.2.1;
next	1.21;

1.21
date	2008.10.12.16.15.53;	author jost_boekemeier;	state Exp;
branches;
next	1.20;

1.20
date	2008.03.30.17.01.34;	author jost_boekemeier;	state Exp;
branches;
next	1.19;

1.19
date	2008.03.22.12.04.56;	author jost_boekemeier;	state Exp;
branches;
next	1.18;

1.18
date	2008.02.09.19.49.44;	author jost_boekemeier;	state Exp;
branches;
next	1.17;

1.17
date	2008.02.04.19.32.54;	author jost_boekemeier;	state Exp;
branches;
next	1.16;

1.16
date	2008.01.21.19.23.30;	author jost_boekemeier;	state Exp;
branches;
next	1.15;

1.15
date	2008.01.06.20.59.20;	author jost_boekemeier;	state Exp;
branches;
next	1.14;

1.14
date	2007.12.28.13.56.42;	author jost_boekemeier;	state Exp;
branches;
next	1.13;

1.13
date	2007.12.09.15.13.13;	author jost_boekemeier;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.30.16.07.52;	author jost_boekemeier;	state Exp;
branches;
next	1.11;

1.11
date	2007.07.22.12.54.43;	author jost_boekemeier;	state Exp;
branches;
next	1.10;

1.10
date	2007.07.19.16.19.19;	author jost_boekemeier;	state Exp;
branches;
next	1.9;

1.9
date	2007.07.09.14.35.06;	author jost_boekemeier;	state Exp;
branches;
next	1.8;

1.8
date	2007.07.03.15.50.53;	author jost_boekemeier;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.13.19.51.48;	author jost_boekemeier;	state Exp;
branches;
next	1.6;

1.6
date	2007.04.07.16.22.43;	author jost_boekemeier;	state Exp;
branches;
next	1.5;

1.5
date	2007.03.26.14.32.06;	author jost_boekemeier;	state Exp;
branches;
next	1.4;

1.4
date	2007.03.25.16.28.21;	author jost_boekemeier;	state Exp;
branches;
next	1.3;

1.3
date	2007.03.22.19.01.44;	author jost_boekemeier;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.19.13.03.17;	author jost_boekemeier;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.12.20.27.55;	author andremachado;	state Exp;
branches;
next	;

1.22.2.1
date	2008.11.13.21.31.51;	author jost_boekemeier;	state Exp;
branches;
next	;

1.35.4.1
date	2009.09.12.15.52.34;	author jost_boekemeier;	state Exp;
branches;
next	1.35.4.2;

1.35.4.2
date	2009.09.14.16.23.59;	author jost_boekemeier;	state Exp;
branches;
next	;


desc
@@


1.56
log
@Release-7.1.1
@
text
@<?php /*-*- mode: php; tab-width:4 -*-*/

  /** java_Protocol.php -- PHP/Java Bridge protocol implementation
   *
   * Copyright (C) 2003-2007 Jost Boekemeier
   * 
   * This file is part of the PHP/Java Bridge.
   * 
   * The PHP/Java Bridge ("the library") is free software; you can
   * redistribute it and/or modify it under the terms of the GNU General
   * Public License as published by the Free Software Foundation; either
   * version 2, or (at your option) any later version.
   * 
   * The library is distributed in the hope that it will be useful, but
   * WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   * General Public License for more details.
   * 
   * You should have received a copy of the GNU General Public License
   * along with the PHP/Java Bridge; see the file COPYING.  If not, write to the
   * Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   * 02111-1307 USA.
   * 
   * Linking this file statically or dynamically with other modules is
   * making a combined work based on this library.  Thus, the terms and
   * conditions of the GNU General Public License cover the whole
   * combination.
   * 
   * As a special exception, the copyright holders of this library give you
   * permission to link this library with independent modules to produce an
   * executable, regardless of the license terms of these independent
   * modules, and to copy and distribute the resulting executable under
   * terms of your choice, provided that you also meet, for each linked
   * independent module, the terms and conditions of the license of that
   * module.  An independent module is a module which is not derived from
   * or based on this library.  If you modify this library, you may extend
   * this exception to your version of the library, but you are not
   * obligated to do so.  If you do not wish to do so, delete this
   * exception statement from your version. 
   *
   * @@author     Jost Boekemeier
   * @@license    GPL
   * @@link       http://php-java-bridge.sf.net
   */
require_once (java_get_base()."/Options.inc");
require_once (java_get_base()."/Client.inc");

/**
 * @@access private
 */
function java_getHeader($name, $array) {
  if (array_key_exists($name, $array)) return $array[$name];
  $name="HTTP_$name"; // apache uses HTTP_ prefix
  if (array_key_exists($name, $array)) return $array[$name];
  return null;
}

/**
 * @@access private
 */
function java_checkCliSapi() {
  $sapi=substr(php_sapi_name(), 0, 3);
  return ((($sapi == 'cgi') && !get_cfg_var("java.session")) || ($sapi == 'cli'));
}

/**
 * @@access private
 */
function java_getCompatibilityOption($client) {
  static $compatibility = null;

  if ($compatibility) return $compatibility;

  $compatibility = $client->RUNTIME["PARSER"]=="NATIVE"
    ? (0103-JAVA_PREFER_VALUES)
    : (0100+JAVA_PREFER_VALUES);
  if(is_int(JAVA_LOG_LEVEL)) {
    $compatibility |= 128 | (7 & JAVA_LOG_LEVEL)<<2;
  }
  $compatibility = chr ($compatibility);
  return $compatibility;
}

/**
 * A simple channel, used in phase 1
 *
 * @@access private
 */
class java_EmptyChannel {
  protected $handler;
  private $res;

  function __construct($handler) {
    $this->handler = $handler;
  }
  function shutdownBrokenConnection () {}
  function fwrite($data) {
	return $this->handler->fwrite($data);
  }
  function fread($size) {
	return $this->handler->fread($size);
  }

  function getKeepAliveA() {
	return "<F p=\"A\" />";
  }
  function getKeepAliveE() {
	return "<F p=\"E\" />";
  }
  function getKeepAlive() {
	return $this->getKeepAliveE();
  }

  function error() {
	trigger_error("An unchecked exception occured during script execution. Please check the server log files for details.", E_USER_ERROR);
  }
  function checkA($peer) {
	$val=$this->res[6];
	if ($val !='A') fclose($peer);
	if ($val !='A' && $val !='E') {
	  $this->error();
	}
  }
  function checkE() {
	$val = $this->res[6];
	if ($val !='E') {
	  $this->error();
	}
  }
  /** Used by socket channel (phase 2) */
  function keepAliveS() {
	$this->res = $this->fread(10); // <F p="E"/>
  }
  /** Used by chunked socket channel (phase 2) */
  function keepAliveSC() {
	$this->res = $this->fread(10);// <F p="E"/>
	$this->fwrite(""); // 0\r\n\r\n
	$this->fread(JAVA_RECV_SIZE); // read 0\r\n\r\n  JAVA_RECV_SIZE is dummy
  }

  /** Used by EmptyChannel (phase 1) */
  function keepAliveH() {
	$this->res = $this->handler->read(10);//  HTTP response <F p="E"/>
  }

  function keepAlive() {
	$this->keepAliveH();
	$this->checkE();
  }
}

/**
 * A simple socket channel, used in phase 2 or
 * when connecting to a simple socket listener
 *
 * @@access private
 */
abstract class java_SocketChannel extends java_EmptyChannel {
  public $peer, $host;

  function __construct($peer, $host) {
	$this->peer = $peer;
	$this->host = $host;
  }
  function fwrite($data) {
	return fwrite($this->peer, $data);
  }
  function fread($size) {
	return fread($this->peer, $size);
  }
  function shutdownBrokenConnection () {
    fclose($this->peer);
  }
}
/**
 * Persistent version of the above
 *
 * @@access private
 */
class java_SocketChannelP extends java_SocketChannel {
  function getKeepAlive() {return $this->getKeepAliveA();}
  function keepAlive() { $this->keepAliveS(); $this->checkA($this->peer); }
}

/**
 * Chunked version of the socket channel. Used in phase 2.
 * 
 * @@access private
 */
class java_ChunkedSocketChannel extends java_SocketChannel {
  function fwrite($data) {
    $len = dechex(strlen($data));
    return fwrite($this->peer, "${len}\r\n${data}\r\n");
  }
  function fread($size) {
  	$length = hexdec(fgets($this->peer, JAVA_RECV_SIZE));
	$data = "";
	while ($length > 0) {
	  $str = fread($this->peer, $length);
	  if (feof ($this->peer)) return null;
	  	  
	  $length -= strlen($str);
	  $data .= $str;
	}
	fgets($this->peer, 3); // \r\n
  	return $data;
  }
  function keepAlive() { $this->keepAliveSC(); $this->checkE(); fclose ($this->peer); }
}

/**
 * Used when PHP connects to a non-http socket or in phase 2
 *
 * Always uses a persistent connection to the socket.
 *
 * @@access private
 */
class java_SocketHandler {
  public $protocol, $channel;

  function __construct($protocol, $channel) {
	$this->protocol = $protocol;
	$this->channel = $channel;
  }
  function write($data) {
      return $this->channel->fwrite($data);
  }
  // fallback for EmptyChannel, phase 1
  function fwrite($data) {return $this->write($data);}

  function read($size) {
	return $this->channel->fread($size);
  }
  // fallback for EmptyChannel, phase 1
  function fread($size) {return $this->read($size);}

  function redirect() {}
  function getKeepAlive() {
    return $this->channel->getKeepAlive();
  }
  function keepAlive() {
	$this->channel->keepAlive();
  }
  function dieWithBrokenConnection($msg) {
  	unset($this->protocol->client->protocol);
    trigger_error ($msg?$msg:"unknown error: please see back end log for details", E_USER_ERROR);
  }
  function shutdownBrokenConnection ($msg) {
    $this->channel->shutdownBrokenConnection();
	$this->dieWithBrokenConnection($msg);
  }
}
/**
 * Used when PHP is running within a servlet environment.
 *
 * It connects to the ContextRunner directly w/o
 * sending a PUT request to the PhpJavaServlet.
 * Must not be used when a SocketContextServer
 * is not available in the back end.
 *
 * @@access private
 */
class java_SimpleHttpHandler extends java_SocketHandler {
  public $headers, $cookies;
  
  public $context, $ssl, $port; // used by reopen
  public $host; // used when creating a socket channel lazily.
  /**
   * Create a SocketChannel which is used to communicate with the SocketContextServer
   */
  function createChannel() {
	// fast path; used by the JEE or servlet back end to connect to PHP
	$channelName = java_getHeader("X_JAVABRIDGE_REDIRECT", $_SERVER);
	$context = java_getHeader("X_JAVABRIDGE_CONTEXT", $_SERVER);
	$len = strlen($context);
	$len0 = java_getCompatibilityOption($this->protocol->client); // short path S1: no PUT request
	$len1 = chr($len&0xFF); $len>>=8;
	$len2 = chr($len&0xFF);
	// simulate phase 1: PUT request to the back end
	$this->channel = new java_EmptyChannel($this);
	// simulate phase 2 : parse headers and extract comm. channel
	$this->channel = $this->getChannel($channelName);
	// we know the comm. channel is a socket channel, otherwise this class wouldn't be used
	$this->protocol->socketHandler=new java_SocketHandler($this->protocol, $this->channel);
	$this->protocol->write("\177${len0}${len1}${len2}${context}");
	$this->context = sprintf("X_JAVABRIDGE_CONTEXT: %s\r\n", $context);
	
	$this->protocol->handler = $this->protocol->socketHandler;
	$this->protocol->handler->write($this->protocol->client->sendBuffer)
		or $this->protocol->handler->shutdownBrokenConnection("Broken local connection handle");
	$this->protocol->client->sendBuffer=null;
	$this->protocol->handler->read(1)
		or $this->protocol->handler->shutdownBrokenConnection("Broken local connection handle");
  }

  function __construct($protocol, $ssl, $host, $port) {
	$this->cookies = array();
	$this->protocol = $protocol;
	$this->ssl = $ssl;
	$this->host = $host;
	$this->port = $port;
	$this->createChannel();
  }
  function getCookies() {
	$str="";
	$first=true;
	foreach($_COOKIE as $k => $v) {
	  $str .= ($first ? "Cookie: $k=$v":"; $k=$v");
	  $first=false;
	}
	if(!$first) $str .= "\r\n";
	return $str;
  }
  function getContextFromCgiEnvironment() {
	$ctx = java_getHeader('X_JAVABRIDGE_CONTEXT', $_SERVER);
	return $ctx;
  }
  function getContext() {
	static $context = null;
	if($context) return $context;

	$ctx = $this->getContextFromCgiEnvironment();
	$context = "";
	if($ctx) {
	  $context = sprintf("X_JAVABRIDGE_CONTEXT: %s\r\n", $ctx);
	}
	return $context;
  }
  function getWebAppInternal() {
	// from createHttpHandler
	$context = $this->protocol->webContext;
	if(isset($context)) return $context;

	/* Coerce a http://xyz.com/kontext/foo.php request to the back
	   end: http://xyz.com:{java_hosts[0]}/kontext/foo.php.  For
	   example if we receive a request:
	   http://localhost/sessionSharing.php and java.servlet is On and
	   java.hosts is "127.0.0.1:8080" the code would connect to the
	   back end:
	   http://127.0.0.1:8080/sessionSharing.phpjavabridge. This
	   creates a cookie with PATH value "/".  If java_servlet is User
	   the request http://localhost/myContext/sessionSharing.php the
	   code would connect to
	   http://127.0.0.1/myContext/sessionSharing.phpjavabridge and a
	   cookie with a PATH value "/myContext" would be created.
	*/
	return (JAVA_SERVLET == "User" &&
			array_key_exists('PHP_SELF', $_SERVER) &&
			array_key_exists('HTTP_HOST', $_SERVER))
	  ? $_SERVER['PHP_SELF']."javabridge"
	  : null;
  }
  function getWebApp() {
	$context = $this->getWebAppInternal();
	if(is_null($context)) $context = JAVA_SERVLET;
	if(is_null($context) || $context[0]!="/") 
	  $context = "/JavaBridge/JavaBridge.phpjavabridge";
	return $context;
  }
  function write($data) {
	return $this->protocol->socketHandler->write($data);
  }
  function doSetCookie($key, $val, $path) {
	$path=trim($path);

	$webapp = $this->getWebAppInternal(); if(!$webapp) $path="/";
	setcookie($key, $val, 0, $path);
  }
  function read($size) {
	return $this->protocol->socketHandler->read($size);
  }

  function getChannel($channelName) {
  	$errstr = null; $errno = null;
	$peer = pfsockopen($this->host, $channelName, $errno, $errstr, 20);
	if (!$peer) throw new java_IllegalStateException("No ContextServer for {$this->host}:{$channelName}. Error: $errstr ($errno)\n");
	stream_set_timeout($peer, -1);
	return new java_SocketChannelP($peer, $this->host);
  }
  function keepAlive() {
	parent::keepAlive();
  }

  /**
   * Prepare for phase 2: Open a SocketChannel and redirect further
   * communication to this channel.
   */
  function redirect() {}
}

/**
 * Used when PHP connects to a servlet environment using a PUT request.
 * It uses a chunked, non-persistent stream in phase 1 and will
 * redirect to a simple java_SocketHandler for phase 2.
 *
 * @@access private
 */
class java_SimpleHttpTunnelHandler extends java_SimpleHttpHandler  {
  // the initial socket connection, may redirect to
  // a socket connection later on
  public $socket;
  protected $hasContentLength = false;
  
  function createSimpleChannel () {
	$this->channel = new java_EmptyChannel($this);
  }
  function createChannel() {
	$this->createSimpleChannel();
  }
  function shutdownBrokenConnection ($msg) {
    fclose($this->socket);
    $this->dieWithBrokenConnection($msg);
  }
  function checkSocket($socket, &$errno, &$errstr) {
  	if (!$socket) {
	  $msg="Could not connect to the JEE server {$this->ssl}{$this->host}:{$this->port}. Please start it.";
	  $msg.=java_checkCliSapi()
		?" Or define('JAVA_HOSTS', 9267); define('JAVA_SERVLET', false); before including 'Java.inc' and try again. Error message: $errstr ($errno)\n"
		:" Error message: $errstr ($errno)\n";
	  throw new java_ConnectException($msg);
	}
  }
  function open() {
  	$errno = null; $errstr = null;
	$socket = fsockopen("{$this->ssl}{$this->host}", $this->port, $errno, $errstr, 20);
	$this->checkSocket($socket, $errno, $errstr);
	
	stream_set_timeout($socket, -1);
	$this->socket = $socket;
  }
  // fallback for EmptyChannel, phase 1
  function fread($size) {
  	$length = hexdec(fgets($this->socket, JAVA_RECV_SIZE));
	$data = "";
	while ($length > 0) {
	  $str = fread($this->socket, $length);
	  if (feof ($this->socket)) return null;
	  
	  $length -= strlen($str);
	  $data .= $str;
	}
  	fgets($this->socket, 3); //\r\n
  	return $data;
  }
  // fallback for EmptyChannel, phase 1
  function fwrite($data) {
    $len = dechex(strlen($data));
    return fwrite($this->socket, "${len}\r\n${data}\r\n");
  }
  function close() {
	fwrite($this->socket, "0\r\n\r\n");
	fgets($this->socket, JAVA_RECV_SIZE); // 0\r\n
	fgets($this->socket, 3); // \r\n
    fclose($this->socket);
  }
  function __construct($protocol, $ssl, $host, $port) {
	parent::__construct($protocol, $ssl, $host, $port);
	$this->open();
  }
  function read($size) {
 	if(is_null($this->headers)) $this->parseHeaders();
	if (isset($this->headers["http_error"])) {
	  if (isset($this->headers["transfer_chunked"])) {
		$str = $this->fread(JAVA_RECV_SIZE);
	  } elseif (isset($this->headers['content_length'])) {
		$len = $this->headers['content_length'];
		for($str=fread($this->socket, $len); strlen($str)<$len; $str.=fread($this->socket,$len-strlen($str)))
			if (feof ($this->socket)) break;
	  } else {
		$str=fread($this->socket, JAVA_RECV_SIZE);
	  }
	  $this->shutdownBrokenConnection($str);
	}
	return $this->fread(JAVA_RECV_SIZE);
  }
  function getBodyFor ($compat, $data) {
	$len = dechex(2+strlen($data));
	return "Cache-Control: no-cache\r\nPragma: no-cache\r\nTransfer-Encoding: chunked\r\n\r\n${len}\r\n\177${compat}${data}\r\n";
  }
  function write($data) {
	$compat = java_getCompatibilityOption($this->protocol->client);
	$this->headers = null;
	$socket = $this->socket;
	$webapp = $this->getWebApp();
	$cookies = $this->getCookies();
	$context = $this->getContext();
	$res = "PUT ";
	$res .= $webapp;
	$res .= " HTTP/1.1\r\n"; 
	$res .= "Host: {$this->host}:{$this->port}\r\n";
	$res .= $context;
	$res .= $cookies;
	$res .= $this->getBodyFor($compat, $data);
	
	$count = fwrite($socket, $res) or $this->shutdownBrokenConnection("Broken connection handle");
	fflush($socket)                or $this->shutdownBrokenConnection("Broken connection handle");
	
	return $count;
  }
     
  function parseHeaders() {
	$this->headers = array();
	$line = trim(fgets($this->socket, JAVA_RECV_SIZE));
	$ar = explode (" ", $line);

	$code = ((int)$ar[1]);
	if  ($code != 200) $this->headers["http_error"] = $code;

	while (($str = trim(fgets($this->socket, JAVA_RECV_SIZE)))) {
	  if($str[0]=='X') {
		if(!strncasecmp("X_JAVABRIDGE_REDIRECT", $str, 21)) {
		  $this->headers["redirect"]=trim(substr($str, 22));
		} else if(!strncasecmp("X_JAVABRIDGE_CONTEXT", $str, 20)) {
		  $this->headers["context"]=trim(substr($str, 21));
		}
	  } else if($str[0]=='S') {	// Set-Cookie:
		if(!strncasecmp("SET-COOKIE", $str, 10)) {
		  $str=substr($str, 12);
		  $this->cookies[]=$str;

		  $ar = explode(";", $str);
		  $cookie = explode("=",$ar[0]);
		  $path = "";
		  if(isset($ar[1])) $p=explode("=", $ar[1]);
		  if(isset($p)) $path=$p[1];
		  $this->doSetCookie($cookie[0], $cookie[1], $path);
		}
	  } else if($str[0]=='C') { // Content-Length
		if(!strncasecmp("CONTENT-LENGTH", $str, 14)) {
		  $this->headers["content_length"]=trim(substr($str, 15));
		  $this->hasContentLength = true;
		} else if(!strncasecmp("CONNECTION", $str, 10) && !strncasecmp("close", trim(substr($str, 11)), 5)) {
		  $this->headers["connection_close"] = true;
		}
	  } else  if($str[0]=='T') { // Transfer-Encoding
		if(!strncasecmp("TRANSFER-ENCODING", $str, 17) && !strncasecmp("chunked", trim(substr($str, 18)), 7)) {
			$this->headers["transfer_chunked"] = true;
		}
	  }
	}
  }
  function getSimpleChannel() {
	return new java_ChunkedSocketChannel($this->socket, $this->protocol, $this->host);
  }

  function redirect() {
    $this->isRedirect = isset($this->headers["redirect"]);
	if ($this->isRedirect)
	  $channelName = $this->headers["redirect"];
	
	$context = $this->headers["context"];
	$len = strlen($context);
	$len0 = chr(0xFF);
	$len1 = chr($len&0xFF); $len>>=8;
	$len2 = chr($len&0xFF);
	if ($this->isRedirect) { // slow path; used by JavaBridgeRunner back end
	  /* SocketContextServer: redirect to ContextRunner */
	  $this->protocol->socketHandler=new java_SocketHandler($this->protocol, $this->getChannel($channelName));
	  $this->protocol->write("\177${len0}${len1}${len2}${context}");
	  $this->context = sprintf("X_JAVABRIDGE_CONTEXT: %s\r\n", $context);

      $this->close ();

	  $this->protocol->handler = $this->protocol->socketHandler;
	  // short path for $this->protocol->flush(): avoid ContextRunner wait timeout
	  $this->protocol->handler->write($this->protocol->client->sendBuffer)
		or $this->protocol->handler->shutdownBrokenConnection("Broken local connection handle");
	  $this->protocol->client->sendBuffer=null;

	  // dummy: avoid ack delay
      $this->protocol->handler->read(1)
		or $this->protocol->handler->shutdownBrokenConnection("Broken local connection handle");
	} else           { // fast path; used by JEE or servlet engine
	   /* No SocketContextServer: keep using the current HTTP connection */
	  $this->protocol->handler = $this->protocol->socketHandler=new java_SocketHandler($this->protocol, $this->getSimpleChannel());
	}
  }
}
/**
 * Used when PHP connects to a servlet environment using a PUT request.
 * It uses a chunked, non-persistent stream in phase 1 and will
 * redirect to a simple java_SocketHandler for phase 2.
 *
 * @@access private
 */
class java_HttpTunnelHandler extends java_SimpleHttpTunnelHandler {
  // fallback for EmptyChannel, phase 1
  function fread($size) {
  	if ($this->hasContentLength) 
  		return fread($this->socket, $this->headers["content_length"]);
  	else
  		return parent::fread($size);
  }
  // fallback for EmptyChannel, phase 1
  function fwrite($data) {
  	if ($this->hasContentLength) 
  		return fwrite($this->socket, $data);
  	else
  		return parent::fwrite($data);
  }
  function close() {
  	if ($this->hasContentLength) {
		fwrite($this->socket, "0\r\n\r\n");
  		fclose($this->socket);
  	} else {
  		parent::fclose($this->socket);
  	}
  }
}
/**
 * @@access private
 */
class java_Protocol {
  public $client;
  public $webContext;
  public $serverName;

  function getOverrideHosts() {
      if(array_key_exists('X_JAVABRIDGE_OVERRIDE_HOSTS', $_ENV)) {
          $override = $_ENV['X_JAVABRIDGE_OVERRIDE_HOSTS'];
          if(!is_null($override) && $override!='/') return $override;
	  }
	  // fcgi: override for redirect
	  return 
		java_getHeader('X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT', $_SERVER);
  }
  static function getHost() {
	static $host = null;
	if(is_null($host)) {
	  $hosts = explode(";", JAVA_HOSTS);
	  $host = explode(":", $hosts[0]); // TODO: check host list
	  
	  // backward compatibility; changed from host:port to [ssl:]host:port
	  while(count ($host) < 3) array_unshift($host, "");
	  if (substr($host[1], 0, 2) == "//") $host[1] = substr($host[1], 2);
	}
	return $host;
  }
  function createHttpHandler() {
	$overrideHosts = $this->getOverrideHosts();
	$ssl = "";
	if($overrideHosts) {
	  // handle "s:127.0.0.1:8080//JavaBridge/test.phpjavabridge" 
	  // or "s:127.0.0.1:8080" 
	  // or "/" 
	  // or ""
	 $s=$overrideHosts;
     if((strlen($s)>2) && ($s[1]==':')) {
       if($s[0]=='s')
         $ssl="ssl://";
       $s = substr($s, 2);
     }
     $webCtx = strpos($s, "//");
     if($webCtx)
       $host = substr($s, 0, $webCtx);
     else
       $host = $s;

     $idx = strpos($host, ':');
     if($idx) {
       if($webCtx)
         $port = substr($host, $idx+1, $webCtx);
       else
         $port = substr($host, $idx+1);
       $host = substr($host, 0, $idx);
     } else {
       $port = "8080";
     }
 
     if($webCtx) $webCtx = substr($s, $webCtx+1);
	  $this->webContext = $webCtx;
	} else {
	  $hostVec = java_Protocol::getHost();
	  if ($ssl = $hostVec[0]) $ssl .= "://";
	  $host = $hostVec[1];
	  $port = $hostVec[2];
	}

	$this->serverName = "${ssl}${host}:$port";

	// short path S1: no PUT request
	if ((array_key_exists("X_JAVABRIDGE_REDIRECT", $_SERVER)) || 
		(array_key_exists("HTTP_X_JAVABRIDGE_REDIRECT", $_SERVER))) 
	  return new java_SimpleHttpHandler($this, $ssl, $host, $port);

	return new java_HttpTunnelHandler($this, $ssl, $host, $port);
  }
  /**
   * connect to a local channel (no servlet engine or app server)
   */
  function createSimpleHandler($name, $again=true) {
	$channelName = $name;
    $errno = null; $errstr = null;
    if(is_numeric($channelName)) {
	  $peer = @@pfsockopen($host="127.0.0.1", $channelName, $errno, $errstr, 5);
	} else {
	  $type = $channelName[0];
	  list($host, $channelName) = explode(":", $channelName);
	  $peer = pfsockopen($host, $channelName, $errno, $errstr, 20);
	  if (!$peer) 
		throw new java_ConnectException("No Java server at $host:$channelName. Error message: $errstr ($errno)");
	}
    if (!$peer) {

	  $java=file_exists(ini_get("extension_dir")."/JavaBridge.jar")?ini_get("extension_dir")."/JavaBridge.jar":(java_get_base()."/JavaBridge.jar");
	  if (!file_exists($java)) 
		throw new java_IOException("Could not find $java in ".getcwd().". Download it from http://sf.net/projects/php-java-bridge/files/Binary%20package/php-java-bridge_".JAVA_PEAR_VERSION."/exploded/JavaBridge.jar/download and try again.");
	  $java_cmd = "java -Dphp.java.bridge.daemon=true -jar \"${java}\" INET_LOCAL:$channelName 0"; 

	  if (!$again) 
	     throw new java_ConnectException("No Java back end! Please run it with: $java_cmd. Error message: $errstr ($errno)");

	  if (!java_checkCliSapi()) 
		trigger_error("This PHP SAPI requires a JEE or SERVLET back end. Start it, define ('JAVA_SERVLET', true); define('JAVA_HOSTS', ...); and try again.", E_USER_ERROR);

	  system ($java_cmd);

	  return $this->createSimpleHandler($name, false);
    }
    stream_set_timeout($peer, -1);
    $handler = new java_SocketHandler($this, new java_SocketChannelP($peer, $host));

    $compatibility = java_getCompatibilityOption($this->client);
    $this->write("\177$compatibility");
    $this->serverName = "127.0.0.1:$channelName";
    return $handler;
  }
  function java_get_simple_channel() {
	return (JAVA_HOSTS&&(!JAVA_SERVLET||(JAVA_SERVLET=="Off"))) ? JAVA_HOSTS : null;
  }
  function createHandler() {
	if(!java_getHeader('X_JAVABRIDGE_OVERRIDE_HOSTS', $_SERVER)&&
	   ((function_exists("java_get_default_channel")&&($defaultChannel=java_get_default_channel())) ||
		($defaultChannel=$this->java_get_simple_channel())) ) {
      // if bind.c has started a local back end from Apache/IIS
      return $this->createSimpleHandler($defaultChannel);
    } else {
      return $this->createHttpHandler();
    }
  }
  function __construct ($client) {
    $this->client = $client;
	$this->handler = $this->createHandler();
  }

  function redirect() {
	$this->handler->redirect();
  }

  function read($size) {
	return $this->handler->read($size);
  }

  function sendData() {
	$this->handler->write($this->client->sendBuffer);
    $this->client->sendBuffer=null;
  }
  function flush() {
	if(JAVA_DEBUG) {echo "sending::: "; echo $this->client->sendBuffer; echo "\n";}
	$this->sendData();
  }
  function getKeepAlive() {
    return $this->handler->getKeepAlive();
  }
  function keepAlive() {
	$this->handler->keepAlive();
  }
  function handle() {
    $this->client->handleRequests();
  }
  function write($data) {
    $this->client->sendBuffer.=$data;
  }
  function finish() {
    $this->flush();
    $this->handle();
	$this->redirect();
  }
  
  function referenceBegin($name) {
	$this->client->sendBuffer.=$this->client->preparedToSendBuffer;
	if(JAVA_DEBUG) {echo "flushed preparedToSendBuffer: ".$this->client->preparedToSendBuffer."\n";}
	$this->client->preparedToSendBuffer=null;

    $signature=sprintf("<H p=\"1\" v=\"%s\">", $name);
    $this->write($signature);
    $signature[6]="2";
    $this->client->currentArgumentsFormat = $signature;
  }
  function referenceEnd() {
    $this->client->currentArgumentsFormat.=$format="</H>";
    $this->write($format);
    $this->finish();
	$this->client->currentCacheKey=null;
  }
  function createObjectBegin($name) {
	$this->client->sendBuffer.=$this->client->preparedToSendBuffer;
	if(JAVA_DEBUG) {echo "flushed preparedToSendBuffer: ".$this->client->preparedToSendBuffer."\n";}
	$this->client->preparedToSendBuffer=null;

    $signature=sprintf("<K p=\"1\" v=\"%s\">", $name);
    $this->write($signature);
    $signature[6]="2";
    $this->client->currentArgumentsFormat = $signature;
  }
  function createObjectEnd() {
    $this->client->currentArgumentsFormat.=$format="</K>";
    $this->write($format);
    $this->finish();
	$this->client->currentCacheKey=null;
  }
  function propertyAccessBegin($object, $method) {
	$this->client->sendBuffer.=$this->client->preparedToSendBuffer;
	if(JAVA_DEBUG) {echo "flushed preparedToSendBuffer: ".$this->client->preparedToSendBuffer."\n";}
	$this->client->preparedToSendBuffer=null;

    $this->write(sprintf("<G p=\"1\" v=\"%x\" m=\"%s\">", $object, $method));
    $this->client->currentArgumentsFormat="<G p=\"2\" v=\"%x\" m=\"${method}\">";
  }
  function propertyAccessEnd() {
    $this->client->currentArgumentsFormat.=$format="</G>";
    $this->write($format);
    $this->finish();
	$this->client->currentCacheKey=null;
  }
  function invokeBegin($object, $method) {
	$this->client->sendBuffer.=$this->client->preparedToSendBuffer;
	if(JAVA_DEBUG) {echo "flushed preparedToSendBuffer: ".$this->client->preparedToSendBuffer."\n";}
	$this->client->preparedToSendBuffer=null;

    $this->write(sprintf("<Y p=\"1\" v=\"%x\" m=\"%s\">", $object, $method));
    $this->client->currentArgumentsFormat="<Y p=\"2\" v=\"%x\" m=\"${method}\">";
  }
  function invokeEnd() {
    $this->client->currentArgumentsFormat.=$format="</Y>";
    $this->write($format);
    $this->finish();
	$this->client->currentCacheKey=null;
  }
  function resultBegin() {
	$this->client->sendBuffer.=$this->client->preparedToSendBuffer;
	if(JAVA_DEBUG) {echo "flushed preparedToSendBuffer: ".$this->client->preparedToSendBuffer."\n";}
	$this->client->preparedToSendBuffer=null;
	
	$this->write("<R>");
  }
  function resultEnd() {
    $this->client->currentCacheKey=null;
    $this->write("</R>");
	$this->flush();
  }
  function writeString($name) {
    $this->client->currentArgumentsFormat.=$format="<S v=\"%s\"/>";
    $this->write(sprintf($format, htmlspecialchars($name, ENT_COMPAT,"ISO-8859-1")));

  }
  function writeBoolean($boolean) {
    $this->client->currentArgumentsFormat.=$format="<T v=\"%s\"/>";
    $this->write(sprintf($format, $boolean));
  }
  function writeLong($l) {
    $this->client->currentArgumentsFormat.="<J v=\"%d\"/>";
    if($l<0) {
      $this->write(sprintf("<L v=\"%x\" p=\"A\"/>",-$l));
    } else {
      $this->write(sprintf("<L v=\"%x\" p=\"O\"/>",$l));
    }
  }
  function writeULong($l) {
    $this->client->currentArgumentsFormat.=$format="<L v=\"%x\" p=\"O\"/>";
	$this->write(sprintf($format,$l));
  }
  function writeDouble($d) {
    $this->client->currentArgumentsFormat.=$format="<D v=\"%.14e\"/>";
    $this->write(sprintf($format, $d));
  }
  function writeObject($object) {
    $this->client->currentArgumentsFormat.=$format="<O v=\"%x\"/>";
	$this->write(sprintf($format, $object));
  }

  /* the following routines are not cached */
  function writeException($object, $str) {
	$this->write(sprintf("<E v=\"%x\" m=\"%s\"/>",$object, htmlspecialchars($str, ENT_COMPAT,"ISO-8859-1")));
  }
  function writeCompositeBegin_a() {
    $this->write("<X t=\"A\">");
  }
  function writeCompositeBegin_h() {
    $this->write("<X t=\"H\">");
  }
  function writeCompositeEnd() {
    $this->write("</X>");
  }
  function writePairBegin_s($key) {
    $this->write(sprintf("<P t=\"S\" v=\"%s\">", htmlspecialchars($key, ENT_COMPAT,"ISO-8859-1")));
  }
  function writePairBegin_n($key) {
    $this->write(sprintf("<P t=\"N\" v=\"%x\">",$key));
  }
  function writePairBegin() {
    $this->write("<P>");
  }
  function writePairEnd() {
    $this->write("</P>");
  }
  function writeUnref($object) {
	$this->client->sendBuffer.=$this->client->preparedToSendBuffer;
	$this->client->preparedToSendBuffer=null;
    $this->write(sprintf("<U v=\"%x\"/>", $object));
  }
  function writeExitCode($code) {
	$this->client->sendBuffer.=$this->client->preparedToSendBuffer;
	$this->client->preparedToSendBuffer=null;
	$this->write(sprintf("<Z v=\"%x\"/>", 0xffffffff&$code));
  }

  function getServerName() {
	return $this->serverName;
  }
}
?>
@


1.55
log
@New fastcgi implementation
@
text
@@


1.54
log
@New FastCGI implementation
@
text
@d915 1
a915 1
    $this->write(sprintf("<Z v=\"%d\"/>", $code));
@


1.53
log
@Release-7.0.1
@
text
@a908 1
	//echo "clear prepared to send buffer\n";
d912 5
@


1.52
log
@php 7
@
text
@d854 1
a854 1
    $this->write(sprintf($format, htmlspecialchars($name, ENT_COMPAT)));
d884 1
a884 1
	$this->write(sprintf("<E v=\"%x\" m=\"%s\"/>",$object, htmlspecialchars($str, ENT_COMPAT)));
d896 1
a896 1
    $this->write(sprintf("<P t=\"S\" v=\"%s\">", htmlspecialchars($key, ENT_COMPAT)));
@


1.51
log
@Removed debug output
@
text
@d93 1
a93 1
  function java_EmptyChannel($handler) {
d161 1
a161 1
  function java_SocketChannel($peer, $host) {
d221 1
a221 1
  function java_SocketHandler($protocol, $channel) {
d296 1
a296 1
  function java_SimpleHttpHandler($protocol, $ssl, $host, $port) {
d456 2
a457 2
  function java_SimpleHttpTunnelHandler($protocol, $ssl, $host, $port) {
	parent::java_SimpleHttpHandler($protocol, $ssl, $host, $port);
d741 1
a741 1
  function java_Protocol ($client) {
@


1.50
log
@Release-6-2-1
@
text
@d509 1
a509 1
	while (($str = trim(fgets($this->socket, JAVA_RECV_SIZE)))) { echo "XXX:::" . $str."\n";
@


1.49
log
@Release-6-2-1
@
text
@d509 1
a509 1
	while (($str = trim(fgets($this->socket, JAVA_RECV_SIZE)))) {
@


1.48
log
@Release-6-2-1
@
text
@d200 1
a200 1
	  if (feof ($this->socket)) return null;
@


1.47
log
@Reverted PhpJavaServlet to version 5.5
@
text
@d132 1
a132 1
	for ($this->res = $this->fread(10); strlen($this->res) < 10; $this->res.=$this->fread(10-strlen($this->res))); // <F p="E"/>
d136 1
a136 1
	for ($this->res = $this->fread(10); strlen($this->res) < 10; $this->res.=$this->fread(10-strlen($this->res)));// <F p="E"/>
d143 1
a143 1
	for ($this->res = $this->handler->read(10); strlen($this->res) < 10; $this->res.= $this->handler->read(10-strlen($this->res))); //  HTTP response <F p="E"/>
d200 2
d437 2
d467 2
a468 1
		for($str=fread($this->socket, $len); strlen($str)<$len; $str.=fread($this->socket,$len-strlen($str)));
@


1.46
log
@Release-6-1-2-2
@
text
@d226 1
a226 1
  // fallback for EmptyChannel
d232 1
a232 1
  // fallback for EmptyChannel
d396 1
a396 1
class java_HttpTunnelHandler extends java_SimpleHttpHandler  {
d400 2
a401 1

d429 1
a429 1
  // fallback for EmptyChannel
d441 1
a441 1
  // fallback for EmptyChannel
d452 1
a452 1
  function java_HttpTunnelHandler($protocol, $ssl, $host, $port) {
a497 1

d526 1
d574 31
a604 1

@


1.45
log
@Release-6-1-2-1
@
text
@d243 2
a244 2
	unset($this->protocol->client->protocol);
    trigger_error ("${msg}", E_USER_ERROR);
@


1.44
log
@Release-6-0-2
@
text
@d3 42
a44 38
  /* java_Protocol.php -- PHP/Java Bridge protocol implementation

  Copyright (C) 2003-2007 Jost Boekemeier

  This file is part of the PHP/Java Bridge.

  The PHP/Java Bridge ("the library") is free software; you can
  redistribute it and/or modify it under the terms of the GNU General
  Public License as published by the Free Software Foundation; either
  version 2, or (at your option) any later version.

  The library is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with the PHP/Java Bridge; see the file COPYING.  If not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
  02111-1307 USA.

  Linking this file statically or dynamically with other modules is
  making a combined work based on this library.  Thus, the terms and
  conditions of the GNU General Public License cover the whole
  combination.

  As a special exception, the copyright holders of this library give you
  permission to link this library with independent modules to produce an
  executable, regardless of the license terms of these independent
  modules, and to copy and distribute the resulting executable under
  terms of your choice, provided that you also meet, for each linked
  independent module, the terms and conditions of the license of that
  module.  An independent module is a module which is not derived from
  or based on this library.  If you modify this library, you may extend
  this exception to your version of the library, but you are not
  obligated to do so.  If you do not wish to do so, delete this
  exception statement from your version. */

@


1.43
log
@Release-6-1-1
@
text
@d454 8
a461 2
	  $len = $this->headers['content_length'];
	  for($str=fread($this->socket, $len); strlen($str)<$len; $str.=fread($this->socket,$len-strlen($str)));
a527 1
			unset ($this->headers["http_errors"]); // automatically handled by parser
@


1.42
log
@Release-6-0-0
@
text
@d113 3
a115 2
  function checkA() {
	$val = $this->res[6];
d178 1
a178 1
  function keepAlive() { $this->keepAliveS(); $this->checkA(); }
a418 1
	$this->socket_desc = array($socket);
d587 4
d629 3
a631 2
	  $host = $hostVec[0];
	  $port = $hostVec[1];
d634 1
a634 1
	$this->serverName = "$host:$port";
@


1.41
log
@Release-6-0-0
@
text
@d85 1
a85 1
class java_EmptyPipeChannel {
d89 1
a89 1
  function java_EmptyPipeChannel($handler) {
d136 1
a136 1
  /** Used by EmptyPipeChannel (phase 1) */
a147 10
 * Persistent version of the above
 *
 * @@access private
 */
class java_EmptyPipeChannelP extends java_EmptyPipeChannel {
  function getKeepAlive() {return $this->getKeepAliveA();}
  function keepAlive() { $this->keepAliveH(); $this->checkA(); }
}

/**
d153 1
a153 1
abstract class java_SocketChannel extends java_EmptyPipeChannel {
a204 38
 * Named Pipes are used on Linux only to avoid socket-based
 * SecurityEnhancedLinux rules. Used in phase 2.
 *
 * @@access private
 */
class java_PipeChannel extends java_EmptyPipeChannel {
  protected $peer, $peerr, $peerr_desc;

  function java_PipeChannel($handler) {
	parent::java_EmptyPipeChannel($handler);

	$this->peerr = fopen($this->handler->iname, "r");
	$this->peerr_desc = array($this->peerr);
	stream_set_blocking($this->peerr, false);
	stream_set_timeout($this->peerr, -1);

	$this->peer = fopen($this->handler->oname, "w");
	$this->handler->unlink ();
	stream_set_timeout($this->peer, -1);
	return $this;
  }
  function fwrite($data) {
      return fwrite($this->peer, $data);
  }
  function fread($size) {
	static $empty = NULL;
	stream_select($this->peerr_desc, $empty, $empty, 1677216);
	return fread($this->peerr, $size);
  }
  function keepAlive() {
	$this->keepAliveS();
	$this->checkE();
  }
  // no need to fclose peer/peerr explicitly as PHP automatically closes 
  // fopen'ed files in rshutdown.
}

/**
d221 1
a221 1
  // fallback for EmptyPipeChannel
d227 1
a227 1
  // fallback for EmptyPipeChannel
d260 1
a260 1
  public $host; // used when creating a socket channel lazily. the port# is passed via X_JAVABRIDGE_CHANNEL
d265 1
d273 1
a273 1
	$this->channel = new java_EmptyPipeChannel($this);
a310 3
  function getChannelName() {
	return null;
  }
d365 1
a365 7
  /**
   * Unlink a pipe channel, if any. 
   */
  function unlink() {}
  /**
   * Create a PipeChannel, if necessary
  */
a367 2
	if($channelName[0]=='/') return new java_PipeChannel($this);
    $this->unlink(); // remove the created pipes as early as possible
a372 3
  /**
   * unlink the PipeChannel created by getChannel()
   */
a374 1
	$this->unlink();
d391 1
a391 1
class java_HttpTunnelHandler extends java_SimpleHttpHandler {
d393 1
a393 1
  // a pipe- or socket connection later on
a395 21
  // the proposed pipe connection channel sent to the server
  // if it accepts it via X_JAVABRIDGE_REDIRECT, it is opened
  // in function redirect()
  public $name, $iname, $fifor, $oname, $fifo;

  /**
   * Unlink a pipe channel, if any. 
   */
  function unlink() {
	if (isset($this->name)) {
	  unlink($this->iname);
	  unlink($this->oname);
	  unlink($this->name);
	  unset ($this->name);
	}
  }

  function getChannelName() {
	return isset($this->name) ? sprintf("X_JAVABRIDGE_CHANNEL: %s\r\n", $this->name) : null;
  }

d397 1
a397 1
	$this->channel = new java_EmptyPipeChannel($this);
a399 10
	$pipe_dir = $this->protocol->client->RUNTIME['PIPE_DIR'];
	if($pipe_dir && ($this->host == "127.0.0.1" || (substr($this->host,0,9) == "localhost"))) {
	  $this->name = tempnam($pipe_dir, ".php_java_bridge");
	  $this->iname = $this->name . ".i";
	  $mask = umask(0);
	  $this->fifor = posix_mkfifo($this->iname, 0666);
	  $this->oname = $this->name . ".o";
	  $this->fifo = posix_mkfifo($this->oname, 0666);
	  umask($mask);
	}
d424 1
a424 1
  // fallback for EmptyPipeChannel
d436 1
a436 1
  // fallback for EmptyPipeChannel
a469 1
	$channel = $this->getChannelName();
a476 1
	if(!is_null($channel)) $res .= $channel;
a527 1
    $this->unlink(); // remove the created pipes as early as possible
d541 2
a542 2
	if ($this->isRedirect) { 
	  /* Pipe- or SocketContextServer: redirect to ContextRunner */
d558 2
a559 2
	} else           { 
	   /* No Pipe- or SocketContextServer: keep using the current HTTP connection */
a645 1
      /* raise mono connect exception--do not delete this line, it is used when generating Mono.inc from Java.inc */
d648 4
a651 9
	  if($type=='@@' || $type=='/') {		 // unix domain socket
		if($type=='@@') $channelName[0]="\0"; // abstract name space
		$peer = @@pfsockopen($host="unix://${channelName}", $channelName = null, $errno, $errstr, 5);
	  } else {					// tcp socket
		list($host, $channelName) = explode(":", $channelName);
		$peer = pfsockopen($host, $channelName, $errno, $errstr, 20);
		if (!$peer) 
		    throw new java_ConnectException("No Java server at $host:$channelName. Error message: $errstr ($errno)");
	  }
d655 4
a658 11
	  if(is_null($channelName) && ($type=='@@' || $type=='/')) {
	      // unix domain sockets
		  $java = (ini_get("extension_dir")."/java");
		  if (!file_exists($java)) trigger_error("Could not find $java. Remove java.so and php_java.dll and try again.", E_USER_ERROR);
          $java_cmd = "$java -Dphp.java.bridge.daemon=true LOCAL:$name 0";
      } else {
	  	  $java=file_exists(ini_get("extension_dir")."/JavaBridge.jar")?ini_get("extension_dir")."/JavaBridge.jar":(java_get_base()."/JavaBridge.jar");
		  if (!file_exists($java)) 
		      throw new java_IOException("Could not find $java in ".getcwd().". Download it from http://sf.net/projects/php-java-bridge/files/Binary%20package/php-java-bridge_".JAVA_PEAR_VERSION."/exploded/JavaBridge.jar/download and try again.");
	      $java_cmd = "java -Dphp.java.bridge.daemon=true -jar \"${java}\" INET_LOCAL:$channelName 0"; 
      }
@


1.40
log
@Release-5-5-5
@
text
@d127 1
a127 1
	$this->res = $this->fread(10); // <F p="E"/>
d131 1
a131 1
	$this->res = $this->fread(10); // <F p="E"/>
d133 1
a133 1
	$this->fread(5);   // 0\r\n\r\n
d138 1
a138 1
	$this->res = $this->handler->read(10); //  HTTP response <F p="E"/>
d208 1
a208 1
  	fread($this->peer, 2);
d526 1
a526 1
  	fread($this->socket, 2);
d536 2
a537 1
	fgets($this->socket, JAVA_RECV_SIZE); fread($this->socket, 2);
d547 3
a549 1
	   $this->shutdownBrokenConnection(fread($this->socket, $this->headers['content_length']), $this->headers["http_error"]);
a659 49
/**
 * Used when PHP connects to a servlet environment and the option
 * JAVA_PERSISTENT_SERVLET_CONNECTIONS is on.  It uses a non-chunked
 * persistent stream in phase 1 and will redirect to a simple
 * java_SocketHandler for phase 2.
 *
 * @@access private
 */
class java_HttpHandler extends java_HttpTunnelHandler {
  function open() {
  	$errno = null; $errstr = null;
	$socket = pfsockopen("{$this->ssl}{$this->host}", $this->port, $errno, $errstr, 20);
	$this->checkSocket($socket, $errno, $errstr);
	stream_set_timeout($socket, -1);
	$this->socket = $socket;
  }
  function close() {
	if (isset($this->headers["connection_close"]))
	  fclose ($this->socket);
	else
	  fflush($this->socket);
  }
  function parseHeaders() {
	parent::parseHeaders();
	if (!isset($this->headers["redirect"])) {
	  $this->shutdownBrokenConnection ("No ContextServer. define ('JAVA_PERSISTENT_SERVLET_CONNECTIONS', false); or set java.persistent_servlet_connections = Off and try again.<br>\n See files: \"Java.inc\", \"java.ini\". Or, if you run PHP from java, the file \"global.properties\" within JavaBridge.jar within the JavaBridge.war zip file.");
	}
  }
  function read($size) {
 	if(is_null($this->headers)) $this->parseHeaders();
	if (isset($this->headers["http_error"])) {
	  shutdownBrokenConnection(fread($this->socket, $this->headers['content_length']), $this->headers["http_error"]);
	}
	return $this->fread($this->headers['content_length']);
  }
  function fread($size) {
	return fread($this->socket, $size);
  }
  function fwrite($data) {
	return fwrite($this->socket, $data);
  }
  function getBodyFor ($compat, $data) {
	$len = 2+strlen($data);
	return "Content-Length: ${len}\r\nConnection: keep-alive\r\n\r\n\177${compat}${data}";
  }	
  function createSimpleChannel () {
	$this->channel = new java_EmptyPipeChannelP($this);
  }
}
d732 1
a732 1
	return JAVA_PERSISTENT_SERVLET_CONNECTIONS ? new java_HttpHandler($this, $ssl, $host, $port) : new java_HttpTunnelHandler($this, $ssl, $host, $port);
@


1.39
log
@Release-5-5-4-1
@
text
@d57 8
d500 7
a506 2
  	if (!$socket) 
	  throw new java_ConnectException("Could not connect to the JEE server {$this->ssl}{$this->host}:{$this->port}. Please start it. Or define('JAVA_HOSTS', 9267); define('JAVA_SERVLET', false); before including 'Java.inc' and try again. Error message: $errstr ($errno)\n");
d811 1
a811 1
		      throw new java_IOException("Could not find $java in ".getcwd().". Download it from http://sf.net/projects/php-java-bridge/files/Binary%20package/php-java-bridge_".JAVA_PEAR_VERSION."/JavaBridge.jar/download and try again.");
d816 4
a819 1
	     throw new java_ConnectException("No Java! Please run it with: $java_cmd. Error message: $errstr ($errno)");
d822 1
@


1.38
log
@Release-5-5-4
@
text
@d279 1
a279 5
	if (function_exists("error_get_last"))
		$error = error_get_last();
	else
		$error = array("message"=>"broken connection error");
    trigger_error ("${msg} ".$error["message"], E_USER_ERROR);
d322 1
a322 1
		or $this->protocol->handler->shutdownBrokenConnection("x1 Broken local connection handle");
d325 1
a325 1
		or $this->protocol->handler->shutdownBrokenConnection("x2 Broken local connection handle");
@


1.37
log
@Release 5.5.3
@
text
@d73 2
d77 6
a82 9
class java_SocketChannel {
  public $peer, $protocol;
  private $channelName, $host;

  function java_SocketChannel($peer, $protocol, $host, $channelName) {
    $this->peer = $peer;
    $this->protocol = $protocol;
	$this->host = $host;
	$this->channelName = $channelName;
d84 1
d86 1
a86 1
	return fwrite($this->peer, $data);
d89 8
a96 1
	return fread($this->peer, $size);
d99 32
a130 2
	// keep alive, required by protocol
	return "<F p=\"A\" />";
d132 1
d134 33
a166 6
	$res = $this->fread(10); // <F p="A"/>
	$val = $res[6];
	if ($val != 'A' && $val !='E') {
	  trigger_error("An unchecked exception occured during script execution. Please check the server log files for details.", E_USER_ERROR);
	  die (1);
	}
d170 1
a170 1
  } 
d173 2
d177 14
a190 3
class java_EmptyPipeChannel {
  function open($handler) {
	throw new java_RuntimeException("protocol error: socket channel names must not start with a slash");
d192 7
a198 10
  function getName() {
	return null;
  }
  function getKeepAlive() {return "<F p=\"E\" />";}
  function keepAlive() {
	$res = $this->fread(10); // <F p="E"/>
	$val = $res[6];
	if ($val != 'E') {
	  trigger_error("An unchecked exception occured during script execution. Please check the server log files for details.", E_USER_ERROR);
	  die (1);
d200 2
d203 1
a203 2
  function shutdownBrokenConnection () {}
  function unlink () {}
d205 1
d207 3
d213 6
a218 21
  public $peer, $peerr, $peerr_desc, $name;
  public $fifo, $fifor;
  public $iname, $oname;

  function java_PipeChannel($name) {
	$this->name = $name;
	$this->iname = $this->name . ".i";
	$mask = umask(0);
	$this->fifor = posix_mkfifo($this->iname, 0666);
	$this->oname = $this->name . ".o";
	$this->fifo = posix_mkfifo($this->oname, 0666);
	umask($mask);
  }
  function unlink () {
	unlink($this->iname);
	unlink($this->oname);
	unlink($this->name);
  }
  function open($handler) {
  	
	$this->peerr = fopen($this->iname, "r");
d223 2
a224 2
	$this->peer = fopen($this->oname, "w");
	$this->unlink ();
d236 3
a238 2
  function getName() {
	return $this->name;
d245 4
d261 3
d267 3
d283 1
a283 1
    die ("${msg} ".$error["message"]);
d291 7
d301 1
a301 1
  public $headers;
d305 3
a307 1
  
d315 6
a320 2
	$this->channel = new java_EmptyPipeChannel();
	$this->protocol->socketHandler=new java_SocketHandler($this->protocol, $this->channel = $this->getChannel($channelName));
d333 1
d355 1
a355 2
	$name = $this->channel->getName();
	return !is_null($name) ? sprintf("X_JAVABRIDGE_CHANNEL: %s\r\n", $name) : null;
d358 3
a407 28
  function parseHeaders() {
	$this->headers = array();
	while (($str = trim(fgets($this->socket, JAVA_RECV_SIZE)))) {
	  if($str[0]=='X') {
		if(!strncasecmp("X_JAVABRIDGE_REDIRECT", $str, 21)) {
		  $this->headers["redirect"]=trim(substr($str, 22));
		} else if(!strncasecmp("X_JAVABRIDGE_CONTEXT", $str, 20)) {
		  $this->headers["context"]=trim(substr($str, 21));
		}
	  } else if($str[0]=='S') {	// Set-Cookie:
		if(!strncasecmp("SET-COOKIE", $str, 10)) {
		  $str=substr($str, 12);
		  $ar = explode(";", $str);
		  $cookie = explode("=",$ar[0]);
		  $path = "";
		  if(isset($ar[1])) $p=explode("=", $ar[1]);
		  if(isset($p)) $path=$p[1];
		  $this->doSetCookie($cookie[0], $cookie[1], $path);
		}
	  } else if($str[0]=='C') { // Content-Length
		if(!strncasecmp("CONTENT-LENGTH", $str, 14)) {
		  $this->headers["content_length"]=trim(substr($str, 15));
		} else if(!strncasecmp("CONNECTION", $str, 10)) {
		  $this->headers["connection"]=trim(substr($str, 11));
		}
	  }
	}
  }
d411 7
a417 1

d420 2
a421 2
	if($channelName[0]=='/') return $this->channel->open($this);
    $this->channel->unlink(); // remove the created pipes (if any)
d423 1
a423 1
	if (!$peer) throw new java_IllegalStateException("No Pipe- or SocketContextServer for {$this->host}:{$channelName} available. Set promiscuous mode. Please see INSTALL.J2EE document for details. Error message: $errstr ($errno)\n");
d425 8
a432 1
	return new java_SocketChannel($peer, $this->protocol, $this->host, $channelName);
d435 4
d443 4
d449 29
a477 3
class java_HttpHandler extends java_SimpleHttpHandler {
  public $socket; // we write to the socket directly and keep the pipe channel for later use
  
d480 10
a489 4
	if($pipe_dir && ($this->host == "127.0.0.1" || (substr($this->host,0,9) == "localhost")))
	  $this->channel = new java_PipeChannel(tempnam($pipe_dir, ".php_java_bridge"));
	else
	  $this->channel = new java_EmptyPipeChannel();
d491 1
a491 1
  function close() {
d493 1
d495 3
a497 3
  function shutdownBrokenConnection ($msg) {
    $this->close();
    $this->dieWithBrokenConnection($msg);
d501 4
a504 7
  /* Do not pfsockopen here, the J2EE server may not be able to handle
    hundreds of persistent connections to the servlet very well */
	$socket = JAVA_PERSISTENT_SERVLET_CONNECTIONS ? 
	  pfsockopen("{$this->ssl}{$this->host}", $this->port, $errno, $errstr, 20) :
	   fsockopen("{$this->ssl}{$this->host}", $this->port, $errno, $errstr, 20);

	if (!$socket) throw new java_ConnectException("Could not connect to the J2EE server {$this->ssl}{$this->host}:{$this->port}. Please start it. Or define('JAVA_HOSTS', 9267); define('JAVA_SERVLET', false); before including 'Java.inc' and try again. Error message: $errstr ($errno)\n");
d506 1
a506 1
	return $socket;
d508 23
a530 1
  function java_HttpHandler($protocol, $ssl, $host, $port) {
d532 12
a543 1
	$this->socket = $this->open();
d546 1
a546 2

	$compatibility = java_getCompatibilityOption($this->protocol->client);
a548 1
	$len = 2 + strlen($data);
d555 1
a555 1
	$res .= JAVA_PERSISTENT_SERVLET_CONNECTIONS ? " HTTP/1.1\r\n" : " HTTP/1.0\r\n"; 
a556 1
	$res .= "Content-Length: "; $res .= $len; $res .= "\r\n";
d560 1
a560 4
	$res .= "\r\n";
	$res .= "\177";
	$res .= $compatibility;
	$res .= $data;
d567 46
a612 5
  function read($size) {
  	
 	if(is_null($this->headers)) $this->parseHeaders();
	$data = fread($this->socket, $this->headers['content_length']);
	return $data;
d616 4
a619 4
	if(!isset($this->headers["redirect"])) { // no redirect received: must continue to send PUT requests
	  throw new java_IllegalStateException("No Pipe- or SocketContextServer available. Set promiscuous mode. Please see INSTALL.J2EE document for details.");
	}
	$channelName = $this->headers["redirect"];
d625 11
a635 14
	$this->protocol->socketHandler=new java_SocketHandler($this->protocol, $this->getChannel($channelName));
	$this->protocol->write("\177${len0}${len1}${len2}${context}");
	$this->context = sprintf("X_JAVABRIDGE_CONTEXT: %s\r\n", $context);

	// close persistent connection
	if ((!JAVA_PERSISTENT_SERVLET_CONNECTIONS) || 
		(array_key_exists("connection", $this->headers)&&
		 !strncasecmp("close", $this->headers["connection"],5)))
	  $this->close ();

	$this->protocol->handler = $this->protocol->socketHandler;

	// short path for $this->protocol->flush(): avoid ContextRunner wait timeout
	$this->protocol->handler->write($this->protocol->client->sendBuffer)
d637 1
a637 1
	$this->protocol->client->sendBuffer=null;
d639 2
a640 2
	// dummy: avoid ack delay
	$this->protocol->handler->read(1)
d642 53
d769 1
a769 1
	return new java_HttpHandler($this, $ssl, $host, $port);
d813 1
a813 1
    $handler = new java_SocketHandler($this, new java_SocketChannel($peer, $this, $host, $channelName));
d851 1
a851 3
	if(JAVA_DEBUG) {
	  echo "sending::: "; echo $this->client->sendBuffer; echo "\n";
	}
d874 1
a874 3
	if(JAVA_DEBUG) {
	  echo "flushed preparedToSendBuffer: ".$this->client->preparedToSendBuffer."\n";
	}
d890 1
a890 3
	if(JAVA_DEBUG) {
	  echo "flushed preparedToSendBuffer: ".$this->client->preparedToSendBuffer."\n";
	}
d906 1
a906 3
	if(JAVA_DEBUG) {
	  echo "flushed preparedToSendBuffer: ".$this->client->preparedToSendBuffer."\n";
	}
d920 1
a920 3
	if(JAVA_DEBUG) {
	  echo "flushed preparedToSendBuffer: ".$this->client->preparedToSendBuffer."\n";
	}
d934 1
a934 3
	if(JAVA_DEBUG) {
	  echo "flushed preparedToSendBuffer: ".$this->client->preparedToSendBuffer."\n";
	}
@


1.36
log
@Merged Release-5-5-2 branch into HEAD
@
text
@d203 4
a206 1
	$error = error_get_last();
a218 1
  public $redirect;
d389 1
a389 1
	if (!$socket) throw new java_ConnectException("Could not connect to the J2EE server {$this->ssl}{$this->host}:{$this->port}. Please start it. Or define('JAVA_HOSTS', 8080); define('JAVA_SERVLET', false); before including 'Java.inc' and try again. Error message: $errstr ($errno)\n");
a406 1
	$redirect = $this->redirect;
a413 1
	$res .= $redirect;
d483 2
a484 2
	static $host;
	if(!isset($host)) {
d569 2
a570 2
		      throw new java_IOException("Could not find $java in ".getcwd().". Download http://php-java-bridge.sf.net/pjb/java/JavaBridge.jar and try again.");
	      $java_cmd = "java -Dphp.java.bridge.daemon=true -jar $java INET_LOCAL:$channelName 0"; 
@


1.35
log
@Release-5-5-1
@
text
@d127 1
d146 5
d159 1
a159 3
	unlink($this->iname);
	unlink($this->oname);
	unlink($this->name);
d228 1
d349 1
a490 4
	$hostVec = java_Protocol::getHost();
	$host = $hostVec[0];
	$port = $hostVec[1];

d523 4
d528 1
@


1.35.4.1
log
@Release-5-5-2
@
text
@d485 4
a520 4
	} else {
	  $hostVec = java_Protocol::getHost();
	  $host = $hostVec[0];
	  $port = $hostVec[1];
a521 1

@


1.35.4.2
log
@http://sourceforge.net/mailarchive/forum.php?thread_name=5B533386-AC83-4E48-9E12-9DDD8D6EA321%40mac.com&forum_name=php-java-bridge-users
@
text
@a126 1
  function unlink () {}
a144 5
  function unlink () {
	unlink($this->iname);
	unlink($this->oname);
	unlink($this->name);
  }
d153 3
a155 1
	$this->unlink ();
a223 1
	$this->channel = new java_EmptyPipeChannel();
a343 1
    $this->channel->unlink(); // remove the created pipes (if any)
@


1.34
log
@Release-5-5
@
text
@d41 2
a42 2
require_once ("${JAVA_BASE}/Options.inc");
require_once ("${JAVA_BASE}/Client.inc");
a111 1
  	if (false) $handler = $handler;
a145 1
  	if (false) $handler = $handler;
d344 2
a345 2
	$peer = pfsockopen($this->host, $channelName, $errno, $errstr, 30);
	if (!$peer) throw new java_RuntimeException("No Pipe- or SocketContextServer for {$this->host}:{$channelName} available. Set promiscuous mode. Please see INSTALL.J2EE document for details. Error message: $errstr ($errno)\n");
d378 2
a379 2
	  pfsockopen("{$this->ssl}{$this->host}", $this->port, $errno, $errstr, 30) :
	   fsockopen("{$this->ssl}{$this->host}", $this->port, $errno, $errstr, 30);
d381 1
a381 1
	if (!$socket) throw new java_ConnectException("Could not connect to the J2EE server {$this->ssl}{$this->host}:{$this->port}. Please start it, for example with the command: \"java -jar JavaBridge.jar SERVLET:8080 3 JavaBridge.log\". Error message: $errstr ($errno)\n");
a419 1
  	if (false) $size = $size;
d428 1
a428 1
	  throw new java_RuntimeException("No Pipe- or SocketContextServer available. Set promiscuous mode. Please see INSTALL.J2EE document for details.");
d534 1
a534 1
  function createSimpleHandler($name) {
d537 3
a539 2
    if(!is_string($channelName)) {
	  $peer = pfsockopen($host="127.0.0.1", $channelName, $errno, $errstr, 30);
d544 2
a545 4
		$peer = pfsockopen($host="unix://${channelName}", null, $errno, $errstr, 30);
        $channelName = null;
	  }
	  else {					// tcp socket
d547 3
a549 1
		$peer = pfsockopen($host, $channelName, $errno, $errstr, 30);
d552 20
a571 1
    if (!$peer) throw new java_ConnectException("Could not connect to the server $name. Error message: $errstr ($errno)\n");
d581 1
a581 5
	if (JAVA_HOSTS && (!JAVA_SERVLET || (JAVA_SERVLET == "Off")) && ($sel=JAVA_HOSTS) && ($sel[0]=='@@' || ($sel[0]=='/'))) {
	  $hosts = explode(";", JAVA_HOSTS);
	  return $hosts[0];
	}
    return null;
@


1.33
log
@Release-5-4-4-2
@
text
@d96 6
a101 1
	$this->fread(10); // <F p="A"/>
d118 9
a126 2
  function getKeepAlive() {return "";}
  function keepAlive() {}
d347 1
a347 1
	if (!$peer) throw new java_RuntimeException("Could not connect to the context server {$this->host}:{$channelName}. Error message: $errstr ($errno)\n");
d383 1
a383 1
	if (!$socket) throw new java_ConnectException("Could not connect to the J2EE server {$this->ssl}{$this->host}:{$this->port}. Please start it, for example with the command: \"java -jar JavaBridge.jar SERVLET:8080 3 JavaBridge.log\" or, if the back end has been compiled to native code, with \"modules/java SERVLET:8080 3 JavaBridge.log\". Error message: $errstr ($errno)\n");
d431 1
a431 1
	  throw new java_RuntimeException("No Pipe- or SocketContextServer available. See README section \"Security Issues\" for details.");
@


1.32
log
@Release-5-4-4-2
@
text
@a198 1
 * if REDIRECT is passed from java, we use a short path (i.e. no PUT request)
@


1.31
log
@*** empty log message ***
@
text
@d57 18
d199 1
d201 1
a201 1
class java_HttpHandler extends java_SocketHandler {
a206 2

  public $socket; // we write to the socket directly and keep the pipe channel for later use
d208 17
a224 7
  function createPipeChannel($host, $pipe_dir) {
	if($pipe_dir && ($host == "127.0.0.1" || (substr($host,0,9) == "localhost")))
	  return new java_PipeChannel(tempnam($pipe_dir, ".php_java_bridge"));
	return new java_EmptyPipeChannel();
  }
  function close() {
    fclose($this->socket);
a225 11
  function shutdownBrokenConnection ($msg) {
    $this->close();
    $this->dieWithBrokenConnection($msg);
  }
  function open() {
  	$errno = null; $errstr = null;
  /* Do not pfsockopen here, the J2EE server may not be able to handle
    hundreds of persistent connections to the servlet very well */
	$socket = JAVA_PERSISTENT_SERVLET_CONNECTIONS ? 
	  pfsockopen("{$this->ssl}{$this->host}", $this->port, $errno, $errstr, 30) :
	   fsockopen("{$this->ssl}{$this->host}", $this->port, $errno, $errstr, 30);
d227 1
a227 5
	if (!$socket) throw new java_ConnectException("Could not connect to the J2EE server {$this->ssl}{$this->host}:{$this->port}. Please start it, for example with the command: \"java -jar JavaBridge.jar SERVLET:8080 3 JavaBridge.log\" or, if the back end has been compiled to native code, with \"modules/java SERVLET:8080 3 JavaBridge.log\". Error message: $errstr ($errno)\n");
	stream_set_timeout($socket, -1);
	return $socket;
  }
  function java_HttpHandler($protocol, $ssl, $host, $port) {
d232 1
a232 2
	$this->channel = $this->createPipeChannel($host, $protocol->client->RUNTIME['PIPE_DIR']);
	$this->socket = $this->open();
d292 1
a292 35

	$compatibility = $this->protocol->client->RUNTIME["PARSER"]=="NATIVE"
	  ? (0103-JAVA_PREFER_VALUES)
	  : (0100+JAVA_PREFER_VALUES);
	if(is_int(JAVA_LOG_LEVEL)) {
	  $compatibility |= 128 | (7 & JAVA_LOG_LEVEL)<<2;
	}
	$compatibility = chr ($compatibility);

	$this->headers = null;
	$socket = $this->socket;
	$len = 2 + strlen($data);
	$webapp = $this->getWebApp();
	$cookies = $this->getCookies();
	$channel = $this->getChannelName();
	$context = $this->getContext();
	$redirect = $this->redirect;
	$res = "PUT ";
	$res .= $webapp;
	$res .= JAVA_PERSISTENT_SERVLET_CONNECTIONS ? " HTTP/1.1\r\n" : " HTTP/1.0\r\n"; 
	$res .= "Host: {$this->host}:{$this->port}\r\n";
	$res .= "Content-Length: "; $res .= $len; $res .= "\r\n";
	$res .= $context;
	$res .= $cookies;
	$res .= $redirect;
	if(!is_null($channel)) $res .= $channel;
	$res .= "\r\n";
	$res .= "\177";
	$res .= $compatibility;
	$res .= $data;
	
	$count = fwrite($socket, $res) or $this->shutdownBrokenConnection("Broken connection handle");
	fflush($socket)                or $this->shutdownBrokenConnection("Broken connection handle");
	
	return $count;
d329 1
a329 5
  	if (false) $size = $size;
  	
 	if(is_null($this->headers)) $this->parseHeaders();
	$data = fread($this->socket, $this->headers['content_length']);
	return $data;
d341 77
d422 9
a430 11
	if(!isset($this->protocol->socketHandler)) {
	  $channelName = $this->headers["redirect"];
	  $context = $this->headers["context"];
	  $len = strlen($context);
	  $len0 = chr(0xFF);
	  $len1 = chr($len&0xFF); $len>>=8;
	  $len2 = chr($len&0xFF);
	  $this->protocol->socketHandler=new java_SocketHandler($this->protocol, $this->getChannel($channelName));
	  $this->protocol->write("\177${len0}${len1}${len2}${context}");
	  $this->context = sprintf("X_JAVABRIDGE_CONTEXT: %s\r\n", $context);
	}
d515 6
d547 1
a547 9
    $compatibility = $this->client->RUNTIME["PARSER"]=="NATIVE"
	  ? (0103-JAVA_PREFER_VALUES)
	  : (0100+JAVA_PREFER_VALUES);
    
    if(is_int(JAVA_LOG_LEVEL)) {
      $compatibility |= 128 | (7 & JAVA_LOG_LEVEL)<<2;
    }
	$compatibility = chr ($compatibility);

d560 1
a560 1
	if(!java_getHeader('X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT', $_SERVER)&&
@


1.30
log
@Release-5-4-4
@
text
@a372 2
	  $hostVec = java_Protocol::getHost();
	  $this->host = $hostVec[0];
@


1.29
log
@eclipse birt integration
@
text
@d476 1
a477 1
      $errno = null; $errstr = null;
@


1.28
log
@Release-5-4-2
@
text
@d301 1
a301 1
	$res .= "Host: localhost\r\n";
d370 1
a370 1
	  throw new java_RuntimeException("no Pipe- or SocketContextServer available.");
@


1.27
log
@Release-5-4-1
@
text
@d509 1
a509 1
    if (JAVA_HOSTS && (!JAVA_SERVLET || (JAVA_SERVLET == "Off"))) {
d516 3
a518 4
    if(!java_getHeader('X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT', $_SERVER)
     && function_exists("java_get_default_channel") &&
	   (($defaultChannel=java_get_default_channel())||
		($defaultChannel=$this->java_get_simple_channel()))) {
@


1.26
log
@java autostart removed
@
text
@d80 3
d97 1
d142 2
d169 9
d199 4
d207 4
a210 1
	$socket = fsockopen("{$this->ssl}{$this->host}", $this->port, $errno, $errstr, 30);
a279 1

d300 1
a300 1
	$res .= " HTTP/1.0\r\n";
d311 4
a314 1
	$count = fwrite($socket, $res); fflush($socket);
d345 2
d385 7
a391 1
	$this->close();
d393 9
a401 2
	$this->protocol->flush();          // avoid ContextRunner wait timeout
	$this->protocol->handler->read(1); // dummy: avoid ack delay
@


1.25
log
@Backward compatibility with BEA WL 8.1
@
text
@d177 1
a177 1
	if(!is_null($pipe_dir) && ($host == "127.0.0.1" || (substr($host,0,9) == "localhost")))
d262 2
a263 2
	  ? chr(0103-JAVA_PREFER_VALUES)
	  : chr(0100+JAVA_PREFER_VALUES);
d267 1
d435 2
a436 1
  function createSimpleHandler($channelName) {
d452 1
a452 1
    if (!$peer) throw new java_ConnectException("Could not connect to the server $channelName. Error message: $errstr ($errno)\n");
d457 2
a458 2
	  ? chr(0103-JAVA_PREFER_VALUES)
	  : chr(0100+JAVA_PREFER_VALUES);
d463 2
d469 7
d479 2
a480 1
      ($defaultChannel=java_get_default_channel())) {
@


1.24
log
@Release 5.3.4
@
text
@d73 4
a77 2
	// keep alive, required by protocol
	$this->fwrite("<F p=\"A\" />");
d92 1
d157 3
d498 3
@


1.23
log
@Release 5.3.3
@
text
@d354 2
a355 1
	$this->protocol->flush(); // this write-write-read is necessary; otherwise the ContextFactory may time out
@


1.22
log
@Apache/IIS and JSR 223 integration
@
text
@d354 1
@


1.22.2.1
log
@Release 5.3.3
@
text
@a353 1
	$this->protocol->flush(); // this write-write-read is necessary; otherwise the ContextFactory may time out
@


1.21
log
@PR#2157571
@
text
@d47 10
d206 1
a206 3
	$ctx = array_key_exists('X_JAVABRIDGE_CONTEXT', $_SERVER)
			  ?$_SERVER['X_JAVABRIDGE_CONTEXT']
			  :null;
d372 1
a372 3
		array_key_exists('X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT', $_SERVER)
		   ?$_SERVER['X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT']
		   :null;
d458 1
a458 1
    if(!array_key_exists('X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT', $_SERVER)
@


1.20
log
@Release-5-2-2
@
text
@d173 1
a173 1
	if (!$socket) throw new java_RuntimeException("Could not connect to the J2EE server {$this->ssl}{$this->host}:{$this->port}. Please start it, for example with the command: \"java -jar JavaBridge.jar SERVLET:8080 3 JavaBridge.log\" or, if the back end has been compiled to native code, with \"modules/java SERVLET:8080 3 JavaBridge.log\". Error message: $errstr ($errno)\n");
d436 1
a436 1
    if (!$peer) throw new java_RuntimeException("Could not connect to the context server $channelName. Error message: $errstr ($errno)\n");
@


1.19
log
@Release-5-2-1
@
text
@d239 1
a239 1
	if(is_null($context) && JAVA_SERVLET=="On") $context = JAVA_SERVLET;
@


1.18
log
@Release-5-1-2
@
text
@d275 2
a276 1
	return fwrite($socket, $res); fflush($socket);
@


1.17
log
@Version-5-1-1
@
text
@d234 1
a234 1
	  ? $_SERVER['PHP_SELF']
d239 1
a239 1
	if(is_null($context)) $context = JAVA_SERVLET;
@


1.16
log
@Release-5-0-1
@
text
@d196 1
a196 3
	$ctx = (array_key_exists('HTTP_X_JAVABRIDGE_CONTEXT', $_SERVER)
			?$_SERVER['HTTP_X_JAVABRIDGE_CONTEXT']
			:(array_key_exists('X_JAVABRIDGE_CONTEXT', $_SERVER)
d198 1
a198 1
			  :null));
d363 1
a363 3
		(array_key_exists('HTTP_X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT', $_SERVER)
		 ?$_SERVER['HTTP_X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT']
		 :(array_key_exists('X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT', $_SERVER)
d365 1
a365 1
		   :null));
@


1.15
log
@Release-5-0-0
@
text
@d251 1
a251 2
	  : $compatibility = chr(0100+JAVA_PREFER_VALUES);
	$this->protocol->client->RUNTIME["COMPATIBILITY"]=$compatibility;
d441 5
a445 2
    $handler = new java_SocketHandler($this, new java_SocketChannel($peer, $this, 
																	$host, $channelName));
a446 4
    $compatibility = $this->client->RUNTIME["PARSER"]=="NATIVE"
      ? chr(0103)
      : $compatibility = chr(0100);
    $this->client->RUNTIME["COMPATIBILITY"]=$compatibility;
d580 2
a581 1
	$this->write("</R>");
@


1.14
log
@Release-4-3-3
@
text
@d58 1
a58 1
	fwrite($this->peer, $data);
d115 1
a115 1
	fwrite($this->peer, $data);
d138 1
a138 1
	$this->channel->fwrite($data);
d250 2
a251 2
	  ? chr(0103)
	  : $compatibility = chr(0100);
d278 1
a278 1
	fwrite($socket, $res); fflush($socket);
d288 1
a288 1
	while (($str = trim(fgets($this->socket, java_Client::RECV_SIZE)))) {
a482 6
  function sendAsyncData() {
	if(strlen($this->client->sendBuffer)>=java_client::SEND_SIZE*3/4) {
	  $this->handler->write($this->client->sendBuffer);
	  $this->client->sendBuffer=null;
	}
  }
@


1.13
log
@Release-4-3-2
@
text
@d49 3
a51 1
  function java_SocketChannel($peer, $protocol) {
d54 2
d65 2
a66 2
	fwrite($this->peer, "<F p=\"A\" />");
	fread($this->peer, 10); // <F p="A"/>
d174 1
d326 1
a326 1
	return new java_SocketChannel($peer, $this->protocol);
d427 1
a427 1
	  $peer = pfsockopen("127.0.0.1", $channelName, $errno, $errstr, 30);
d432 2
a433 1
		$peer = pfsockopen("unix://${channelName}", null, $errno, $errstr, 30);
d442 2
a443 1
    $handler = new java_SocketHandler($this, new java_SocketChannel($peer, $this));
d493 1
a493 4
	if(JAVA_CACHE_ENABLED) 
	  $this->sendData();
	else
	  $this->client->handler->sendData();
@


1.12
log
@Release-4-3-0
@
text
@d48 1
a48 1
  var $peer, $protocol;
d70 1
d82 3
a84 3
  var $peer, $peerr, $peerr_desc, $name;
  var $fifo, $fifor;
  var $iname, $oname;
d96 2
d127 1
a127 1
  var $protocol, $channel;
d148 2
a149 2
  var $headers;
  var $redirect;
d151 2
a152 2
  var $context, $ssl, $port; // used by reopen
  var $host; // used when creating a socket channel lazily. the port# is passed via X_JAVABRIDGE_CHANNEL
d154 1
a154 1
  var $socket; // we write to the socket directly and keep the pipe channel for later use
d165 1
d283 1
a283 1
	while ($str = trim(fgets($this->socket, java_Client::RECV_SIZE))) {
d308 2
d316 1
d319 1
a319 1
	if (!$peer) throw new java_RuntimeException("Could not connect to the context server {$handler->host}:{$channelName}. Error message: $errstr ($errno)\n");
d330 1
a330 1
	  $host = $hostVec[0];
d350 3
a352 3
  var $client;
  var $webContext;
  var $serverName;
d421 1
d434 1
a434 1
    if (!$peer) throw new java_RuntimeException("Could not connect to the context server {$handler->host}:{$channelName}. Error message: $errstr ($errno)\n");
@


1.11
log
@Release-4-2-1
@
text
@d44 3
d65 3
d77 3
d120 3
d141 3
d339 3
d409 3
d413 13
a425 5
    if(is_string($channelName)) 
      list($host, $channelName) = explode(":", $channelName);
    else
      $host = "127.0.0.1";
    $peer = pfsockopen($host, $channelName, $errno, $errstr, 30);
@


1.10
log
@Release-4-2-0
@
text
@d413 3
a415 1
    if(function_exists("java_get_default_channel") && ($defaultChannel=java_get_default_channel())) {
d449 4
a452 1
	$this->sendData();
@


1.9
log
@Release-4-1-8
@
text
@d56 2
a57 3
  function __destruct() {
	// required by protocol
	$this->protocol->flush();
d69 1
d125 3
a324 1
  var $send;
d434 2
a435 2
	$this->handler->write($this->send);
    $this->send=null;
d438 3
a440 3
	if(strlen($this->send)>=java_client::SEND_SIZE*3/4) {
	  $this->handler->write($this->send);
	  $this->send=null;
d444 7
a450 1
	$this->client->sendData();
d456 1
a456 1
    $this->send.=$data;
d464 29
a492 2
  function createObjectBegin($name, $createInstance) {
	$this->write(sprintf("<C v=\"%s\" p=\"%s\">", $name, $createInstance));
d495 2
a496 1
    $this->write("</C>");
d498 1
d500 25
a524 2
  function invokeBegin($object, $method, $property) {
 	$this->write(sprintf("<I v=\"%x\" m=\"%s\" p=\"%s\">",$object, $method, $property));
d527 2
a528 1
    $this->write("</I>");
d530 1
d533 6
d542 1
a542 1
    $this->write("</R>");
d546 3
a548 1
    $this->write(sprintf("<S v=\"%s\"/>",htmlspecialchars($name, ENT_COMPAT)));
d551 2
a552 2
    $c=$boolean?"T":"F";
    $this->write(sprintf("<B v=\"%s\"/>",$c));
d555 1
d563 2
a564 1
	$this->write(sprintf("<L v=\"%x\" p=\"O\"/>",$l));
d567 2
a568 1
    $this->write(sprintf("<D v=\"%.14e\"/>", $d));
d571 2
a572 5
    if(is_null($object)) {
      $this->write("<O v=\"\"/>");
    } else {
      $this->write(sprintf("<O v=\"%x\"/>", $object));
    }
d574 2
d577 1
a577 5
    if(is_null($object)) {
      $this->write(sprintf("<E v=\"\" m=\"%s\"/>", htmlspecialchars($str, ENT_COMPAT)));
    } else {
      $this->write(sprintf("<E v=\"%x\" m=\"%s\"/>",$object, htmlspecialchars($str, ENT_COMPAT)));
    }
d601 3
@


1.8
log
@Release-4-1-7
@
text
@d46 3
a48 5
  function java_SocketChannel($protocol, $host, $channel) {
  $this->protocol = $protocol;
	$this->peer = pfsockopen($host, $channel, $errno, $errstr, 30);
	if (!$this->peer) throw new java_RuntimeException("Could not connect to socket channel: $errstr ($errno)\n");
	stream_set_timeout($this->peer, -1);
a112 2
  var $handler; // the original HTTP handler
  var $hasSessionProxy;
d114 1
a114 7
  function getChannel($protocol, $handler, $channelName) {
	if($channelName[0]=='/') return $handler->channel->open($handler);
	return new java_SocketChannel($protocol, $handler->host, $channelName);
  }
  function java_SocketHandler($protocol, $handler, $channelName) {
	$this->handler = $handler;
	$this->channel = $this->getChannel($protocol, $handler, $channelName);
d116 1
a116 1
    $this->hasSessionProxy = $handler->hasSessionProxy;
a124 10

  function overrideRedirect() {
    if(!$this->hasSessionProxy) {
	  $this->protocol->flush();
	  $this->protocol->handler = new java_OverrideRedirectHandler($this->handler);
      $this->hasSessionProxy = true;
    }
  }

  function getSession() {}
a126 1
  var $hasSessionProxy;
d130 1
a130 1
  var $context, $ssl, $port; // used by reopen (overrideRedirect)
d141 1
a141 4
    if(array_key_exists('connection_close',$this->headers))
      fclose($this->socket);
    else
      fflush($this->socket);
d144 3
a146 1
	$socket = pfsockopen("{$this->ssl}{$this->host}", $this->port, $errno, $errstr, 30);
a147 1
	stream_set_timeout($socket, -1);
a150 1
    $this->hasSessionProxy = false; // will be set in getContext() if this is a (Fast-)CGI binary
a184 1
      $this->hasSessionProxy = true;
a187 3
  function getSession() {
	$this->redirect = "X_JAVABRIDGE_REDIRECT: 2\r\n";
  }
d240 1
a240 1
	$res .= " HTTP/1.1\r\n";
d248 1
a248 1
	$res .= chr(127);
a281 3
		if(!strncasecmp("CONNECTION", $str, 10)) {
		  $this->headers["connection_close"]=!strncasecmp("CLOSE", trim(substr($str, 11)), 5);
		}
d290 9
a298 1
  function overrideRedirect() {}
d300 3
d312 2
a313 2
	  $this->protocol->socketHandler=new java_SocketHandler($this->protocol, $this, $channelName);
	  $this->protocol->write("\077${len0}${len1}${len2}${context}");
d320 1
a320 39
class java_OverrideRedirectHandler extends java_HttpHandler {
  function java_OverrideRedirectHandler($handler) {
	$this->protocol = $handler->protocol;
	$this->ssl = $handler->ssl;
	$this->host = $handler->host;
	$this->port = $handler->port;
	$this->channel = $handler->channel;
	$this->context = $handler->context;
	$this->socket = $this->open();
  }
  /**
   * Open a new connection to the back end. Do not use pfsockopen as this would recycle the
   * persistent connection to the servlet instance waiting for this php instance to die
   * (see PhpJavaServlet#waitForContext() for details).
  */
  function open() {
	$socket = fsockopen("{$this->ssl}{$this->host}", $this->port, $errno, $errstr, 30);
	if (!$socket) throw new java_RuntimeException("Could not re-connect to the J2EE server {$this->ssl}{$this->host}:{$this->port}. Error message: $errstr ($errno)\n");
	stream_set_timeout($socket, -1);
	return $socket;
  }
  function close() {
      fclose($this->socket);
  }	
  function overrideRedirect() {
	// cannot happen
	throw new java_RuntimeException("protocol error: overrideRedirect called for a override redirect connection");
  }
  function redirect() {
	$this->protocol->handler = $this->protocol->socketHandler;
	$this->close();
  }				 
  function getSession() {
	$this->redirect = "X_JAVABRIDGE_REDIRECT: 1\r\n";
  }
  function getContext() {
	return $this->context;
  }
}
d389 29
d420 1
a420 1
	$this->handler = $this->createHttpHandler();
a425 3
  function overrideRedirect() {
	$this->handler->overrideRedirect();
  }
a535 3
  function getSession() {
	return $this->handler->getSession();
  }
@


1.7
log
@Release-4-1-0
@
text
@d105 1
a105 1
	stream_select($this->peerr_desc, $empty, $empty, 0x7FFFFFFF);
d116 1
d126 1
d137 5
a141 2
	$this->protocol->flush();
	$this->protocol->handler = new java_OverrideRedirectHandler($this->handler);
d144 1
a144 3
  function getSession() {
	throw new java_RuntimeException("getSession cannot be called w/o overrideRedirect");
  }
d147 1
d174 1
d209 1
d291 1
a291 3
		if(!strncasecmp("X_JAVABRIDGE_CONTEXT_DEFAULT", $str, 28)) {
		  $this->headers["kontext"]=trim(substr($str, 29));
		} else if(!strncasecmp("X_JAVABRIDGE_REDIRECT", $str, 21)) {
d418 25
a442 5
	  $ar = split(":|//", $overrideHosts);
	  $ssl              = (isset($ar[0]) && ($ar[0] == 's')) ? "ssl://" : "";
	  $host             = $ar[1];
	  $port             = $ar[2];
	  if(isset($ar[3])) $this->webContext = "/".$ar[3];
d568 2
a569 2
  function getSession($args) {
	return $this->handler->getSession($args);
@


1.6
log
@Release-3-0-8
@
text
@d66 1
a66 1
  function open() {
d91 2
d97 1
d104 2
a105 1
	stream_select($this->peerr_desc, $out=NULL, $ex=NULL, 30);
d166 1
d195 1
a195 1
  function getChannel() {
d257 1
a257 1
	$channel = $this->getChannel();
d354 1
@


1.5
log
@Release-4-0-6
@
text
@d339 1
a339 1
	$this->socket = $handler->open();
d341 13
@


1.4
log
@Release-4-0-5
@
text
@d81 1
d85 1
d154 1
a154 1
    if($this->headers['connection_close'])
@


1.3
log
@Release-4-0-2
@
text
@d152 4
a155 1
	fflush($this->socket);
d299 3
d363 9
a371 11
          if($override!='/') return $override;

          // fcgi: override for redirect
          return 
              (array_key_exists('HTTP_X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT', $_SERVER)
               ?$_SERVER['HTTP_X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT']
               :(array_key_exists('X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT', $_SERVER)
                 ?$_SERVER['X_JAVABRIDGE_OVERRIDE_HOSTS_REDIRECT']
                 :null));
      }
      return null;
@


1.2
log
@Release-4-0-2
@
text
@d45 1
a45 1
  var $peer;
d47 1
d60 1
@


1.1
log
@Further inclusions of 4.0.1 code extracted from src.tgz. Andre Felipe Machado.
@
text
@d44 61
d106 2
a107 1
  var $protocol, $sock;
d109 7
a115 1
  function java_SocketHandler($protocol, $sock) {
a116 1
	$this->sock = $sock;
d119 1
a119 1
      fwrite($this->sock, $data);
d122 1
a122 1
      return fread($this->sock, $size);
d126 3
a128 2
  function overrideRecirect() {
	$this->protocol->handler = createHttpHandler();
d132 1
a132 1
	throw new java_RuntimeException("Override-redirect not implemented in Protocol.php; write to php-java-bridge-users@@lists.sourceforge.net if you want to implement it. Please create and copy the \"java.so\" or \"php_java.dll\" to your PHP extension directory. Or move the java_session() call to the beginning of your PHP script.");
a136 1
  var $context;
d139 19
a157 1
  function java_HttpHandler($protocol, $sock) {
d159 5
a163 1
	$this->sock = $sock;
d183 4
d224 3
a226 1
	if(is_null($context)) $context = "/JavaBridge/JavaBridge.phpjavabridge";
d241 1
a241 1
	$sock = $this->sock;
d245 1
d250 1
a250 1
	$res .= " HTTP/1.0\r\n";
d256 1
d261 1
a261 1
	fwrite($sock, $res); fflush($sock);
d271 1
a271 1
	while ($str = trim(fgets($this->sock, java_Client::RECV_SIZE))) {
d290 4
a295 7
	// This implementation only supports the SocketContextServer.
	// If your J2EE server denies socket accept/resolve, install the
	// C based extension instead. It supports named pipe communication
	// and a HTTP tunnel. See the INSTALL document from the source
	// download archive how to compile the C extension.
 	if(!isset($this->headers["redirect"]))
 	  throw new java_RuntimeException("named-pipe communication not implemented in Protocol.php; write to php-java-bridge-users@@lists.sourceforge.net if you want to implement it. Please create and copy the \"java.so\" or \"php_java.dll\" to your PHP extension directory. Or allow your J2EE server to accept/resolve socket connections on the local interface.");
d298 2
a299 5
	if(is_null($this->headers)) $this->parseHeaders();
	$data = "";
	while(!feof($this->sock)) {
	  $data .= fread($this->sock, $size);
	}
d307 1
a307 1
	  $port = $this->headers["redirect"];
d313 1
a313 4
	  $sock = fsockopen($host, $port, $errno, $errstr, 30);
	  stream_set_timeout($sock, -1);
	  if (!$sock) die("$errstr ($errno)\n");
	  $this->protocol->socketHandler=new java_SocketHandler($this->protocol,$sock);
d315 1
d317 1
a317 1
	fclose($this->sock);
d321 25
d393 2
a394 4
	$this->client->RUNTIME["SERVER"] = $this->serverName = "$host:$port";
	$sock = fsockopen("${ssl}${host}", $port, $errno, $errstr, 30);
	if (!$sock) throw new java_RuntimeException("Could not connect to the J2EE server. Please start it, for example with the command: \"java -jar JavaBridge.jar SERVLET:8080 3 JavaBridge.log\" or, if the back end has been compiled to native code, with \"modules/java SERVLET:8080 3 JavaBridge.log\". Error message: $errstr ($errno)\n");
	return new java_HttpHandler($this, $sock);
@

