head	1.45;
access;
symbols
	Root_Release_7-0-1:1.43
	Release_7-0-1:1.43.0.6
	Release_7-0-0:1.43.0.4
	Root_Release_7-0-0:1.43
	Release-6-2-2:1.43.0.2
	Release-6-1-2-3:1.40
	Root_Release-6-1-2-3:1.40
	Release-6-1-2-2:1.40.0.6
	Root_Release-6-1-2-2:1.40
	debian_version_6_1_2_1-1:1.40
	upstream_version_6_1_2_1:1.40
	Release-6-1-2-1_new:1.40.0.4
	Root_Release-6-1-2-1_new:1.40
	Release-6-1-2-1:1.40.0.2
	Root_Release-6-1-2-1:1.40
	upstream_version_6_1_2:1.39
	debian_version_6_1_2-1:1.39
	Release-6-1-2:1.39.0.2
	Root_Release-6-1-2:1.39
	debian_version_6_1_1-2:1.38
	debian_version_6_1_1-1:1.38
	upstream_version_6_1_1:1.38
	Release-6-1-1:1.38.0.8
	Root_Release-6-1-1:1.38
	Release-6-0-4:1.38.0.6
	Root_Release-6-0-4:1.38
	Release-6-0-3_NEW:1.38.0.2
	Root_Release-6-0-3_NEW:1.38
	Release-6-0-3:1.38.0.4
	Root_Release-6-0-3:1.38
	Release-6-0-0:1.37.0.2
	Root_Release-6-0-0:1.38
	Release-5-5-4-1:1.36.0.4
	Root_Release-5-5-4-1:1.36
	Release-5-5-4:1.36.0.2
	Root_Release-5-5-4:1.36
	Release-5-5-3:1.35.0.2
	ROOT_Release-5-5-3:1.35
	Release-5-5-2:1.34.0.2
	Root_Release-5-5-2:1.34
	debian_version_5_5_1-1:1.33
	Release-5-5-1:1.33.0.2
	upstream_version_5_5_1:1.33
	ROOT_Release-5-5-1:1.33
	debian_version_5_5-1:1.32
	upstream_version_5_5:1.32
	ROOT_Release-5-5:1.32
	Release-5-5:1.32.0.2
	debian_version_5_4_4_2-3:1.31
	Release-5-4-4-2-1:1.31.0.2
	debian_version_5_4_4_2-2:1.29
	debian_version_5_4_4_2-1:1.29
	upstream_version_5_4_4_2:1.29
	debian_version_5_4_4_1-1:1.26
	upstream_version_5_4_4_1:1.26
	debian_version_5_4_4-1:1.26
	upstream_version_5_4_4:1.26
	Release-5-4-4:1.26.0.4
	Root_Release-5-4-4:1.26
	debian_version_5_4_3_2-1:1.25
	upstream_version_5_4_3_2:1.25
	Release_5-4-3-2:1.25.0.2
	Root_Release_5-4-3-2:1.25
	upstream_version_5_4_3_1:1.25
	debian_version_5_4_3_1-1:1.25
	Release-5-4-3:1.23.0.8
	Root_Release-5-4-3:1.23
	Root_Release-5-4-1:1.23
	Release-5-4-1:1.23.0.6
	Root_Release-5-4:1.23
	Release-5-4:1.23.0.4
	upstream_version_5_3_4:1.23
	debian_version_5_3_4-1:1.23
	ROOT_Release-5-3-4:1.23
	Release-5-3-4:1.23.0.2
	ROOT_Release-5-3-3:1.20
	Release-5-3-3:1.20.0.2
	debian_version_5_3_2_1_2-1:1.19
	upstream_version_5_3_2_1_2:1.19
	debian_version_5_3_2_1_1-1:1.18
	debian_version_5_3_2_1_1:1.18
	upstream_version_5_3_2_1_1:1.18
	Root_Release-5-3-2-1:1.18
	Release-5-3-2-1:1.18
	ROOT_RELEASE-5-3-2-1:1.18
	RELEASE-5-3-2-1:1.18.0.8
	Release-5-3-2:1.18.0.4
	Root_Release-5-3-2:1.18
	Root_Release-5-3-1:1.18
	Release-5-3-1:1.18.0.2
	Release-5-2-3-1:1.17.0.10
	Root_Release-5-2-3-1:1.17
	Release-5-2-2-4:1.17.0.8
	Root_Release-5-2-2-4:1.17
	Release-5-2-2-1:1.17.0.6
	Root_Release-5-2-2-1:1.17
	upstream_version_5_2_2:1.17
	debian_version_5_2_2-1:1.17
	Release-5-2-2:1.17.0.4
	ROOT_Release-5-2-2:1.17
	ROOT_Release-5-2-1:1.17
	Release-5-2-1:1.17.0.2
	Release-5-2-0:1.16.0.2
	ROOT_Release-5-2-0:1.16
	ROOT_Release-5-1-2:1.15
	Release-5-1-2:1.15.0.2
	Version-5-1-1:1.14.0.4
	ROOT_Version-5-1-1:1.14
	debian_version_5_1_0-1:1.14
	upstream_version_5_1_0:1.14
	ROOT_Release-5-1-0:1.14
	Release-5-1-0:1.14.0.2
	ROOT_Release-5-0-0:1.13
	Release-5-0-0:1.13.0.2
	Release-4-3-3:1.12.0.2
	ROOT_Release-4-3-3:1.12
	upstream_version_4_3_2:1.11
	debian_version_4_3_2-1:1.11
	ROOT_Release-4-3-2:1.11
	Release-4-3-2:1.11.0.2
	Release-4-3-1:1.9.0.2
	ROOT_Release-4-3-1:1.9
	debian_version_4_3_0-1:1.8
	upstream_version_4_3_0:1.8
	ROOT_Release-4-3-0:1.8
	Release-4-3-0:1.8.0.2
	debian_version_4_2_2-1:1.6
	upstream_version_4_2_2:1.6
	Release-4-1-2:1.4.0.2
	Release-4-0-8:1.3.0.4
	debian_version_4_0_8a-1:1.3
	upstream_version_4_0_8a:1.3
	jostb-debian-ubuntu-patch:1.3.0.2
	debian_version_4_0_8-1:1.3
	upstream_version_4_0_8:1.3
	debian_version_4_0_7-1:1.3
	upstream_version_4_0_7:1.3
	debian_version_4_0_6-1:1.3
	upstream_version_4_0_6:1.3
	debian_version_4_0_2-1:1.2
	upstream_version_4_0_2:1.2
	Release-4-0-2_Root:1.2
	Release-4-0-2:1.2.0.2
	upstream_version_4_0_1:1.1
	debian_version_4_0_1-2:1.1;
locks; strict;
comment	@# @;


1.45
date	2017.04.09.14.00.07;	author jost_boekemeier;	state dead;
branches;
next	1.44;

1.44
date	2017.03.02.17.40.37;	author jost_boekemeier;	state Exp;
branches;
next	1.43;

1.43
date	2017.01.30.23.12.18;	author jost_boekemeier;	state Exp;
branches;
next	1.42;

1.42
date	2017.01.30.22.28.58;	author jost_boekemeier;	state Exp;
branches;
next	1.41;

1.41
date	2010.09.04.11.17.11;	author jost_boekemeier;	state Exp;
branches;
next	1.40;

1.40
date	2010.05.02.11.49.36;	author jost_boekemeier;	state Exp;
branches;
next	1.39;

1.39
date	2010.04.12.16.17.15;	author jost_boekemeier;	state Exp;
branches;
next	1.38;

1.38
date	2010.02.28.15.20.43;	author jost_boekemeier;	state Exp;
branches;
next	1.37;

1.37
date	2010.02.18.16.31.00;	author jost_boekemeier;	state Exp;
branches;
next	1.36;

1.36
date	2009.10.17.17.40.23;	author jost_boekemeier;	state Exp;
branches;
next	1.35;

1.35
date	2009.09.27.17.39.22;	author jost_boekemeier;	state Exp;
branches;
next	1.34;

1.34
date	2009.09.01.17.25.18;	author jost_boekemeier;	state Exp;
branches;
next	1.33;

1.33
date	2009.08.22.16.37.06;	author jost_boekemeier;	state Exp;
branches;
next	1.32;

1.32
date	2009.07.25.13.56.02;	author jost_boekemeier;	state Exp;
branches;
next	1.31;

1.31
date	2009.07.04.14.55.19;	author jost_boekemeier;	state Exp;
branches;
next	1.30;

1.30
date	2009.07.04.14.09.55;	author jost_boekemeier;	state Exp;
branches;
next	1.29;

1.29
date	2009.04.13.11.32.02;	author jost_boekemeier;	state Exp;
branches;
next	1.28;

1.28
date	2009.04.12.12.10.23;	author jost_boekemeier;	state Exp;
branches;
next	1.27;

1.27
date	2009.04.11.14.17.16;	author jost_boekemeier;	state Exp;
branches;
next	1.26;

1.26
date	2009.03.08.14.34.47;	author jost_boekemeier;	state Exp;
branches;
next	1.25;

1.25
date	2009.01.20.22.29.17;	author jost_boekemeier;	state Exp;
branches;
next	1.24;

1.24
date	2009.01.06.17.05.11;	author jost_boekemeier;	state Exp;
branches;
next	1.23;

1.23
date	2008.11.30.17.08.48;	author jost_boekemeier;	state Exp;
branches;
next	1.22;

1.22
date	2008.11.27.21.00.26;	author jost_boekemeier;	state Exp;
branches;
next	1.21;

1.21
date	2008.11.15.14.27.51;	author jost_boekemeier;	state Exp;
branches;
next	1.20;

1.20
date	2008.10.26.15.23.02;	author jost_boekemeier;	state Exp;
branches
	1.20.2.1;
next	1.19;

1.19
date	2008.10.12.16.15.53;	author jost_boekemeier;	state Exp;
branches;
next	1.18;

1.18
date	2008.10.03.15.48.14;	author jost_boekemeier;	state Exp;
branches;
next	1.17;

1.17
date	2008.03.22.12.04.56;	author jost_boekemeier;	state Exp;
branches;
next	1.16;

1.16
date	2008.02.10.15.38.21;	author jost_boekemeier;	state Exp;
branches;
next	1.15;

1.15
date	2008.02.09.19.49.44;	author jost_boekemeier;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2008.01.21.19.23.30;	author jost_boekemeier;	state Exp;
branches;
next	1.13;

1.13
date	2008.01.06.20.59.20;	author jost_boekemeier;	state Exp;
branches;
next	1.12;

1.12
date	2007.12.28.13.56.42;	author jost_boekemeier;	state Exp;
branches;
next	1.11;

1.11
date	2007.12.09.15.13.12;	author jost_boekemeier;	state Exp;
branches;
next	1.10;

1.10
date	2007.12.04.22.07.09;	author jost_boekemeier;	state Exp;
branches;
next	1.9;

1.9
date	2007.12.02.18.05.08;	author jost_boekemeier;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.30.16.07.52;	author jost_boekemeier;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.19.10.12.27;	author jost_boekemeier;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.22.12.54.43;	author jost_boekemeier;	state Exp;
branches;
next	1.5;

1.5
date	2007.07.19.16.19.19;	author jost_boekemeier;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.13.19.51.48;	author jost_boekemeier;	state Exp;
branches;
next	1.3;

1.3
date	2007.03.25.16.28.21;	author jost_boekemeier;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.19.13.03.17;	author jost_boekemeier;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.12.20.27.55;	author andremachado;	state Exp;
branches;
next	;

1.15.2.1
date	2008.02.10.15.41.50;	author jost_boekemeier;	state Exp;
branches;
next	;

1.20.2.1
date	2008.11.09.17.01.41;	author jost_boekemeier;	state Exp;
branches;
next	1.20.2.2;

1.20.2.2
date	2008.11.10.17.54.17;	author jost_boekemeier;	state Exp;
branches;
next	1.20.2.3;

1.20.2.3
date	2008.11.15.14.22.31;	author jost_boekemeier;	state Exp;
branches;
next	;


desc
@@


1.45
log
@Release-7.1.1
@
text
@<?php /*-*- mode: php; tab-width:4 -*-*/

  /** java_Proxy.php -- contains the main interface
   * 
   * Copyright (C) 2003-2007 Jost Boekemeier
   * 
   * This file is part of the PHP/Java Bridge.
   * 
   * The PHP/Java Bridge ("the library") is free software; you can
   * redistribute it and/or modify it under the terms of the GNU General
   * Public License as published by the Free Software Foundation; either
   * version 2, or (at your option) any later version.
   * 
   * The library is distributed in the hope that it will be useful, but
   * WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   * General Public License for more details.
   * 
   * You should have received a copy of the GNU General Public License
   * along with the PHP/Java Bridge; see the file COPYING.  If not, write to the
   * Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   * 02111-1307 USA.
   * 
   * Linking this file statically or dynamically with other modules is
   * making a combined work based on this library.  Thus, the terms and
   * conditions of the GNU General Public License cover the whole
   * combination.
   * 
   * As a special exception, the copyright holders of this library give you
   * permission to link this library with independent modules to produce an
   * executable, regardless of the license terms of these independent
   * modules, and to copy and distribute the resulting executable under
   * terms of your choice, provided that you also meet, for each linked
   * independent module, the terms and conditions of the license of that
   * module.  An independent module is a module which is not derived from
   * or based on this library.  If you modify this library, you may extend
   * this exception to your version of the library, but you are not
   * obligated to do so.  If you do not wish to do so, delete this
   * exception statement from your version. 
   *
   * @@author     Jost Boekemeier
   * @@license    GPL
   * @@link       http://php-java-bridge.sf.net
   */

require_once(java_get_base()."/Client.inc");

/**
 * Implemented by JavaException and Java.
 * @@see Java
 * @@see JavaException
 * @@access public
 */
interface java_JavaType {};

/** Global flag is set if a client exists */
$java_initialized = false;

/**
 * @@access private
 */
function __javaproxy_Client_getClient() {
  static $client = null;
  if(!is_null($client)) return $client;
  
  if (function_exists("java_create_client")) $client = java_create_client();
  else {
	global $java_initialized;
	$client=new java_Client();
	$java_initialized = true;
  }
  
  return $client;
}

/**
 * Return the last stored Java exception. 

 * The last stored Java exception is the first undeclared
 * java.lang.RuntimeException or java.lang.Error after the last
 * java_last_exception_clear() invocation or, if no
 * RuntimeException/Error occured, the last declared exception
 * reported via the script engine's try/catch mechanism.
 * 
 * Useful for script engines which do not support try/catch or if
 * you want to handle java.lang.RuntimeException or java.lang.Error
 * in your PHP code.
 * <br>
 * Note the distinction between java.lang.Exception, which can be
 * caught on PHP level, and
 * java.lang.RuntimeException/java.lang.Error, which raise a fatal PHP
 * error at the end of the php script (unless the error condition is
 * cleared using java_last_exception_clear()).
 * <br>
 * java.lang.Exception is a typical exception in your business logic,
 * java.lang.RuntimeException is an exception caused by a bug in your
 * program, for example java.lang.NullPointerException.
 * java.lang.Error marks a serious problem, for example
 * java.lang.OutOfMemoryError.
 * 
 * Example:
 * <code>
 * define ("JAVA_PREFER_VALUES", false);
 * require_once("http://localhost:8080/JavaBridge/java/Java.inc");
 * try {
 * new java("java.lang.String", null); // raises java.lang.RuntimeException
 * assert (is_null(java_last_exception_get());	
 * } catch (JavaException $e) {
 *	echo $e;
 * }
 * </code>
 *
 * 
 * @@return mixed The last stored Java exception or null
 * @@access public
 * @@see java_last_exception_clear()
 * @@see JAVA_PREFER_VALUES
 */
function java_last_exception_get() {
  $client=__javaproxy_Client_getClient();
  return $client->invokeMethod(0, "getLastException", array());
}
/**
 * Clear a stored Java exception.
 *  
 * @@access public
 * @@see java_last_exception_get()
 */
function java_last_exception_clear() {
  $client=__javaproxy_Client_getClient();
  $client->invokeMethod(0, "clearLastException", array());
}
/**
 * Only for internal use
 * @@access private
 */
function java_values_internal($object) {
  if(!$object instanceof java_JavaType) return $object;
  $client=__javaproxy_Client_getClient();
  return $client->invokeMethod(0, "getValues", array($object));
}
/**
 * Invoke a method dynamically. 
 
 * Example:
 * <code>
 * java_invoke(new java("java.lang.String","hello"), "toString", array())
 * </code>
 *
 *<br> Any declared exception can be caught by PHP code. <br>
 * Exceptions derived from java.lang.RuntimeException or Error should
 * not be caught unless declared in the methods throws clause -- OutOfMemoryErrors cannot be caught at all,
 * even if declared.
 *
 * @@param object A java object or type
 * @@param string A method string
 * @@param array A argument array
 */
function java_invoke($object, $method, $args) {
  $client=__javaproxy_Client_getClient();
  $id = ($object==null) ? 0 : $object->__java;
  return $client->invokeMethod($id, $method, $args);
}

/**
 * Unwrap a Java object.
 * 
 * Fetches the PHP object which has been wrapped by java_closure(). Example:
 * <code>
 * class foo { function __toString() {return "php"; } function toString() {return "java";} }
 * $foo = java_closure(new foo());
 * echo $foo;
 * => java;
 * $foo = java_unwrap($foo);
 * echo $foo;
 * => php
 * </code>
 */
function java_unwrap ($object) {
  if(!$object instanceof java_JavaType) throw new java_IllegalArgumentException($object);
  $client=__javaproxy_Client_getClient();
  return $client->globalRef->get($client->invokeMethod(0, "unwrapClosure", array($object)));
}  

/**
 * Evaluate a Java object.
 * 
 * Evaluate a object and fetch its content, if possible. Use java_values() to convert a Java object into an equivalent PHP value.
 *
 * A java array, Map or Collection object is returned
 * as a php array. An array, Map or Collection proxy is returned as a java array, Map or Collection object, and a null proxy is returned as null. All values of java types for which a primitive php type exists are returned as php values. Everything else is returned unevaluated. Please make sure that the values do not not exceed
 * php's memory limit. Example:
 *
 * 
 * <code>
 * $str = new java("java.lang.String", "hello");
 * echo java_values($str);
 * => hello
 * $chr = $str->toCharArray();
 * echo $chr;
 * => [o(array_of-C):"[C@@1b10d42"]
 * $ar = java_values($chr);
 * print $ar;
 * => Array
 * print $ar[0];
 * => [o(Character):"h"]
 * print java_values($ar[0]);
 * => h
 * </code>
 * 
 * @@see java_closure()
 * @@param object  A java object or type.
 * @@access public
 */
function java_values($object) {
  return java_values_internal($object);
}
/**
 * Only for internal use.
 * @@access private
 */
function java_reset() {
  $client=__javaproxy_Client_getClient();
  return $client->invokeMethod(0, "reset", array());
}
/**
 * Only for internal use
 * @@access private
 */
function java_inspect_internal($object) {
  if(!$object instanceof java_JavaType) throw new java_IllegalArgumentException($object);
  $client=__javaproxy_Client_getClient();
  return $client->invokeMethod(0, "inspect", array($object));
}
/**
 * Returns the contents (public fields, public methods, public
 * classes) of object as a string.
 *
 * Example:
 * <code>
 * echo java_inspect(java_context());
 * </code>
 * @@param object A java object or type.
 * @@access public
 */
function java_inspect($object) {
  return java_inspect_internal($object);
}
/**
 * Set the java file encoding, for example UTF-8 or ASCII.
 *
 * Needed
 * because php does not support unicode. All string to byte array
 * conversions use this encoding. Example: 
 * <code>
 * java_set_file_encoding("ISO-8859-1");
 * </code>
 *
 * @@param string A valid file.encoding string. Please see your Java
 * <code>file.encoding</code> documentation for a list of valid
 * encodings.
 * @@access public
 */
function java_set_file_encoding($enc) {
  $client=__javaproxy_Client_getClient();
  return $client->invokeMethod(0, "setFileEncoding", array($enc));
}
/**
 * Only for internal use
 * @@access private
 */
function java_instanceof_internal($ob, $clazz) {
  if(!$ob instanceof java_JavaType) throw new java_IllegalArgumentException($ob);
  if(!$clazz instanceof java_JavaType) throw new java_IllegalArgumentException($clazz);
  $client=__javaproxy_Client_getClient();
  return $client->invokeMethod(0, "instanceOf", array($ob, $clazz));
}
/**
 * Tests if object is an instance of clazz.
 *
 * Example: 
 * <code>
 * return($o instanceof Java && $c instanceof Java && java_instanceof($o, $c)); 
 * </code>
 * @@param object A java object
 * @@param object A java object or type.
 * @@access public
 */
function java_instanceof($ob, $clazz) {
  return java_instanceof_internal($ob, $clazz);
}
/**
 * Only for internal use
 * @@access private
 */
function java_cast_internal($object, $type) { 
    if(!$object instanceof java_JavaType) {
      switch($type[0]) {
	case 'S': case 's':
	  return (string)$object;
	case 'B': case 'b':
	  return (boolean)$object;
	case 'L': case 'I': case 'l': case 'i':
	  return (integer)$object;
	case 'D': case 'd': case 'F': case 'f':
	  return (float) $object;
	case 'N': case 'n':
	  return null;
	case 'A': case 'a':
	  return (array)$object;
	case 'O': case 'o':
	  return (object)$object;
      }
    }    
    return $object->__cast($type); 
}
/**
 * Converts the java object obj into a PHP value. 
 *
 * This procedure converts the Java argument and then calls java_values() to fetch
 * its content. Use java_values() if the conversion is not necessary.
 * 
 * The second argument
 * must be [s]tring, [b]oolean, [i]nteger, [f]loat or [d]ouble,
 * [a]rray, [n]ull or [o]bject (which does nothing).
 *
 * <br>
 * Example:
 * <code>
 * $str = new java("java.lang.String", "12");
 * echo is_string ($str) ? "#t":"#f";
 * => #f
 * $phpString = (string)$str;
 * echo is_string ($phpString) ? "#t":"#f";
 * => #t
 * $phpNumber = (integer)(string)$str;
 * echo $phpNumber;
 * => 12
 * $phpNumber2 = java_cast($str, "integer");
 * echo $phpNumber2;
 * => 12
 * </code>
 * @@see java_values()
 * @@param object A java object
 * @@param string A PHP type description, either [Ss]tring, [Bb]oolean, [Ll]ong or [Ii]nteger, [Dd]ouble or [Ff]loat, [Nn]ull, [Aa]rray, [Oo]bject.
 * @@access public
 */
function java_cast($object, $type) { 
  return java_cast_internal($object, $type);
}

/**
 * Set the library path. This function should not be used in new programs.
 * Please use <a href="http://php-java-bridge.sourceforge.net/pjb/webapp.php>tomcat or jee hot deployment</a> instead.
 * @@access private
 */
function java_require($arg) {
	trigger_error('java_require() not supported anymore. Please use <a href="http://php-java-bridge.sourceforge.net/pjb/webapp.php>tomcat or jee hot deployment</a> instead', E_USER_WARNING);
  $client=__javaproxy_Client_getClient();
  return $client->invokeMethod(0, "updateJarLibraryPath", 
						array($arg, ini_get("extension_dir")));
}
/**
 * @@access private
 */
function java_get_lifetime ()
{
  $session_max_lifetime=ini_get("session.gc_maxlifetime");
  return $session_max_lifetime ? (int)$session_max_lifetime : 1440;
}
  
/**
 * Only for internal use
 * @@access private
 */
function java_session_array($args) {
  $client=__javaproxy_Client_getClient();
  if(!isset($args[0])) $args[0]=null;

  if(!isset($args[1])) 
    $args[1]=0; // ISession.SESSION_GET_OR_CREATE
  elseif ($args[1]===true)
    $args[1]=1; // ISession.SESSION_CREATE_NEW
  else
    $args[1]=2; // ISession.SESSION_GET
    
  if(!isset($args[2])) {
	$args[2] = java_get_lifetime ();
  }
  return $client->getSession($args);
}
/**
 * Return a session handle.
 *
 * When java_session() is called without 
 * arguments, the session is shared with java.
 * Example: 
 * <code>
 * java_session()->put("key", new Java("java.lang.Object"));
 * [...]
 * </code>
 * The java components (jsp, servlets) can retrieve the value, for
 * example with:
 * <code>
 * getSession().getAttribute("key");
 * </code>
 *
 * When java_session() is called with a session name, the session
 * is not shared with java and no cookies are set. Example:
 * <code>
 * java_session("myPublicApplicationStore")->put("key", "value");
 * </code>
 *
 * When java_session() is called with a second argument set to true,
 * a new session is allocated, the old session is destroyed if necessary.
 * Example:
 * <code>
 * java_session(null, true)->put("key", "val");
 * </code>
 *
 * The optional third argument specifies the default lifetime of the session, it defaults to <code> session.gc_maxlifetime </code>. The value 0 means that the session never times out.
 *
 * The synchronized init() and onShutdown() callbacks from
 * java_context() and the JPersistenceAdapter (see
 * JPersistenceAdapter.php from the php_java_lib directory) may also
 * be useful to load a Java singleton object after the JavaBridge
 * library has been initialized, and to store it right before the web
 * context or the entire JVM will be terminated.
 *
 * @@access public
 * @@see java_
 * @@see java_context()
 */
function java_session() {
  return java_session_array(func_get_args());
}

/**
 * Returns the name of the back-end or null, if the back-end is not running.
 *
 * Example:
 * <code>
 * $backend = java_server_name();
 * if(!$backend) wakeup_administrator("back-end not running");
 * echo "Connected to the back-end: $backend\n";
 * </code>
 * @@access public
*/
function java_server_name() {
  try {
    $client=__javaproxy_Client_getClient();
    return $client->getServerName();
  } catch (java_ConnectException $ex) {
    return null;
  }
}

/**
 * Returns the jsr223 script context handle.
 *
 * Exposes the bindings from the ENGINE_SCOPE to PHP scripts. Values
 * set with engine.set("key", val) can be fetched from PHP with
 * java_context()->get("key"). Values set with
 * java_context()->put("key", java_closure($val)) can be fetched from
 * Java with engine.get("key"). The get/put methods are convenience shortcuts for getAttribute/setAttribute. Example:
 * <code>
 * engine.put("key1", 2);
 * engine.eval("<?php java_context()->put("key2", 1+(int)(string)java_context()->get('key1'));?>"); 
 * System.out.println(engine.get("key2"));
 *</code>
 * 
 * A synchronized init() procedure can be called from the context to initialize a library once, and a shutdown hook can be registered to destroy the library before the (web-) context is destroyed. The init hook can be written in PHP, but the shutdown hook must be written in Java. Example:
 * <code>
 * function getShutdownHook() { return java("myJavaHelper")->getShutdownHook(); }
 * function call() { // called by init()
 *   ...
 *   // register shutdown hook
 *   java_context()->onShutdown(getShutdownHook());
 * }
 * java_context()->init(java_closure(null, null, java("java.util.concurrent.Callable")));
 * </code>
 * 
 * It is possible to access implicit web objects (the session, the
 * application store etc.) from the context. Example:
 * <code>
 * $req = $ctx->getHttpServletRequest();
 * $res = $ctx->getHttpServletResponse();
 * $servlet = $ctx->getServlet();
 * $config = $ctx->getServletConfig();
 * $context = $ctx->getServletContext();
 * </code>
 *
 * The global bindings (shared with all available script engines) are
 * available from the GLOBAL_SCOPE, the script engine bindings are
 * available from the ENGINE_SCOPE. Example
 *
 * <code>
 * define ("ENGINE_SCOPE", 100);
 * define ("GLOBAL_SCOPE", 200);
 * echo java_context()->getBindings(ENGINE_SCOPE)->keySet();
 * echo java_context()->getBindings(GLOBAL_SCOPE)->keySet();
 * </code>
 *
 * Furthermore the context exposes the java continuation to PHP scripts.
 * Example which closes over the current environment and passes it back to java:
 * <code>
 * define ("ENGINE_SCOPE", 100);
 * $ctx = java_context();
 * if(java_is_false($ctx->call(java_closure()))) die "Script should be called from java";
 * </code>
 * 
 * A second example which shows how to invoke PHP methods without the JSR 223 getInterface() and invokeMethod() 
 * helper procedures. The Java code can fetch the current PHP continuation from the context using the key "php.java.bridge.PhpProcedure":
 * <code>
 * String s = "<?php class Runnable { function run() {...} };
 *            // example which captures an environment and 
 *            // passes it as a continuation back to Java
 *            $Runnable = java('java.lang.Runnable');
 *            java_context()->call(java_closure(new Runnable(), null, $Runnable));
 *            ?>";
 * ScriptEngine e = new ScriptEngineManager().getEngineByName("php-invocable");
 * e.eval (s);
 * Thread t = new Thread((Runnable)e.get("php.java.bridge.PhpProcedure"));
 * t.join ();
 * ((Closeable)e).close ();
 * </code>
 *
 * @@access public
 * @@see java_session()
 */
function java_context() {
  $client=__javaproxy_Client_getClient();
  return $client->getContext();
}
/**
 * Only for internal use
 * @@access private
 */
function java_closure_array($args) {
  if(isset($args[2]) && ((!($args[2] instanceof java_JavaType))&&!is_array($args[2])))
	throw new java_IllegalArgumentException($args[2]);

  $client=__javaproxy_Client_getClient();
  $args[0] = isset($args[0]) ? $client->globalRef->add($args[0]) : 0;

  /* The following is identical to 
   return $client->invokeMethod(0, "makeClosure", $args); 
   except that the ref (args[0]) must be an unsigned value */
  $client->protocol->invokeBegin(0, "makeClosure");
  $n = count($args);
  $client->protocol->writeULong($args[0]); // proper PHP "long" -> Java 64 bit value conversion
  for($i=1; $i<$n; $i++) {
	$client->writeArg($args[$i]);
  }
  $client->protocol->invokeEnd();
  $val = $client->getResult();
  return $val;
}
/**
 * Wraps a PHP environment.
 * 
 * Closes over the php environment and packages it up as a java
 * class. Use java_closure() to convert a PHP object into an equivalent Java object.
 *
 * Example: 
 * <code>
 * function toString() {return "helloWorld";};
 * $object = java_closure();
 * echo "Java says that PHP says: $object\n";
 * </code>
 *
 * When a php instance is supplied as an argument, the instance will be used
 * instead. When a string or key/value map is supplied as a second argument,
 * the java procedure names are mapped to the php procedure names. Example:
 * <code>
 * function hello() {return "hello";};
 * echo (string)java_closure(null, "hello");
 * </code>
 * 
 * When an array of java interfaces is supplied as a third argument,
 * the environment must implement these interfaces.
 * Example:
 * <code>
 * class Listener {
 *   function actionPerformed($actionEvent) {
 *       ...
 *     }
 * }
 * function getListener() {
 *     return java_closure(new Listener(), null, array(new Java("java.awt.event.ActionListener")));
 * }
 * </code>
 * @@see java_values()
 * @@access public
 */
function java_closure() {
  return java_closure_array(func_get_args());
}

/**
 * Enters stream mode (asynchronuous protocol). 
 *
 * The statements are
 * sent to the back-end in one XML stream.  
 *
 * Use this protocol
 * mode when you have a large number of set operations and you don't
 * expect an exception. Any exception raised during stream mode is
 * reported when java_end_document() is called.
 * @@deprecated
 * @@access private
 */
function java_begin_document() {
}
/**
 * Ends stream mode. 
 * 
 * Fires a JavaException if any statement executed during
 * stream mode raised an exception.
 * @@deprecated
 * @@access private
 */
function java_end_document() {
}

/**
 * @@access private
 */
class java_JavaProxy implements java_JavaType {
  public $__serialID, $__java;
  public $__signature;
  public $__client;
  public $__tempGlobalRef;

  function __construct($java, $signature){ 
	$this->__java=$java;
	$this->__signature=$signature;
	$this->__client = __javaproxy_Client_getClient();
  }
  function __cast($type) {
	return $this->__client->cast($this, $type);
  }
  function __sleep() {
	$args = array($this, java_get_lifetime());
	$this->__serialID = $this->__client->invokeMethod(0, "serialize", $args);
	$this->__tempGlobalRef = $this->__client->globalRef;
	if(JAVA_DEBUG) echo "proxy sleep called for $this->__java, $this->__signature\n";
    return array("__serialID", "__tempGlobalRef");
  }
  function __wakeup() {
	$args = array($this->__serialID, java_get_lifetime());
	if(JAVA_DEBUG) echo "proxy wakeup called for $this->__java, $this->__signature\n";
	$this->__client = __javaproxy_Client_getClient();
	if($this->__tempGlobalRef)
		$this->__client->globalRef = $this->__tempGlobalRef;
	$this->__tempGlobalRef = null;
    $this->__java = $this->__client->invokeMethod(0, "deserialize", $args);
  }
  function __destruct() { 
	if(isset($this->__client)) 
	  $this->__client->unref($this->__java);
  }
  function __get($key) { 
    return $this->__client->getProperty($this->__java, $key);
  }
  function __set($key, $val) {
    $this->__client->setProperty($this->__java, $key, $val);
  }
  function __call($method, $args) { 
    return $this->__client->invokeMethod($this->__java, $method, $args);
  }
  function __toString() {
    try {
      return $this->__client->invokeMethod(0,"ObjectToString",array($this));
    } catch (JavaException $ex) {
	  trigger_error("Exception in Java::__toString(): ". java_truncate((string)$ex), E_USER_WARNING);
	  return "";
    }
  }
}

/**
 * @@access private
 */
class java_objectIterator implements Iterator {
  private $var;

  function __construct($javaProxy) {
	$this->var = java_cast ($javaProxy, "A");
  }
  function rewind() {
	reset($this->var);
  }
  function valid() {
	return $this->current() !== false;
  }
  function next() {
	return next($this->var);
  }
  function key() {
	return key($this->var);
  }
  function current() {
	return current($this->var);
  }
}
/**
 * @@access private
 */
class java_IteratorProxy extends java_JavaProxy implements IteratorAggregate {
  function getIterator() {
	return new java_ObjectIterator($this);
  }
}
/**
 * @@access private
 */
class java_ArrayProxy extends java_IteratorProxy implements ArrayAccess {
  function offsetExists($idx) {
	$ar = array($this, $idx);
    return $this->__client->invokeMethod(0,"offsetExists", $ar);
  }  
  function offsetGet($idx) {
	$ar = array($this, $idx);
    return $this->__client->invokeMethod(0,"offsetGet", $ar);
  }
  function offsetSet($idx, $val) {
	$ar = array($this, $idx, $val);
    return $this->__client->invokeMethod(0,"offsetSet", $ar);
  }
  function offsetUnset($idx) {
	$ar = array($this, $idx);
    return $this->__client->invokeMethod(0,"offsetUnset", $ar);
  }
}
/**
 * @@access private
 */
class java_ExceptionProxy extends java_JavaProxy {
  function __toExceptionString($trace) {
	$args = array($this, $trace);
	return $this->__client->invokeMethod(0,"ObjectToString",$args);
  }
}
/**
 * This decorator/bridge overrides all magic methods and delegates to
 * the proxy so that it may handle them or pass them on to the
 * back-end.  The actual implementation of this bridge depends on the
 * back-end response, see PROTOCOL.TXT: "p: char ([A]rray,
 * [C]ollection, [O]bject, [E]xception)". See the getProxy() and
 * create() methods in Client.php and writeObject() and getType() in
 * Response.java.<p>
 *
 * The constructor is an exception. If it is called, the user has
 * already allocated Java, so that $wrap is false and the proxy is
 * returned and set into $__delegate. 
 * @@access private
 * @@see java_InternalJava
*/
abstract class java_AbstractJava implements IteratorAggregate,ArrayAccess,java_JavaType {
  public $__client;
  
  public $__delegate;

  public $__serialID;

  public $__factory;
  public $__java, $__signature;

  public $__cancelProxyCreationTag;

  function __createDelegate() {
	$proxy = $this->__delegate = 
	  $this->__factory->create($this->__java, $this->__signature);
	$this->__java = $proxy->__java;
	$this->__signature = $proxy->__signature;
  }
  function __cast($type) {
	if(!isset($this->__delegate)) $this->__createDelegate();
	return $this->__delegate->__cast($type);
  }
  function __sleep() {
	if(!isset($this->__delegate)) $this->__createDelegate();
	$this->__delegate->__sleep();
	return array("__delegate");
  }
  function __wakeup() {
	if(!isset($this->__delegate)) $this->__createDelegate();
	$this->__delegate->__wakeup();
	$this->__java = $this->__delegate->__java;
	$this->__client = $this->__delegate->__client;
  }
  function __get($key) { 
 	if(!isset($this->__delegate)) $this->__createDelegate();
	return $this->__delegate->__get($key);
  }
  function __set($key, $val) {
 	if(!isset($this->__delegate)) $this->__createDelegate();
	$this->__delegate->__set($key, $val);
  }
  function __call($method, $args) { 
	if(!isset($this->__delegate)) $this->__createDelegate();
    return $this->__delegate->__call($method, $args);
  }
  function __toString() {
	if(!isset($this->__delegate)) $this->__createDelegate();
    return $this->__delegate->__toString();
  }

  // The following functions are for backward compatibility
  function getIterator() {
	if(!isset($this->__delegate)) $this->__createDelegate();
	if(func_num_args()==0) return $this->__delegate->getIterator();
	$args = func_get_args(); return $this->__call("getIterator", $args);
  }
  function offsetExists($idx) {
	if(!isset($this->__delegate)) $this->__createDelegate();
	if(func_num_args()==1) return $this->__delegate->offsetExists($idx);
	$args = func_get_args(); return $this->__call("offsetExists", $args);
  }
  function offsetGet($idx) {
	if(!isset($this->__delegate)) $this->__createDelegate();
	if(func_num_args()==1) return $this->__delegate->offsetGet($idx);
	$args = func_get_args(); return $this->__call("offsetGet", $args);
  }
  function offsetSet($idx, $val) {
	if(!isset($this->__delegate)) $this->__createDelegate();
	if(func_num_args()==2) return $this->__delegate->offsetSet($idx, $val);
	$args = func_get_args(); return $this->__call("offsetSet", $args);
  }
  function offsetUnset($idx) {
	if(!isset($this->__delegate)) $this->__createDelegate();
	if(func_num_args()==1) return $this->__delegate->offsetUnset($idx);
	$args = func_get_args(); return $this->__call("offsetUnset", $args);
  }
}

/**
 * The Java proxy class.
 * 
 * Use this class to create a Java instance. Use the Java function to access a Java type.
 *
 * Example which creates an instance:
 * <code>
 * $s = new Java("java.lang.String", "hello");
 * </code>
 *
 *<br> Any declared exception can be caught by PHP code. <br>
 * Exceptions derived from java.lang.RuntimeException or Error should
 * not be caught unless declared in the methods throws clause --
 * OutOfMemoryErrors cannot be caught at all, even if declared.
 *
 * @@access public
 * @@see JavaException
 * @@see function Java
 */
class Java extends java_AbstractJava {
  /**
   * Create a new instance. 
   *
   * This constructor can be
   * used to create an instance of a Java class to access its
   * features.<br>
   *
   * To access constants or procedures within a class, use the java function instead.<br>
   *
   * To convert a Java object into a PHP value, use the java_values() function.<br>
   *
   * Example which creates an instance:
   * <code>
   * $s = new Java("java.lang.String", "hello");
   * </code>
   * 
   * Example which accesses the System class:
   * <code>
   * $s = Java("java.lang.System");
   * </code>
   *
   * If the option JAVA_PREFER_VALUES is set, Java values are automatically coerced to PHP values.
   * Example which sets the option JAVA_PREFER_VALUES:
   * <code>
   * define("JAVA_PREFER_VALUES", true);
   * require_once("java/Java.inc");
   * ...
   * if (java("java.lang.System")->getProperty("foo", false)) ...
   * </code>
   * Otherwise java_values() must be used to fetch a PHP value from a Java object or Java value.
   * The same example which usually executes 5 times faster:
   * <code>
   * require_once("java/Java.inc");
   * ...
   * if (java_values(java("java.lang.System")->getProperty("foo", false))) ...
   * </code>
   *
   * @@see JAVA_PREFER_VALUES
   * @@see function Java
   * @@see function java_values
   */
  function __construct() {
	$client = $this->__client = __javaproxy_Client_getClient();
	
	$args = func_get_args();
	$name = array_shift($args);

	// compatibility with the C implementation
	if(is_array($name)) {$args = $name; $name = array_shift($args);}

	/* do not delete this line, it is used when generating Mono.inc from Java.inc */

    $sig="&{$this->__signature}@@{$name}";
	$len = count($args);
	$args2 = array();
	for($i=0; $i<$len; $i++) {
      switch(gettype($val = $args[$i])) {
      case 'boolean': array_push($args2, $val); $sig.='@@b'; break; 
      case 'integer': array_push($args2, $val); $sig.='@@i'; break; 
      case 'double': array_push($args2, $val); $sig.='@@d'; break; 
      case 'string': array_push($args2, htmlspecialchars($val, ENT_COMPAT,"ISO-8859-1")); $sig.='@@s'; break; 
      case 'array':$sig="~INVALID"; break; 
      case 'object':
		if($val instanceof java_JavaType) {
		  array_push($args2, $val->__java);
		  $sig.="@@o{$val->__signature}"; 
		}
		else {
		  $sig="~INVALID";
		}
		break;
      case 'resource': array_push($args2, $val); $sig.='@@r'; break; 
      case 'NULL': array_push($args2, $val); $sig.='@@N'; break; 
      case 'unknown type': array_push($args2, $val); $sig.='@@u'; break;
	  default: throw new java_IllegalArgumentException($val);
      }
    }

    if(array_key_exists($sig, $client->methodCache)) {
	  if(JAVA_DEBUG) { echo "cache hit for new Java: $sig\n"; }
      $cacheEntry = &$client->methodCache[$sig];
	  $client->sendBuffer.= $client->preparedToSendBuffer;
	  if(strlen($client->sendBuffer)>=JAVA_SEND_SIZE) {
	      if($client->protocol->handler->write($client->sendBuffer)<=0) 
	         throw new java_IllegalStateException("Connection out of sync, check backend log for details.");
	      $client->sendBuffer=null;
	  }
	  
	  $client->preparedToSendBuffer=vsprintf($cacheEntry->fmt, $args2);

	  if(JAVA_DEBUG) {print_r($args2); echo "set prepared to send buffer: $client->preparedToSendBuffer, $cacheEntry->fmt, for key: $sig\n";}
	  $this->__java = ++$client->asyncCtx;

	  if(JAVA_DEBUG) {echo "setresult from new Java cache: object:"; echo sprintf("%x", $client->asyncCtx); echo "\n";}
	  $this->__factory = $cacheEntry->factory;
  	  $this->__signature = $cacheEntry->signature;

	  $this->__cancelProxyCreationTag = ++$client->cancelProxyCreationTag;
	} else {
	  if(JAVA_DEBUG) { echo "cache miss for new Java: $sig\n"; }
          $client->currentCacheKey = $sig;
	  $delegate = $this->__delegate = $client->createObject($name, $args);
	  $this->__java = $delegate->__java;
	  $this->__signature = $delegate->__signature;
	}
  }
  /** @@access private */
  function __destruct() {
	if(!isset($this->__client)) return;
	$client = $this->__client;

	$preparedToSendBuffer = &$client->preparedToSendBuffer;

	// Cancel proxy creation: If the created instance is collected
	// before the next java statement is executed, we set the result
	// type to void
	if($preparedToSendBuffer &&
	   $client->cancelProxyCreationTag==$this->__cancelProxyCreationTag) {

	  $preparedToSendBuffer[6]="3";
	  if(JAVA_DEBUG) {echo "cancel result proxy creation:"; echo $this->__java; echo " {$client->preparedToSendBuffer}"; echo "\n";}
	  $client->sendBuffer.=$preparedToSendBuffer;
	  $preparedToSendBuffer = null;
	  $client->asyncCtx -= 1;
	} else {
	  if(!isset($this->__delegate)) { // write unref ourselfs if we don't have a delegate yet (see cachedJavaPrototype and Java::__factory in __call below)
		if(JAVA_DEBUG) {echo "unref java:"; echo $this->__java; echo "\n";}
		$client->unref($this->__java);
	  }
	}	
  }
  /**
   * Call a method on a Java object
   *
   * Example:
   *<code>
   * $s->substring(1, 10);
   * </code>
   * @@param string The method name
   * @@param array The argument array
   */
  function __call($method, $args) { 
	$client = $this->__client;

    $sig="@@{$this->__signature}@@$method";
	$len = count($args);
	$args2=array($this->__java);
	for($i=0; $i<$len; $i++) {
      switch(gettype($val = $args[$i])) {
      case 'boolean': array_push($args2, $val); $sig.='@@b'; break; 
      case 'integer': array_push($args2, $val); $sig.='@@i'; break; 
      case 'double': array_push($args2, $val); $sig.='@@d'; break; 
      case 'string': array_push($args2, htmlspecialchars($val, ENT_COMPAT,"ISO-8859-1")); $sig.='@@s'; break; 
      case 'array':$sig="~INVALID"; break; 
      case 'object':
		if($val instanceof java_JavaType) {
		  array_push($args2, $val->__java);
		  $sig.="@@o{$val->__signature}"; 
		}
		else {
		  $sig="~INVALID";
		}
		break;
      case 'resource': array_push($args2, $val); $sig.='@@r'; break; 
      case 'NULL': array_push($args2, $val); $sig.='@@N'; break; 
      case 'unknown type': array_push($args2, $val); $sig.='@@u'; break; 
	  default: throw new java_IllegalArgumentException($val);
      }
    }

    if(array_key_exists($sig, $client->methodCache)) {
	  if(JAVA_DEBUG) { echo "cache hit for __call: $sig\n"; }
      $cacheEntry = &$client->methodCache[$sig];
	  $client->sendBuffer.=$client->preparedToSendBuffer;
	  if(strlen($client->sendBuffer)>=JAVA_SEND_SIZE) {
	      if($client->protocol->handler->write($client->sendBuffer)<=0) 
	         throw new java_IllegalStateException("Out of sync. Check backend log for details.");
	      $client->sendBuffer=null;
	  }
	  $client->preparedToSendBuffer=vsprintf($cacheEntry->fmt, $args2);
	  if(JAVA_DEBUG) {print_r($args2); echo "set prepared to send buffer: {$client->preparedToSendBuffer}, {$cacheEntry->fmt}\n";}
	  if($cacheEntry->resultVoid) {
		$client->cancelProxyCreationTag += 1; // expire tag
		return null;
	  } else {
		$result = clone($client->cachedJavaPrototype);
		$result->__factory = $cacheEntry->factory;
		$result->__java = ++$client->asyncCtx;
		if(JAVA_DEBUG) {echo "setresult from __call cache: object:"; echo sprintf("%x", $client->asyncCtx); echo "\n";}
		$result->__signature = $cacheEntry->signature;
		$result->__cancelProxyCreationTag = ++$client->cancelProxyCreationTag;
		return $result;
	  }
    } else {
	  if(JAVA_DEBUG) { echo "cache miss for __call: $sig\n"; }
      $client->currentCacheKey = $sig;
      $retval = parent::__call($method, $args);
      return $retval;
    }
  }
}

/**
 * @@access private
 */
class java_InternalJava extends Java {
  function __construct($proxy) {
	$this->__delegate = $proxy;
	$this->__java = $proxy->__java;
	$this->__signature = $proxy->__signature;
	$this->__client = $proxy->__client;
  }
}

/**
 * @@access private
 */
class java_class extends Java {
  function __construct() {
	$this->__client = __javaproxy_Client_getClient();

	$args = func_get_args();
	$name = array_shift($args);

	// compatibility with the C implementation
	if(is_array($name)) { $args = $name; $name = array_shift($args); }

	/* do not delete this line, it is used when generating Mono.inc from Java.inc */

	$delegate = $this->__delegate = $this->__client->referenceObject($name, $args);

	$this->__java = $delegate->__java;
	$this->__signature = $delegate->__signature;
  }
}
/**
 * @@access private
 */
class JavaClass extends java_class{}
/**
 * A decorator pattern which overrides all magic methods.
 * 
 * @@access private
 */
class java_exception extends Exception implements java_JavaType {
  /** @@access private */
  public $__serialID, $__java, $__client;
  /** @@access private */
  public $__delegate;
  /** @@access private */
  public $__signature;
  /** @@access private */
  public $__hasDeclaredExceptions;
  
  /**
   * Create a new Exception.
   * 
   * Example:
   * <code>
   * $ex = new java_exception("java.lang.NullPointerException");
   * throw $ex;
   * </code>
   */
  function __construct() {
	$this->__client = __javaproxy_Client_getClient();

	$args = func_get_args();
	$name = array_shift($args);

	// compatibility with the C implementation
	if(is_array($name)) { $args = $name; $name = array_shift($args); }

	if (count($args) == 0) 
	  Exception::__construct($name);
	else
	  Exception::__construct($args[0]);

	/* do not delete this line, it is used when generating Mono.inc from Java.inc */

	$delegate = $this->__delegate = $this->__client->createObject($name, $args);

	$this->__java = $delegate->__java;
	$this->__signature = $delegate->__signature;
	$this->__hasDeclaredExceptions = 'T';
  }
  /**
   * @@access private
   */
  function __cast($type) {
	return $this->__delegate->__cast($type);
  }
  /**
   * @@access private
   */
  function __sleep() {
	$this->__delegate->__sleep();
	return array("__delegate");
  }
  /**
   * @@access private
   */
  function __wakeup() {
	$this->__delegate->__wakeup();
	$this->__java = $this->__delegate->__java;
	$this->__client = $this->__delegate->__client;
  }
  /**
   * @@access private
   */
  function __get($key) { 
    return $this->__delegate->__get($key);
  }
  /**
   * @@access private
   */
  function __set($key, $val) {
    $this->__delegate->__set($key, $val);
  }
  /**
   * @@access private
   */
  function __call($method, $args) { 
    return $this->__delegate->__call($method, $args);
  }
  /**
   * @@access private
   */
  function __toString() {
	return $this->__delegate->__toExceptionString($this->getTraceAsString());
  }
}
/**
 * The java exception proxy.
 *
 * Example:
 * <code>
 * $ex = new JavaException("java.lang.NullPointerException");
 * throw $ex;
 * </code>
 * 
 * @@access public
 */
class JavaException extends java_exception {}

/**
 * @@access private
 */
class java_InternalException extends JavaException {
  function __construct($proxy, $exception) {
	$this->__delegate = $proxy;
	$this->__java = $proxy->__java;
	$this->__signature = $proxy->__signature;
	$this->__client = $proxy->__client;
	$this->__hasDeclaredExceptions = $exception;
  }
}

/**
 * @@access private
 */
class java_JavaProxyProxy extends Java {
  function __construct($client) {
	$this->__client = $client;
  }
}

?>
@


1.44
log
@Release-7.0.1
@
text
@@


1.43
log
@*** empty log message ***
@
text
@d219 8
d359 3
d918 1
a918 1
      case 'string': array_push($args2, htmlspecialchars($val, ENT_COMPAT)); $sig.='@@s'; break; 
d1010 1
a1010 1
      case 'string': array_push($args2, htmlspecialchars($val, ENT_COMPAT)); $sig.='@@s'; break; 
@


1.42
log
@php 7
@
text
@d888 1
a888 1
  function Java() {
@


1.41
log
@Release-6-2-1
@
text
@d624 1
a624 1
  function java_JavaProxy($java, $signature){ 
d677 1
a677 1
  function java_ObjectIterator($javaProxy) {
d1053 1
a1053 1
  function java_InternalJava($proxy) {
d1065 1
a1065 1
  function java_class() {
d1110 1
a1110 1
  function java_exception() {
d1195 1
a1195 1
  function java_InternalException($proxy, $exception) {
d1208 1
a1208 1
  function java_JavaProxyProxy($client) {
@


1.40
log
@Release-6-1-2-1
@
text
@d368 8
a375 1
  if(!isset($args[1])) $args[1]=false;
@


1.39
log
@Release-6-1-2
@
text
@d3 42
a44 37
  /* java_Proxy.php -- contains the main interface

  Copyright (C) 2003-2007 Jost Boekemeier

  This file is part of the PHP/Java Bridge.

  The PHP/Java Bridge ("the library") is free software; you can
  redistribute it and/or modify it under the terms of the GNU General
  Public License as published by the Free Software Foundation; either
  version 2, or (at your option) any later version.

  The library is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with the PHP/Java Bridge; see the file COPYING.  If not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
  02111-1307 USA.

  Linking this file statically or dynamically with other modules is
  making a combined work based on this library.  Thus, the terms and
  conditions of the GNU General Public License cover the whole
  combination.

  As a special exception, the copyright holders of this library give you
  permission to link this library with independent modules to produce an
  executable, regardless of the license terms of these independent
  modules, and to copy and distribute the resulting executable under
  terms of your choice, provided that you also meet, for each linked
  independent module, the terms and conditions of the license of that
  module.  An independent module is a module which is not derived from
  or based on this library.  If you modify this library, you may extend
  this exception to your version of the library, but you are not
  obligated to do so.  If you do not wish to do so, delete this
  exception statement from your version. */
@


1.38
log
@Release-6-0-3
@
text
@d438 44
a504 26
 * A synchronized init() procedure can be called from the context to initialize a library once, and a shutdown hook can be registered to destroy the library before the (web-) context is destroyed. The init hook can be written in PHP, but the shutdown hook must be written in Java. Example:
 * <code>
 * function getShutdownHook() { return java("myJavaHelper")->getShutdownHook(); }
 * function call() { // called by init()
 *   ...
 *   // register shutdown hook
 *   java_context()->onShutdown(getShutdownHook());
 * }
 * java_context()->init(java_closure(null, null, java("java.util.concurrent.Callable")));
 * </code>
 * 
 * It is possible to access implicit web objects (the session, the
 * application store etc.) from the context. Please see the JSR223
 * documentation for details. Example:
 * <code>
 * $req = $ctx->getHttpServletRequest();
 * $res = $ctx->getHttpServletResponse();
 * </code>
 *
 * Example which fetches the servlet-, config and context:
 * <code>
 * $config = $ctx->getAttribute ( "php.java.servlet.ServletConfig",  ENGINE_SCOPE);
 * $context = $ctx->getAttribute( "php.java.servlet.ServletContext", ENGINE_SCOPE);
 * $servlet = $ctx->getAttribute( "php.java.servlet.Servlet", ENGINE_SCOPE);
 * </code>
 *
@


1.37
log
@Release-6-0-0
@
text
@d345 1
a345 1
	trigger_error('Please use <a href="http://php-java-bridge.sourceforge.net/pjb/webapp.php>tomcat or jee hot deployment</a> instead', E_USER_WARNING);
@


1.36
log
@Release-5-5-4
@
text
@a213 8
 * Only for internal use.
 * @@access private
 */
function java_reset() {
  $client=__javaproxy_Client_getClient();
  return $client->invokeMethod(0, "reset", array());
}
/**
d342 1
a342 1
 * @@access public
d345 1
a345 3
  $client=__javaproxy_Client_getClient();
  return $client->invokeMethod(0, "updateJarLibraryPath", 
							   array($arg, ini_get("extension_dir"), getcwd(), ini_get("include_path")));
@


1.35
log
@Release 5.5.3
@
text
@a679 3
  function java_IteratorProxy($java, $signature) {
	parent::java_JavaProxy($java, $signature);
  }
a687 4
  
  function java_ArrayProxy($java, $signature) {
	parent::java_JavaProxy($java, $signature);
  }
a708 3
  function java_ExceptionProxy($java, $signature){ 
	parent::java_JavaProxy($java, $signature);
  }
d917 1
a917 4
	  if(JAVA_DEBUG) {
		print_r($args2);
		echo "set prepared to send buffer: $client->preparedToSendBuffer, $cacheEntry->fmt, for key: $sig\n";
	  }
d947 1
a947 3
	  if(JAVA_DEBUG) {
		echo "cancel result proxy creation:"; echo $this->__java; echo " {$client->preparedToSendBuffer}"; echo "\n";
	  }
d953 1
a953 3
		if(JAVA_DEBUG) {
		  echo "unref java:"; echo $this->__java; echo "\n";
		}
d1007 1
a1007 4
	  if(JAVA_DEBUG) {
		print_r($args2);
		echo "set prepared to send buffer: {$client->preparedToSendBuffer}, {$cacheEntry->fmt}\n";
	  }
d1099 4
a1102 3
	if (count($args) == 0) throw new java_IllegalArgumentException("JavaException class name missing");

	Exception::__construct($args[0]);
d1170 1
@


1.34
log
@Release-5-5-2
@
text
@d58 2
a59 2
  static $client;
  if(isset($client)) return $client;
d72 41
a112 2
 * @@deprecated: Use PHP5 try/catch instead
 * @@access private
d116 1
a116 1
  return $client->getProperty(0, "lastException");
d119 4
a122 2
 * @@deprecated: Use PHP5 try/catch instead.
 * @@access private
d126 1
a126 1
  $client->setProperty(0, "lastException", null);
d146 1
a146 1
 * Exceptions derived from java.lang.RuntimeException or Error must
d163 1
a163 1
 * Fetches the PHP object which has been wrapped by java_closure() or java_wrap(). Example:
d579 2
a580 1
 * @@access public
a582 6
  $client = __javaproxy_Client_getClient();
  if (!$client->isAsync) {
	$client->invokeMethod(0, "beginDocument", array());
	$client->setAsyncHandler();
  }
  $client->isAsync+=1;
d589 2
a590 1
 * @@access public
a592 6
  $client = __javaproxy_Client_getClient();
  if ($client->isAsync==1) {
	$client->setDefaultHandler();
	$client->invokeMethod(0, "endDocument", array());
  }
  if ($client->isAsync > 0) $client->isAsync-=1;
d645 1
a645 1
	  trigger_error("Exception in Java::__toString(): ". (string)$ex, E_USER_WARNING);
d828 3
a830 3
 * Exceptions derived from java.lang.RuntimeException or Error must
 * not be caught unless declared in the methods throws clause -- OutOfMemoryErrors cannot be caught at all,
 * even if declared.
@


1.33
log
@Release-5-5-1
@
text
@d308 1
a308 1
 * Please use tomcat or j2ee hot deployment instead.
@


1.32
log
@Release-5-5
@
text
@d41 1
a41 1
require_once("${JAVA_BASE}/Client.inc");
d107 1
a107 2
 * even if declared.  <br> This is consistent with the JEE EJB
 * specification.
d174 1
a174 1
 * @@access public
a177 1
  user_error("Your script has called the privileged procedure \"java_reset()\" which resets the java back-end to its initial state. Therefore all java caches are gone.");
d799 1
a799 2
 * even if declared.  <br> This is consistent with the JEE EJB
 * specification.
@


1.31
log
@Documentation update
@
text
@d97 3
a99 1
 * Invoke a method dynamically. Example:
d116 1
a116 1
  $id = $object?$object->__java:0;
d371 7
d379 1
d387 1
a387 1
 * Returns the name of the back-end or null, if the back-end is not running.O
d417 1
a417 1
 * helper procedures:
d423 1
a423 3
 *            $closure = java_closure(new Runnable(), null, $Runnable);
 *            java_context()->setAttribute("kont", $closure, ENGINE_SCOPE);
 *            java_context()->call($closure);
d427 3
a429 2
 * Runnable r = e.get("kont");
 * new Thread(r).start();
d939 1
a939 1
	  if(!$this->__delegate) { // write unref ourselfs if we don't have a delegate yet (see cachedJavaPrototype and Java::__factory in __call below)
d1070 2
d1091 3
a1093 1
	if (count($args) >= 1) Exception::__construct($args[0]);
d1101 1
a1165 2
	Exception::__construct($exception);

d1170 1
@


1.30
log
@Documentation update
@
text
@d101 7
d788 7
a794 1
 * 
a836 6
   * Any declared exception can be caught by PHP code. Exceptions
   * derived from java.lang.RuntimeException or Error cannot be caught
   * unless the method has declared that it throws it.
   * This is consistent with the JEE EJB
   * specification. EJB containers cannot handle undeclared RuntimeExceptions and
   * Errors either.
d1137 1
a1137 1
 * 
@


1.29
log
@Release-5-4-4-2
@
text
@d824 6
@


1.28
log
@Release-5-4-4-2
@
text
@d51 3
d62 5
a66 1
  else $client=new java_Client();
@


1.27
log
@Release-5-4-4-2
@
text
@d92 1
a92 1
 * invokeMethod(new java("java.lang.String","hello"), "toString", array())
@


1.26
log
@Release-5-4-4
@
text
@d89 14
d293 2
a294 21
 * Set the library path.
 *
 * Example: 
 * <code>
 * java_require("foo.jar;bar.jar"); 
 * </code>
 *
 * The .jar files should be stored in /usr/share/java or
 * extension_dir/lib one of its sub-directories or under the PHP
 * include_path/LIBNAME/LIBNAME.jar. However, it is also possible to
 * fetch .jar files from a remote server, for example:
 * <code>
 * java_require("http://php-java-bridge.sf.net/kawa.jar;...");
 * </code>
 *
 * Note that Java doesn't have a module system. 
 * Therefore libraries and their dependencies must be loaded by one and only one class loader;
 * do not report a ClassCastException saying that a class is incompatible to itself or 
 * a NoClassDefFoundError to the PHP/Java Bridge mailing list.
 * @@param string The list of Java libraries.
 * @@see java_autoload()
@


1.25
log
@Release-5-4-3-1
@
text
@d413 11
@


1.24
log
@Release-5-4-3
@
text
@d89 21
d111 1
a111 1
 * Unwraps a Java object.
d113 1
a113 1
 * Evaluates the object and fetches its content, if possible. Use java_values() to convert a Java object into an equivalent PHP value.
d450 1
a450 1
  $client->protocol->invokeBegin(0, "makeClosure", "5", "6");
@


1.23
log
@Release 5.3.4
@
text
@d44 3
a46 1
 * implemented by JavaException and Java 
d741 1
a741 1
 * Use this constructor to create an instance. Use the Java function to access the type.
d750 1
d754 5
a758 1
   * Create a new instance of a java type. 
d760 3
a762 1
   * Use this constructor to create an instance. Use the Java function to access the type.
d774 19
a792 1
   * @@see Java()
@


1.22
log
@Release 5.3.3.1
@
text
@d144 1
a144 1
 * echo java_inspect(java_get_context());
d313 1
a313 1
 * java_get_session()->put("key", new Java("java.lang.Object"));
d322 1
a322 1
 * When java_get_session() is called with a session name, the session
d325 1
a325 1
 * java_get_session("myPublicApplicationStore")->put("key", "value");
d328 1
a328 1
 * When java_get_session() is called with a second argument set to true,
d332 1
a332 1
 * java_get_session(null, true)->put("key", "val");
d349 1
a349 1
 * $backend = java_get_server_name();
d369 3
a371 1
 * if(java_is_false(java_get_context()->call(java_closure()))) die "Script should be called from java";
d373 18
a390 1
 *
d395 2
a396 1
 * java_get_context()->getHttpServletRequest();
d401 3
a403 3
 * $config = $ctx->getAttribute ( "php.java.servlet.ServletConfig",  100);
 * $context = $ctx->getAttribute( "php.java.servlet.ServletContext", 100);
 * $servlet = $ctx->getAttribute( "php.java.servlet.Servlet", 100);
d446 1
a446 1
 * $object = java_get_closure();
d450 1
a450 1
 * When a php instance is supplied as an argument, the environment will be used
d455 1
a455 1
 * echo (string)java_get_closure(null, "hello");
d468 1
a468 1
 *     return java_get_closure(new Listener(), null, array(new Java("java.awt.event.ActionListener")));
@


1.21
log
@Release 5.3.3
@
text
@d369 1
a369 1
 * java_get_context()->call(java_closure()) || die "Script should be called from java";
d479 3
a481 1
 * Ends stream mode. Fires a JavaException if any statement executed during
@


1.20
log
@Apache/IIS and JSR 223 integration
@
text
@d88 3
a90 1
 * Evaluates the object and fetches its content, if possible.
d113 2
a114 1
 * @@param $object A java object or type.
d146 1
a146 1
 * @@param $object A java object or type.
d162 1
a162 1
 * @@param $enc A valid file.encoding string. Please see your Java
d188 2
a189 2
 * @@param $ob A java object
 * @@param $clazz A java object or type.
d223 3
d228 1
a228 4
 * [a]rray, [n]ull or [o]bject (which does nothing).<p> This procedure
 * is for compatibility with the pure PHP implementation, in the C
 * implementation this procedure is called automatically for each type
 * cast or when settype() is called.
d234 6
a239 6
 * echo $str;
 * => [o(String):"12"]
 * $phpString = "$str";
 * echo $phpString;
 * => "12"
 * $phpNumber = (integer)$str;
d246 3
a248 2
 * @@param $object A java object
 * @@param $type A PHP type description, either [Ss]tring, [Bb]oolean, [Ll]ong or [Ii]nteger, [Dd]ouble or [Ff]loat, [Nn]ull, [Aa]rray, [Oo]bject.
d271 6
a276 8
 * Note that the classloader isolates the loaded libraries: When you
 * call java_require("foo.jar"); java_require("bar.jar"), the classes
 * from foo cannot see the classes loaded from bar. If you get a
 * NoClassDefFound error saying that one of your classes cannot
 * access the library you have loaded, you must reset the back-end to
 * clear the loader cache and load your classes and the library in one
 * java_require() call.
 * @@param $arg The list of Java libraries.
a303 4
  if(function_exists("session_start")) {
	@@session_start();
	$client->RUNTIME['SESSION']=true;
  }
d335 1
a335 1
 * The optional third argument specifies the default lifetime of the session, it defaults to \code session.gc_maxlifetime \endcode. The value 0 means that the session never times out.
d338 1
a338 1
 * @@see #java_context()
d387 1
a387 1
 * @@see #java_session()
d418 2
d421 1
a421 1
 * class. 
d451 1
d634 1
a634 1
 * @@see #java_InternalJava
d637 2
d716 8
d725 1
a725 1
 * @@see #JavaException
a727 2
  public $__client;

d743 1
a743 1
   * @@see #Java()
d813 1
d849 2
a850 2
   * @@param $method The method name
   * @@param $args The argument array
d956 1
a956 1
 * @@access public
d959 1
d961 1
d963 1
d968 2
d971 1
a971 1
   * $ex = new JavaException("java.lang.NullPointerException");
d1040 8
a1047 1
 * The java exception proxy
@


1.20.2.1
log
@Release 5.3.3
@
text
@d88 1
a88 3
 * Unwraps a Java object.
 * 
 * Evaluates the object and fetches its content, if possible. Use java_values() to convert a Java object into an equivalent PHP value.
a110 1
 * @@see java_closure()
a219 3
 * This procedure converts the Java argument and then calls java_values() to fetch
 * its content. Use java_values() if the conversion is not necessary.
 * 
a242 1
 * @@see #java_values()
a419 2
 * Wraps a PHP environment.
 * 
d421 1
a421 1
 * class. Use java_closure() to convert a PHP object into an equivalent Java object.
a450 1
 * @@see #java_values()
a712 8
 * 
 * Use this constructor to create an instance. Use the Java function to access the type.
 *
 * Example which creates an instance:
 * <code>
 * $s = new Java("java.lang.String", "hello");
 * </code>
 * 
a954 2
   * 
   * Example:
d1025 1
a1025 8
 * The java exception proxy.
 * 
 * Example:
 * <code>
 * $ex = new JavaException("java.lang.NullPointerException");
 * throw $ex;
 * </code>
 * 
@


1.20.2.2
log
@Release 5.3.3
@
text
@d114 1
a114 1
 * @@param object  A java object or type.
d146 1
a146 1
 * @@param object A java object or type.
d162 1
a162 1
 * @@param string A valid file.encoding string. Please see your Java
d188 2
a189 2
 * @@param object A java object
 * @@param object A java object or type.
d228 4
a231 1
 * [a]rray, [n]ull or [o]bject (which does nothing).
d249 3
a251 3
 * @@see java_values()
 * @@param object A java object
 * @@param string A PHP type description, either [Ss]tring, [Bb]oolean, [Ll]ong or [Ii]nteger, [Dd]ouble or [Ff]loat, [Nn]ull, [Aa]rray, [Oo]bject.
d281 1
a281 1
 * @@param string The list of Java libraries.
d347 1
a347 1
 * @@see java_context()
d396 1
a396 1
 * @@see java_session()
d460 1
a460 1
 * @@see java_values()
d643 1
a643 1
 * @@see java_InternalJava
d732 1
a732 1
 * @@see JavaException
d752 1
a752 1
   * @@see Java()
d857 2
a858 2
   * @@param string The method name
   * @@param array The argument array
@


1.20.2.3
log
@Release 5.3.3
@
text
@d234 6
a239 6
 * echo is_string ($str) ? "#t":"#f";
 * => #f
 * $phpString = (string)$str;
 * echo is_string ($phpString) ? "#t":"#f";
 * => #t
 * $phpNumber = (integer)(string)$str;
d271 7
a277 4
 * Note that Java doesn't have a module system. 
 * Therefore libraries and their dependencies must be loaded by one and only one class loader;
 * do not report a ClassCastException saying that a class is incompatible to itself or 
 * a NoClassDefFoundError to the PHP/Java Bridge mailing list.
a278 1
 * @@see java_autoload()
d306 4
d341 1
a341 1
 * The optional third argument specifies the default lifetime of the session, it defaults to <code> session.gc_maxlifetime </code>. The value 0 means that the session never times out.
a642 2
  public $__client;
  
d732 2
a818 1
  /** @@access private */
d961 1
a961 1
 * @@access private
a963 1
  /** @@access private */
a964 1
  /** @@access private */
a965 1
  /** @@access private */
d973 1
a973 1
   * $ex = new java_exception("java.lang.NullPointerException");
@


1.19
log
@PR#2157571
@
text
@a96 2
 * echo $str;
 * => [o(String):"hello"]
d380 8
@


1.18
log
@Release-5-3-1
@
text
@d54 5
a58 3
  if(!isset($client)) {
	$client=new java_Client();
  }
d360 6
a365 2
  $client=__javaproxy_Client_getClient();
  return $client->getServerName();
@


1.17
log
@Release-5-2-1
@
text
@d486 2
d499 1
d501 1
a501 1
    return array("__serialID");
d507 3
d526 6
a531 1
    return $this->__client->invokeMethod(0,"ObjectToString",array($this));
a645 1
	$this->__serialID = $this->__delegate->__serialID;
d957 2
d976 2
a977 3
	$rc = $this->__delegate->__sleep();
	$this->__serialID = $this->__delegate->__serialID;
	return $rc;
d1021 3
a1023 1
  function java_InternalException($proxy) {
@


1.16
log
@Version-5-1-2
@
text
@d282 3
d773 1
a773 1
	  $result->__cancelProxyCreationTag = ++$client->cancelProxyCreationTag;
@


1.15
log
@Release-5-1-2
@
text
@d282 1
a282 1
function get_lifetime ()
d297 1
a297 1
	$args[2] = get_lifetime ();
d492 1
a492 1
	$args = array($this, get_lifetime());
d498 1
a498 1
	$args = array($this->__serialID, get_lifetime());
@


1.15.2.1
log
@Release-5-1-2
@
text
@d282 1
a282 1
function java_get_lifetime ()
d297 1
a297 1
	$args[2] = java_get_lifetime ();
d492 1
a492 1
	$args = array($this, java_get_lifetime());
d498 1
a498 1
	$args = array($this->__serialID, java_get_lifetime());
@


1.14
log
@Release-5-0-1
@
text
@d282 6
d297 1
a297 3
	$session_max_lifetime=(int)ini_get("session.gc_maxlifetime");
	if(!isset($session_max_lifetime)) $session_max_lifetime=1440;
	$args[2] = $session_max_lifetime;
d492 1
a492 3
	$lifetime = (int)ini_get("session.gc_maxlifetime");
	if(!isset($lifetime)) $lifetime = 1440;
	$args = array($this, $lifetime);
d498 1
a498 3
	$lifetime = (int)ini_get("session.gc_maxlifetime");
	if(!isset($lifetime)) $lifetime = 1440;
	$args = array($this->__serialID, $lifetime);
@


1.13
log
@Release-5-0-0
@
text
@d197 19
a215 2
    if(!$object instanceof java_JavaType) throw new java_IllegalArgumentException($object);
	return $object->__cast($type); 
d528 1
a528 1
	$this->var = java_values ($javaProxy);
@


1.12
log
@Release-4-3-3
@
text
@d731 1
a731 1
    if($client->isAsync && array_key_exists($sig, $client->methodCache)) {
d735 6
d771 1
a771 2
	if($client->isAsync &&
	   $preparedToSendBuffer &&
d829 1
a829 1
    if($client->isAsync && array_key_exists($sig, $client->methodCache)) {
d833 5
a1006 1

@


1.11
log
@Release-4-3-2
@
text
@a433 1
  if(JAVA_CACHE_ENABLED) return false;
d435 5
a439 5
  if($client->isAsync()) 
	throw new java_RuntimeException("begin_document not allowed while in stream mode");
  $rc = $client->invokeMethod(0, "beginDocument", array());
  $client->setAsyncHandler();
  return $rc;
a446 1
  if(JAVA_CACHE_ENABLED) return false;
d448 5
a452 4
  if(!$client->isAsync()) 
	throw new java_RuntimeException("end_document not allowed when not in stream mode");
  $client->setDefaultHandler();
  return $client->invokeMethod(0, "endDocument", array());
d508 1
a508 4
  public $proxy;
  public $__java, $client;
  public $phpMap; // must keep a reference otherwise it will be gc'ed.
  public $hasNext;
d511 1
a511 2
	$this->proxy = $javaProxy;
	$this->client = __javaproxy_Client_getClient();
d514 1
a514 4
	$proxy = array($this->proxy);
	$this->phpMap = 
	  $phpMap = $this->client->invokeMethod(0, "getPhpMap", $proxy);
	$this->__java = $phpMap->__java;
d517 1
a517 3
	if(isset($this->hasNext)) return $this->hasNext;
	return $this->hasNext =
	  $this->client->invokeMethod($this->__java, "hasMore", array());
d520 1
a520 2
	return $this->hasNext = 
	  $this->client->invokeMethod($this->__java, "moveForward", array());
d523 1
a523 2
	return 
	  $this->client->invokeMethod($this->__java, "currentKey", array());
d526 1
a526 2
	return 
	  $this->client->invokeMethod($this->__java, "currentData", array());
d600 2
d731 1
a731 1
    if(JAVA_CACHE_ENABLED && array_key_exists($sig, $client->methodCache)) {
d741 2
a742 1
 	  $this->__java = ++$client->asyncCtx;
d746 2
d750 1
a750 1
      $client->currentCacheKey = $sig;
a760 1
	$asyncCtx = &$client->asyncCtx;
d762 7
a768 1
	if($preparedToSendBuffer && ($asyncCtx==$this->__java)) {
d775 1
a775 1
	  --$asyncCtx;
d777 1
a777 1
	  if(!$this->__delegate) { // write unref ourselfs if we don't have a delegate yet
d824 1
a824 1
    if(JAVA_CACHE_ENABLED && array_key_exists($sig, $client->methodCache)) {
d834 1
d842 1
@


1.10
log
@Release-4-3-1a
@
text
@d274 1
a274 1
	$sesion_max_lifetime=(int)ini_get("session.gc_maxlifetime");
d460 3
a462 3
  var $__serialID, $__java;
  var $__signature;
  var $__client;
d509 4
a512 4
  var $proxy;
  var $__java, $client;
  var $phpMap; // must keep a reference otherwise it will be gc'ed.
  var $hasNext;
d606 1
a606 1
  var $__delegate;
d608 1
a608 1
  var $__serialID;
d610 2
a611 2
  var $__factory;
  var $__java, $__signature;
d625 1
a625 1
	$rc = $this->__delegate->__sleep();
d686 1
a686 123
  var $__client;



/**
 * Returns the jsr223 script context handle.
 *
 * Example which closes over the current environment and passes it back to java:
 * <code>
 * java::getContext()->call(java_closure()) || die "Script should be called from java";
 * </code>
 *
 * It is possible to access implicit web objects (the session, the
 * application store etc.) from the context. Please see the JSR223
 * documentation for details. Example:
 * <code>
 * java::getContext()->getHttpServletRequest();
 * </code>
 * @@access public
 */
  static function getContext () {
	return java_context();
  }

/**
 * Return a session handle.
 *
 * When java::getSession() is called without 
 * arguments, the session is shared with java.
 * Example: 
 * <code>
 * java::getSession()->put("key", new Java("java.lang.Object"));
 * [...]
 * </code>
 * The java components (jsp, servlets) can retrieve the value, for
 * example with:
 * <code>
 * java::getSession().getAttribute("key");
 * </code>
 *
 * When java_get_session() is called with a session name, the session
 * is not shared with java and no cookies are set. Example:
 * <code>
 * java::getSession("myPublicApplicationStore")->put("key", "value");
 * </code>
 *
 * When java_get_session() is called with a second argument set to true,
 * a new session is allocated, the old session is destroyed if necessary.
 * Example:
 * <code>
 * java::getSession(null, true)->put("key", "val");
 * </code>
 *
 * The optional third argument specifies the default lifetime of the session, it defaults to \code session.gc_maxlifetime \endcode. The value 0 means that the session never times out.
 *
 * @@access public
 * @@see #java_context()
 */
  static function getSession () {
	return java_session_array(func_get_args());
  }

/**
 * Closes over the php environment and packages it up as a java
 * class. 
 *
 * Example: 
 * <code>
 * function toString() {return "helloWorld";};
 * $object = java_get_closure();
 * echo "Java says that PHP says: $object\n";
 * </code>
 *
 * When a php instance is supplied as an argument, the environment will be used
 * instead. When a string or key/value map is supplied as a second argument,
 * the java procedure names are mapped to the php procedure names. Example:
 * <code>
 * function hello() {return "hello";};
 * echo (string)java_get_closure(null, "hello");
 * </code>
 * 
 * When an array of java interfaces is supplied as a third argument,
 * the environment must implement these interfaces.
 * Example:
 * <code>
 * class Listener {
 *   function actionPerformed($actionEvent) {
 *       ...
 *     }
 * }
 * function getListener() {
 *     return Java::getClosure(new Listener(), null, array(new Java("java.awt.event.ActionListener")));
 * }
 * </code>
 * @@access public
 */
  static function getClosure () {
	return java_closure_array(func_get_args());
  }
  
  static function getValues ($obj) {
	return java_values ($obj);
  }

  static function inspect ($obj) {
	return java_inspect($obj);
  }

  static function set_file_encoding($enc) {
	return java_set_file_encoding($enc);
  }

  static function getServerName() {
	return java_server_name();
  }

  static function beginDocument() {
	return java_begin_document();
  }

  static function endDocument() {
	return java_end_document();
  }
d898 3
a900 3
  var $__serialID, $__java, $__client;
  var $__delegate;
  var $__signature;
@


1.9
log
@Release-4-3-1
@
text
@d59 1
a59 12
/**
 * Only for internal use
 * @@access private
 */
function java_coerce_value($value) {
  if($value instanceof java_JavaBridge) return $value->java;
  return $value;
}
function java_wrap_value($value) {
  if($value instanceof java_JavaType) return new java_JavaBridgeValue($value);
  return $value;
}
d115 1
a115 1
  return java_values_internal(java_coerce_value($object));
d147 1
a147 1
  return java_inspect_internal(java_coerce_value($object));
d190 1
a190 1
  return java_instanceof_internal(java_coerce_value($ob), java_coerce_value($clazz));
d231 1
a231 1
  return java_cast_internal(java_coerce_value($object), java_coerce_value($type));
d707 1
a707 1
	return java_wrap_value (java_context());
d745 1
a745 1
	return java_wrap_value(java_session_array(func_get_args()));
d783 1
a783 1
	return java_wrap_value(java_closure_array(func_get_args()));
d1120 1
a1120 16
/**
 * @@access private
 */
class java_JavaBridge {
  var $java;
  function __java_coerceArgs($array) {return array_map('java_coerce_value', $array);}
  function __java_coerceArg($arg) {return java_coerce_value($arg);}
  function __java_init($path) { } 
  function __get($arg) { if(!is_null($this->java)) return java_wrap_value($this->java->__get($this->__java_coerceArg($arg))); }
  function __set($key, $val) { if(!is_null($this->java))  return $this->java->__set($this->__java_coerceArg($key), $this->__java_coerceArg($val)); }
  function __call($m, $a) { if(!is_null($this->java)) return java_wrap_value($this->java->__call($m, $this->__java_coerceArgs($a))); }
  function __toString() { if(!is_null($this->java)) return $this->java->__toString(); }
}
class java_JavaBridgeValue extends java_JavaBridge {
  function __construct($java) {$this->java=$java;}
}
@


1.8
log
@Release-4-3-0
@
text
@d67 4
d98 1
d149 1
d161 3
a163 1
 * Set the java file encoding, for example UTF-8 or ASCII. Needed
d190 2
a191 1
 * Tests if object is an instance of clazz. 
d212 3
a214 1
 * Converts the java object obj into a PHP object. The second argument
d246 3
a248 1
 * Set the library path. Example: 
d296 3
a298 1
 * Return a session handle.  When java_session() is called without 
d334 3
a336 1
 * Returns the name of the back-end or null, if the back-end is not running. Example:
d396 3
a398 1
 * class. Example: 
d433 3
a435 1
 * Enters stream mode (asynchronuous protocol). The statements are
d470 1
a470 1
class java_JavaProxy {
d699 122
d1139 3
a1141 3
  function __get($arg) { if(!is_null($this->java)) return $this->java->__get($this->__java_coerceArg($arg)); }
  function __set($key, $val) { if(!is_null($this->java)) return $this->java->__set($this->__java_coerceArg($key), $this->__java_coerceArg($val)); }
  function __call($m, $a) { if(!is_null($this->java)) return $this->java->__call($m, $this->__java_coerceArgs($a)); }
d1144 3
@


1.7
log
@Release-4-3-0
@
text
@d43 4
a46 1
/* implemented by JavaException and Java */
d49 3
d59 4
d67 4
d75 4
d83 4
d92 28
d123 4
d132 4
d141 10
d154 13
d171 4
d181 10
d194 4
d202 28
d231 1
a231 1
  return java_cast_internal(java_coerce_value($object), java_coerce_values($type));
d233 25
d261 1
a261 1
						array($arg, ini_get("extension_dir")));
d263 4
d276 4
d282 32
d317 10
d331 18
d353 4
d377 32
d412 11
d432 5
d446 3
d495 3
d532 3
d543 3
d568 3
d592 1
d670 5
d678 17
d704 2
d778 10
d845 3
d857 3
d870 2
d878 3
d884 2
d891 8
d908 2
d915 3
d921 3
d929 3
d937 3
d943 3
d949 3
d955 3
d962 4
d967 3
d979 3
d988 3
@


1.6
log
@Release-4-2-1
@
text
@d53 4
d65 1
a65 1
function java_values($object) {
d70 3
d78 1
a78 1
function java_inspect($object) {
d83 3
d90 1
a90 1
function java_instanceof($ob, $clazz) {
d96 4
a99 1
function java_cast($object, $type) { 
d103 3
d611 11
@


1.5
log
@Release-4-2-0
@
text
@d141 7
a147 1
  //FIXME
d150 6
a155 1
  //FIXME
d183 1
d319 1
d565 1
@


1.4
log
@Release-4-1-0
@
text
@d54 1
a54 1
  $client = __javaproxy_Client_getClient();
d58 1
a58 1
  $client = __javaproxy_Client_getClient();
d63 1
a63 3
  $client = __javaproxy_Client_getClient();
  if($client->isAsync()) 
	throw new java_RuntimeException("values not allowed while in stream mode");
d67 1
a67 1
  $client = __javaproxy_Client_getClient();
d73 1
a73 3
  $client = __javaproxy_Client_getClient();
  if($client->isAsync()) 
	throw new java_RuntimeException("inspect not allowed while in stream mode");
d77 1
a77 1
  $client = __javaproxy_Client_getClient();
d83 1
a83 3
  $client = __javaproxy_Client_getClient();
  if($client->isAsync()) 
	throw new java_RuntimeException("instanceof not allowed while in stream mode");
d91 1
a91 1
  $client = __javaproxy_Client_getClient();
d96 1
a96 3
  $client = __javaproxy_Client_getClient();
  if($client->isAsync()) 
	throw new java_RuntimeException("get_session not allowed while in stream mode");
d110 1
a110 3
  $client = __javaproxy_Client_getClient();
  if($client->isAsync()) 
	throw new java_RuntimeException("get_server_name not allowed while in stream mode");
d114 1
a114 1
  $client = __javaproxy_Client_getClient();
d121 1
a121 3
  $client = __javaproxy_Client_getClient();
  if($client->isAsync()) 
	throw new java_RuntimeException("closure not allowed while in stream mode");
d127 1
a127 1
  $client->protocol->invokeBegin(0, "makeClosure", "I");
d141 1
a141 6
  $client = __javaproxy_Client_getClient();
  if($client->isAsync()) 
	throw new java_RuntimeException("begin_document not allowed while in stream mode");
  $rc = $client->invokeMethod(0, "beginDocument", array());
  $client->setAsyncHandler();
  return $rc;
d144 2
a145 13
  $client = __javaproxy_Client_getClient();
  if(!$client->isAsync()) 
	throw new java_RuntimeException("end_document not allowed when not in stream mode");
  $client->setDefaultHandler();
  return $client->invokeMethod(0, "endDocument", array());
}

function java_create($args, $instance) {
  $client = __javaproxy_Client_getClient();
  $name = array_shift($args);

  // compatibility with the C implementation
  if(is_array($name)) return java_create($name, $instance);
a146 3
  $rc = $client->createObject($name, $args, $instance);
  return $rc;
}
d148 6
a153 3
  var $__serialID, $__java, $__client;

  function java_JavaProxy($java){ 
a154 1
	$this->__java=$java;
a159 2
	if($this->__client->isAsync()) 
	  throw new java_RuntimeException("__sleep not allowed when not in stream mode");
d164 1
a169 3
	if(!isset($this->__client)) $this->__client=__javaproxy_Client_getClient();
	if($this->__client->isAsync()) 
	  throw new java_RuntimeException("__wakeup not allowed when not in stream mode");
d171 1
d175 2
a176 1
	if(isset($this->__client)) $this->__client->unref($this->__java);
a187 2
	if($this->__client->isAsync()) 
	  throw new java_RuntimeException("__toString not allowed when not in stream mode");
a190 5
class java_JavaProxyClass extends java_JavaProxy {
  function java_JavaProxyClass($java){ 
	parent::java_JavaProxy($java);
  }
}
d194 1
a194 1
  var $__java, $__client;
d200 1
a200 4
	$this->__client = $javaProxy->__client;

	if($this->__client->isAsync()) 
	  throw new java_RuntimeException('object iterator not allowed while in stream mode. Use $arr=java_values($java_obj); java_begin_document(); foreach($arr as ...) ...; java_end_document(); instead.');
d205 1
a205 1
	  $phpMap = $this->__client->invokeMethod(0, "getPhpMap", $proxy);
d211 1
a211 1
	  $this->__client->invokeMethod($this->__java, "hasMore", array());
d215 1
a215 1
	  $this->__client->invokeMethod($this->__java, "moveForward", array());
d219 1
a219 1
	  $this->__client->invokeMethod($this->__java, "currentKey", array());
d223 1
a223 1
	  $this->__client->invokeMethod($this->__java, "currentData", array());
d227 2
a228 2
  function java_IteratorProxy($java) {
	parent::java_JavaProxy($java);
d236 2
a237 2
  function java_ArrayProxy($java) {
	parent::java_JavaProxy($java);
d257 2
a258 2
  function java_ExceptionProxy($java){ 
	parent::java_JavaProxy($java);
d279 1
a279 1
class Java extends java_JavaProxy implements IteratorAggregate, ArrayAccess, java_JavaType {
d281 11
a291 4
  function Java() {
	$delegate = $this->__delegate = java_create(func_get_args(), true);
	$this->__java = $delegate->__java;
	$this->__client = $delegate->__client;
d294 1
d298 1
d304 1
a307 4
  function __destruct() { 
	$this->__delegate = null;
	$this->__client = null;
  }
d309 2
a310 1
    return $this->__delegate->__get($key);
d313 2
a314 1
    $this->__delegate->__set($key, $val);
d317 1
d321 1
d327 1
d332 1
d337 1
d342 1
d347 1
d352 4
a355 1
class JavaObject extends Java {
d357 79
a435 3
	$delegate = $this->__delegate = java_create(func_get_args(), true);
	$this->__java = $delegate->__java;
	$this->__client = $delegate->__client;
d437 54
a490 6
}  
class java_class extends JavaObject {
  function java_class() {
	$delegate = $this->__delegate = java_create(func_get_args(), false);
	$this->__java = $delegate->__java;
	$this->__client = $delegate->__client;
d493 3
a495 2
class java_InternalJavaObject extends JavaObject {
  function java_InternalJavaObject($proxy) {
d498 1
d502 15
a516 6
class JavaClass extends java_class{}
class java_InternalJava extends Java {
  function java_InternalJava($proxy) {
	$this->__delegate = $proxy;
	$this->__java = $proxy->__java;
	$this->__client = $proxy->__client;
d519 1
d526 1
d528 10
a537 1
	$delegate = $this->__delegate = java_create(func_get_args(), true);
d539 1
a539 1
	$this->__client = $delegate->__client;
a552 4
  function __destruct() { 
	$this->__delegate = null;
	$this->__client = null;
  }
d571 1
d575 6
a580 1
	
@


1.3
log
@Release-4-0-5
@
text
@a383 16

  function getIterator() {
	$args = func_get_args(); return $this->__call("getIterator", $args);
  }
  function offsetExists($idx) {
	$args = func_get_args(); return $this->__call("offsetExists", $args);
  }
  function offsetGet($idx) {
	$args = func_get_args(); return $this->__call("offsetGet", $args);
  }
  function offsetSet($idx, $val) {
	$args = func_get_args(); return $this->__call("offsetSet", $args);
  }
  function offsetUnset($idx) {
	$args = func_get_args(); return $this->__call("offsetUnset", $args);
  }
@


1.2
log
@Release-4-0-2
@
text
@d128 1
a128 1
  if(isset($args[2]) && ((!$args[2] instanceof java_JavaType)||!is_array($args[2])))
@


1.1
log
@Further inclusions of 4.0.1 code extracted from src.tgz. Andre Felipe Machado.
@
text
@d42 4
a45 1
  
d62 1
a62 1
  if(!$object instanceof Java) return $object;
d74 1
a74 1
  if(!$object instanceof Java) throw new java_IllegalArgumentException($object);
d85 2
a86 2
  if(!$object instanceof Java) throw new java_IllegalArgumentException($object);
  if(!$clazz instanceof Java) throw new java_IllegalArgumentException($clazz);
d93 1
a93 1
    if(!$object instanceof Java) throw new java_IllegalArgumentException($object);
d128 2
a129 1
  if(isset($args[2]) && (!$args[2] instanceof Java)) throw new java_IllegalArgumentException($args[2]);
d320 1
a320 1
class Java extends java_JavaProxy implements IteratorAggregate, ArrayAccess {
d426 1
a426 1
class java_exception extends Exception {
@

